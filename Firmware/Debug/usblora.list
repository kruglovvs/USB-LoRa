
usblora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d578  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800d6b8  0800d6b8  0000e6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6ac  0800e6ac  00010b68  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6ac  0800e6ac  0000f6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6b4  0800e6b4  00010b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6b4  0800e6b4  0000f6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e6b8  0800e6b8  0000f6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b68  20000000  0800e6bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004218  20000b68  0800f224  00010b68  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d80  0800f224  00010d80  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a544  00000000  00000000  00010b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000607b  00000000  00000000  0003b0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002590  00000000  00000000  00041158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ce5  00000000  00000000  000436e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e44  00000000  00000000  000453cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000296e5  00000000  00000000  00066211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc398  00000000  00000000  0008f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bc8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2e8  00000000  00000000  0014bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00155fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000b68 	.word	0x20000b68
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d6a0 	.word	0x0800d6a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000b6c 	.word	0x20000b6c
 800017c:	0800d6a0 	.word	0x0800d6a0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  /* Run time stack overflow checking is performed if
  configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  called if a stack overflow is detected. */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UsbMutex */
  UsbMutexHandle = osMutexNew(&UsbMutex_attributes);
 8000538:	4825      	ldr	r0, [pc, #148]	@ (80005d0 <MX_FREERTOS_Init+0x9c>)
 800053a:	f005 fb61 	bl	8005c00 <osMutexNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a24      	ldr	r2, [pc, #144]	@ (80005d4 <MX_FREERTOS_Init+0xa0>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of LoraMutex */
  LoraMutexHandle = osMutexNew(&LoraMutex_attributes);
 8000544:	4824      	ldr	r0, [pc, #144]	@ (80005d8 <MX_FREERTOS_Init+0xa4>)
 8000546:	f005 fb5b 	bl	8005c00 <osMutexNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a23      	ldr	r2, [pc, #140]	@ (80005dc <MX_FREERTOS_Init+0xa8>)
 800054e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SendLoraQueue */
  SendLoraQueueHandle = osMessageQueueNew (5, sizeof(char *), &SendLoraQueue_attributes);
 8000550:	4a23      	ldr	r2, [pc, #140]	@ (80005e0 <MX_FREERTOS_Init+0xac>)
 8000552:	2104      	movs	r1, #4
 8000554:	2005      	movs	r0, #5
 8000556:	f005 fc9b 	bl	8005e90 <osMessageQueueNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a21      	ldr	r2, [pc, #132]	@ (80005e4 <MX_FREERTOS_Init+0xb0>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of SendUsbQueue */
  SendUsbQueueHandle = osMessageQueueNew (5, sizeof(char *), &SendUsbQueue_attributes);
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <MX_FREERTOS_Init+0xb4>)
 8000562:	2104      	movs	r1, #4
 8000564:	2005      	movs	r0, #5
 8000566:	f005 fc93 	bl	8005e90 <osMessageQueueNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1f      	ldr	r2, [pc, #124]	@ (80005ec <MX_FREERTOS_Init+0xb8>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 8000570:	4a1f      	ldr	r2, [pc, #124]	@ (80005f0 <MX_FREERTOS_Init+0xbc>)
 8000572:	2100      	movs	r1, #0
 8000574:	481f      	ldr	r0, [pc, #124]	@ (80005f4 <MX_FREERTOS_Init+0xc0>)
 8000576:	f005 f963 	bl	8005840 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a1e      	ldr	r2, [pc, #120]	@ (80005f8 <MX_FREERTOS_Init+0xc4>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of UsbSendTask */
  UsbSendTaskHandle = osThreadNew(StartUsbSendTask, NULL, &UsbSendTask_attributes);
 8000580:	4a1e      	ldr	r2, [pc, #120]	@ (80005fc <MX_FREERTOS_Init+0xc8>)
 8000582:	2100      	movs	r1, #0
 8000584:	481e      	ldr	r0, [pc, #120]	@ (8000600 <MX_FREERTOS_Init+0xcc>)
 8000586:	f005 f95b 	bl	8005840 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a1d      	ldr	r2, [pc, #116]	@ (8000604 <MX_FREERTOS_Init+0xd0>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of LoraSendTask */
  LoraSendTaskHandle = osThreadNew(StartLoraSendTask, NULL, &LoraSendTask_attributes);
 8000590:	4a1d      	ldr	r2, [pc, #116]	@ (8000608 <MX_FREERTOS_Init+0xd4>)
 8000592:	2100      	movs	r1, #0
 8000594:	481d      	ldr	r0, [pc, #116]	@ (800060c <MX_FREERTOS_Init+0xd8>)
 8000596:	f005 f953 	bl	8005840 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a1c      	ldr	r2, [pc, #112]	@ (8000610 <MX_FREERTOS_Init+0xdc>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of UsbReceiveTask */
  UsbReceiveTaskHandle = osThreadNew(StartUsbReceiveTask, NULL, &UsbReceiveTask_attributes);
 80005a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <MX_FREERTOS_Init+0xe0>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	481c      	ldr	r0, [pc, #112]	@ (8000618 <MX_FREERTOS_Init+0xe4>)
 80005a6:	f005 f94b 	bl	8005840 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <MX_FREERTOS_Init+0xe8>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of LoRaReceiveTask */
  LoRaReceiveTaskHandle = osThreadNew(StartLoraReceiveTask, NULL, &LoRaReceiveTask_attributes);
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <MX_FREERTOS_Init+0xec>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	481b      	ldr	r0, [pc, #108]	@ (8000624 <MX_FREERTOS_Init+0xf0>)
 80005b6:	f005 f943 	bl	8005840 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000628 <MX_FREERTOS_Init+0xf4>)
 80005be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of LoraSentEvent */
  LoraSentEventHandle = osEventFlagsNew(&LoraSentEvent_attributes);
 80005c0:	481a      	ldr	r0, [pc, #104]	@ (800062c <MX_FREERTOS_Init+0xf8>)
 80005c2:	f005 fa11 	bl	80059e8 <osEventFlagsNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <MX_FREERTOS_Init+0xfc>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	0800e414 	.word	0x0800e414
 80005d4:	20000bbc 	.word	0x20000bbc
 80005d8:	0800e424 	.word	0x0800e424
 80005dc:	20000bc0 	.word	0x20000bc0
 80005e0:	0800e3e4 	.word	0x0800e3e4
 80005e4:	20000bb4 	.word	0x20000bb4
 80005e8:	0800e3fc 	.word	0x0800e3fc
 80005ec:	20000bb8 	.word	0x20000bb8
 80005f0:	0800e330 	.word	0x0800e330
 80005f4:	08000635 	.word	0x08000635
 80005f8:	20000ba0 	.word	0x20000ba0
 80005fc:	0800e354 	.word	0x0800e354
 8000600:	08000645 	.word	0x08000645
 8000604:	20000ba4 	.word	0x20000ba4
 8000608:	0800e378 	.word	0x0800e378
 800060c:	080006fd 	.word	0x080006fd
 8000610:	20000ba8 	.word	0x20000ba8
 8000614:	0800e39c 	.word	0x0800e39c
 8000618:	0800077d 	.word	0x0800077d
 800061c:	20000bac 	.word	0x20000bac
 8000620:	0800e3c0 	.word	0x0800e3c0
 8000624:	08000acd 	.word	0x08000acd
 8000628:	20000bb0 	.word	0x20000bb0
 800062c:	0800e434 	.word	0x0800e434
 8000630:	20000bc4 	.word	0x20000bc4

08000634 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  //MX_SubGHz_Phy_Init();
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f005 f9a5 	bl	800598c <osDelay>
 8000642:	e7fb      	b.n	800063c <StartDefaultTask+0x8>

08000644 <StartUsbSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsbSendTask */
void StartUsbSendTask(void *argument)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsbSendTask */
  /* Infinite loop */
  HAL_UART_Transmit(&huart1, welcome, strlen(welcome), HAL_MAX_DELAY);
 800064c:	4826      	ldr	r0, [pc, #152]	@ (80006e8 <StartUsbSendTask+0xa4>)
 800064e:	f7ff fd97 	bl	8000180 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	4923      	ldr	r1, [pc, #140]	@ (80006e8 <StartUsbSendTask+0xa4>)
 800065c:	4823      	ldr	r0, [pc, #140]	@ (80006ec <StartUsbSendTask+0xa8>)
 800065e:	f003 fe05 	bl	800426c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000662:	4823      	ldr	r0, [pc, #140]	@ (80006f0 <StartUsbSendTask+0xac>)
 8000664:	f7ff fd8c 	bl	8000180 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	491f      	ldr	r1, [pc, #124]	@ (80006f0 <StartUsbSendTask+0xac>)
 8000672:	481e      	ldr	r0, [pc, #120]	@ (80006ec <StartUsbSendTask+0xa8>)
 8000674:	f003 fdfa 	bl	800426c <HAL_UART_Transmit>

  char *input_buffer = NULL;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    if (!osMessageQueueGet(SendUsbQueueHandle, &input_buffer, NULL, osWaitForever))
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <StartUsbSendTask+0xb0>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	f107 010c 	add.w	r1, r7, #12
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2200      	movs	r2, #0
 800068a:	f005 fcfb 	bl	8006084 <osMessageQueueGet>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f3      	bne.n	800067c <StartUsbSendTask+0x38>
    {
      osMutexAcquire(UsbMutexHandle, osWaitForever);
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <StartUsbSendTask+0xb4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	4618      	mov	r0, r3
 800069e:	f005 fb49 	bl	8005d34 <osMutexAcquire>
      HAL_UART_Transmit(&huart1, input_buffer, strlen(input_buffer), HAL_MAX_DELAY);
 80006a2:	68fc      	ldr	r4, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fd6a 	bl	8000180 <strlen>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	4621      	mov	r1, r4
 80006b6:	480d      	ldr	r0, [pc, #52]	@ (80006ec <StartUsbSendTask+0xa8>)
 80006b8:	f003 fdd8 	bl	800426c <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <StartUsbSendTask+0xac>)
 80006be:	f7ff fd5f 	bl	8000180 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	4909      	ldr	r1, [pc, #36]	@ (80006f0 <StartUsbSendTask+0xac>)
 80006cc:	4807      	ldr	r0, [pc, #28]	@ (80006ec <StartUsbSendTask+0xa8>)
 80006ce:	f003 fdcd 	bl	800426c <HAL_UART_Transmit>
      osMutexRelease(UsbMutexHandle);
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <StartUsbSendTask+0xb4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fb8a 	bl	8005df0 <osMutexRelease>
      free(input_buffer);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4618      	mov	r0, r3
 80006e0:	f00c faa4 	bl	800cc2c <free>
    if (!osMessageQueueGet(SendUsbQueueHandle, &input_buffer, NULL, osWaitForever))
 80006e4:	e7ca      	b.n	800067c <StartUsbSendTask+0x38>
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000c2c 	.word	0x20000c2c
 80006f0:	20000a7c 	.word	0x20000a7c
 80006f4:	20000bb8 	.word	0x20000bb8
 80006f8:	20000bbc 	.word	0x20000bbc

080006fc <StartLoraSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLoraSendTask */
void StartLoraSendTask(void *argument)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraSendTask */
  /* Infinite loop */
  char *input_buffer = NULL;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    if (!osMessageQueueGet(SendLoraQueueHandle, &input_buffer, NULL, osWaitForever))
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <StartLoraSendTask+0x70>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	f107 010c 	add.w	r1, r7, #12
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2200      	movs	r2, #0
 8000716:	f005 fcb5 	bl	8006084 <osMessageQueueGet>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f3      	bne.n	8000708 <StartLoraSendTask+0xc>
    {
      osMutexAcquire(LoraMutexHandle, osWaitForever);
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <StartLoraSendTask+0x74>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	4618      	mov	r0, r3
 800072a:	f005 fb03 	bl	8005d34 <osMutexAcquire>
      osEventFlagsClear(LoraSentEventHandle, 0);
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <StartLoraSendTask+0x78>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f005 f9a9 	bl	8005a8c <osEventFlagsClear>
      Radio.Send(input_buffer, strlen(input_buffer));
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <StartLoraSendTask+0x7c>)
 800073c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800073e:	68fd      	ldr	r5, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd1c 	bl	8000180 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	4628      	mov	r0, r5
 8000750:	47a0      	blx	r4
      osEventFlagsWait(LoraSentEventHandle, 0, 0, osWaitForever);
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <StartLoraSendTask+0x78>)
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	f005 f9d9 	bl	8005b14 <osEventFlagsWait>
      free(input_buffer);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4618      	mov	r0, r3
 8000766:	f00c fa61 	bl	800cc2c <free>
    if (!osMessageQueueGet(SendLoraQueueHandle, &input_buffer, NULL, osWaitForever))
 800076a:	e7cd      	b.n	8000708 <StartLoraSendTask+0xc>
 800076c:	20000bb4 	.word	0x20000bb4
 8000770:	20000bc0 	.word	0x20000bc0
 8000774:	20000bc4 	.word	0x20000bc4
 8000778:	0800e538 	.word	0x0800e538

0800077c <StartUsbReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsbReceiveTask */
void StartUsbReceiveTask(void *argument)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b0d1      	sub	sp, #324	@ 0x144
 8000780:	af00      	add	r7, sp, #0
 8000782:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000786:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800078a:	6018      	str	r0, [r3, #0]
      free(string_malloc);
      continue;
    }*/

    uint8_t input_buffer[300];
    bool echo = true;
 800078c:	2301      	movs	r3, #1
 800078e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t i = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    /* Infinite loop */
    for (;;)
    {
      osMutexRelease(UsbMutexHandle);
 8000798:	4bc0      	ldr	r3, [pc, #768]	@ (8000a9c <StartUsbReceiveTask+0x320>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f005 fb27 	bl	8005df0 <osMutexRelease>
      HAL_UART_Receive(&huart1, input_buffer, 1, HAL_MAX_DELAY);
 80007a2:	f107 0108 	add.w	r1, r7, #8
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2201      	movs	r2, #1
 80007ac:	48bc      	ldr	r0, [pc, #752]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 80007ae:	f003 fde3 	bl	8004378 <HAL_UART_Receive>
      osMutexAcquire(UsbMutexHandle, osWaitForever);
 80007b2:	4bba      	ldr	r3, [pc, #744]	@ (8000a9c <StartUsbReceiveTask+0x320>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f04f 31ff 	mov.w	r1, #4294967295
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 faba 	bl	8005d34 <osMutexAcquire>
      if (echo)
 80007c0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00a      	beq.n	80007de <StartUsbReceiveTask+0x62>
	  {
		HAL_UART_Transmit(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 80007c8:	f107 0208 	add.w	r2, r7, #8
 80007cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007d0:	18d1      	adds	r1, r2, r3
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	2201      	movs	r2, #1
 80007d8:	48b1      	ldr	r0, [pc, #708]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 80007da:	f003 fd47 	bl	800426c <HAL_UART_Transmit>
	  }
      for (i = 1; i < sizeof(input_buffer); ++i)
 80007de:	2301      	movs	r3, #1
 80007e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80007e4:	e14f      	b.n	8000a86 <StartUsbReceiveTask+0x30a>
      {
        HAL_UART_Receive(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 80007e6:	f107 0208 	add.w	r2, r7, #8
 80007ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007ee:	18d1      	adds	r1, r2, r3
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	2201      	movs	r2, #1
 80007f6:	48aa      	ldr	r0, [pc, #680]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 80007f8:	f003 fdbe 	bl	8004378 <HAL_UART_Receive>
        if (echo)
 80007fc:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00a      	beq.n	800081a <StartUsbReceiveTask+0x9e>
        {
          HAL_UART_Transmit(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 8000804:	f107 0208 	add.w	r2, r7, #8
 8000808:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800080c:	18d1      	adds	r1, r2, r3
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	2201      	movs	r2, #1
 8000814:	48a2      	ldr	r0, [pc, #648]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000816:	f003 fd29 	bl	800426c <HAL_UART_Transmit>
        }
        if (input_buffer[i] == '\n' || input_buffer[i] == '\r')
 800081a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800081e:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8000822:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b0a      	cmp	r3, #10
 800082c:	d00a      	beq.n	8000844 <StartUsbReceiveTask+0xc8>
 800082e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000832:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8000836:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	f040 8106 	bne.w	8000a50 <StartUsbReceiveTask+0x2d4>
        {

          input_buffer[i] = '\0';
 8000844:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000848:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800084c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000850:	4413      	add	r3, r2
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
          if (i == 0)
 8000856:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 811a 	beq.w	8000a94 <StartUsbReceiveTask+0x318>
          {
            // do nothing
          }
          else if (!strncmp((char *)input_buffer, (char *)command_help, strlen(command_help)))
 8000860:	4890      	ldr	r0, [pc, #576]	@ (8000aa4 <StartUsbReceiveTask+0x328>)
 8000862:	f7ff fc8d 	bl	8000180 <strlen>
 8000866:	4602      	mov	r2, r0
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	498d      	ldr	r1, [pc, #564]	@ (8000aa4 <StartUsbReceiveTask+0x328>)
 800086e:	4618      	mov	r0, r3
 8000870:	f00c fac9 	bl	800ce06 <strncmp>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d116      	bne.n	80008a8 <StartUsbReceiveTask+0x12c>
          {
            HAL_UART_Transmit(&huart1, welcome, strlen(welcome), HAL_MAX_DELAY);
 800087a:	488b      	ldr	r0, [pc, #556]	@ (8000aa8 <StartUsbReceiveTask+0x32c>)
 800087c:	f7ff fc80 	bl	8000180 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	4987      	ldr	r1, [pc, #540]	@ (8000aa8 <StartUsbReceiveTask+0x32c>)
 800088a:	4885      	ldr	r0, [pc, #532]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 800088c:	f003 fcee 	bl	800426c <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000890:	4886      	ldr	r0, [pc, #536]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000892:	f7ff fc75 	bl	8000180 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	4983      	ldr	r1, [pc, #524]	@ (8000aac <StartUsbReceiveTask+0x330>)
 80008a0:	487f      	ldr	r0, [pc, #508]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 80008a2:	f003 fce3 	bl	800426c <HAL_UART_Transmit>
          else
          {
            HAL_UART_Transmit(&huart1, error_parse, strlen(error_parse), HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
          }
          break;
 80008a6:	e0f5      	b.n	8000a94 <StartUsbReceiveTask+0x318>
          else if (i > strlen((char *)command_send) && !strncmp((char *)input_buffer, (char *)command_send, strlen(command_send)))
 80008a8:	4881      	ldr	r0, [pc, #516]	@ (8000ab0 <StartUsbReceiveTask+0x334>)
 80008aa:	f7ff fc69 	bl	8000180 <strlen>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d959      	bls.n	800096c <StartUsbReceiveTask+0x1f0>
 80008b8:	487d      	ldr	r0, [pc, #500]	@ (8000ab0 <StartUsbReceiveTask+0x334>)
 80008ba:	f7ff fc61 	bl	8000180 <strlen>
 80008be:	4602      	mov	r2, r0
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	497a      	ldr	r1, [pc, #488]	@ (8000ab0 <StartUsbReceiveTask+0x334>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00c fa9d 	bl	800ce06 <strncmp>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14c      	bne.n	800096c <StartUsbReceiveTask+0x1f0>
            char *malloc_buffer = malloc(strlen(input_buffer) - strlen(command_send));
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc52 	bl	8000180 <strlen>
 80008dc:	4604      	mov	r4, r0
 80008de:	4874      	ldr	r0, [pc, #464]	@ (8000ab0 <StartUsbReceiveTask+0x334>)
 80008e0:	f7ff fc4e 	bl	8000180 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	1ae3      	subs	r3, r4, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f00c f997 	bl	800cc1c <malloc>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            if (!malloc_buffer)
 80008f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80cd 	beq.w	8000a98 <StartUsbReceiveTask+0x31c>
            strncpy(malloc_buffer, input_buffer + strlen(command_send), 256);
 80008fe:	f8d7 4134 	ldr.w	r4, [r7, #308]	@ 0x134
 8000902:	486b      	ldr	r0, [pc, #428]	@ (8000ab0 <StartUsbReceiveTask+0x334>)
 8000904:	f7ff fc3c 	bl	8000180 <strlen>
 8000908:	4602      	mov	r2, r0
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4413      	add	r3, r2
 8000910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000914:	4619      	mov	r1, r3
 8000916:	4620      	mov	r0, r4
 8000918:	f00c fa87 	bl	800ce2a <strncpy>
            if (osMessageQueuePut(SendLoraQueueHandle, &malloc_buffer, NULL, osWaitForever))
 800091c:	4b65      	ldr	r3, [pc, #404]	@ (8000ab4 <StartUsbReceiveTask+0x338>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	2200      	movs	r2, #0
 800092a:	f005 fb37 	bl	8005f9c <osMessageQueuePut>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00f      	beq.n	8000954 <StartUsbReceiveTask+0x1d8>
              free(malloc_buffer);
 8000934:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000938:	4618      	mov	r0, r3
 800093a:	f00c f977 	bl	800cc2c <free>
              HAL_UART_Transmit(&huart1, error_send, strlen(error_send), HAL_MAX_DELAY);
 800093e:	485e      	ldr	r0, [pc, #376]	@ (8000ab8 <StartUsbReceiveTask+0x33c>)
 8000940:	f7ff fc1e 	bl	8000180 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	495a      	ldr	r1, [pc, #360]	@ (8000ab8 <StartUsbReceiveTask+0x33c>)
 800094e:	4854      	ldr	r0, [pc, #336]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000950:	f003 fc8c 	bl	800426c <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000954:	4855      	ldr	r0, [pc, #340]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000956:	f7ff fc13 	bl	8000180 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	4952      	ldr	r1, [pc, #328]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000964:	484e      	ldr	r0, [pc, #312]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000966:	f003 fc81 	bl	800426c <HAL_UART_Transmit>
          {
 800096a:	e070      	b.n	8000a4e <StartUsbReceiveTask+0x2d2>
          else if (i > strlen((char *)config_terminal_echo) && !strncmp((char *)input_buffer, (char *)config_terminal_echo, strlen(config_terminal_echo)))
 800096c:	4853      	ldr	r0, [pc, #332]	@ (8000abc <StartUsbReceiveTask+0x340>)
 800096e:	f7ff fc07 	bl	8000180 <strlen>
 8000972:	4602      	mov	r2, r0
 8000974:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000978:	4293      	cmp	r3, r2
 800097a:	d951      	bls.n	8000a20 <StartUsbReceiveTask+0x2a4>
 800097c:	484f      	ldr	r0, [pc, #316]	@ (8000abc <StartUsbReceiveTask+0x340>)
 800097e:	f7ff fbff 	bl	8000180 <strlen>
 8000982:	4602      	mov	r2, r0
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	494c      	ldr	r1, [pc, #304]	@ (8000abc <StartUsbReceiveTask+0x340>)
 800098a:	4618      	mov	r0, r3
 800098c:	f00c fa3b 	bl	800ce06 <strncmp>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d144      	bne.n	8000a20 <StartUsbReceiveTask+0x2a4>
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 8000996:	4849      	ldr	r0, [pc, #292]	@ (8000abc <StartUsbReceiveTask+0x340>)
 8000998:	f7ff fbf2 	bl	8000180 <strlen>
 800099c:	4602      	mov	r2, r0
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	189c      	adds	r4, r3, r2
 80009a4:	4846      	ldr	r0, [pc, #280]	@ (8000ac0 <StartUsbReceiveTask+0x344>)
 80009a6:	f7ff fbeb 	bl	8000180 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4944      	ldr	r1, [pc, #272]	@ (8000ac0 <StartUsbReceiveTask+0x344>)
 80009b0:	4620      	mov	r0, r4
 80009b2:	f00c fa28 	bl	800ce06 <strncmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d103      	bne.n	80009c4 <StartUsbReceiveTask+0x248>
              echo = true;
 80009bc:	2301      	movs	r3, #1
 80009be:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 80009c2:	e044      	b.n	8000a4e <StartUsbReceiveTask+0x2d2>
            else if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)false_str, strlen(false_str)))
 80009c4:	483d      	ldr	r0, [pc, #244]	@ (8000abc <StartUsbReceiveTask+0x340>)
 80009c6:	f7ff fbdb 	bl	8000180 <strlen>
 80009ca:	4602      	mov	r2, r0
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	189c      	adds	r4, r3, r2
 80009d2:	483c      	ldr	r0, [pc, #240]	@ (8000ac4 <StartUsbReceiveTask+0x348>)
 80009d4:	f7ff fbd4 	bl	8000180 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4939      	ldr	r1, [pc, #228]	@ (8000ac4 <StartUsbReceiveTask+0x348>)
 80009de:	4620      	mov	r0, r4
 80009e0:	f00c fa11 	bl	800ce06 <strncmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d103      	bne.n	80009f2 <StartUsbReceiveTask+0x276>
              echo = false;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 80009f0:	e02d      	b.n	8000a4e <StartUsbReceiveTask+0x2d2>
              HAL_UART_Transmit(&huart1, error_parse, strlen(error_parse), HAL_MAX_DELAY);
 80009f2:	4835      	ldr	r0, [pc, #212]	@ (8000ac8 <StartUsbReceiveTask+0x34c>)
 80009f4:	f7ff fbc4 	bl	8000180 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	4931      	ldr	r1, [pc, #196]	@ (8000ac8 <StartUsbReceiveTask+0x34c>)
 8000a02:	4827      	ldr	r0, [pc, #156]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000a04:	f003 fc32 	bl	800426c <HAL_UART_Transmit>
              HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000a08:	4828      	ldr	r0, [pc, #160]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000a0a:	f7ff fbb9 	bl	8000180 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	4925      	ldr	r1, [pc, #148]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000a18:	4821      	ldr	r0, [pc, #132]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000a1a:	f003 fc27 	bl	800426c <HAL_UART_Transmit>
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 8000a1e:	e016      	b.n	8000a4e <StartUsbReceiveTask+0x2d2>
            HAL_UART_Transmit(&huart1, error_parse, strlen(error_parse), HAL_MAX_DELAY);
 8000a20:	4829      	ldr	r0, [pc, #164]	@ (8000ac8 <StartUsbReceiveTask+0x34c>)
 8000a22:	f7ff fbad 	bl	8000180 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	4926      	ldr	r1, [pc, #152]	@ (8000ac8 <StartUsbReceiveTask+0x34c>)
 8000a30:	481b      	ldr	r0, [pc, #108]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000a32:	f003 fc1b 	bl	800426c <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000a36:	481d      	ldr	r0, [pc, #116]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000a38:	f7ff fba2 	bl	8000180 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	4919      	ldr	r1, [pc, #100]	@ (8000aac <StartUsbReceiveTask+0x330>)
 8000a46:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <StartUsbReceiveTask+0x324>)
 8000a48:	f003 fc10 	bl	800426c <HAL_UART_Transmit>
          break;
 8000a4c:	e022      	b.n	8000a94 <StartUsbReceiveTask+0x318>
 8000a4e:	e021      	b.n	8000a94 <StartUsbReceiveTask+0x318>
        }
        else if (input_buffer[i] == '\x03' || input_buffer[i] == '\x1A')
 8000a50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000a54:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8000a58:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	f43f ae99 	beq.w	8000798 <StartUsbReceiveTask+0x1c>
 8000a66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000a6a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8000a6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b1a      	cmp	r3, #26
 8000a78:	f43f ae8e 	beq.w	8000798 <StartUsbReceiveTask+0x1c>
      for (i = 1; i < sizeof(input_buffer); ++i)
 8000a7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000a80:	3301      	adds	r3, #1
 8000a82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000a86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000a8a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000a8e:	f4ff aeaa 	bcc.w	80007e6 <StartUsbReceiveTask+0x6a>
 8000a92:	e681      	b.n	8000798 <StartUsbReceiveTask+0x1c>
          break;
 8000a94:	bf00      	nop
 8000a96:	e67f      	b.n	8000798 <StartUsbReceiveTask+0x1c>
              break;
 8000a98:	bf00      	nop
      osMutexRelease(UsbMutexHandle);
 8000a9a:	e67d      	b.n	8000798 <StartUsbReceiveTask+0x1c>
 8000a9c:	20000bbc 	.word	0x20000bbc
 8000aa0:	20000c2c 	.word	0x20000c2c
 8000aa4:	20000ad4 	.word	0x20000ad4
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000a7c 	.word	0x20000a7c
 8000ab0:	20000acc 	.word	0x20000acc
 8000ab4:	20000bb4 	.word	0x20000bb4
 8000ab8:	20000aa0 	.word	0x20000aa0
 8000abc:	20000adc 	.word	0x20000adc
 8000ac0:	20000af4 	.word	0x20000af4
 8000ac4:	20000afc 	.word	0x20000afc
 8000ac8:	20000a80 	.word	0x20000a80

08000acc <StartLoraReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLoraReceiveTask */
void StartLoraReceiveTask(void *argument)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08d      	sub	sp, #52	@ 0x34
 8000ad0:	af0a      	add	r7, sp, #40	@ 0x28
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraReceiveTask */
  osMutexAcquire(LoraMutexHandle, osWaitForever);
 8000ad4:	4b33      	ldr	r3, [pc, #204]	@ (8000ba4 <StartLoraReceiveTask+0xd8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	4618      	mov	r0, r3
 8000ade:	f005 f929 	bl	8005d34 <osMutexAcquire>
  RadioEvents.TxDone = OnTxDone;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <StartLoraReceiveTask+0xdc>)
 8000ae4:	4a31      	ldr	r2, [pc, #196]	@ (8000bac <StartLoraReceiveTask+0xe0>)
 8000ae6:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <StartLoraReceiveTask+0xdc>)
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <StartLoraReceiveTask+0xe4>)
 8000aec:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8000aee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <StartLoraReceiveTask+0xdc>)
 8000af0:	4a30      	ldr	r2, [pc, #192]	@ (8000bb4 <StartLoraReceiveTask+0xe8>)
 8000af2:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <StartLoraReceiveTask+0xdc>)
 8000af6:	4a30      	ldr	r2, [pc, #192]	@ (8000bb8 <StartLoraReceiveTask+0xec>)
 8000af8:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <StartLoraReceiveTask+0xdc>)
 8000afc:	4a2f      	ldr	r2, [pc, #188]	@ (8000bbc <StartLoraReceiveTask+0xf0>)
 8000afe:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8000b00:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4828      	ldr	r0, [pc, #160]	@ (8000ba8 <StartLoraReceiveTask+0xdc>)
 8000b06:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  Radio.SetModem(MODEM_LORA);
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	4798      	blx	r3
  Radio.SetChannel(868000000);
 8000b10:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	482b      	ldr	r0, [pc, #172]	@ (8000bc4 <StartLoraReceiveTask+0xf8>)
 8000b16:	4798      	blx	r3
  Radio.SetRxConfig(
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b1a:	699c      	ldr	r4, [r3, #24]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b20:	2300      	movs	r3, #0
 8000b22:	9308      	str	r3, [sp, #32]
 8000b24:	2300      	movs	r3, #0
 8000b26:	9307      	str	r3, [sp, #28]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9306      	str	r3, [sp, #24]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	9305      	str	r3, [sp, #20]
 8000b30:	230c      	movs	r3, #12
 8000b32:	9304      	str	r3, [sp, #16]
 8000b34:	2300      	movs	r3, #0
 8000b36:	9303      	str	r3, [sp, #12]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2304      	movs	r3, #4
 8000b46:	220a      	movs	r2, #10
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	47a0      	blx	r4
      1,
      0,
      0,
      0,
      true);
  Radio.SetTxConfig(
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b50:	69dc      	ldr	r4, [r3, #28]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9308      	str	r3, [sp, #32]
 8000b56:	2300      	movs	r3, #0
 8000b58:	9307      	str	r3, [sp, #28]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9306      	str	r3, [sp, #24]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9305      	str	r3, [sp, #20]
 8000b62:	2301      	movs	r3, #1
 8000b64:	9304      	str	r3, [sp, #16]
 8000b66:	2301      	movs	r3, #1
 8000b68:	9303      	str	r3, [sp, #12]
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2304      	movs	r3, #4
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	230a      	movs	r3, #10
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	47a0      	blx	r4
      1,
      0,
      0,
      0,
      0);
  Radio.SetPublicNetwork(true);
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b84:	2001      	movs	r0, #1
 8000b86:	4798      	blx	r3
  osMutexRelease(LoraMutexHandle);
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <StartLoraReceiveTask+0xd8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 f92f 	bl	8005df0 <osMutexRelease>

  Radio.Rx(0);
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <StartLoraReceiveTask+0xf4>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b96:	2000      	movs	r0, #0
 8000b98:	4798      	blx	r3
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f004 fef6 	bl	800598c <osDelay>
 8000ba0:	e7fb      	b.n	8000b9a <StartLoraReceiveTask+0xce>
 8000ba2:	bf00      	nop
 8000ba4:	20000bc0 	.word	0x20000bc0
 8000ba8:	20000b84 	.word	0x20000b84
 8000bac:	08000bc9 	.word	0x08000bc9
 8000bb0:	08000c5d 	.word	0x08000c5d
 8000bb4:	08000dd5 	.word	0x08000dd5
 8000bb8:	08000e35 	.word	0x08000e35
 8000bbc:	08000e49 	.word	0x08000e49
 8000bc0:	0800e538 	.word	0x0800e538
 8000bc4:	33bca100 	.word	0x33bca100

08000bc8 <OnTxDone>:
 * @retval None
 */

#pragma region lora_callbacks
static void OnTxDone(void)
{
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  uint8_t message[] = "#!Successfully sent\n\r";
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <OnTxDone+0x7c>)
 8000bd0:	f107 0408 	add.w	r4, r7, #8
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bde:	6020      	str	r0, [r4, #0]
 8000be0:	3404      	adds	r4, #4
 8000be2:	8021      	strh	r1, [r4, #0]
  uint8_t *message_malloc = malloc(strlen(message));
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fac9 	bl	8000180 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f00c f813 	bl	800cc1c <malloc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	607b      	str	r3, [r7, #4]
  strcpy(message_malloc, message);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00c f9b6 	bl	800cf74 <strcpy>
  HAL_UART_Transmit(&huart1, "kekekeke1", strlen("kekekeke1"), HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2209      	movs	r2, #9
 8000c0e:	490e      	ldr	r1, [pc, #56]	@ (8000c48 <OnTxDone+0x80>)
 8000c10:	480e      	ldr	r0, [pc, #56]	@ (8000c4c <OnTxDone+0x84>)
 8000c12:	f003 fb2b 	bl	800426c <HAL_UART_Transmit>
  osMessageQueuePut(SendUsbQueueHandle, &message_malloc, NULL, 0);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <OnTxDone+0x88>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	1d39      	adds	r1, r7, #4
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f005 f9bc 	bl	8005f9c <osMessageQueuePut>
  //osEventFlagsSet(LoraSentEventHandle, 0);
  HAL_UART_Transmit(&huart1, "kekekeke2", strlen("kekekeke2"), HAL_MAX_DELAY);
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	2209      	movs	r2, #9
 8000c2a:	490a      	ldr	r1, [pc, #40]	@ (8000c54 <OnTxDone+0x8c>)
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <OnTxDone+0x84>)
 8000c2e:	f003 fb1d 	bl	800426c <HAL_UART_Transmit>
  Radio.Rx(0);
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <OnTxDone+0x90>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c36:	2000      	movs	r0, #0
 8000c38:	4798      	blx	r3
  /* USER CODE END OnTxDone */
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bdb0      	pop	{r4, r5, r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0800e264 	.word	0x0800e264
 8000c48:	0800e24c 	.word	0x0800e24c
 8000c4c:	20000c2c 	.word	0x20000c2c
 8000c50:	20000bb8 	.word	0x20000bb8
 8000c54:	0800e258 	.word	0x0800e258
 8000c58:	0800e538 	.word	0x0800e538

08000c5c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8000c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c60:	b0ac      	sub	sp, #176	@ 0xb0
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	4608      	mov	r0, r1
 8000c68:	4611      	mov	r1, r2
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	817b      	strh	r3, [r7, #10]
 8000c70:	460b      	mov	r3, r1
 8000c72:	813b      	strh	r3, [r7, #8]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	466b      	mov	r3, sp
 8000c7a:	461d      	mov	r5, r3
  /* USER CODE BEGIN OnRxDone */
  uint8_t message[] = "#!Received: \n\r";
 8000c7c:	4b50      	ldr	r3, [pc, #320]	@ (8000dc0 <OnRxDone+0x164>)
 8000c7e:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 8000c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c84:	c407      	stmia	r4!, {r0, r1, r2}
 8000c86:	8023      	strh	r3, [r4, #0]
 8000c88:	3402      	adds	r4, #2
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	7023      	strb	r3, [r4, #0]
  uint8_t message_rssi[128];
  uint8_t *payload_hex_string[size * (sizeof("0xHH ") - 1) + 1];
 8000c8e:	897a      	ldrh	r2, [r7, #10]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	1c59      	adds	r1, r3, #1
 8000c98:	460b      	mov	r3, r1
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	468a      	mov	sl, r1
 8000ca4:	469b      	mov	fp, r3
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000cb2:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000cb6:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ccc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000cd0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000cd4:	008b      	lsls	r3, r1, #2
 8000cd6:	3307      	adds	r3, #7
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce0:	466b      	mov	r3, sp
 8000ce2:	3303      	adds	r3, #3
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  sprintf(message_rssi, "\n\r#!size: %d; rssi: %d\n\r", size, rssi);
 8000cec:	897a      	ldrh	r2, [r7, #10]
 8000cee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000cf2:	f107 0014 	add.w	r0, r7, #20
 8000cf6:	4933      	ldr	r1, [pc, #204]	@ (8000dc4 <OnRxDone+0x168>)
 8000cf8:	f00c f84e 	bl	800cd98 <siprintf>
  for (int i = 0; i < size; ++i)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000d02:	e017      	b.n	8000d34 <OnRxDone+0xd8>
  {
    sprintf(payload_hex_string + (i * strlen("0xHH ")), "0x%X", payload[i]);
 8000d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	461a      	mov	r2, r3
 8000d12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d16:	1898      	adds	r0, r3, r2
 8000d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4928      	ldr	r1, [pc, #160]	@ (8000dc8 <OnRxDone+0x16c>)
 8000d26:	f00c f837 	bl	800cd98 <siprintf>
  for (int i = 0; i < size; ++i)
 8000d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dbe2      	blt.n	8000d04 <OnRxDone+0xa8>
  }

  uint8_t *message_malloc = calloc(sizeof(uint8_t), strlen(payload_hex_string) + strlen(message) + strlen(message_rssi) + 1);
 8000d3e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000d42:	f7ff fa1d 	bl	8000180 <strlen>
 8000d46:	4604      	mov	r4, r0
 8000d48:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fa17 	bl	8000180 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	441c      	add	r4, r3
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fa10 	bl	8000180 <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4423      	add	r3, r4
 8000d64:	3301      	adds	r3, #1
 8000d66:	4619      	mov	r1, r3
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f00b ff3b 	bl	800cbe4 <calloc>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	613b      	str	r3, [r7, #16]
  strcat(message_malloc, message);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00c f834 	bl	800cde8 <strcat>
  strcat(message_malloc, payload_hex_string);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c f82e 	bl	800cde8 <strcat>
  strcat(message_malloc, message_rssi);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	f107 0214 	add.w	r2, r7, #20
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00c f827 	bl	800cde8 <strcat>

  osMessageQueuePut(SendUsbQueueHandle, &message_malloc, NULL, 0);
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <OnRxDone+0x170>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 0110 	add.w	r1, r7, #16
 8000da2:	2300      	movs	r3, #0
 8000da4:	2200      	movs	r2, #0
 8000da6:	f005 f8f9 	bl	8005f9c <osMessageQueuePut>
  Radio.Rx(0);
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <OnRxDone+0x174>)
 8000dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dae:	2000      	movs	r0, #0
 8000db0:	4798      	blx	r3
 8000db2:	46ad      	mov	sp, r5
  /* USER CODE END OnRxDone */
}
 8000db4:	bf00      	nop
 8000db6:	37b0      	adds	r7, #176	@ 0xb0
 8000db8:	46bd      	mov	sp, r7
 8000dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000dbe:	bf00      	nop
 8000dc0:	0800e2a0 	.word	0x0800e2a0
 8000dc4:	0800e27c 	.word	0x0800e27c
 8000dc8:	0800e298 	.word	0x0800e298
 8000dcc:	20000bb8 	.word	0x20000bb8
 8000dd0:	0800e538 	.word	0x0800e538

08000dd4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  uint8_t message[] = "#!Sending timeout\n\r";
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <OnTxTimeout+0x54>)
 8000ddc:	1d3c      	adds	r4, r7, #4
 8000dde:	461d      	mov	r5, r3
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	6023      	str	r3, [r4, #0]
  uint8_t *message_malloc = malloc(strlen(message));
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9c8 	bl	8000180 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00b ff12 	bl	800cc1c <malloc>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	603b      	str	r3, [r7, #0]
  strcpy(message_malloc, message);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f00c f8b6 	bl	800cf74 <strcpy>
  osMessageQueuePut(SendUsbQueueHandle, &message_malloc, NULL, 0);
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <OnTxTimeout+0x58>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2200      	movs	r2, #0
 8000e12:	f005 f8c3 	bl	8005f9c <osMessageQueuePut>
  Radio.Rx(0);
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <OnTxTimeout+0x5c>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	4798      	blx	r3
  /* USER CODE END OnTxTimeout */
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdb0      	pop	{r4, r5, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	0800e2b0 	.word	0x0800e2b0
 8000e2c:	20000bb8 	.word	0x20000bb8
 8000e30:	0800e538 	.word	0x0800e538

08000e34 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  Radio.Rx(0);
 8000e38:	4b02      	ldr	r3, [pc, #8]	@ (8000e44 <OnRxTimeout+0x10>)
 8000e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	4798      	blx	r3
  /* USER CODE END OnRxTimeout */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0800e538 	.word	0x0800e538

08000e48 <OnRxError>:

static void OnRxError(void)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  uint8_t message[] = "#!Receiving error\n\r";
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <OnRxError+0x54>)
 8000e50:	1d3c      	adds	r4, r7, #4
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	6023      	str	r3, [r4, #0]
  uint8_t *message_malloc = malloc(strlen(message));
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f98e 	bl	8000180 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00b fed8 	bl	800cc1c <malloc>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	603b      	str	r3, [r7, #0]
  strcpy(message_malloc, message);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	1d3a      	adds	r2, r7, #4
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00c f87c 	bl	800cf74 <strcpy>
  osMessageQueuePut(SendUsbQueueHandle, &message_malloc, NULL, 0);
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <OnRxError+0x58>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	4639      	mov	r1, r7
 8000e82:	2300      	movs	r3, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	f005 f889 	bl	8005f9c <osMessageQueuePut>
  Radio.Rx(0);
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <OnRxError+0x5c>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8e:	2000      	movs	r0, #0
 8000e90:	4798      	blx	r3
  /* USER CODE END OnRxError */
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0800e2c4 	.word	0x0800e2c4
 8000ea0:	20000bb8 	.word	0x20000bb8
 8000ea4:	0800e538 	.word	0x0800e538

08000ea8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff ffdb 	bl	8000ea8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff ffd8 	bl	8000ea8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2160      	movs	r1, #96	@ 0x60
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f000 feba 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f04:	2360      	movs	r3, #96	@ 0x60
 8000f06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1c:	f000 fd4c 	bl	80019b8 <HAL_GPIO_Init>

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fb78 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f80c 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f7ff ffd0 	bl	8000ed8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f38:	f000 faac 	bl	8001494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f3c:	f004 fc18 	bl	8005770 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f40:	f7ff faf8 	bl	8000534 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f44:	f004 fc46 	bl	80057d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <main+0x20>

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09a      	sub	sp, #104	@ 0x68
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2248      	movs	r2, #72	@ 0x48
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00b ff3c 	bl	800cdd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <SystemClock_Config+0xa0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <SystemClock_Config+0xa0>)
 8000f7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <SystemClock_Config+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f8e:	2320      	movs	r3, #32
 8000f90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f9a:	23b0      	movs	r3, #176	@ 0xb0
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 f94c 	bl	8002244 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000fb2:	f000 f82f 	bl	8001014 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000fb6:	234f      	movs	r3, #79	@ 0x4f
 8000fb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fcb7 	bl	8002948 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe0:	f000 f818 	bl	8001014 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3768      	adds	r7, #104	@ 0x68
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	58000400 	.word	0x58000400

08000ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001002:	f000 fb2d 	bl	8001660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x8>

08001020 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800102e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001044:	68fb      	ldr	r3, [r7, #12]
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001054:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001058:	f7ff ffe2 	bl	8001020 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	210f      	movs	r1, #15
 8001060:	f06f 0001 	mvn.w	r0, #1
 8001064:	f000 fbc3 	bl	80017ee <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	2005      	movs	r0, #5
 800106e:	f000 fbbe 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001072:	2005      	movs	r0, #5
 8001074:	f000 fbd5 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	202f      	movs	r0, #47	@ 0x2f
 800107e:	f000 fbb6 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001082:	202f      	movs	r0, #47	@ 0x2f
 8001084:	f000 fbcd 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001098:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800109a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	@ 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80010d6:	f7ff ffd9 	bl	800108c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010da:	f107 0208 	add.w	r2, r7, #8
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fe2b 	bl	8002d40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010ea:	f001 fe17 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 80010ee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f2:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <HAL_InitTick+0xbc>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9b      	lsrs	r3, r3, #18
 80010fa:	3b01      	subs	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <HAL_InitTick+0xc0>)
 8001100:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <HAL_InitTick+0xc4>)
 8001102:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <HAL_InitTick+0xc0>)
 8001106:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800110a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <HAL_InitTick+0xc0>)
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <HAL_InitTick+0xc0>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_InitTick+0xc0>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800111e:	4817      	ldr	r0, [pc, #92]	@ (800117c <HAL_InitTick+0xc0>)
 8001120:	f002 fdc6 	bl	8003cb0 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800112a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800112e:	2b00      	cmp	r3, #0
 8001130:	d11b      	bne.n	800116a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001132:	4812      	ldr	r0, [pc, #72]	@ (800117c <HAL_InitTick+0xc0>)
 8001134:	f002 fe1c 	bl	8003d70 <HAL_TIM_Base_Start_IT>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800113e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001142:	2b00      	cmp	r3, #0
 8001144:	d111      	bne.n	800116a <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001146:	2018      	movs	r0, #24
 8001148:	f000 fb6b 	bl	8001822 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d808      	bhi.n	8001164 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	2018      	movs	r0, #24
 8001158:	f000 fb49 	bl	80017ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115c:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <HAL_InitTick+0xc8>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e002      	b.n	800116a <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800116a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800116e:	4618      	mov	r0, r3
 8001170:	3730      	adds	r7, #48	@ 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	431bde83 	.word	0x431bde83
 800117c:	20000bc8 	.word	0x20000bc8
 8001180:	40012c00 	.word	0x40012c00
 8001184:	20000b08 	.word	0x20000b08

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <TIM1_UP_IRQHandler+0x10>)
 80011ce:	f002 fe1b 	bl	8003e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000bc8 	.word	0x20000bc8

080011dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <USART1_IRQHandler+0x10>)
 80011e2:	f003 f98d 	bl	8004500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000c2c 	.word	0x20000c2c

080011f0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM Interrupt.
  */
void HSEM_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80011f4:	f000 fd58 	bl	8001ca8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001202:	f002 fbb7 	bl	8003974 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000c14 	.word	0x20000c14

08001210 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800121e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800122c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001234:	68fb      	ldr	r3, [r7, #12]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_SUBGHZ_Init+0x20>)
 8001246:	2208      	movs	r2, #8
 8001248:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_SUBGHZ_Init+0x20>)
 800124c:	f002 f910 	bl	8003470 <HAL_SUBGHZ_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001256:	f7ff fedd 	bl	8001014 <Error_Handler>
  /* USER CODE BEGIN SUBGHZ_Init 2 */


  /* USER CODE END SUBGHZ_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000c14 	.word	0x20000c14

08001264 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ffcf 	bl	8001210 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2032      	movs	r0, #50	@ 0x32
 8001278:	f000 fab9 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800127c:	2032      	movs	r0, #50	@ 0x32
 800127e:	f000 fad0 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_GetTick+0x24>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800129e:	f000 f892 	bl	80013c6 <TIMER_IF_GetTimerValue>
 80012a2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000c20 	.word	0x20000c20

080012b4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f8af 	bl	8001422 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f00b fe0e 	bl	800cf1c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20010000 	.word	0x20010000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000c24 	.word	0x20000c24
 8001334:	20004d80 	.word	0x20004d80

08001338 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800134e:	79fb      	ldrb	r3, [r7, #7]
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <TIMER_IF_SetTimerContext+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000c28 	.word	0x20000c28

0800139c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <TIMER_IF_GetTimerContext+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000c28 	.word	0x20000c28

080013b0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80013ba:	687b      	ldr	r3, [r7, #4]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001440:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4313      	orrs	r3, r2
 800144a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001450:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800146c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4313      	orrs	r3, r2
 800147a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001480:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001488:	68fb      	ldr	r3, [r7, #12]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001498:	4b23      	ldr	r3, [pc, #140]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 800149a:	4a24      	ldr	r2, [pc, #144]	@ (800152c <MX_USART1_UART_Init+0x98>)
 800149c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014c0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014de:	4812      	ldr	r0, [pc, #72]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014e0:	f002 fe74 	bl	80041cc <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80014ea:	f7ff fd93 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ee:	2100      	movs	r1, #0
 80014f0:	480d      	ldr	r0, [pc, #52]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 80014f2:	f004 f86e 	bl	80055d2 <HAL_UARTEx_SetTxFifoThreshold>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80014fc:	f7ff fd8a 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	4809      	ldr	r0, [pc, #36]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 8001504:	f004 f8a3 	bl	800564e <HAL_UARTEx_SetRxFifoThreshold>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800150e:	f7ff fd81 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 8001514:	f004 f822 	bl	800555c <HAL_UARTEx_EnableFifoMode>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800151e:	f7ff fd79 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000c2c 	.word	0x20000c2c
 800152c:	40013800 	.word	0x40013800

08001530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b096      	sub	sp, #88	@ 0x58
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2238      	movs	r2, #56	@ 0x38
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f00b fc41 	bl	800cdd8 <memset>
  if(uartHandle->Instance==USART1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <HAL_UART_MspInit+0x94>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d12d      	bne.n	80015bc <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001560:	2301      	movs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001564:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001568:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fdca 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800157a:	f7ff fd4b 	bl	8001014 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001582:	f7ff ff6f 	bl	8001464 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2002      	movs	r0, #2
 8001588:	f7ff ff54 	bl	8001434 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> USART1_RTS
    PB4     ------> USART1_CTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23d8      	movs	r3, #216	@ 0xd8
 800158e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159c:	2307      	movs	r3, #7
 800159e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 80015a8:	f000 fa06 	bl	80019b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2105      	movs	r1, #5
 80015b0:	2024      	movs	r0, #36	@ 0x24
 80015b2:	f000 f91c 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015b6:	2024      	movs	r0, #36	@ 0x24
 80015b8:	f000 f933 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	3758      	adds	r7, #88	@ 0x58
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40013800 	.word	0x40013800
 80015c8:	48000400 	.word	0x48000400

080015cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015cc:	480d      	ldr	r0, [pc, #52]	@ (8001604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015d0:	f7ff feb2 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	@ (8001608 <LoopForever+0x6>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	@ (800160c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <LoopForever+0xe>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001618 <LoopForever+0x16>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015fa:	f00b fc95 	bl	800cf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fe:	f7ff fc93 	bl	8000f28 <main>

08001602 <LoopForever>:

LoopForever:
    b LoopForever
 8001602:	e7fe      	b.n	8001602 <LoopForever>
  ldr   r0, =_estack
 8001604:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000b68 	.word	0x20000b68
  ldr r2, =_sidata
 8001610:	0800e6bc 	.word	0x0800e6bc
  ldr r2, =_sbss
 8001614:	20000b68 	.word	0x20000b68
  ldr r4, =_ebss
 8001618:	20004d80 	.word	0x20004d80

0800161c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162a:	2003      	movs	r0, #3
 800162c:	f000 f8d4 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001630:	f001 fb4e 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8001634:	4603      	mov	r3, r0
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <HAL_Init+0x3c>)
 8001638:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff fd3e 	bl	80010bc <HAL_InitTick>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	e001      	b.n	8001650 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164c:	f7ff fd00 	bl	8001050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001650:	79fb      	ldrb	r3, [r7, #7]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000b04 	.word	0x20000b04

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HAL_IncTick+0x20>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000b0c 	.word	0x20000b0c
 8001680:	20000cc0 	.word	0x20000cc0

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4906      	ldr	r1, [pc, #24]	@ (800171c <__NVIC_EnableIRQ+0x34>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff4f 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff66 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ffb4 	bl	8001774 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff83 	bl	8001720 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff59 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e04f      	b.n	80018f0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d008      	beq.n	800186e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2204      	movs	r2, #4
 8001860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e040      	b.n	80018f0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 020e 	bic.w	r2, r2, #14
 800187c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800188c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f003 021c 	and.w	r2, r3, #28
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00c      	beq.n	80018de <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d005      	beq.n	800191e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e047      	b.n	80019ae <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 020e 	bic.w	r2, r2, #14
 800192c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800194c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f003 021c 	and.w	r2, r3, #28
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800196a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800198c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
    }
  }
  return status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e140      	b.n	8001c4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8132 	beq.w	8001c44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d005      	beq.n	80019f8 <HAL_GPIO_Init+0x40>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d130      	bne.n	8001a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2e:	2201      	movs	r2, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 0201 	and.w	r2, r3, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d017      	beq.n	8001a96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d123      	bne.n	8001aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0203 	and.w	r2, r3, #3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 808c 	beq.w	8001c44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c68 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	2207      	movs	r2, #7
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1bc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a44      	ldr	r2, [pc, #272]	@ (8001c6c <HAL_GPIO_Init+0x2b4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1b8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a43      	ldr	r2, [pc, #268]	@ (8001c70 <HAL_GPIO_Init+0x2b8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1b4>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1be>
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1be>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1be>
 8001b74:	2300      	movs	r3, #0
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b86:	4938      	ldr	r1, [pc, #224]	@ (8001c68 <HAL_GPIO_Init+0x2b0>)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001be2:	4a24      	ldr	r2, [pc, #144]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001c0e:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f aeb7 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	48000800 	.word	0x48000800
 8001c74:	58000800 	.word	0x58000800

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_HSEM_IRQHandler+0x30>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_HSEM_IRQHandler+0x30>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4906      	ldr	r1, [pc, #24]	@ (8001cd8 <HAL_HSEM_IRQHandler+0x30>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <HAL_HSEM_IRQHandler+0x30>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f807 	bl	8001cdc <HAL_HSEM_FreeCallback>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	58001500 	.word	0x58001500

08001cdc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a03      	ldr	r2, [pc, #12]	@ (8001d08 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	58000400 	.word	0x58000400

08001d0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_PWREx_GetVoltageRange+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	58000400 	.word	0x58000400

08001d24 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d34:	d101      	bne.n	8001d3a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	58000400 	.word	0x58000400

08001d48 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d92:	d101      	bne.n	8001d98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001dec:	d101      	bne.n	8001df2 <LL_RCC_HSE_IsReady+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_RCC_HSE_IsReady+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e46:	d101      	bne.n	8001e4c <LL_RCC_HSI_IsReady+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_RCC_HSI_IsReady+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	061b      	lsls	r3, r3, #24
 8001e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d101      	bne.n	8001e96 <LL_RCC_LSE_IsReady+0x18>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_RCC_LSE_IsReady+0x1a>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d101      	bne.n	8001ef8 <LL_RCC_LSI_IsReady+0x18>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_RCC_LSI_IsReady+0x1a>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6013      	str	r3, [r2, #0]
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d101      	bne.n	8001f50 <LL_RCC_MSI_IsReady+0x16>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_RCC_MSI_IsReady+0x18>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d101      	bne.n	8001f70 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002042:	f023 020f 	bic.w	r2, r3, #15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002070:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002114:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002118:	6013      	str	r3, [r2, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002150:	d101      	bne.n	8002156 <LL_RCC_PLL_IsReady+0x18>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_RCC_PLL_IsReady+0x1a>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0303 	and.w	r3, r3, #3
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021cc:	d101      	bne.n	80021d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d101      	bne.n	80021f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002212:	d101      	bne.n	8002218 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002230:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002234:	d101      	bne.n	800223a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e36f      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	f7ff fece 	bl	8001ff6 <LL_RCC_GetSysClkSource>
 800225a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225c:	f7ff ffa2 	bl	80021a4 <LL_RCC_PLL_GetMainSource>
 8002260:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80c4 	beq.w	80023f8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x3e>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	d176      	bne.n	800236a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d173      	bne.n	800236a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e353      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x68>
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022aa:	e006      	b.n	80022ba <HAL_RCC_OscConfig+0x76>
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d222      	bcs.n	8002304 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fd7a 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e331      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe53 	bl	8001fa8 <LL_RCC_MSI_SetCalibTrimming>
 8002302:	e021      	b.n	8002348 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fe3a 	bl	8001fa8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fd3f 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e2f6      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002348:	f000 fcc2 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 800234c:	4603      	mov	r3, r0
 800234e:	4aa7      	ldr	r2, [pc, #668]	@ (80025ec <HAL_RCC_OscConfig+0x3a8>)
 8002350:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002352:	4ba7      	ldr	r3, [pc, #668]	@ (80025f0 <HAL_RCC_OscConfig+0x3ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe feb0 	bl	80010bc <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d047      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	e2e5      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d02c      	beq.n	80023cc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002372:	f7ff fdc6 	bl	8001f02 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002376:	f7fe ff89 	bl	800128c <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237e:	f7fe ff85 	bl	800128c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e2d2      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002390:	f7ff fdd3 	bl	8001f3a <LL_RCC_MSI_IsReady>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f1      	beq.n	800237e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fdef 	bl	8001fa8 <LL_RCC_MSI_SetCalibTrimming>
 80023ca:	e015      	b.n	80023f8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023cc:	f7ff fda7 	bl	8001f1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d0:	f7fe ff5c 	bl	800128c <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d8:	f7fe ff58 	bl	800128c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e2a5      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023ea:	f7ff fda6 	bl	8001f3a <LL_RCC_MSI_IsReady>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f1      	bne.n	80023d8 <HAL_RCC_OscConfig+0x194>
 80023f4:	e000      	b.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023f6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d058      	beq.n	80024b6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x1d2>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d108      	bne.n	8002422 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d105      	bne.n	8002422 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d14b      	bne.n	80024b6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e289      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0x204>
 8002442:	f7ff fcae 	bl	8001da2 <LL_RCC_HSE_Enable>
 8002446:	e00d      	b.n	8002464 <HAL_RCC_OscConfig+0x220>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002450:	d104      	bne.n	800245c <HAL_RCC_OscConfig+0x218>
 8002452:	f7ff fc79 	bl	8001d48 <LL_RCC_HSE_EnableTcxo>
 8002456:	f7ff fca4 	bl	8001da2 <LL_RCC_HSE_Enable>
 800245a:	e003      	b.n	8002464 <HAL_RCC_OscConfig+0x220>
 800245c:	f7ff fcaf 	bl	8001dbe <LL_RCC_HSE_Disable>
 8002460:	f7ff fc80 	bl	8001d64 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe ff0e 	bl	800128c <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe ff0a 	bl	800128c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e257      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002486:	f7ff fca8 	bl	8001dda <LL_RCC_HSE_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f1      	beq.n	8002474 <HAL_RCC_OscConfig+0x230>
 8002490:	e011      	b.n	80024b6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe fefb 	bl	800128c <HAL_GetTick>
 8002496:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249a:	f7fe fef7 	bl	800128c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	@ 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e244      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024ac:	f7ff fc95 	bl	8001dda <LL_RCC_HSE_IsReady>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f1      	bne.n	800249a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d046      	beq.n	8002550 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x290>
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d10e      	bne.n	80024ec <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e22a      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fcb6 	bl	8001e56 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024ea:	e031      	b.n	8002550 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d019      	beq.n	8002528 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f4:	f7ff fc82 	bl	8001dfc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fec8 	bl	800128c <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7fe fec4 	bl	800128c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e211      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002512:	f7ff fc8f 	bl	8001e34 <LL_RCC_HSI_IsReady>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f1      	beq.n	8002500 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc98 	bl	8001e56 <LL_RCC_HSI_SetCalibTrimming>
 8002526:	e013      	b.n	8002550 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002528:	f7ff fc76 	bl	8001e18 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe feae 	bl	800128c <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe feaa 	bl	800128c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1f7      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002546:	f7ff fc75 	bl	8001e34 <LL_RCC_HSI_IsReady>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f1      	bne.n	8002534 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d06e      	beq.n	800263a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d056      	beq.n	8002612 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	429a      	cmp	r2, r3
 800257a:	d031      	beq.n	80025e0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e1d0      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800259e:	f7ff fc8f 	bl	8001ec0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a2:	f7fe fe73 	bl	800128c <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe fe6f 	bl	800128c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b11      	cmp	r3, #17
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1bc      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80025bc:	f7ff fc90 	bl	8001ee0 <LL_RCC_LSI_IsReady>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f1      	bne.n	80025aa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ce:	f023 0210 	bic.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	f7ff fc5e 	bl	8001ea0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7fe fe52 	bl	800128c <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80025ea:	e00c      	b.n	8002606 <HAL_RCC_OscConfig+0x3c2>
 80025ec:	20000b04 	.word	0x20000b04
 80025f0:	20000b08 	.word	0x20000b08
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe fe4a 	bl	800128c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b11      	cmp	r3, #17
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e197      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002606:	f7ff fc6b 	bl	8001ee0 <LL_RCC_LSI_IsReady>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f1      	beq.n	80025f4 <HAL_RCC_OscConfig+0x3b0>
 8002610:	e013      	b.n	800263a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	f7ff fc55 	bl	8001ec0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe fe39 	bl	800128c <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe fe35 	bl	800128c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b11      	cmp	r3, #17
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e182      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002630:	f7ff fc56 	bl	8001ee0 <LL_RCC_LSI_IsReady>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f1      	bne.n	800261e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80d8 	beq.w	80027f8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002648:	f7ff fb6c 	bl	8001d24 <LL_PWR_IsEnabledBkUpAccess>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d113      	bne.n	800267a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002652:	f7ff fb4d 	bl	8001cf0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7fe fe19 	bl	800128c <HAL_GetTick>
 800265a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7fe fe15 	bl	800128c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e162      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002670:	f7ff fb58 	bl	8001d24 <LL_PWR_IsEnabledBkUpAccess>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f1      	beq.n	800265e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d07b      	beq.n	800277a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b85      	cmp	r3, #133	@ 0x85
 8002688:	d003      	beq.n	8002692 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fdf1 	bl	800128c <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fde3 	bl	800128c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e12e      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026d8:	f7ff fbd1 	bl	8001e7e <LL_RCC_LSE_IsReady>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ef      	beq.n	80026c2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b81      	cmp	r3, #129	@ 0x81
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b85      	cmp	r3, #133	@ 0x85
 80026f0:	d121      	bne.n	8002736 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fdcb 	bl	800128c <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fdbd 	bl	800128c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e108      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ec      	beq.n	800270e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002734:	e060      	b.n	80027f8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe fda9 	bl	800128c <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe fd9b 	bl	800128c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0e6      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ec      	bne.n	8002752 <HAL_RCC_OscConfig+0x50e>
 8002778:	e03e      	b.n	80027f8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fd87 	bl	800128c <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800278c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fd79 	bl	800128c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0c4      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ec      	bne.n	8002796 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fd66 	bl	800128c <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe fd58 	bl	800128c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0a3      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80027ee:	f7ff fb46 	bl	8001e7e <LL_RCC_LSE_IsReady>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ef      	bne.n	80027d8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8099 	beq.w	8002934 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b0c      	cmp	r3, #12
 8002806:	d06c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	2b02      	cmp	r3, #2
 800280e:	d14b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	f7ff fc87 	bl	8002122 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fd3a 	bl	800128c <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fd36 	bl	800128c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b0a      	cmp	r3, #10
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e083      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800282e:	f7ff fc86 	bl	800213e <LL_RCC_PLL_IsReady>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f1      	bne.n	800281c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b40      	ldr	r3, [pc, #256]	@ (8002940 <HAL_RCC_OscConfig+0x6fc>)
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002850:	0212      	lsls	r2, r2, #8
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002864:	430a      	orrs	r2, r1
 8002866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286e:	f7ff fc4a 	bl	8002106 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fd03 	bl	800128c <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fcff 	bl	800128c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b0a      	cmp	r3, #10
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e04c      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800289c:	f7ff fc4f 	bl	800213e <LL_RCC_PLL_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f1      	beq.n	800288a <HAL_RCC_OscConfig+0x646>
 80028a6:	e045      	b.n	8002934 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	f7ff fc3b 	bl	8002122 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fcee 	bl	800128c <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fcea 	bl	800128c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b0a      	cmp	r3, #10
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e037      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028c6:	f7ff fc3a 	bl	800213e <LL_RCC_PLL_IsReady>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f1      	bne.n	80028b4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028da:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <HAL_RCC_OscConfig+0x700>)
 80028dc:	4013      	ands	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
 80028e0:	e028      	b.n	8002934 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e023      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	429a      	cmp	r2, r3
 8002902:	d115      	bne.n	8002930 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290e:	429a      	cmp	r2, r3
 8002910:	d10e      	bne.n	8002930 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	429a      	cmp	r2, r3
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	11c1808c 	.word	0x11c1808c
 8002944:	eefefffc 	.word	0xeefefffc

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e10f      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b89      	ldr	r3, [pc, #548]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d91b      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b86      	ldr	r3, [pc, #536]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 0207 	bic.w	r2, r3, #7
 8002972:	4984      	ldr	r1, [pc, #528]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297a:	f7fe fc87 	bl	800128c <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002980:	e008      	b.n	8002994 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002982:	f7fe fc83 	bl	800128c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0f3      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002994:	4b7b      	ldr	r3, [pc, #492]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d1ef      	bne.n	8002982 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fb2a 	bl	800200c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fc68 	bl	800128c <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029c0:	f7fe fc64 	bl	800128c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0d4      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029d2:	f7ff fbf2 	bl	80021ba <LL_RCC_IsActiveFlag_HPRE>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f1      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fb20 	bl	8002032 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029f2:	f7fe fc4b 	bl	800128c <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029fa:	f7fe fc47 	bl	800128c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0b7      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a0c:	f7ff fbe6 	bl	80021dc <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f1      	beq.n	80029fa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fb19 	bl	800205e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fc2e 	bl	800128c <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a34:	f7fe fc2a 	bl	800128c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e09a      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a46:	f7ff fbdb 	bl	8002200 <LL_RCC_IsActiveFlag_PPRE1>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f1      	beq.n	8002a34 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fb0e 	bl	8002084 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fc10 	bl	800128c <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a70:	f7fe fc0c 	bl	800128c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e07c      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a82:	f7ff fbce 	bl	8002222 <LL_RCC_IsActiveFlag_PPRE2>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f1      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d043      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002aa0:	f7ff f99b 	bl	8001dda <LL_RCC_HSE_IsReady>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e066      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ab6:	f7ff fb42 	bl	800213e <LL_RCC_PLL_IsReady>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d113      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e05b      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002acc:	f7ff fa35 	bl	8001f3a <LL_RCC_MSI_IsReady>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e050      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ada:	f7ff f9ab 	bl	8001e34 <LL_RCC_HSI_IsReady>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e049      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fa6f 	bl	8001fd0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af2:	f7fe fbcb 	bl	800128c <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afa:	f7fe fbc7 	bl	800128c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e035      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b10:	f7ff fa71 	bl	8001ff6 <LL_RCC_GetSysClkSource>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1ec      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d21b      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	4913      	ldr	r1, [pc, #76]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fba5 	bl	800128c <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b46:	f7fe fba1 	bl	800128c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e011      	b.n	8002b7c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d1ef      	bne.n	8002b46 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b66:	f000 f8b3 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4a06      	ldr	r2, [pc, #24]	@ (8002b88 <HAL_RCC_ClockConfig+0x240>)
 8002b6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_ClockConfig+0x244>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe faa1 	bl	80010bc <HAL_InitTick>
 8002b7a:	4603      	mov	r3, r0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	58004000 	.word	0x58004000
 8002b88:	20000b04 	.word	0x20000b04
 8002b8c:	20000b08 	.word	0x20000b08

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	f7ff fa2a 	bl	8001ff6 <LL_RCC_GetSysClkSource>
 8002ba2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba4:	f7ff fafe 	bl	80021a4 <LL_RCC_PLL_GetMainSource>
 8002ba8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x2c>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d139      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d136      	bne.n	8002c2a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002bbc:	f7ff f9cd 	bl	8001f5a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x62>
 8002bc6:	f7ff f9c8 	bl	8001f5a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x4e>
 8002bd0:	f7ff f9d3 	bl	8001f7a <LL_RCC_MSI_GetRange>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	e005      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x5a>
 8002bde:	f7ff f9d7 	bl	8001f90 <LL_RCC_MSI_GetRangeAfterStandby>
 8002be2:	4603      	mov	r3, r0
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	4a36      	ldr	r2, [pc, #216]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x8c>
 8002bf2:	f7ff f9b2 	bl	8001f5a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x7a>
 8002bfc:	f7ff f9bd 	bl	8001f7a <LL_RCC_MSI_GetRange>
 8002c00:	4603      	mov	r3, r0
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	e005      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x86>
 8002c0a:	f7ff f9c1 	bl	8001f90 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d115      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c28:	e012      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d102      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e00c      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d109      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c3c:	f7ff f8a0 	bl	8001d80 <LL_RCC_HSE_IsEnabledDiv2>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e001      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c4e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c50:	f7ff f9d1 	bl	8001ff6 <LL_RCC_GetSysClkSource>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d12f      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c5a:	f7ff faa3 	bl	80021a4 <LL_RCC_PLL_GetMainSource>
 8002c5e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0xde>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d003      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0xe4>
 8002c6c:	e00d      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c70:	60fb      	str	r3, [r7, #12]
        break;
 8002c72:	e00d      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c74:	f7ff f884 	bl	8001d80 <LL_RCC_HSE_IsEnabledDiv2>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c80:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c86:	60fb      	str	r3, [r7, #12]
        break;
 8002c88:	e002      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	60fb      	str	r3, [r7, #12]
        break;
 8002c8e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c90:	f7ff fa66 	bl	8002160 <LL_RCC_PLL_GetN>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	fb03 f402 	mul.w	r4, r3, r2
 8002c9c:	f7ff fa77 	bl	800218e <LL_RCC_PLL_GetDivider>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	fbb4 f4f3 	udiv	r4, r4, r3
 8002caa:	f7ff fa65 	bl	8002178 <LL_RCC_PLL_GetR>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	0f5b      	lsrs	r3, r3, #29
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cb8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002cba:	697b      	ldr	r3, [r7, #20]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	0800e4a4 	.word	0x0800e4a4
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	01e84800 	.word	0x01e84800

08002cd0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b598      	push	{r3, r4, r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002cd4:	f7ff ff5c 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	f7ff f9e6 	bl	80020aa <LL_RCC_GetAHBPrescaler>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	4a03      	ldr	r2, [pc, #12]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd98      	pop	{r3, r4, r7, pc}
 8002cf4:	0800e444 	.word	0x0800e444

08002cf8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b598      	push	{r3, r4, r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cfc:	f7ff ffe8 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4604      	mov	r4, r0
 8002d02:	f7ff f9ea 	bl	80020da <LL_RCC_GetAPB1Prescaler>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	4a03      	ldr	r2, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd98      	pop	{r3, r4, r7, pc}
 8002d18:	0800e484 	.word	0x0800e484

08002d1c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b598      	push	{r3, r4, r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d20:	f7ff ffd6 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d24:	4604      	mov	r4, r0
 8002d26:	f7ff f9e3 	bl	80020f0 <LL_RCC_GetAPB2Prescaler>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	0adb      	lsrs	r3, r3, #11
 8002d2e:	4a03      	ldr	r2, [pc, #12]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd98      	pop	{r3, r4, r7, pc}
 8002d3c:	0800e484 	.word	0x0800e484

08002d40 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02d      	beq.n	8002dac <HAL_RCC_GetClockConfig+0x6c>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02a      	beq.n	8002dac <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	224f      	movs	r2, #79	@ 0x4f
 8002d5a:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 5260 	and.w	r2, r3, #14336	@ 0x3800
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d94:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCC_GetClockConfig+0x78>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0207 	and.w	r2, r3, #7
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	601a      	str	r2, [r3, #0]
  }
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	58004000 	.word	0x58004000

08002dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	4a10      	ldr	r2, [pc, #64]	@ (8002e10 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002dd4:	f7ff f974 	bl	80020c0 <LL_RCC_GetAHB3Prescaler>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0c9c      	lsrs	r4, r3, #18
 8002df8:	f7fe ff88 	bl	8001d0c <HAL_PWREx_GetVoltageRange>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4620      	mov	r0, r4
 8002e02:	f000 f80b 	bl	8002e1c <RCC_SetFlashLatency>
 8002e06:	4603      	mov	r3, r0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd90      	pop	{r4, r7, pc}
 8002e10:	0800e4a4 	.word	0x0800e4a4
 8002e14:	0800e444 	.word	0x0800e444
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	@ 0x38
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002e26:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <RCC_SetFlashLatency+0xf4>)
 8002e28:	f107 0320 	add.w	r3, r7, #32
 8002e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e30:	6018      	str	r0, [r3, #0]
 8002e32:	3304      	adds	r3, #4
 8002e34:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002e36:	4a37      	ldr	r2, [pc, #220]	@ (8002f14 <RCC_SetFlashLatency+0xf8>)
 8002e38:	f107 0318 	add.w	r3, r7, #24
 8002e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e40:	6018      	str	r0, [r3, #0]
 8002e42:	3304      	adds	r3, #4
 8002e44:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002e46:	4a34      	ldr	r2, [pc, #208]	@ (8002f18 <RCC_SetFlashLatency+0xfc>)
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e52:	2300      	movs	r3, #0
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5c:	d11b      	bne.n	8002e96 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e62:	e014      	b.n	8002e8e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	3338      	adds	r3, #56	@ 0x38
 8002e6a:	443b      	add	r3, r7
 8002e6c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d807      	bhi.n	8002e88 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	3338      	adds	r3, #56	@ 0x38
 8002e7e:	443b      	add	r3, r7
 8002e80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e86:	e021      	b.n	8002ecc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d9e7      	bls.n	8002e64 <RCC_SetFlashLatency+0x48>
 8002e94:	e01a      	b.n	8002ecc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9a:	e014      	b.n	8002ec6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	3338      	adds	r3, #56	@ 0x38
 8002ea2:	443b      	add	r3, r7
 8002ea4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d807      	bhi.n	8002ec0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	3338      	adds	r3, #56	@ 0x38
 8002eb6:	443b      	add	r3, r7
 8002eb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ebe:	e005      	b.n	8002ecc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d9e7      	bls.n	8002e9c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <RCC_SetFlashLatency+0x100>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 0207 	bic.w	r2, r3, #7
 8002ed4:	4911      	ldr	r1, [pc, #68]	@ (8002f1c <RCC_SetFlashLatency+0x100>)
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002edc:	f7fe f9d6 	bl	800128c <HAL_GetTick>
 8002ee0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ee2:	e008      	b.n	8002ef6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ee4:	f7fe f9d2 	bl	800128c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e007      	b.n	8002f06 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <RCC_SetFlashLatency+0x100>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1ef      	bne.n	8002ee4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3738      	adds	r7, #56	@ 0x38
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	0800e2d8 	.word	0x0800e2d8
 8002f14:	0800e2e0 	.word	0x0800e2e0
 8002f18:	0800e2e8 	.word	0x0800e2e8
 8002f1c:	58004000 	.word	0x58004000

08002f20 <LL_RCC_LSE_IsReady>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d101      	bne.n	8002f38 <LL_RCC_LSE_IsReady+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_RCC_LSE_IsReady+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_SetUSARTClockSource>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	43db      	mvns	r3, r3
 8002f58:	401a      	ands	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_SetI2SClockSource>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_SetLPUARTClockSource>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_SetI2CClockSource>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002fea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <LL_RCC_SetLPTIMClockSource>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800300a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <LL_RCC_SetRNGClockSource>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003040:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003044:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <LL_RCC_SetADCClockSource>:
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800306e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <LL_RCC_SetRTCClockSource>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003098:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_GetRTCClockSource>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <LL_RCC_ForceBackupDomainReset>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
	...

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003114:	2300      	movs	r3, #0
 8003116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003118:	2300      	movs	r3, #0
 800311a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d058      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003128:	f7fe fde2 	bl	8001cf0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312c:	f7fe f8ae 	bl	800128c <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003134:	f7fe f8aa 	bl	800128c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d902      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	74fb      	strb	r3, [r7, #19]
        break;
 8003146:	e006      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003148:	4b7b      	ldr	r3, [pc, #492]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003154:	d1ee      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d13c      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800315c:	f7ff ffa7 	bl	80030ae <LL_RCC_GetRTCClockSource>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	429a      	cmp	r2, r3
 8003168:	d00f      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003176:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003178:	f7ff ffa5 	bl	80030c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800317c:	f7ff ffb3 	bl	80030e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d014      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f87a 	bl	800128c <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800319a:	e00b      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe f876 	bl	800128c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d902      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	74fb      	strb	r3, [r7, #19]
            break;
 80031b2:	e004      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80031b4:	f7ff feb4 	bl	8002f20 <LL_RCC_LSE_IsReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d1ee      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5b 	bl	8003084 <LL_RCC_SetRTCClockSource>
 80031ce:	e004      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
 80031d4:	e001      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fea9 	bl	8002f42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fe9e 	bl	8002f42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fec0 	bl	8002f9c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fee6 	bl	8002ffe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fedb 	bl	8002ffe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fed0 	bl	8002ffe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fea9 	bl	8002fc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fe9e 	bl	8002fc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fe93 	bl	8002fc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d011      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe5e 	bl	8002f72 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032be:	d107      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fea5 	bl	8003030 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d011      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fea3 	bl	800305a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800331c:	d107      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800332e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	58000400 	.word	0x58000400

0800333c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800334c:	4904      	ldr	r1, [pc, #16]	@ (8003360 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	58000400 	.word	0x58000400

08003364 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336e:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	58000400 	.word	0x58000400

08003384 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003390:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	58000400 	.word	0x58000400

080033a4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80033a8:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80033aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ae:	619a      	str	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	58000400 	.word	0x58000400

080033bc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d101      	bne.n	80033d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	58000400 	.word	0x58000400

080033e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d101      	bne.n	80033f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	58000400 	.word	0x58000400

08003404 <LL_RCC_RF_DisableReset>:
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003414:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <LL_RCC_IsRFUnderReset>:
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003438:	d101      	bne.n	800343e <LL_RCC_IsRFUnderReset+0x1a>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <LL_RCC_IsRFUnderReset+0x1c>
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <LL_EXTI_EnableIT_32_63+0x24>)
 8003452:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003456:	4905      	ldr	r1, [pc, #20]	@ (800346c <LL_EXTI_EnableIT_32_63+0x24>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	58000800 	.word	0x58000800

08003470 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
    return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	e052      	b.n	800352c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	799b      	ldrb	r3, [r3, #6]
 800348e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003490:	7bbb      	ldrb	r3, [r7, #14]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_SUBGHZ_Init+0x2c>
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d109      	bne.n	80034b0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fede 	bl	8001264 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80034a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80034ac:	f7ff ffcc 	bl	8003448 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d126      	bne.n	8003504 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80034bc:	f7ff ffa2 	bl	8003404 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80034c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <HAL_SUBGHZ_Init+0xc4>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	0cdb      	lsrs	r3, r3, #19
 80034ce:	2264      	movs	r2, #100	@ 0x64
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	609a      	str	r2, [r3, #8]
        break;
 80034e6:	e007      	b.n	80034f8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80034ee:	f7ff ff99 	bl	8003424 <LL_RCC_IsRFUnderReset>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034f8:	f7ff ff34 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80034fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003500:	f7ff ff1c 	bl	800333c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003504:	f7ff ff4e 	bl	80033a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 faac 	bl	8003a70 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	719a      	strb	r2, [r3, #6]

  return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000b04 	.word	0x20000b04

08003538 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	461a      	mov	r2, r3
 8003544:	460b      	mov	r3, r1
 8003546:	817b      	strh	r3, [r7, #10]
 8003548:	4613      	mov	r3, r2
 800354a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	799b      	ldrb	r3, [r3, #6]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d14a      	bne.n	80035ec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	795b      	ldrb	r3, [r3, #5]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800355e:	2302      	movs	r3, #2
 8003560:	e045      	b.n	80035ee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2202      	movs	r2, #2
 800356c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fb4c 	bl	8003c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003574:	f7ff ff06 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003578:	210d      	movs	r1, #13
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fa98 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	b29b      	uxth	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa90 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003590:	897b      	ldrh	r3, [r7, #10]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa8a 	bl	8003ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800359c:	2300      	movs	r3, #0
 800359e:	82bb      	strh	r3, [r7, #20]
 80035a0:	e00a      	b.n	80035b8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80035a2:	8abb      	ldrh	r3, [r7, #20]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fa7f 	bl	8003ab0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80035b2:	8abb      	ldrh	r3, [r7, #20]
 80035b4:	3301      	adds	r3, #1
 80035b6:	82bb      	strh	r3, [r7, #20]
 80035b8:	8aba      	ldrh	r2, [r7, #20]
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3f0      	bcc.n	80035a2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80035c0:	f7ff fed0 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fb45 	bl	8003c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
 80035d6:	e001      	b.n	80035dc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	715a      	strb	r2, [r3, #5]

    return status;
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	e000      	b.n	80035ee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b088      	sub	sp, #32
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	461a      	mov	r2, r3
 8003602:	460b      	mov	r3, r1
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	4613      	mov	r3, r2
 8003608:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	799b      	ldrb	r3, [r3, #6]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d14a      	bne.n	80036ae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	795b      	ldrb	r3, [r3, #5]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003620:	2302      	movs	r3, #2
 8003622:	e045      	b.n	80036b0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 faee 	bl	8003c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003630:	f7ff fea8 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003634:	211d      	movs	r1, #29
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fa3a 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	b29b      	uxth	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	4619      	mov	r1, r3
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa32 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800364c:	897b      	ldrh	r3, [r7, #10]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4619      	mov	r1, r3
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa2c 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003658:	2100      	movs	r1, #0
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa28 	bl	8003ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	82fb      	strh	r3, [r7, #22]
 8003664:	e009      	b.n	800367a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fa77 	bl	8003b5c <SUBGHZSPI_Receive>
      pData++;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3301      	adds	r3, #1
 8003672:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003674:	8afb      	ldrh	r3, [r7, #22]
 8003676:	3301      	adds	r3, #1
 8003678:	82fb      	strh	r3, [r7, #22]
 800367a:	8afa      	ldrh	r2, [r7, #22]
 800367c:	893b      	ldrh	r3, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	d3f1      	bcc.n	8003666 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003682:	f7ff fe6f 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fae4 	bl	8003c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e001      	b.n	800369e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	715a      	strb	r2, [r3, #5]

    return status;
 80036aa:	7ffb      	ldrb	r3, [r7, #31]
 80036ac:	e000      	b.n	80036b0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	461a      	mov	r2, r3
 80036c4:	460b      	mov	r3, r1
 80036c6:	72fb      	strb	r3, [r7, #11]
 80036c8:	4613      	mov	r3, r2
 80036ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	799b      	ldrb	r3, [r3, #6]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d14a      	bne.n	800376c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	795b      	ldrb	r3, [r3, #5]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e045      	b.n	800376e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fa8f 	bl	8003c0c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80036ee:	7afb      	ldrb	r3, [r7, #11]
 80036f0:	2b84      	cmp	r3, #132	@ 0x84
 80036f2:	d002      	beq.n	80036fa <HAL_SUBGHZ_ExecSetCmd+0x42>
 80036f4:	7afb      	ldrb	r3, [r7, #11]
 80036f6:	2b94      	cmp	r3, #148	@ 0x94
 80036f8:	d103      	bne.n	8003702 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	711a      	strb	r2, [r3, #4]
 8003700:	e002      	b.n	8003708 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003708:	f7ff fe3c 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	4619      	mov	r1, r3
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f9cd 	bl	8003ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	82bb      	strh	r3, [r7, #20]
 800371a:	e00a      	b.n	8003732 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800371c:	8abb      	ldrh	r3, [r7, #20]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f9c2 	bl	8003ab0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800372c:	8abb      	ldrh	r3, [r7, #20]
 800372e:	3301      	adds	r3, #1
 8003730:	82bb      	strh	r3, [r7, #20]
 8003732:	8aba      	ldrh	r2, [r7, #20]
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	d3f0      	bcc.n	800371c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800373a:	f7ff fe13 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	2b84      	cmp	r3, #132	@ 0x84
 8003742:	d002      	beq.n	800374a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fa85 	bl	8003c54 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
 8003756:	e001      	b.n	800375c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	715a      	strb	r2, [r3, #5]

    return status;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	e000      	b.n	800376e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	461a      	mov	r2, r3
 8003782:	460b      	mov	r3, r1
 8003784:	72fb      	strb	r3, [r7, #11]
 8003786:	4613      	mov	r3, r2
 8003788:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	799b      	ldrb	r3, [r3, #6]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d13d      	bne.n	8003814 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	795b      	ldrb	r3, [r3, #5]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e038      	b.n	8003816 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa2e 	bl	8003c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80037b0:	f7ff fde8 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	4619      	mov	r1, r3
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f979 	bl	8003ab0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80037be:	2100      	movs	r1, #0
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f975 	bl	8003ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	82fb      	strh	r3, [r7, #22]
 80037ca:	e009      	b.n	80037e0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9c4 	bl	8003b5c <SUBGHZSPI_Receive>
      pData++;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	3301      	adds	r3, #1
 80037d8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80037da:	8afb      	ldrh	r3, [r7, #22]
 80037dc:	3301      	adds	r3, #1
 80037de:	82fb      	strh	r3, [r7, #22]
 80037e0:	8afa      	ldrh	r2, [r7, #22]
 80037e2:	893b      	ldrh	r3, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d3f1      	bcc.n	80037cc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80037e8:	f7ff fdbc 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fa31 	bl	8003c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	77fb      	strb	r3, [r7, #31]
 80037fe:	e001      	b.n	8003804 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	715a      	strb	r2, [r3, #5]

    return status;
 8003810:	7ffb      	ldrb	r3, [r7, #31]
 8003812:	e000      	b.n	8003816 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	461a      	mov	r2, r3
 800382a:	460b      	mov	r3, r1
 800382c:	72fb      	strb	r3, [r7, #11]
 800382e:	4613      	mov	r3, r2
 8003830:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	799b      	ldrb	r3, [r3, #6]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d13e      	bne.n	80038ba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	795b      	ldrb	r3, [r3, #5]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003844:	2302      	movs	r3, #2
 8003846:	e039      	b.n	80038bc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f9dc 	bl	8003c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003854:	f7ff fd96 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003858:	210e      	movs	r1, #14
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f928 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003860:	7afb      	ldrb	r3, [r7, #11]
 8003862:	4619      	mov	r1, r3
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f923 	bl	8003ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800386a:	2300      	movs	r3, #0
 800386c:	82bb      	strh	r3, [r7, #20]
 800386e:	e00a      	b.n	8003886 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003870:	8abb      	ldrh	r3, [r7, #20]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f918 	bl	8003ab0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003880:	8abb      	ldrh	r3, [r7, #20]
 8003882:	3301      	adds	r3, #1
 8003884:	82bb      	strh	r3, [r7, #20]
 8003886:	8aba      	ldrh	r2, [r7, #20]
 8003888:	893b      	ldrh	r3, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3f0      	bcc.n	8003870 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800388e:	f7ff fd69 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f9de 	bl	8003c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
 80038a4:	e001      	b.n	80038aa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	715a      	strb	r2, [r3, #5]

    return status;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	e000      	b.n	80038bc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	461a      	mov	r2, r3
 80038d0:	460b      	mov	r3, r1
 80038d2:	72fb      	strb	r3, [r7, #11]
 80038d4:	4613      	mov	r3, r2
 80038d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	799b      	ldrb	r3, [r3, #6]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d141      	bne.n	800396a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	795b      	ldrb	r3, [r3, #5]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e03c      	b.n	800396c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f987 	bl	8003c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80038fe:	f7ff fd41 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003902:	211e      	movs	r1, #30
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f8d3 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	4619      	mov	r1, r3
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f8ce 	bl	8003ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003914:	2100      	movs	r1, #0
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f8ca 	bl	8003ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800391c:	2300      	movs	r3, #0
 800391e:	82fb      	strh	r3, [r7, #22]
 8003920:	e009      	b.n	8003936 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f919 	bl	8003b5c <SUBGHZSPI_Receive>
      pData++;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3301      	adds	r3, #1
 800392e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003930:	8afb      	ldrh	r3, [r7, #22]
 8003932:	3301      	adds	r3, #1
 8003934:	82fb      	strh	r3, [r7, #22]
 8003936:	8afa      	ldrh	r2, [r7, #22]
 8003938:	893b      	ldrh	r3, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d3f1      	bcc.n	8003922 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800393e:	f7ff fd11 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f986 	bl	8003c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e001      	b.n	800395a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	715a      	strb	r2, [r3, #5]

    return status;
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	e000      	b.n	800396c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800397c:	2300      	movs	r3, #0
 800397e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003980:	f107 020c 	add.w	r2, r7, #12
 8003984:	2302      	movs	r3, #2
 8003986:	2112      	movs	r1, #18
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fef4 	bl	8003776 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800398e:	7b3b      	ldrb	r3, [r7, #12]
 8003990:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003992:	89fb      	ldrh	r3, [r7, #14]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	b21a      	sxth	r2, r3
 8003998:	7b7b      	ldrb	r3, [r7, #13]
 800399a:	b21b      	sxth	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	b21b      	sxth	r3, r3
 80039a0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80039a2:	f107 020c 	add.w	r2, r7, #12
 80039a6:	2302      	movs	r3, #2
 80039a8:	2102      	movs	r1, #2
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fe84 	bl	80036b8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80039b0:	89fb      	ldrh	r3, [r7, #14]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f008 fc90 	bl	800c2e0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f008 fc96 	bl	800c2fc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80039d0:	89fb      	ldrh	r3, [r7, #14]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f008 fce6 	bl	800c3ac <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80039e0:	89fb      	ldrh	r3, [r7, #14]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f008 fcec 	bl	800c3c8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f008 fcf2 	bl	800c3e4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003a00:	89fb      	ldrh	r3, [r7, #14]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f008 fcc0 	bl	800c390 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003a10:	89fb      	ldrh	r3, [r7, #14]
 8003a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f008 fc7c 	bl	800c318 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003a20:	89fb      	ldrh	r3, [r7, #14]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003a2a:	89fb      	ldrh	r3, [r7, #14]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003a34:	2101      	movs	r1, #1
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f008 fc7c 	bl	800c334 <HAL_SUBGHZ_CADStatusCallback>
 8003a3c:	e003      	b.n	8003a46 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003a3e:	2100      	movs	r1, #0
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f008 fc77 	bl	800c334 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003a46:	89fb      	ldrh	r3, [r7, #14]
 8003a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f008 fc8d 	bl	800c370 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003a56:	89fb      	ldrh	r3, [r7, #14]
 8003a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f008 fccd 	bl	800c400 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <SUBGHZSPI_Init+0x3c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003aac <SUBGHZSPI_Init+0x3c>)
 8003a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a82:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003a84:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <SUBGHZSPI_Init+0x3c>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003a8c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003a8e:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <SUBGHZSPI_Init+0x3c>)
 8003a90:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003a94:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003a96:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <SUBGHZSPI_Init+0x3c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <SUBGHZSPI_Init+0x3c>)
 8003a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa0:	6013      	str	r3, [r2, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	58010000 	.word	0x58010000

08003ab0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ac0:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <SUBGHZSPI_Transmit+0xa0>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	0cdb      	lsrs	r3, r3, #19
 8003ace:	2264      	movs	r2, #100	@ 0x64
 8003ad0:	fb02 f303 	mul.w	r3, r2, r3
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	609a      	str	r2, [r3, #8]
      break;
 8003ae6:	e008      	b.n	8003afa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003aee:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <SUBGHZSPI_Transmit+0xa4>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d1ed      	bne.n	8003ad6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003afa:	4b17      	ldr	r3, [pc, #92]	@ (8003b58 <SUBGHZSPI_Transmit+0xa8>)
 8003afc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <SUBGHZSPI_Transmit+0xa0>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	0cdb      	lsrs	r3, r3, #19
 8003b12:	2264      	movs	r2, #100	@ 0x64
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	609a      	str	r2, [r3, #8]
      break;
 8003b2a:	e008      	b.n	8003b3e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <SUBGHZSPI_Transmit+0xa4>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d1ed      	bne.n	8003b1a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <SUBGHZSPI_Transmit+0xa4>)
 8003b40:	68db      	ldr	r3, [r3, #12]

  return status;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000b04 	.word	0x20000b04
 8003b54:	58010000 	.word	0x58010000
 8003b58:	5801000c 	.word	0x5801000c

08003b5c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b6a:	4b25      	ldr	r3, [pc, #148]	@ (8003c00 <SUBGHZSPI_Receive+0xa4>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	0cdb      	lsrs	r3, r3, #19
 8003b78:	2264      	movs	r2, #100	@ 0x64
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e008      	b.n	8003ba4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <SUBGHZSPI_Receive+0xa8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d1ed      	bne.n	8003b80 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003ba4:	4b18      	ldr	r3, [pc, #96]	@ (8003c08 <SUBGHZSPI_Receive+0xac>)
 8003ba6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	22ff      	movs	r2, #255	@ 0xff
 8003bac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003bae:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <SUBGHZSPI_Receive+0xa4>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	0cdb      	lsrs	r3, r3, #19
 8003bbc:	2264      	movs	r2, #100	@ 0x64
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	609a      	str	r2, [r3, #8]
      break;
 8003bd4:	e008      	b.n	8003be8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003bdc:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <SUBGHZSPI_Receive+0xa8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d1ed      	bne.n	8003bc4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <SUBGHZSPI_Receive+0xa8>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	701a      	strb	r2, [r3, #0]

  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000b04 	.word	0x20000b04
 8003c04:	58010000 	.word	0x58010000
 8003c08:	5801000c 	.word	0x5801000c

08003c0c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	791b      	ldrb	r3, [r3, #4]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d111      	bne.n	8003c40 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <SUBGHZ_CheckDeviceReady+0x44>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c2c:	f7ff fbaa 	bl	8003384 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f9      	bne.n	8003c30 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c3c:	f7ff fb92 	bl	8003364 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f807 	bl	8003c54 <SUBGHZ_WaitOnBusy>
 8003c46:	4603      	mov	r3, r0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000b04 	.word	0x20000b04

08003c54 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003c60:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <SUBGHZ_WaitOnBusy+0x58>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	0d1b      	lsrs	r3, r3, #20
 8003c6e:	2264      	movs	r2, #100	@ 0x64
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003c76:	f7ff fbb3 	bl	80033e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003c7a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	609a      	str	r2, [r3, #8]
      break;
 8003c8c:	e009      	b.n	8003ca2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003c94:	f7ff fb92 	bl	80033bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d0e9      	beq.n	8003c76 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000b04 	.word	0x20000b04

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e049      	b.n	8003d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f841 	bl	8003d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 f9ce 	bl	8004090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d001      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e036      	b.n	8003df6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a16      	ldr	r2, [pc, #88]	@ (8003e00 <HAL_TIM_Base_Start_IT+0x90>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x44>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db2:	d115      	bne.n	8003de0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_TIM_Base_Start_IT+0x94>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d015      	beq.n	8003df2 <HAL_TIM_Base_Start_IT+0x82>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d011      	beq.n	8003df2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dde:	e008      	b.n	8003df2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e000      	b.n	8003df4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	00010007 	.word	0x00010007

08003e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0202 	mvn.w	r2, #2
 8003e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f904 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8f7 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f906 	bl	800406a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0204 	mvn.w	r2, #4
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8da 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8cd 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8dc 	bl	800406a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8b0 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8a3 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8b2 	bl	800406a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0210 	mvn.w	r2, #16
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2208      	movs	r2, #8
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f886 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f879 	bl	8004046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f888 	bl	800406a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0201 	mvn.w	r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f832 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa4:	2b80      	cmp	r3, #128	@ 0x80
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8d7 	bl	8004166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b80      	cmp	r3, #128	@ 0x80
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8c9 	bl	8004178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	d10e      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b40      	cmp	r3, #64	@ 0x40
 8004000:	d107      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800400a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f835 	bl	800407c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d10e      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b20      	cmp	r3, #32
 800402c:	d107      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f06f 0220 	mvn.w	r2, #32
 8004036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f88b 	bl	8004154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
	...

08004090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a29      	ldr	r2, [pc, #164]	@ (8004148 <TIM_Base_SetConfig+0xb8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x20>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a20      	ldr	r2, [pc, #128]	@ (8004148 <TIM_Base_SetConfig+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x52>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x52>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <TIM_Base_SetConfig+0xbc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x52>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004150 <TIM_Base_SetConfig+0xc0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0b      	ldr	r2, [pc, #44]	@ (8004148 <TIM_Base_SetConfig+0xb8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_Base_SetConfig+0xa0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <TIM_Base_SetConfig+0xbc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0xa0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <TIM_Base_SetConfig+0xc0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	615a      	str	r2, [r3, #20]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <LL_RCC_GetUSARTClockSource>:
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004196:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	401a      	ands	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	4313      	orrs	r3, r2
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_GetLPUARTClockSource>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4013      	ands	r3, r2
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e042      	b.n	8004264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fd f99d 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2224      	movs	r2, #36	@ 0x24
 80041fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fcb8 	bl	8004b84 <UART_SetConfig>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e022      	b.n	8004264 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 ff20 	bl	800506c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800423a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800424a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 ffa6 	bl	80051ae <UART_CheckIdleState>
 8004262:	4603      	mov	r3, r0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	@ 0x28
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	2b20      	cmp	r3, #32
 8004284:	d173      	bne.n	800436e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_Transmit+0x26>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06c      	b.n	8004370 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2221      	movs	r2, #33	@ 0x21
 80042a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a6:	f7fc fff1 	bl	800128c <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	d108      	bne.n	80042d8 <HAL_UART_Transmit+0x6c>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	e003      	b.n	80042e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042e0:	e02c      	b.n	800433c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 ffac 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e039      	b.n	8004370 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004310:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	3302      	adds	r3, #2
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e007      	b.n	800432a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	3301      	adds	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1cc      	bne.n	80042e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	2140      	movs	r1, #64	@ 0x40
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 ff79 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e006      	b.n	8004370 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	@ 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800438e:	2b20      	cmp	r3, #32
 8004390:	f040 80b1 	bne.w	80044f6 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_Receive+0x28>
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0a9      	b.n	80044f8 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2222      	movs	r2, #34	@ 0x22
 80043b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ba:	f7fc ff67 	bl	800128c <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	88fa      	ldrh	r2, [r7, #6]
 80043cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d8:	d10e      	bne.n	80043f8 <HAL_UART_Receive+0x80>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_UART_Receive+0x76>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80043e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043ec:	e02d      	b.n	800444a <HAL_UART_Receive+0xd2>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	22ff      	movs	r2, #255	@ 0xff
 80043f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043f6:	e028      	b.n	800444a <HAL_UART_Receive+0xd2>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_UART_Receive+0xa4>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_UART_Receive+0x9a>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	22ff      	movs	r2, #255	@ 0xff
 800440c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004410:	e01b      	b.n	800444a <HAL_UART_Receive+0xd2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	227f      	movs	r2, #127	@ 0x7f
 8004416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800441a:	e016      	b.n	800444a <HAL_UART_Receive+0xd2>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004424:	d10d      	bne.n	8004442 <HAL_UART_Receive+0xca>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <HAL_UART_Receive+0xc0>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	227f      	movs	r2, #127	@ 0x7f
 8004432:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004436:	e008      	b.n	800444a <HAL_UART_Receive+0xd2>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	223f      	movs	r2, #63	@ 0x3f
 800443c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004440:	e003      	b.n	800444a <HAL_UART_Receive+0xd2>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004450:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445a:	d108      	bne.n	800446e <HAL_UART_Receive+0xf6>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	e003      	b.n	8004476 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004476:	e032      	b.n	80044de <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	2120      	movs	r1, #32
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fee1 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e032      	b.n	80044f8 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10c      	bne.n	80044b2 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	b29a      	uxth	r2, r3
 80044a0:	8a7b      	ldrh	r3, [r7, #18]
 80044a2:	4013      	ands	r3, r2
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	3302      	adds	r3, #2
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	e00c      	b.n	80044cc <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	8a7b      	ldrh	r3, [r7, #18]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4013      	ands	r3, r2
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1c6      	bne.n	8004478 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b0ba      	sub	sp, #232	@ 0xe8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004526:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800452a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800452e:	4013      	ands	r3, r2
 8004530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11b      	bne.n	8004574 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 82e3 	beq.w	8004b30 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
      }
      return;
 8004572:	e2dd      	b.n	8004b30 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8123 	beq.w	80047c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800457e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004582:	4b8d      	ldr	r3, [pc, #564]	@ (80047b8 <HAL_UART_IRQHandler+0x2b8>)
 8004584:	4013      	ands	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800458a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800458e:	4b8b      	ldr	r3, [pc, #556]	@ (80047bc <HAL_UART_IRQHandler+0x2bc>)
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8116 	beq.w	80047c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d011      	beq.n	80045c8 <HAL_UART_IRQHandler+0xc8>
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2201      	movs	r2, #1
 80045b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d011      	beq.n	80045f8 <HAL_UART_IRQHandler+0xf8>
 80045d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2202      	movs	r2, #2
 80045e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d011      	beq.n	8004628 <HAL_UART_IRQHandler+0x128>
 8004604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00b      	beq.n	8004628 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2204      	movs	r2, #4
 8004616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461e:	f043 0202 	orr.w	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d017      	beq.n	8004664 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004640:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004644:	4b5c      	ldr	r3, [pc, #368]	@ (80047b8 <HAL_UART_IRQHandler+0x2b8>)
 8004646:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2208      	movs	r2, #8
 8004652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465a:	f043 0208 	orr.w	r2, r3, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <HAL_UART_IRQHandler+0x196>
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8249 	beq.w	8004b34 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d013      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b40      	cmp	r3, #64	@ 0x40
 80046ec:	d005      	beq.n	80046fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d054      	beq.n	80047a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fe6d 	bl	80053da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470a:	2b40      	cmp	r3, #64	@ 0x40
 800470c:	d146      	bne.n	800479c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800472c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800473a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800473e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1d9      	bne.n	800470e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d017      	beq.n	8004794 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800476a:	4a15      	ldr	r2, [pc, #84]	@ (80047c0 <HAL_UART_IRQHandler+0x2c0>)
 800476c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd f8c0 	bl	80018fa <HAL_DMA_Abort_IT>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800478e:	4610      	mov	r0, r2
 8004790:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004792:	e00f      	b.n	80047b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9e0 	bl	8004b5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479a:	e00b      	b.n	80047b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f9dc 	bl	8004b5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a2:	e007      	b.n	80047b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9d8 	bl	8004b5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80047b2:	e1bf      	b.n	8004b34 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	bf00      	nop
    return;
 80047b6:	e1bd      	b.n	8004b34 <HAL_UART_IRQHandler+0x634>
 80047b8:	10000001 	.word	0x10000001
 80047bc:	04000120 	.word	0x04000120
 80047c0:	080054a5 	.word	0x080054a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 8153 	bne.w	8004a74 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 814c 	beq.w	8004a74 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8145 	beq.w	8004a74 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2210      	movs	r2, #16
 80047f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fc:	2b40      	cmp	r3, #64	@ 0x40
 80047fe:	f040 80bb 	bne.w	8004978 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 818f 	beq.w	8004b38 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004820:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004824:	429a      	cmp	r2, r3
 8004826:	f080 8187 	bcs.w	8004b38 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004830:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 8087 	bne.w	8004956 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800485c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004864:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004876:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800487e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800488a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1da      	bne.n	8004848 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e1      	bne.n	8004892 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e3      	bne.n	80048ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004924:	f023 0310 	bic.w	r3, r3, #16
 8004928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004936:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004938:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800493c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e4      	bne.n	8004914 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc ff74 	bl	800183e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004968:	b29b      	uxth	r3, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	b29b      	uxth	r3, r3
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8fb 	bl	8004b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004976:	e0df      	b.n	8004b38 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004984:	b29b      	uxth	r3, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80d1 	beq.w	8004b3c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800499a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80cc 	beq.w	8004b3c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80049c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e4      	bne.n	80049a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a02:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e1      	bne.n	80049da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e4      	bne.n	8004a2a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f87d 	bl	8004b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a72:	e063      	b.n	8004b3c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00e      	beq.n	8004a9e <HAL_UART_IRQHandler+0x59e>
 8004a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fd45 	bl	8005526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a9c:	e051      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d014      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03a      	beq.n	8004b40 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
    }
    return;
 8004ad2:	e035      	b.n	8004b40 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_UART_IRQHandler+0x5f4>
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fcef 	bl	80054d0 <UART_EndTransmit_IT>
    return;
 8004af2:	e026      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_UART_IRQHandler+0x614>
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fd1c 	bl	800554a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b12:	e016      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <HAL_UART_IRQHandler+0x642>
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	da0c      	bge.n	8004b42 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fd05 	bl	8005538 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b2e:	e008      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
      return;
 8004b30:	bf00      	nop
 8004b32:	e006      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
    return;
 8004b34:	bf00      	nop
 8004b36:	e004      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
      return;
 8004b38:	bf00      	nop
 8004b3a:	e002      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
      return;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_IRQHandler+0x642>
    return;
 8004b40:	bf00      	nop
  }
}
 8004b42:	37e8      	adds	r7, #232	@ 0xe8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
	...

08004b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b08c      	sub	sp, #48	@ 0x30
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b94      	ldr	r3, [pc, #592]	@ (8004e04 <UART_SetConfig+0x280>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a89      	ldr	r2, [pc, #548]	@ (8004e08 <UART_SetConfig+0x284>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bec:	4313      	orrs	r3, r2
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004bfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	f023 010f 	bic.w	r1, r3, #15
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7a      	ldr	r2, [pc, #488]	@ (8004e0c <UART_SetConfig+0x288>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d127      	bne.n	8004c78 <UART_SetConfig+0xf4>
 8004c28:	2003      	movs	r0, #3
 8004c2a:	f7ff faae 	bl	800418a <LL_RCC_GetUSARTClockSource>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d81b      	bhi.n	8004c70 <UART_SetConfig+0xec>
 8004c38:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0xbc>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	e080      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	e07c      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c66:	e078      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e074      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e070      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a64      	ldr	r2, [pc, #400]	@ (8004e10 <UART_SetConfig+0x28c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d138      	bne.n	8004cf4 <UART_SetConfig+0x170>
 8004c82:	200c      	movs	r0, #12
 8004c84:	f7ff fa81 	bl	800418a <LL_RCC_GetUSARTClockSource>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d82c      	bhi.n	8004cec <UART_SetConfig+0x168>
 8004c92:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <UART_SetConfig+0x114>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004ced 	.word	0x08004ced
 8004ca8:	08004cdd 	.word	0x08004cdd
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004ced 	.word	0x08004ced
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004ce5 	.word	0x08004ce5
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e042      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e03e      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce2:	e03a      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cea:	e036      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf2:	e032      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a43      	ldr	r2, [pc, #268]	@ (8004e08 <UART_SetConfig+0x284>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12a      	bne.n	8004d54 <UART_SetConfig+0x1d0>
 8004cfe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004d02:	f7ff fa54 	bl	80041ae <LL_RCC_GetLPUARTClockSource>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d0c:	d01a      	beq.n	8004d44 <UART_SetConfig+0x1c0>
 8004d0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d12:	d81b      	bhi.n	8004d4c <UART_SetConfig+0x1c8>
 8004d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d18:	d00c      	beq.n	8004d34 <UART_SetConfig+0x1b0>
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1e:	d815      	bhi.n	8004d4c <UART_SetConfig+0x1c8>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <UART_SetConfig+0x1a8>
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d28:	d008      	beq.n	8004d3c <UART_SetConfig+0x1b8>
 8004d2a:	e00f      	b.n	8004d4c <UART_SetConfig+0x1c8>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d32:	e012      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3a:	e00e      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d42:	e00a      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4a:	e006      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d52:	e002      	b.n	8004d5a <UART_SetConfig+0x1d6>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e08 <UART_SetConfig+0x284>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	f040 80a4 	bne.w	8004eae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d823      	bhi.n	8004db6 <UART_SetConfig+0x232>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <UART_SetConfig+0x1f0>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004da7 	.word	0x08004da7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004db7 	.word	0x08004db7
 8004d94:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fd ffae 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9e:	e010      	b.n	8004dc2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e14 <UART_SetConfig+0x290>)
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004da4:	e00d      	b.n	8004dc2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7fd fef3 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8004daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dac:	e009      	b.n	8004dc2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004db4:	e005      	b.n	8004dc2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8137 	beq.w	8005038 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	4a12      	ldr	r2, [pc, #72]	@ (8004e18 <UART_SetConfig+0x294>)
 8004dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d305      	bcc.n	8004dfa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d910      	bls.n	8004e1c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e00:	e11a      	b.n	8005038 <UART_SetConfig+0x4b4>
 8004e02:	bf00      	nop
 8004e04:	cfff69f3 	.word	0xcfff69f3
 8004e08:	40008000 	.word	0x40008000
 8004e0c:	40013800 	.word	0x40013800
 8004e10:	40004400 	.word	0x40004400
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	0800e510 	.word	0x0800e510
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	60fa      	str	r2, [r7, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	4a8e      	ldr	r2, [pc, #568]	@ (8005064 <UART_SetConfig+0x4e0>)
 8004e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2200      	movs	r2, #0
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e3e:	f7fb f9f7 	bl	8000230 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	020b      	lsls	r3, r1, #8
 8004e54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e58:	0202      	lsls	r2, r0, #8
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	6849      	ldr	r1, [r1, #4]
 8004e5e:	0849      	lsrs	r1, r1, #1
 8004e60:	2000      	movs	r0, #0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4605      	mov	r5, r0
 8004e66:	eb12 0804 	adds.w	r8, r2, r4
 8004e6a:	eb43 0905 	adc.w	r9, r3, r5
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	469a      	mov	sl, r3
 8004e76:	4693      	mov	fp, r2
 8004e78:	4652      	mov	r2, sl
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	4649      	mov	r1, r9
 8004e80:	f7fb f9d6 	bl	8000230 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e92:	d308      	bcc.n	8004ea6 <UART_SetConfig+0x322>
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9a:	d204      	bcs.n	8004ea6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e0c8      	b.n	8005038 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eac:	e0c4      	b.n	8005038 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb6:	d167      	bne.n	8004f88 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d828      	bhi.n	8004f12 <UART_SetConfig+0x38e>
 8004ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x344>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fd ff04 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fd ff12 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b5a      	ldr	r3, [pc, #360]	@ (8005068 <UART_SetConfig+0x4e4>)
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fd fe45 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8004f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8089 	beq.w	8005038 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8005064 <UART_SetConfig+0x4e0>)
 8004f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f38:	005a      	lsls	r2, r3, #1
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	441a      	add	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d916      	bls.n	8004f80 <UART_SetConfig+0x3fc>
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d212      	bcs.n	8004f80 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f023 030f 	bic.w	r3, r3, #15
 8004f62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	8bfb      	ldrh	r3, [r7, #30]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	8bfa      	ldrh	r2, [r7, #30]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	e05b      	b.n	8005038 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f86:	e057      	b.n	8005038 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d828      	bhi.n	8004fe2 <UART_SetConfig+0x45e>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0x414>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fe3 	.word	0x08004fe3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fe3 	.word	0x08004fe3
 8004fb4:	08004fe3 	.word	0x08004fe3
 8004fb8:	08004fdb 	.word	0x08004fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fd fe9c 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fc2:	e014      	b.n	8004fee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fd feaa 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8004fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fca:	e010      	b.n	8004fee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b26      	ldr	r3, [pc, #152]	@ (8005068 <UART_SetConfig+0x4e4>)
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fd0:	e00d      	b.n	8004fee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7fd fddd 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fd8:	e009      	b.n	8004fee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe0:	e005      	b.n	8004fee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fec:	bf00      	nop
    }

    if (pclk != 0U)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d021      	beq.n	8005038 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8005064 <UART_SetConfig+0x4e0>)
 8004ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	fbb3 f2f2 	udiv	r2, r3, r2
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	441a      	add	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d909      	bls.n	8005032 <UART_SetConfig+0x4ae>
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005024:	d205      	bcs.n	8005032 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	b29a      	uxth	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e002      	b.n	8005038 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2201      	movs	r2, #1
 800503c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2201      	movs	r2, #1
 8005044:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2200      	movs	r2, #0
 8005052:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005054:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005058:	4618      	mov	r0, r3
 800505a:	3730      	adds	r7, #48	@ 0x30
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	0800e510 	.word	0x0800e510
 8005068:	00f42400 	.word	0x00f42400

0800506c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01a      	beq.n	8005182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516a:	d10a      	bne.n	8005182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af02      	add	r7, sp, #8
 80051b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051be:	f7fc f865 	bl	800128c <HAL_GetTick>
 80051c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d10e      	bne.n	80051f0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f832 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e028      	b.n	8005242 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d10e      	bne.n	800521c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f81c 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e012      	b.n	8005242 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b09c      	sub	sp, #112	@ 0x70
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525a:	e0a9      	b.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	f000 80a5 	beq.w	80053b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fc f811 	bl	800128c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <UART_WaitOnFlagUntilTimeout+0x32>
 8005276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005278:	2b00      	cmp	r3, #0
 800527a:	d140      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800528a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800528c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005290:	667b      	str	r3, [r7, #100]	@ 0x64
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800529a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800529c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80052a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80052a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e6      	bne.n	800527c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052ce:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e069      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d051      	beq.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531a:	d149      	bne.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005324:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800533a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
 8005346:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800534a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	613b      	str	r3, [r7, #16]
   return(result);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005378:	623a      	str	r2, [r7, #32]
 800537a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	69f9      	ldr	r1, [r7, #28]
 800537e:	6a3a      	ldr	r2, [r7, #32]
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	61bb      	str	r3, [r7, #24]
   return(result);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e010      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	f43f af46 	beq.w	800525c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3770      	adds	r7, #112	@ 0x70
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053da:	b480      	push	{r7}
 80053dc:	b095      	sub	sp, #84	@ 0x54
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005400:	643b      	str	r3, [r7, #64]	@ 0x40
 8005402:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	61fb      	str	r3, [r7, #28]
   return(result);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e3      	bne.n	8005414 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d118      	bne.n	8005486 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	60bb      	str	r3, [r7, #8]
   return(result);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0310 	bic.w	r3, r3, #16
 8005468:	647b      	str	r3, [r7, #68]	@ 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800549a:	bf00      	nop
 800549c:	3754      	adds	r7, #84	@ 0x54
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fb49 	bl	8004b5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c8:	bf00      	nop
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6979      	ldr	r1, [r7, #20]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	613b      	str	r3, [r7, #16]
   return(result);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fb15 	bl	8004b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800551e:	bf00      	nop
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_UARTEx_EnableFifoMode+0x16>
 800556e:	2302      	movs	r3, #2
 8005570:	e02b      	b.n	80055ca <HAL_UARTEx_EnableFifoMode+0x6e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2224      	movs	r2, #36	@ 0x24
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80055a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f88a 	bl	80056cc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e02d      	b.n	8005646 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	@ 0x24
 80055f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f850 	bl	80056cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005662:	2302      	movs	r3, #2
 8005664:	e02d      	b.n	80056c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	@ 0x24
 8005672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f812 	bl	80056cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d108      	bne.n	80056ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056ec:	e031      	b.n	8005752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056ee:	2308      	movs	r3, #8
 80056f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056f2:	2308      	movs	r3, #8
 80056f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	0e5b      	lsrs	r3, r3, #25
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	0f5b      	lsrs	r3, r3, #29
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	7b3a      	ldrb	r2, [r7, #12]
 800571a:	4910      	ldr	r1, [pc, #64]	@ (800575c <UARTEx_SetNbDataToProcess+0x90>)
 800571c:	5c8a      	ldrb	r2, [r1, r2]
 800571e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005722:	7b3a      	ldrb	r2, [r7, #12]
 8005724:	490e      	ldr	r1, [pc, #56]	@ (8005760 <UARTEx_SetNbDataToProcess+0x94>)
 8005726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005728:	fb93 f3f2 	sdiv	r3, r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	7b7a      	ldrb	r2, [r7, #13]
 8005738:	4908      	ldr	r1, [pc, #32]	@ (800575c <UARTEx_SetNbDataToProcess+0x90>)
 800573a:	5c8a      	ldrb	r2, [r1, r2]
 800573c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005740:	7b7a      	ldrb	r2, [r7, #13]
 8005742:	4907      	ldr	r1, [pc, #28]	@ (8005760 <UARTEx_SetNbDataToProcess+0x94>)
 8005744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005746:	fb93 f3f2 	sdiv	r3, r3, r2
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr
 800575c:	0800e528 	.word	0x0800e528
 8005760:	0800e530 	.word	0x0800e530

08005764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005776:	f3ef 8305 	mrs	r3, IPSR
 800577a:	60bb      	str	r3, [r7, #8]
  return(result);
 800577c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005782:	f3ef 8310 	mrs	r3, PRIMASK
 8005786:	607b      	str	r3, [r7, #4]
  return(result);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800578e:	f3ef 8311 	mrs	r3, BASEPRI
 8005792:	603b      	str	r3, [r7, #0]
  return(result);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <osKernelInitialize+0x3a>
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <osKernelInitialize+0x60>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d103      	bne.n	80057aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80057a2:	f06f 0305 	mvn.w	r3, #5
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e00c      	b.n	80057c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057aa:	4b09      	ldr	r3, [pc, #36]	@ (80057d0 <osKernelInitialize+0x60>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d105      	bne.n	80057be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <osKernelInitialize+0x60>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e002      	b.n	80057c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80057be:	f04f 33ff 	mov.w	r3, #4294967295
 80057c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057c4:	68fb      	ldr	r3, [r7, #12]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	20000cc4 	.word	0x20000cc4

080057d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057da:	f3ef 8305 	mrs	r3, IPSR
 80057de:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10f      	bne.n	8005806 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ea:	607b      	str	r3, [r7, #4]
  return(result);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057f2:	f3ef 8311 	mrs	r3, BASEPRI
 80057f6:	603b      	str	r3, [r7, #0]
  return(result);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <osKernelStart+0x3a>
 80057fe:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <osKernelStart+0x68>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d103      	bne.n	800580e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005806:	f06f 0305 	mvn.w	r3, #5
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e010      	b.n	8005830 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <osKernelStart+0x68>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d109      	bne.n	800582a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005816:	f7ff ffa5 	bl	8005764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800581a:	4b08      	ldr	r3, [pc, #32]	@ (800583c <osKernelStart+0x68>)
 800581c:	2202      	movs	r2, #2
 800581e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005820:	f002 f8d6 	bl	80079d0 <vTaskStartScheduler>
      stat = osOK;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005830:	68fb      	ldr	r3, [r7, #12]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000cc4 	.word	0x20000cc4

08005840 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b090      	sub	sp, #64	@ 0x40
 8005844:	af04      	add	r7, sp, #16
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005850:	f3ef 8305 	mrs	r3, IPSR
 8005854:	61fb      	str	r3, [r7, #28]
  return(result);
 8005856:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 808f 	bne.w	800597c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800585e:	f3ef 8310 	mrs	r3, PRIMASK
 8005862:	61bb      	str	r3, [r7, #24]
  return(result);
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800586a:	f3ef 8311 	mrs	r3, BASEPRI
 800586e:	617b      	str	r3, [r7, #20]
  return(result);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <osThreadNew+0x3e>
 8005876:	4b44      	ldr	r3, [pc, #272]	@ (8005988 <osThreadNew+0x148>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d07e      	beq.n	800597c <osThreadNew+0x13c>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d07b      	beq.n	800597c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005888:	2318      	movs	r3, #24
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d045      	beq.n	8005928 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <osThreadNew+0x6a>
        name = attr->name;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <osThreadNew+0x90>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	2b38      	cmp	r3, #56	@ 0x38
 80058c2:	d805      	bhi.n	80058d0 <osThreadNew+0x90>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <osThreadNew+0x94>
        return (NULL);
 80058d0:	2300      	movs	r3, #0
 80058d2:	e054      	b.n	800597e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00e      	beq.n	800590a <osThreadNew+0xca>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2ba7      	cmp	r3, #167	@ 0xa7
 80058f2:	d90a      	bls.n	800590a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <osThreadNew+0xca>
        mem = 1;
 8005904:	2301      	movs	r3, #1
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	e010      	b.n	800592c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10c      	bne.n	800592c <osThreadNew+0xec>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d108      	bne.n	800592c <osThreadNew+0xec>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <osThreadNew+0xec>
          mem = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	623b      	str	r3, [r7, #32]
 8005926:	e001      	b.n	800592c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d110      	bne.n	8005954 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800593a:	9202      	str	r2, [sp, #8]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f001 fe4d 	bl	80075e8 <xTaskCreateStatic>
 800594e:	4603      	mov	r3, r0
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	e013      	b.n	800597c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d110      	bne.n	800597c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	b29a      	uxth	r2, r3
 800595e:	f107 0310 	add.w	r3, r7, #16
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f001 fe9b 	bl	80076a8 <xTaskCreate>
 8005972:	4603      	mov	r3, r0
 8005974:	2b01      	cmp	r3, #1
 8005976:	d001      	beq.n	800597c <osThreadNew+0x13c>
          hTask = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800597c:	693b      	ldr	r3, [r7, #16]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3730      	adds	r7, #48	@ 0x30
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000cc4 	.word	0x20000cc4

0800598c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005994:	f3ef 8305 	mrs	r3, IPSR
 8005998:	613b      	str	r3, [r7, #16]
  return(result);
 800599a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10f      	bne.n	80059c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a0:	f3ef 8310 	mrs	r3, PRIMASK
 80059a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059ac:	f3ef 8311 	mrs	r3, BASEPRI
 80059b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <osDelay+0x3c>
 80059b8:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <osDelay+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d103      	bne.n	80059c8 <osDelay+0x3c>
    stat = osErrorISR;
 80059c0:	f06f 0305 	mvn.w	r3, #5
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e007      	b.n	80059d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 ffc6 	bl	8007964 <vTaskDelay>
    }
  }

  return (stat);
 80059d8:	697b      	ldr	r3, [r7, #20]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000cc4 	.word	0x20000cc4

080059e8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f4:	f3ef 8305 	mrs	r3, IPSR
 80059f8:	617b      	str	r3, [r7, #20]
  return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d13d      	bne.n	8005a7c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	613b      	str	r3, [r7, #16]
  return(result);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <osEventFlagsNew+0x38>
 8005a18:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <osEventFlagsNew+0xa0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d02d      	beq.n	8005a7c <osEventFlagsNew+0x94>
    mem = -1;
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d015      	beq.n	8005a58 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d006      	beq.n	8005a42 <osEventFlagsNew+0x5a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b1f      	cmp	r3, #31
 8005a3a:	d902      	bls.n	8005a42 <osEventFlagsNew+0x5a>
        mem = 1;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	e00c      	b.n	8005a5c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <osEventFlagsNew+0x74>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <osEventFlagsNew+0x74>
          mem = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e001      	b.n	8005a5c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d106      	bne.n	8005a70 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fbb0 	bl	80061cc <xEventGroupCreateStatic>
 8005a6c:	61f8      	str	r0, [r7, #28]
 8005a6e:	e005      	b.n	8005a7c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8005a76:	f000 fbe2 	bl	800623e <xEventGroupCreate>
 8005a7a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000cc4 	.word	0x20000cc4

08005a8c <osEventFlagsClear>:
  }

  return (rflags);
}

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <osEventFlagsClear+0x1c>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aa6:	d303      	bcc.n	8005ab0 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8005aa8:	f06f 0303 	mvn.w	r3, #3
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e029      	b.n	8005b04 <osEventFlagsClear+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ab0:	f3ef 8305 	mrs	r3, IPSR
 8005ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10f      	bne.n	8005adc <osEventFlagsClear+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005abc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <osEventFlagsClear+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8005acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <osEventFlagsClear+0x6e>
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b10 <osEventFlagsClear+0x84>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d10e      	bne.n	8005afa <osEventFlagsClear+0x6e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8005adc:	69b8      	ldr	r0, [r7, #24]
 8005ade:	f000 fce9 	bl	80064b4 <xEventGroupGetBitsFromISR>
 8005ae2:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	69b8      	ldr	r0, [r7, #24]
 8005ae8:	f000 fcd0 	bl	800648c <xEventGroupClearBitsFromISR>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <osEventFlagsClear+0x78>
      rflags = (uint32_t)osErrorResource;
 8005af2:	f06f 0302 	mvn.w	r3, #2
 8005af6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8005af8:	e004      	b.n	8005b04 <osEventFlagsClear+0x78>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	69b8      	ldr	r0, [r7, #24]
 8005afe:	f000 fc8b 	bl	8006418 <xEventGroupClearBits>
 8005b02:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8005b04:	69fb      	ldr	r3, [r7, #28]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000cc4 	.word	0x20000cc4

08005b14 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	@ 0x38
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <osEventFlagsWait+0x20>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b32:	d303      	bcc.n	8005b3c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8005b34:	f06f 0303 	mvn.w	r3, #3
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3a:	e059      	b.n	8005bf0 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3c:	f3ef 8305 	mrs	r3, IPSR
 8005b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b42:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b48:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b54:	f3ef 8311 	mrs	r3, BASEPRI
 8005b58:	617b      	str	r3, [r7, #20]
  return(result);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <osEventFlagsWait+0x5c>
 8005b60:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <osEventFlagsWait+0xe8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d103      	bne.n	8005b70 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 8005b68:	f06f 0305 	mvn.w	r3, #5
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	e03f      	b.n	8005bf0 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7e:	e001      	b.n	8005b84 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b92:	e001      	b.n	8005b98 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	6a38      	ldr	r0, [r7, #32]
 8005ba4:	f000 fb66 	bl	8006274 <xEventGroupWaitBits>
 8005ba8:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d019      	beq.n	8005bf0 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 8005bc2:	f06f 0301 	mvn.w	r3, #1
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc8:	e012      	b.n	8005bf0 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005bca:	f06f 0302 	mvn.w	r3, #2
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd0:	e00e      	b.n	8005bf0 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 8005be2:	f06f 0301 	mvn.w	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be8:	e002      	b.n	8005bf0 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005bea:	f06f 0302 	mvn.w	r3, #2
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3730      	adds	r7, #48	@ 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000cc4 	.word	0x20000cc4

08005c00 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	@ 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c0c:	f3ef 8305 	mrs	r3, IPSR
 8005c10:	613b      	str	r3, [r7, #16]
  return(result);
 8005c12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8085 	bne.w	8005d24 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c26:	f3ef 8311 	mrs	r3, BASEPRI
 8005c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <osMutexNew+0x3a>
 8005c32:	4b3f      	ldr	r3, [pc, #252]	@ (8005d30 <osMutexNew+0x130>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d074      	beq.n	8005d24 <osMutexNew+0x124>
    if (attr != NULL) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	e001      	b.n	8005c4c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <osMutexNew+0x5c>
      rmtx = 1U;
 8005c56:	2301      	movs	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e001      	b.n	8005c60 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d15c      	bne.n	8005d24 <osMutexNew+0x124>
      mem = -1;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d015      	beq.n	8005ca2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d006      	beq.n	8005c8c <osMutexNew+0x8c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c84:	d902      	bls.n	8005c8c <osMutexNew+0x8c>
          mem = 1;
 8005c86:	2301      	movs	r3, #1
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	e00c      	b.n	8005ca6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <osMutexNew+0xa6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <osMutexNew+0xa6>
            mem = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	e001      	b.n	8005ca6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d112      	bne.n	8005cd2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	2004      	movs	r0, #4
 8005cba:	f000 fe78 	bl	80069ae <xQueueCreateMutexStatic>
 8005cbe:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cc0:	e016      	b.n	8005cf0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f000 fe70 	bl	80069ae <xQueueCreateMutexStatic>
 8005cce:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cd0:	e00e      	b.n	8005cf0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005cde:	2004      	movs	r0, #4
 8005ce0:	f000 fe4d 	bl	800697e <xQueueCreateMutex>
 8005ce4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ce6:	e003      	b.n	8005cf0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f000 fe48 	bl	800697e <xQueueCreateMutex>
 8005cee:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <osMutexNew+0x110>
        if (attr != NULL) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <osMutexNew+0x104>
          name = attr->name;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	e001      	b.n	8005d08 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d0c:	f001 fc10 	bl	8007530 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d006      	beq.n	8005d24 <osMutexNew+0x124>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000cc4 	.word	0x20000cc4

08005d34 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d52:	f3ef 8305 	mrs	r3, IPSR
 8005d56:	613b      	str	r3, [r7, #16]
  return(result);
 8005d58:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d62:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <osMutexAcquire+0x52>
 8005d76:	4b1d      	ldr	r3, [pc, #116]	@ (8005dec <osMutexAcquire+0xb8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d103      	bne.n	8005d86 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005d7e:	f06f 0305 	mvn.w	r3, #5
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e02c      	b.n	8005de0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005d8c:	f06f 0303 	mvn.w	r3, #3
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e025      	b.n	8005de0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d011      	beq.n	8005dbe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	69b8      	ldr	r0, [r7, #24]
 8005d9e:	f000 fe56 	bl	8006a4e <xQueueTakeMutexRecursive>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d01b      	beq.n	8005de0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005dae:	f06f 0301 	mvn.w	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e014      	b.n	8005de0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005db6:	f06f 0302 	mvn.w	r3, #2
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e010      	b.n	8005de0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	69b8      	ldr	r0, [r7, #24]
 8005dc2:	f001 f8fb 	bl	8006fbc <xQueueSemaphoreTake>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d009      	beq.n	8005de0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005dd2:	f06f 0301 	mvn.w	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e002      	b.n	8005de0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005dda:	f06f 0302 	mvn.w	r3, #2
 8005dde:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005de0:	69fb      	ldr	r3, [r7, #28]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000cc4 	.word	0x20000cc4

08005df0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0c:	f3ef 8305 	mrs	r3, IPSR
 8005e10:	613b      	str	r3, [r7, #16]
  return(result);
 8005e12:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10f      	bne.n	8005e38 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e18:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e24:	f3ef 8311 	mrs	r3, BASEPRI
 8005e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <osMutexRelease+0x50>
 8005e30:	4b16      	ldr	r3, [pc, #88]	@ (8005e8c <osMutexRelease+0x9c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d103      	bne.n	8005e40 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005e38:	f06f 0305 	mvn.w	r3, #5
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e01f      	b.n	8005e80 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005e46:	f06f 0303 	mvn.w	r3, #3
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	e018      	b.n	8005e80 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005e54:	69b8      	ldr	r0, [r7, #24]
 8005e56:	f000 fdc5 	bl	80069e4 <xQueueGiveMutexRecursive>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d00f      	beq.n	8005e80 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005e60:	f06f 0302 	mvn.w	r3, #2
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	e00b      	b.n	8005e80 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	69b8      	ldr	r0, [r7, #24]
 8005e70:	f000 fe24 	bl	8006abc <xQueueGenericSend>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d002      	beq.n	8005e80 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005e7a:	f06f 0302 	mvn.w	r3, #2
 8005e7e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005e80:	69fb      	ldr	r3, [r7, #28]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000cc4 	.word	0x20000cc4

08005e90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	@ 0x30
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea0:	f3ef 8305 	mrs	r3, IPSR
 8005ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ea6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d16f      	bne.n	8005f8c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eac:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <osMessageQueueNew+0x3c>
 8005ec4:	4b34      	ldr	r3, [pc, #208]	@ (8005f98 <osMessageQueueNew+0x108>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d05f      	beq.n	8005f8c <osMessageQueueNew+0xfc>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d05c      	beq.n	8005f8c <osMessageQueueNew+0xfc>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d059      	beq.n	8005f8c <osMessageQueueNew+0xfc>
    mem = -1;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d029      	beq.n	8005f38 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d012      	beq.n	8005f12 <osMessageQueueNew+0x82>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ef2:	d90e      	bls.n	8005f12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <osMessageQueueNew+0x82>
        mem = 1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	e014      	b.n	8005f3c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d110      	bne.n	8005f3c <osMessageQueueNew+0xac>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10c      	bne.n	8005f3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d108      	bne.n	8005f3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d104      	bne.n	8005f3c <osMessageQueueNew+0xac>
          mem = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	e001      	b.n	8005f3c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d10b      	bne.n	8005f5a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	9100      	str	r1, [sp, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fc19 	bl	8006788 <xQueueGenericCreateStatic>
 8005f56:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f58:	e008      	b.n	8005f6c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f60:	2200      	movs	r2, #0
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fc8c 	bl	8006882 <xQueueGenericCreate>
 8005f6a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00c      	beq.n	8005f8c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e001      	b.n	8005f84 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f88:	f001 fad2 	bl	8007530 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000cc4 	.word	0x20000cc4

08005f9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb4:	f3ef 8305 	mrs	r3, IPSR
 8005fb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02c      	beq.n	8006032 <osMessageQueuePut+0x96>
 8005fd8:	4b28      	ldr	r3, [pc, #160]	@ (800607c <osMessageQueuePut+0xe0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d128      	bne.n	8006032 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <osMessageQueuePut+0x56>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <osMessageQueuePut+0x56>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005ff2:	f06f 0303 	mvn.w	r3, #3
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ff8:	e039      	b.n	800606e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ffe:	f107 0210 	add.w	r2, r7, #16
 8006002:	2300      	movs	r3, #0
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	6a38      	ldr	r0, [r7, #32]
 8006008:	f000 fe5a 	bl	8006cc0 <xQueueGenericSendFromISR>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d003      	beq.n	800601a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006012:	f06f 0302 	mvn.w	r3, #2
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006018:	e029      	b.n	800606e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d026      	beq.n	800606e <osMessageQueuePut+0xd2>
 8006020:	4b17      	ldr	r3, [pc, #92]	@ (8006080 <osMessageQueuePut+0xe4>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006030:	e01d      	b.n	800606e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <osMessageQueuePut+0xa2>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800603e:	f06f 0303 	mvn.w	r3, #3
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	e014      	b.n	8006070 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006046:	2300      	movs	r3, #0
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	6a38      	ldr	r0, [r7, #32]
 800604e:	f000 fd35 	bl	8006abc <xQueueGenericSend>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d00b      	beq.n	8006070 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800605e:	f06f 0301 	mvn.w	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	e004      	b.n	8006070 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006066:	f06f 0302 	mvn.w	r3, #2
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
 800606c:	e000      	b.n	8006070 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800606e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000cc4 	.word	0x20000cc4
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	@ 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609a:	f3ef 8305 	mrs	r3, IPSR
 800609e:	61fb      	str	r3, [r7, #28]
  return(result);
 80060a0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a6:	f3ef 8310 	mrs	r3, PRIMASK
 80060aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b2:	f3ef 8311 	mrs	r3, BASEPRI
 80060b6:	617b      	str	r3, [r7, #20]
  return(result);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d02c      	beq.n	8006118 <osMessageQueueGet+0x94>
 80060be:	4b28      	ldr	r3, [pc, #160]	@ (8006160 <osMessageQueueGet+0xdc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d128      	bne.n	8006118 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <osMessageQueueGet+0x54>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <osMessageQueueGet+0x54>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80060d8:	f06f 0303 	mvn.w	r3, #3
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060de:	e038      	b.n	8006152 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	461a      	mov	r2, r3
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	6a38      	ldr	r0, [r7, #32]
 80060ee:	f001 f875 	bl	80071dc <xQueueReceiveFromISR>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d003      	beq.n	8006100 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060f8:	f06f 0302 	mvn.w	r3, #2
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060fe:	e028      	b.n	8006152 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d025      	beq.n	8006152 <osMessageQueueGet+0xce>
 8006106:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <osMessageQueueGet+0xe0>)
 8006108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006116:	e01c      	b.n	8006152 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <osMessageQueueGet+0xa0>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006124:	f06f 0303 	mvn.w	r3, #3
 8006128:	627b      	str	r3, [r7, #36]	@ 0x24
 800612a:	e013      	b.n	8006154 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	6a38      	ldr	r0, [r7, #32]
 8006132:	f000 fe61 	bl	8006df8 <xQueueReceive>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d00b      	beq.n	8006154 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006142:	f06f 0301 	mvn.w	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
 8006148:	e004      	b.n	8006154 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800614a:	f06f 0302 	mvn.w	r3, #2
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006150:	e000      	b.n	8006154 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006152:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006156:	4618      	mov	r0, r3
 8006158:	3728      	adds	r7, #40	@ 0x28
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000cc4 	.word	0x20000cc4
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a06      	ldr	r2, [pc, #24]	@ (8006190 <vApplicationGetIdleTaskMemory+0x28>)
 8006178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4a05      	ldr	r2, [pc, #20]	@ (8006194 <vApplicationGetIdleTaskMemory+0x2c>)
 800617e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2280      	movs	r2, #128	@ 0x80
 8006184:	601a      	str	r2, [r3, #0]
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	20000cc8 	.word	0x20000cc8
 8006194:	20000d70 	.word	0x20000d70

08006198 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4a07      	ldr	r2, [pc, #28]	@ (80061c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80061a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4a06      	ldr	r2, [pc, #24]	@ (80061c8 <vApplicationGetTimerTaskMemory+0x30>)
 80061ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061b6:	601a      	str	r2, [r3, #0]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000f70 	.word	0x20000f70
 80061c8:	20001018 	.word	0x20001018

080061cc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10b      	bne.n	80061f2 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80061f2:	2320      	movs	r3, #32
 80061f4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d00b      	beq.n	8006214 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60fb      	str	r3, [r7, #12]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3304      	adds	r3, #4
 8006228:	4618      	mov	r0, r3
 800622a:	f000 f994 	bl	8006556 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2201      	movs	r2, #1
 8006232:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006234:	697b      	ldr	r3, [r7, #20]
	}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006244:	2020      	movs	r0, #32
 8006246:	f002 ffe3 	bl	8009210 <pvPortMalloc>
 800624a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f97a 	bl	8006556 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006268:	687b      	ldr	r3, [r7, #4]
	}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b090      	sub	sp, #64	@ 0x40
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <xEventGroupWaitBits+0x38>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	623b      	str	r3, [r7, #32]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062b2:	d30b      	bcc.n	80062cc <xEventGroupWaitBits+0x58>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	61fb      	str	r3, [r7, #28]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xEventGroupWaitBits+0x76>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	61bb      	str	r3, [r7, #24]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ea:	f002 f82d 	bl	8008348 <xTaskGetSchedulerState>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <xEventGroupWaitBits+0x86>
 80062f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xEventGroupWaitBits+0x8a>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <xEventGroupWaitBits+0x8c>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	617b      	str	r3, [r7, #20]
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800631c:	f001 fbc8 	bl	8007ab0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800632c:	f000 f8f2 	bl	8006514 <prvTestWaitCondition>
 8006330:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00e      	beq.n	8006356 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800633c:	2300      	movs	r3, #0
 800633e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d028      	beq.n	8006398 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	43db      	mvns	r3, r3
 800634e:	401a      	ands	r2, r3
 8006350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e020      	b.n	8006398 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	633b      	str	r3, [r7, #48]	@ 0x30
 8006364:	e018      	b.n	8006398 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006372:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006380:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006384:	1d18      	adds	r0, r3, #4
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	4313      	orrs	r3, r2
 800638c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800638e:	4619      	mov	r1, r3
 8006390:	f001 fd9c 	bl	8007ecc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006398:	f001 fb98 	bl	8007acc <xTaskResumeAll>
 800639c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800639e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d031      	beq.n	8006408 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d107      	bne.n	80063ba <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80063aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006414 <xEventGroupWaitBits+0x1a0>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80063ba:	f002 f93f 	bl	800863c <uxTaskResetEventItemValue>
 80063be:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80063c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d11a      	bne.n	8006400 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80063ca:	f002 fe1f 	bl	800900c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80063da:	f000 f89b 	bl	8006514 <prvTestWaitCondition>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d006      	beq.n	80063f8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80063ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80063fc:	f002 fe36 	bl	800906c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006402:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800640a:	4618      	mov	r0, r3
 800640c:	3740      	adds	r7, #64	@ 0x40
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xEventGroupClearBits+0x2c>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	60fb      	str	r3, [r7, #12]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800644a:	d30b      	bcc.n	8006464 <xEventGroupClearBits+0x4c>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60bb      	str	r3, [r7, #8]
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	e7fd      	b.n	8006460 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006464:	f002 fdd2 	bl	800900c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800647c:	f002 fdf6 	bl	800906c <vPortExitCritical>

	return uxReturn;
 8006480:	693b      	ldr	r3, [r7, #16]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006496:	2300      	movs	r3, #0
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4804      	ldr	r0, [pc, #16]	@ (80064b0 <xEventGroupClearBitsFromISR+0x24>)
 800649e:	f002 fca5 	bl	8008dec <xTimerPendFunctionCallFromISR>
 80064a2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80064a4:	68fb      	ldr	r3, [r7, #12]
	}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	080064fb 	.word	0x080064fb

080064b4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b089      	sub	sp, #36	@ 0x24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064c0:	f3ef 8211 	mrs	r2, BASEPRI
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fa      	str	r2, [r7, #12]
 80064d6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064d8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064da:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ec:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80064ee:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80064f0:	4618      	mov	r0, r3
 80064f2:	3724      	adds	r7, #36	@ 0x24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ff86 	bl	8006418 <xEventGroupClearBits>
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d107      	bne.n	800653a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006534:	2301      	movs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e007      	b.n	800654a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	d101      	bne.n	800654a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006546:	2301      	movs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800654a:	697b      	ldr	r3, [r7, #20]
}
 800654c:	4618      	mov	r0, r3
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f103 0208 	add.w	r2, r3, #8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f103 0208 	add.w	r2, r3, #8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f103 0208 	add.w	r2, r3, #8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d103      	bne.n	8006612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e00c      	b.n	800662c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3308      	adds	r3, #8
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e002      	b.n	8006620 <vListInsert+0x2e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d2f6      	bcs.n	800661a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6892      	ldr	r2, [r2, #8]
 8006678:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6852      	ldr	r2, [r2, #4]
 8006682:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d103      	bne.n	8006696 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	1e5a      	subs	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10b      	bne.n	80066e0 <xQueueGenericReset+0x2c>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	60bb      	str	r3, [r7, #8]
}
 80066da:	bf00      	nop
 80066dc:	bf00      	nop
 80066de:	e7fd      	b.n	80066dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066e0:	f002 fc94 	bl	800900c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	3b01      	subs	r3, #1
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	441a      	add	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	22ff      	movs	r2, #255	@ 0xff
 8006724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	22ff      	movs	r2, #255	@ 0xff
 800672c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d114      	bne.n	8006760 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01a      	beq.n	8006774 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3310      	adds	r3, #16
 8006742:	4618      	mov	r0, r3
 8006744:	f001 fc2c 	bl	8007fa0 <xTaskRemoveFromEventList>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d012      	beq.n	8006774 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800674e:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <xQueueGenericReset+0xd0>)
 8006750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	e009      	b.n	8006774 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3310      	adds	r3, #16
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fef6 	bl	8006556 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3324      	adds	r3, #36	@ 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fef1 	bl	8006556 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006774:	f002 fc7a 	bl	800906c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006778:	2301      	movs	r3, #1
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08e      	sub	sp, #56	@ 0x38
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10b      	bne.n	80067b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	e7fd      	b.n	80067b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <xQueueGenericCreateStatic+0x56>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <xQueueGenericCreateStatic+0x5a>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <xQueueGenericCreateStatic+0x5c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10b      	bne.n	8006800 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	623b      	str	r3, [r7, #32]
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	e7fd      	b.n	80067fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <xQueueGenericCreateStatic+0x84>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <xQueueGenericCreateStatic+0x88>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <xQueueGenericCreateStatic+0x8a>
 8006810:	2300      	movs	r3, #0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	61fb      	str	r3, [r7, #28]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800682e:	2350      	movs	r3, #80	@ 0x50
 8006830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b50      	cmp	r3, #80	@ 0x50
 8006836:	d00b      	beq.n	8006850 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	61bb      	str	r3, [r7, #24]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006850:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006864:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f846 	bl	8006904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3730      	adds	r7, #48	@ 0x30
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08a      	sub	sp, #40	@ 0x28
 8006886:	af02      	add	r7, sp, #8
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <xQueueGenericCreate+0x2c>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	613b      	str	r3, [r7, #16]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e004      	b.n	80068c4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3350      	adds	r3, #80	@ 0x50
 80068c8:	4618      	mov	r0, r3
 80068ca:	f002 fca1 	bl	8009210 <pvPortMalloc>
 80068ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d011      	beq.n	80068fa <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	3350      	adds	r3, #80	@ 0x50
 80068de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068e8:	79fa      	ldrb	r2, [r7, #7]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f805 	bl	8006904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068fa:	69bb      	ldr	r3, [r7, #24]
	}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d103      	bne.n	8006920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e002      	b.n	8006926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006932:	2101      	movs	r1, #1
 8006934:	69b8      	ldr	r0, [r7, #24]
 8006936:	f7ff febd 	bl	80066b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00e      	beq.n	8006976 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800696a:	2300      	movs	r3, #0
 800696c:	2200      	movs	r2, #0
 800696e:	2100      	movs	r1, #0
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f8a3 	bl	8006abc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	4603      	mov	r3, r0
 8006986:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006988:	2301      	movs	r3, #1
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	2300      	movs	r3, #0
 800698e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	461a      	mov	r2, r3
 8006994:	6939      	ldr	r1, [r7, #16]
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	f7ff ff73 	bl	8006882 <xQueueGenericCreate>
 800699c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ffd3 	bl	800694a <prvInitialiseMutex>

		return xNewQueue;
 80069a4:	68fb      	ldr	r3, [r7, #12]
	}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b088      	sub	sp, #32
 80069b2:	af02      	add	r7, sp, #8
 80069b4:	4603      	mov	r3, r0
 80069b6:	6039      	str	r1, [r7, #0]
 80069b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069ba:	2301      	movs	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	6939      	ldr	r1, [r7, #16]
 80069cc:	6978      	ldr	r0, [r7, #20]
 80069ce:	f7ff fedb 	bl	8006788 <xQueueGenericCreateStatic>
 80069d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff ffb8 	bl	800694a <prvInitialiseMutex>

		return xNewQueue;
 80069da:	68fb      	ldr	r3, [r7, #12]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60fb      	str	r3, [r7, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	689c      	ldr	r4, [r3, #8]
 8006a12:	f001 fc8b 	bl	800832c <xTaskGetCurrentTaskHandle>
 8006a16:	4603      	mov	r3, r0
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d111      	bne.n	8006a40 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d105      	bne.n	8006a3a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006a2e:	2300      	movs	r3, #0
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	6938      	ldr	r0, [r7, #16]
 8006a36:	f000 f841 	bl	8006abc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e001      	b.n	8006a44 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006a44:	697b      	ldr	r3, [r7, #20]
	}
 8006a46:	4618      	mov	r0, r3
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd90      	pop	{r4, r7, pc}

08006a4e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006a4e:	b590      	push	{r4, r7, lr}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10b      	bne.n	8006a7a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60fb      	str	r3, [r7, #12]
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	e7fd      	b.n	8006a76 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	689c      	ldr	r4, [r3, #8]
 8006a7e:	f001 fc55 	bl	800832c <xTaskGetCurrentTaskHandle>
 8006a82:	4603      	mov	r3, r0
 8006a84:	429c      	cmp	r4, r3
 8006a86:	d107      	bne.n	8006a98 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006a92:	2301      	movs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e00c      	b.n	8006ab2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6938      	ldr	r0, [r7, #16]
 8006a9c:	f000 fa8e 	bl	8006fbc <xQueueSemaphoreTake>
 8006aa0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006ab2:	697b      	ldr	r3, [r7, #20]
	}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd90      	pop	{r4, r7, pc}

08006abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	@ 0x38
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aca:	2300      	movs	r3, #0
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <xQueueGenericSend+0x34>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSend+0x42>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <xQueueGenericSend+0x46>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <xQueueGenericSend+0x48>
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10b      	bne.n	8006b20 <xQueueGenericSend+0x64>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d103      	bne.n	8006b2e <xQueueGenericSend+0x72>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <xQueueGenericSend+0x76>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <xQueueGenericSend+0x78>
 8006b32:	2300      	movs	r3, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <xQueueGenericSend+0x94>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	623b      	str	r3, [r7, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b50:	f001 fbfa 	bl	8008348 <xTaskGetSchedulerState>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <xQueueGenericSend+0xa4>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueGenericSend+0xa8>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueGenericSend+0xaa>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b82:	f002 fa43 	bl	800900c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <xQueueGenericSend+0xdc>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d129      	bne.n	8006bec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b9e:	f000 fbb6 	bl	800730e <prvCopyDataToQueue>
 8006ba2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d010      	beq.n	8006bce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	3324      	adds	r3, #36	@ 0x24
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 f9f5 	bl	8007fa0 <xTaskRemoveFromEventList>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d013      	beq.n	8006be4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cbc <xQueueGenericSend+0x200>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	e00a      	b.n	8006be4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bd4:	4b39      	ldr	r3, [pc, #228]	@ (8006cbc <xQueueGenericSend+0x200>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006be4:	f002 fa42 	bl	800906c <vPortExitCritical>
				return pdPASS;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e063      	b.n	8006cb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d103      	bne.n	8006bfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bf2:	f002 fa3b 	bl	800906c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e05c      	b.n	8006cb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c00:	f107 0314 	add.w	r3, r7, #20
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fa2f 	bl	8008068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c0e:	f002 fa2d 	bl	800906c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c12:	f000 ff4d 	bl	8007ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c16:	f002 f9f9 	bl	800900c <vPortEnterCritical>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c20:	b25b      	sxtb	r3, r3
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c26:	d103      	bne.n	8006c30 <xQueueGenericSend+0x174>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c36:	b25b      	sxtb	r3, r3
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d103      	bne.n	8006c46 <xQueueGenericSend+0x18a>
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c46:	f002 fa11 	bl	800906c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c4a:	1d3a      	adds	r2, r7, #4
 8006c4c:	f107 0314 	add.w	r3, r7, #20
 8006c50:	4611      	mov	r1, r2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fa1e 	bl	8008094 <xTaskCheckForTimeOut>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d124      	bne.n	8006ca8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c60:	f000 fc4d 	bl	80074fe <prvIsQueueFull>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d018      	beq.n	8006c9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	3310      	adds	r3, #16
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f904 	bl	8007e80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c7a:	f000 fbd8 	bl	800742e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c7e:	f000 ff25 	bl	8007acc <xTaskResumeAll>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f47f af7c 	bne.w	8006b82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006cbc <xQueueGenericSend+0x200>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	e772      	b.n	8006b82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c9e:	f000 fbc6 	bl	800742e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca2:	f000 ff13 	bl	8007acc <xTaskResumeAll>
 8006ca6:	e76c      	b.n	8006b82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006caa:	f000 fbc0 	bl	800742e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cae:	f000 ff0d 	bl	8007acc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3738      	adds	r7, #56	@ 0x38
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08e      	sub	sp, #56	@ 0x38
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cea:	bf00      	nop
 8006cec:	bf00      	nop
 8006cee:	e7fd      	b.n	8006cec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d103      	bne.n	8006cfe <xQueueGenericSendFromISR+0x3e>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <xQueueGenericSendFromISR+0x42>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <xQueueGenericSendFromISR+0x44>
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10b      	bne.n	8006d20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	623b      	str	r3, [r7, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSendFromISR+0x6e>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <xQueueGenericSendFromISR+0x72>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <xQueueGenericSendFromISR+0x74>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	61fb      	str	r3, [r7, #28]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d50:	f002 fa1e 	bl	8009190 <vPortValidateInterruptPriority>
	__asm volatile
 8006d54:	f3ef 8211 	mrs	r2, BASEPRI
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	61ba      	str	r2, [r7, #24]
 8006d6a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d302      	bcc.n	8006d82 <xQueueGenericSendFromISR+0xc2>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d12c      	bne.n	8006ddc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d92:	f000 fabc 	bl	800730e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d96:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d112      	bne.n	8006dc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d016      	beq.n	8006dd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	3324      	adds	r3, #36	@ 0x24
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f8f7 	bl	8007fa0 <xTaskRemoveFromEventList>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00e      	beq.n	8006dd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e007      	b.n	8006dd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dca:	3301      	adds	r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	b25a      	sxtb	r2, r3
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006dda:	e001      	b.n	8006de0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f383 8811 	msr	BASEPRI, r3
}
 8006dea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3738      	adds	r7, #56	@ 0x38
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08c      	sub	sp, #48	@ 0x30
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <xQueueReceive+0x32>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	623b      	str	r3, [r7, #32]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <xQueueReceive+0x40>
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <xQueueReceive+0x44>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <xQueueReceive+0x46>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10b      	bne.n	8006e5a <xQueueReceive+0x62>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	61fb      	str	r3, [r7, #28]
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	e7fd      	b.n	8006e56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e5a:	f001 fa75 	bl	8008348 <xTaskGetSchedulerState>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <xQueueReceive+0x72>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <xQueueReceive+0x76>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <xQueueReceive+0x78>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <xQueueReceive+0x94>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	61bb      	str	r3, [r7, #24]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e8c:	f002 f8be 	bl	800900c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01f      	beq.n	8006edc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ea0:	f000 fa9f 	bl	80073e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	1e5a      	subs	r2, r3, #1
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00f      	beq.n	8006ed4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	3310      	adds	r3, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 f871 	bl	8007fa0 <xTaskRemoveFromEventList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8006fb8 <xQueueReceive+0x1c0>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ed4:	f002 f8ca 	bl	800906c <vPortExitCritical>
				return pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e069      	b.n	8006fb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee2:	f002 f8c3 	bl	800906c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e062      	b.n	8006fb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef0:	f107 0310 	add.w	r3, r7, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 f8b7 	bl	8008068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006efe:	f002 f8b5 	bl	800906c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f02:	f000 fdd5 	bl	8007ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f06:	f002 f881 	bl	800900c <vPortEnterCritical>
 8006f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d103      	bne.n	8006f20 <xQueueReceive+0x128>
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d103      	bne.n	8006f36 <xQueueReceive+0x13e>
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f36:	f002 f899 	bl	800906c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f3a:	1d3a      	adds	r2, r7, #4
 8006f3c:	f107 0310 	add.w	r3, r7, #16
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 f8a6 	bl	8008094 <xTaskCheckForTimeOut>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d123      	bne.n	8006f96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f50:	f000 fabf 	bl	80074d2 <prvIsQueueEmpty>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d017      	beq.n	8006f8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	3324      	adds	r3, #36	@ 0x24
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 ff8c 	bl	8007e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f6a:	f000 fa60 	bl	800742e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f6e:	f000 fdad 	bl	8007acc <xTaskResumeAll>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d189      	bne.n	8006e8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f78:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <xQueueReceive+0x1c0>)
 8006f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	e780      	b.n	8006e8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f8c:	f000 fa4f 	bl	800742e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f90:	f000 fd9c 	bl	8007acc <xTaskResumeAll>
 8006f94:	e77a      	b.n	8006e8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f98:	f000 fa49 	bl	800742e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f9c:	f000 fd96 	bl	8007acc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa2:	f000 fa96 	bl	80074d2 <prvIsQueueEmpty>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f43f af6f 	beq.w	8006e8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3730      	adds	r7, #48	@ 0x30
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08e      	sub	sp, #56	@ 0x38
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	623b      	str	r3, [r7, #32]
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61fb      	str	r3, [r7, #28]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007010:	f001 f99a 	bl	8008348 <xTaskGetSchedulerState>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <xQueueSemaphoreTake+0x64>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xQueueSemaphoreTake+0x68>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <xQueueSemaphoreTake+0x6a>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61bb      	str	r3, [r7, #24]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007042:	f001 ffe3 	bl	800900c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d024      	beq.n	800709c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	1e5a      	subs	r2, r3, #1
 8007056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007058:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007062:	f001 fb03 	bl	800866c <pvTaskIncrementMutexHeldCount>
 8007066:	4602      	mov	r2, r0
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800706c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00f      	beq.n	8007094 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007076:	3310      	adds	r3, #16
 8007078:	4618      	mov	r0, r3
 800707a:	f000 ff91 	bl	8007fa0 <xTaskRemoveFromEventList>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007084:	4b54      	ldr	r3, [pc, #336]	@ (80071d8 <xQueueSemaphoreTake+0x21c>)
 8007086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007094:	f001 ffea 	bl	800906c <vPortExitCritical>
				return pdPASS;
 8007098:	2301      	movs	r3, #1
 800709a:	e098      	b.n	80071ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d112      	bne.n	80070c8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	617b      	str	r3, [r7, #20]
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80070c0:	f001 ffd4 	bl	800906c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e082      	b.n	80071ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070ce:	f107 030c 	add.w	r3, r7, #12
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 ffc8 	bl	8008068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070dc:	f001 ffc6 	bl	800906c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e0:	f000 fce6 	bl	8007ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070e4:	f001 ff92 	bl	800900c <vPortEnterCritical>
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070ee:	b25b      	sxtb	r3, r3
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d103      	bne.n	80070fe <xQueueSemaphoreTake+0x142>
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007104:	b25b      	sxtb	r3, r3
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d103      	bne.n	8007114 <xQueueSemaphoreTake+0x158>
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007114:	f001 ffaa 	bl	800906c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007118:	463a      	mov	r2, r7
 800711a:	f107 030c 	add.w	r3, r7, #12
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 ffb7 	bl	8008094 <xTaskCheckForTimeOut>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d132      	bne.n	8007192 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800712c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800712e:	f000 f9d0 	bl	80074d2 <prvIsQueueEmpty>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d026      	beq.n	8007186 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007140:	f001 ff64 	bl	800900c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f001 f91b 	bl	8008384 <xTaskPriorityInherit>
 800714e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007150:	f001 ff8c 	bl	800906c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	3324      	adds	r3, #36	@ 0x24
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fe8f 	bl	8007e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007162:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007164:	f000 f963 	bl	800742e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007168:	f000 fcb0 	bl	8007acc <xTaskResumeAll>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	f47f af67 	bne.w	8007042 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007174:	4b18      	ldr	r3, [pc, #96]	@ (80071d8 <xQueueSemaphoreTake+0x21c>)
 8007176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	e75d      	b.n	8007042 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007186:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007188:	f000 f951 	bl	800742e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800718c:	f000 fc9e 	bl	8007acc <xTaskResumeAll>
 8007190:	e757      	b.n	8007042 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007194:	f000 f94b 	bl	800742e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007198:	f000 fc98 	bl	8007acc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800719c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800719e:	f000 f998 	bl	80074d2 <prvIsQueueEmpty>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f43f af4c 	beq.w	8007042 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80071b0:	f001 ff2c 	bl	800900c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071b6:	f000 f893 	bl	80072e0 <prvGetDisinheritPriorityAfterTimeout>
 80071ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80071bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f9b6 	bl	8008534 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80071c8:	f001 ff50 	bl	800906c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3738      	adds	r7, #56	@ 0x38
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	@ 0x38
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	623b      	str	r3, [r7, #32]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <xQueueReceiveFromISR+0x3c>
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <xQueueReceiveFromISR+0x40>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <xQueueReceiveFromISR+0x42>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	61fb      	str	r3, [r7, #28]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800723a:	f001 ffa9 	bl	8009190 <vPortValidateInterruptPriority>
	__asm volatile
 800723e:	f3ef 8211 	mrs	r2, BASEPRI
 8007242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	61ba      	str	r2, [r7, #24]
 8007254:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007256:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007258:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d02f      	beq.n	80072c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800726c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007274:	f000 f8b5 	bl	80073e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	1e5a      	subs	r2, r3, #1
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007280:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d112      	bne.n	80072b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d016      	beq.n	80072c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	3310      	adds	r3, #16
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fe82 	bl	8007fa0 <xTaskRemoveFromEventList>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00e      	beq.n	80072c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e007      	b.n	80072c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072b4:	3301      	adds	r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	b25a      	sxtb	r2, r3
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80072c0:	2301      	movs	r3, #1
 80072c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c4:	e001      	b.n	80072ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f383 8811 	msr	BASEPRI, r3
}
 80072d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3738      	adds	r7, #56	@ 0x38
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e001      	b.n	8007302 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007302:	68fb      	ldr	r3, [r7, #12]
	}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d14d      	bne.n	80073d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f001 f88b 	bl	8008454 <xTaskPriorityDisinherit>
 800733e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
 8007346:	e043      	b.n	80073d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d119      	bne.n	8007382 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6858      	ldr	r0, [r3, #4]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	461a      	mov	r2, r3
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	f005 fe13 	bl	800cf84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	441a      	add	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d32b      	bcc.n	80073d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	605a      	str	r2, [r3, #4]
 8007380:	e026      	b.n	80073d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68d8      	ldr	r0, [r3, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	461a      	mov	r2, r3
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	f005 fdf9 	bl	800cf84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	425b      	negs	r3, r3
 800739c:	441a      	add	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d207      	bcs.n	80073be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b6:	425b      	negs	r3, r3
 80073b8:	441a      	add	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d105      	bne.n	80073d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80073d8:	697b      	ldr	r3, [r7, #20]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d018      	beq.n	8007426 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fc:	441a      	add	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	d303      	bcc.n	8007416 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68d9      	ldr	r1, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741e:	461a      	mov	r2, r3
 8007420:	6838      	ldr	r0, [r7, #0]
 8007422:	f005 fdaf 	bl	800cf84 <memcpy>
	}
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007436:	f001 fde9 	bl	800900c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007440:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007442:	e011      	b.n	8007468 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	d012      	beq.n	8007472 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3324      	adds	r3, #36	@ 0x24
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fda5 	bl	8007fa0 <xTaskRemoveFromEventList>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800745c:	f000 fe7e 	bl	800815c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	3b01      	subs	r3, #1
 8007464:	b2db      	uxtb	r3, r3
 8007466:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dce9      	bgt.n	8007444 <prvUnlockQueue+0x16>
 8007470:	e000      	b.n	8007474 <prvUnlockQueue+0x46>
					break;
 8007472:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	22ff      	movs	r2, #255	@ 0xff
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800747c:	f001 fdf6 	bl	800906c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007480:	f001 fdc4 	bl	800900c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800748a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748c:	e011      	b.n	80074b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d012      	beq.n	80074bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3310      	adds	r3, #16
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fd80 	bl	8007fa0 <xTaskRemoveFromEventList>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074a6:	f000 fe59 	bl	800815c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dce9      	bgt.n	800748e <prvUnlockQueue+0x60>
 80074ba:	e000      	b.n	80074be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	22ff      	movs	r2, #255	@ 0xff
 80074c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80074c6:	f001 fdd1 	bl	800906c <vPortExitCritical>
}
 80074ca:	bf00      	nop
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074da:	f001 fd97 	bl	800900c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074e6:	2301      	movs	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e001      	b.n	80074f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074f0:	f001 fdbc 	bl	800906c <vPortExitCritical>

	return xReturn;
 80074f4:	68fb      	ldr	r3, [r7, #12]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007506:	f001 fd81 	bl	800900c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007512:	429a      	cmp	r2, r3
 8007514:	d102      	bne.n	800751c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007516:	2301      	movs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e001      	b.n	8007520 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007520:	f001 fda4 	bl	800906c <vPortExitCritical>

	return xReturn;
 8007524:	68fb      	ldr	r3, [r7, #12]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	e014      	b.n	800756a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007540:	4a0e      	ldr	r2, [pc, #56]	@ (800757c <vQueueAddToRegistry+0x4c>)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800754c:	490b      	ldr	r1, [pc, #44]	@ (800757c <vQueueAddToRegistry+0x4c>)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007556:	4a09      	ldr	r2, [pc, #36]	@ (800757c <vQueueAddToRegistry+0x4c>)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007562:	e006      	b.n	8007572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b07      	cmp	r3, #7
 800756e:	d9e7      	bls.n	8007540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr
 800757c:	20001418 	.word	0x20001418

08007580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007590:	f001 fd3c 	bl	800900c <vPortEnterCritical>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800759a:	b25b      	sxtb	r3, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d103      	bne.n	80075aa <vQueueWaitForMessageRestricted+0x2a>
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d103      	bne.n	80075c0 <vQueueWaitForMessageRestricted+0x40>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075c0:	f001 fd54 	bl	800906c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3324      	adds	r3, #36	@ 0x24
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fcb7 	bl	8007f48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075da:	6978      	ldr	r0, [r7, #20]
 80075dc:	f7ff ff27 	bl	800742e <prvUnlockQueue>
	}
 80075e0:	bf00      	nop
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	@ 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10b      	bne.n	8007614 <xTaskCreateStatic+0x2c>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	623b      	str	r3, [r7, #32]
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <xTaskCreateStatic+0x4a>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	61fb      	str	r3, [r7, #28]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007632:	23a8      	movs	r3, #168	@ 0xa8
 8007634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2ba8      	cmp	r3, #168	@ 0xa8
 800763a:	d00b      	beq.n	8007654 <xTaskCreateStatic+0x6c>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	61bb      	str	r3, [r7, #24]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007654:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01e      	beq.n	800769a <xTaskCreateStatic+0xb2>
 800765c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01b      	beq.n	800769a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800766a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	2202      	movs	r2, #2
 8007670:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007674:	2300      	movs	r3, #0
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	9302      	str	r3, [sp, #8]
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f851 	bl	8007734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007694:	f000 f8f6 	bl	8007884 <prvAddNewTaskToReadyList>
 8007698:	e001      	b.n	800769e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800769e:	697b      	ldr	r3, [r7, #20]
	}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3728      	adds	r7, #40	@ 0x28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	@ 0x30
 80076ac:	af04      	add	r7, sp, #16
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fda7 	bl	8009210 <pvPortMalloc>
 80076c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076ca:	20a8      	movs	r0, #168	@ 0xa8
 80076cc:	f001 fda0 	bl	8009210 <pvPortMalloc>
 80076d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80076de:	e005      	b.n	80076ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076e0:	6978      	ldr	r0, [r7, #20]
 80076e2:	f001 fddb 	bl	800929c <vPortFree>
 80076e6:	e001      	b.n	80076ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d017      	beq.n	8007722 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	2300      	movs	r3, #0
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	9302      	str	r3, [sp, #8]
 8007704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f80f 	bl	8007734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007716:	69f8      	ldr	r0, [r7, #28]
 8007718:	f000 f8b4 	bl	8007884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800771c:	2301      	movs	r3, #1
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	e002      	b.n	8007728 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007728:	69bb      	ldr	r3, [r7, #24]
	}
 800772a:	4618      	mov	r0, r3
 800772c:	3720      	adds	r7, #32
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	461a      	mov	r2, r3
 800774c:	21a5      	movs	r1, #165	@ 0xa5
 800774e:	f005 fb43 	bl	800cdd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800775c:	3b01      	subs	r3, #1
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	617b      	str	r3, [r7, #20]
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01f      	beq.n	80077d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e012      	b.n	80077c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	7819      	ldrb	r1, [r3, #0]
 80077a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	3334      	adds	r3, #52	@ 0x34
 80077aa:	460a      	mov	r2, r1
 80077ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d006      	beq.n	80077c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	3301      	adds	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d9e9      	bls.n	800779a <prvInitialiseNewTask+0x66>
 80077c6:	e000      	b.n	80077ca <prvInitialiseNewTask+0x96>
			{
				break;
 80077c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077d2:	e003      	b.n	80077dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077de:	2b37      	cmp	r3, #55	@ 0x37
 80077e0:	d901      	bls.n	80077e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077e2:	2337      	movs	r3, #55	@ 0x37
 80077e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	2200      	movs	r2, #0
 80077f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	3304      	adds	r3, #4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe fec9 	bl	8006594 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	3318      	adds	r3, #24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fec4 	bl	8006594 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007810:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007814:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	2200      	movs	r2, #0
 8007826:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	3354      	adds	r3, #84	@ 0x54
 8007836:	224c      	movs	r2, #76	@ 0x4c
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f005 facc 	bl	800cdd8 <memset>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	4a0d      	ldr	r2, [pc, #52]	@ (8007878 <prvInitialiseNewTask+0x144>)
 8007844:	659a      	str	r2, [r3, #88]	@ 0x58
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	4a0c      	ldr	r2, [pc, #48]	@ (800787c <prvInitialiseNewTask+0x148>)
 800784a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	4a0c      	ldr	r2, [pc, #48]	@ (8007880 <prvInitialiseNewTask+0x14c>)
 8007850:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	69b8      	ldr	r0, [r7, #24]
 8007858:	f001 fae8 	bl	8008e2c <pxPortInitialiseStack>
 800785c:	4602      	mov	r2, r0
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800786c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786e:	bf00      	nop
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20004c40 	.word	0x20004c40
 800787c:	20004ca8 	.word	0x20004ca8
 8007880:	20004d10 	.word	0x20004d10

08007884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800788c:	f001 fbbe 	bl	800900c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007890:	4b2d      	ldr	r3, [pc, #180]	@ (8007948 <prvAddNewTaskToReadyList+0xc4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a2c      	ldr	r2, [pc, #176]	@ (8007948 <prvAddNewTaskToReadyList+0xc4>)
 8007898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800789a:	4b2c      	ldr	r3, [pc, #176]	@ (800794c <prvAddNewTaskToReadyList+0xc8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078a2:	4a2a      	ldr	r2, [pc, #168]	@ (800794c <prvAddNewTaskToReadyList+0xc8>)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078a8:	4b27      	ldr	r3, [pc, #156]	@ (8007948 <prvAddNewTaskToReadyList+0xc4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d110      	bne.n	80078d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078b0:	f000 fc78 	bl	80081a4 <prvInitialiseTaskLists>
 80078b4:	e00d      	b.n	80078d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078b6:	4b26      	ldr	r3, [pc, #152]	@ (8007950 <prvAddNewTaskToReadyList+0xcc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078be:	4b23      	ldr	r3, [pc, #140]	@ (800794c <prvAddNewTaskToReadyList+0xc8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d802      	bhi.n	80078d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078cc:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <prvAddNewTaskToReadyList+0xc8>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078d2:	4b20      	ldr	r3, [pc, #128]	@ (8007954 <prvAddNewTaskToReadyList+0xd0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3301      	adds	r3, #1
 80078d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007954 <prvAddNewTaskToReadyList+0xd0>)
 80078da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007954 <prvAddNewTaskToReadyList+0xd0>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007958 <prvAddNewTaskToReadyList+0xd4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d903      	bls.n	80078f8 <prvAddNewTaskToReadyList+0x74>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f4:	4a18      	ldr	r2, [pc, #96]	@ (8007958 <prvAddNewTaskToReadyList+0xd4>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4a15      	ldr	r2, [pc, #84]	@ (800795c <prvAddNewTaskToReadyList+0xd8>)
 8007906:	441a      	add	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f7fe fe4c 	bl	80065ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007914:	f001 fbaa 	bl	800906c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007918:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <prvAddNewTaskToReadyList+0xcc>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00e      	beq.n	800793e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007920:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <prvAddNewTaskToReadyList+0xc8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792a:	429a      	cmp	r2, r3
 800792c:	d207      	bcs.n	800793e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800792e:	4b0c      	ldr	r3, [pc, #48]	@ (8007960 <prvAddNewTaskToReadyList+0xdc>)
 8007930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	2000192c 	.word	0x2000192c
 800794c:	20001458 	.word	0x20001458
 8007950:	20001938 	.word	0x20001938
 8007954:	20001948 	.word	0x20001948
 8007958:	20001934 	.word	0x20001934
 800795c:	2000145c 	.word	0x2000145c
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d018      	beq.n	80079a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007976:	4b14      	ldr	r3, [pc, #80]	@ (80079c8 <vTaskDelay+0x64>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <vTaskDelay+0x32>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60bb      	str	r3, [r7, #8]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007996:	f000 f88b 	bl	8007ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800799a:	2100      	movs	r1, #0
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fe79 	bl	8008694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079a2:	f000 f893 	bl	8007acc <xTaskResumeAll>
 80079a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d107      	bne.n	80079be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80079ae:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <vTaskDelay+0x68>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20001954 	.word	0x20001954
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	@ 0x28
 80079d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079de:	463a      	mov	r2, r7
 80079e0:	1d39      	adds	r1, r7, #4
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fbbe 	bl	8006168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	9202      	str	r2, [sp, #8]
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	2300      	movs	r3, #0
 80079fc:	460a      	mov	r2, r1
 80079fe:	4924      	ldr	r1, [pc, #144]	@ (8007a90 <vTaskStartScheduler+0xc0>)
 8007a00:	4824      	ldr	r0, [pc, #144]	@ (8007a94 <vTaskStartScheduler+0xc4>)
 8007a02:	f7ff fdf1 	bl	80075e8 <xTaskCreateStatic>
 8007a06:	4603      	mov	r3, r0
 8007a08:	4a23      	ldr	r2, [pc, #140]	@ (8007a98 <vTaskStartScheduler+0xc8>)
 8007a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a0c:	4b22      	ldr	r3, [pc, #136]	@ (8007a98 <vTaskStartScheduler+0xc8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e001      	b.n	8007a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d102      	bne.n	8007a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a24:	f000 fe8a 	bl	800873c <xTimerCreateTimerTask>
 8007a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d11b      	bne.n	8007a68 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a44:	4b15      	ldr	r3, [pc, #84]	@ (8007a9c <vTaskStartScheduler+0xcc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3354      	adds	r3, #84	@ 0x54
 8007a4a:	4a15      	ldr	r2, [pc, #84]	@ (8007aa0 <vTaskStartScheduler+0xd0>)
 8007a4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a4e:	4b15      	ldr	r3, [pc, #84]	@ (8007aa4 <vTaskStartScheduler+0xd4>)
 8007a50:	f04f 32ff 	mov.w	r2, #4294967295
 8007a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a56:	4b14      	ldr	r3, [pc, #80]	@ (8007aa8 <vTaskStartScheduler+0xd8>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a5c:	4b13      	ldr	r3, [pc, #76]	@ (8007aac <vTaskStartScheduler+0xdc>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a62:	f001 fa61 	bl	8008f28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a66:	e00f      	b.n	8007a88 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d10b      	bne.n	8007a88 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <vTaskStartScheduler+0xb4>
}
 8007a88:	bf00      	nop
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	0800e2f4 	.word	0x0800e2f4
 8007a94:	08008175 	.word	0x08008175
 8007a98:	20001950 	.word	0x20001950
 8007a9c:	20001458 	.word	0x20001458
 8007aa0:	20000b18 	.word	0x20000b18
 8007aa4:	2000194c 	.word	0x2000194c
 8007aa8:	20001938 	.word	0x20001938
 8007aac:	20001930 	.word	0x20001930

08007ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ab4:	4b04      	ldr	r3, [pc, #16]	@ (8007ac8 <vTaskSuspendAll+0x18>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a03      	ldr	r2, [pc, #12]	@ (8007ac8 <vTaskSuspendAll+0x18>)
 8007abc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007abe:	bf00      	nop
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20001954 	.word	0x20001954

08007acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ada:	4b42      	ldr	r3, [pc, #264]	@ (8007be4 <xTaskResumeAll+0x118>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <xTaskResumeAll+0x2e>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	603b      	str	r3, [r7, #0]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007afa:	f001 fa87 	bl	800900c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007afe:	4b39      	ldr	r3, [pc, #228]	@ (8007be4 <xTaskResumeAll+0x118>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	4a37      	ldr	r2, [pc, #220]	@ (8007be4 <xTaskResumeAll+0x118>)
 8007b06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b08:	4b36      	ldr	r3, [pc, #216]	@ (8007be4 <xTaskResumeAll+0x118>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d162      	bne.n	8007bd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b10:	4b35      	ldr	r3, [pc, #212]	@ (8007be8 <xTaskResumeAll+0x11c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d05e      	beq.n	8007bd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b18:	e02f      	b.n	8007b7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1a:	4b34      	ldr	r3, [pc, #208]	@ (8007bec <xTaskResumeAll+0x120>)
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3318      	adds	r3, #24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fd9b 	bl	8006662 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fd96 	bl	8006662 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf0 <xTaskResumeAll+0x124>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d903      	bls.n	8007b4a <xTaskResumeAll+0x7e>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b46:	4a2a      	ldr	r2, [pc, #168]	@ (8007bf0 <xTaskResumeAll+0x124>)
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4a27      	ldr	r2, [pc, #156]	@ (8007bf4 <xTaskResumeAll+0x128>)
 8007b58:	441a      	add	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f7fe fd23 	bl	80065ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6a:	4b23      	ldr	r3, [pc, #140]	@ (8007bf8 <xTaskResumeAll+0x12c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b74:	4b21      	ldr	r3, [pc, #132]	@ (8007bfc <xTaskResumeAll+0x130>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bec <xTaskResumeAll+0x120>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1cb      	bne.n	8007b1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b88:	f000 fbb0 	bl	80082ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c00 <xTaskResumeAll+0x134>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d010      	beq.n	8007bba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b98:	f000 f844 	bl	8007c24 <xTaskIncrementTick>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007ba2:	4b16      	ldr	r3, [pc, #88]	@ (8007bfc <xTaskResumeAll+0x130>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f1      	bne.n	8007b98 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007bb4:	4b12      	ldr	r3, [pc, #72]	@ (8007c00 <xTaskResumeAll+0x134>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bba:	4b10      	ldr	r3, [pc, #64]	@ (8007bfc <xTaskResumeAll+0x130>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c04 <xTaskResumeAll+0x138>)
 8007bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bd6:	f001 fa49 	bl	800906c <vPortExitCritical>

	return xAlreadyYielded;
 8007bda:	68bb      	ldr	r3, [r7, #8]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20001954 	.word	0x20001954
 8007be8:	2000192c 	.word	0x2000192c
 8007bec:	200018ec 	.word	0x200018ec
 8007bf0:	20001934 	.word	0x20001934
 8007bf4:	2000145c 	.word	0x2000145c
 8007bf8:	20001458 	.word	0x20001458
 8007bfc:	20001940 	.word	0x20001940
 8007c00:	2000193c 	.word	0x2000193c
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c0e:	4b04      	ldr	r3, [pc, #16]	@ (8007c20 <xTaskGetTickCount+0x18>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c14:	687b      	ldr	r3, [r7, #4]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr
 8007c20:	20001930 	.word	0x20001930

08007c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d6c <xTaskIncrementTick+0x148>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f040 808a 	bne.w	8007d4c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c38:	4b4d      	ldr	r3, [pc, #308]	@ (8007d70 <xTaskIncrementTick+0x14c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c40:	4a4b      	ldr	r2, [pc, #300]	@ (8007d70 <xTaskIncrementTick+0x14c>)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d121      	bne.n	8007c90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c4c:	4b49      	ldr	r3, [pc, #292]	@ (8007d74 <xTaskIncrementTick+0x150>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	603b      	str	r3, [r7, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	bf00      	nop
 8007c6c:	e7fd      	b.n	8007c6a <xTaskIncrementTick+0x46>
 8007c6e:	4b41      	ldr	r3, [pc, #260]	@ (8007d74 <xTaskIncrementTick+0x150>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	4b40      	ldr	r3, [pc, #256]	@ (8007d78 <xTaskIncrementTick+0x154>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3e      	ldr	r2, [pc, #248]	@ (8007d74 <xTaskIncrementTick+0x150>)
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007d78 <xTaskIncrementTick+0x154>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	4b3e      	ldr	r3, [pc, #248]	@ (8007d7c <xTaskIncrementTick+0x158>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	4a3c      	ldr	r2, [pc, #240]	@ (8007d7c <xTaskIncrementTick+0x158>)
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	f000 fb2e 	bl	80082ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <xTaskIncrementTick+0x15c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d349      	bcc.n	8007d2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c9a:	4b36      	ldr	r3, [pc, #216]	@ (8007d74 <xTaskIncrementTick+0x150>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca4:	4b36      	ldr	r3, [pc, #216]	@ (8007d80 <xTaskIncrementTick+0x15c>)
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8007caa:	601a      	str	r2, [r3, #0]
					break;
 8007cac:	e03f      	b.n	8007d2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cae:	4b31      	ldr	r3, [pc, #196]	@ (8007d74 <xTaskIncrementTick+0x150>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d203      	bcs.n	8007cce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8007d80 <xTaskIncrementTick+0x15c>)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ccc:	e02f      	b.n	8007d2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fcc5 	bl	8006662 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3318      	adds	r3, #24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fcbc 	bl	8006662 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cee:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <xTaskIncrementTick+0x160>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d903      	bls.n	8007cfe <xTaskIncrementTick+0xda>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfa:	4a22      	ldr	r2, [pc, #136]	@ (8007d84 <xTaskIncrementTick+0x160>)
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d88 <xTaskIncrementTick+0x164>)
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	4610      	mov	r0, r2
 8007d16:	f7fe fc49 	bl	80065ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007d8c <xTaskIncrementTick+0x168>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3b8      	bcc.n	8007c9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d2c:	e7b5      	b.n	8007c9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d2e:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <xTaskIncrementTick+0x168>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d34:	4914      	ldr	r1, [pc, #80]	@ (8007d88 <xTaskIncrementTick+0x164>)
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d907      	bls.n	8007d56 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007d46:	2301      	movs	r3, #1
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e004      	b.n	8007d56 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d4c:	4b10      	ldr	r3, [pc, #64]	@ (8007d90 <xTaskIncrementTick+0x16c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	4a0f      	ldr	r2, [pc, #60]	@ (8007d90 <xTaskIncrementTick+0x16c>)
 8007d54:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d56:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <xTaskIncrementTick+0x170>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20001954 	.word	0x20001954
 8007d70:	20001930 	.word	0x20001930
 8007d74:	200018e4 	.word	0x200018e4
 8007d78:	200018e8 	.word	0x200018e8
 8007d7c:	20001944 	.word	0x20001944
 8007d80:	2000194c 	.word	0x2000194c
 8007d84:	20001934 	.word	0x20001934
 8007d88:	2000145c 	.word	0x2000145c
 8007d8c:	20001458 	.word	0x20001458
 8007d90:	2000193c 	.word	0x2000193c
 8007d94:	20001940 	.word	0x20001940

08007d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d9e:	4b32      	ldr	r3, [pc, #200]	@ (8007e68 <vTaskSwitchContext+0xd0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007da6:	4b31      	ldr	r3, [pc, #196]	@ (8007e6c <vTaskSwitchContext+0xd4>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dac:	e058      	b.n	8007e60 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8007dae:	4b2f      	ldr	r3, [pc, #188]	@ (8007e6c <vTaskSwitchContext+0xd4>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007db4:	4b2e      	ldr	r3, [pc, #184]	@ (8007e70 <vTaskSwitchContext+0xd8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b2d      	ldr	r3, [pc, #180]	@ (8007e70 <vTaskSwitchContext+0xd8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d808      	bhi.n	8007dd6 <vTaskSwitchContext+0x3e>
 8007dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007e70 <vTaskSwitchContext+0xd8>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	4b29      	ldr	r3, [pc, #164]	@ (8007e70 <vTaskSwitchContext+0xd8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3334      	adds	r3, #52	@ 0x34
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7f8 fba5 	bl	8000520 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd6:	4b27      	ldr	r3, [pc, #156]	@ (8007e74 <vTaskSwitchContext+0xdc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e011      	b.n	8007e02 <vTaskSwitchContext+0x6a>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <vTaskSwitchContext+0x64>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	607b      	str	r3, [r7, #4]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <vTaskSwitchContext+0x60>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	491d      	ldr	r1, [pc, #116]	@ (8007e78 <vTaskSwitchContext+0xe0>)
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	440b      	add	r3, r1
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0e3      	beq.n	8007dde <vTaskSwitchContext+0x46>
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4a15      	ldr	r2, [pc, #84]	@ (8007e78 <vTaskSwitchContext+0xe0>)
 8007e22:	4413      	add	r3, r2
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3308      	adds	r3, #8
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d104      	bne.n	8007e46 <vTaskSwitchContext+0xae>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	605a      	str	r2, [r3, #4]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	4a08      	ldr	r2, [pc, #32]	@ (8007e70 <vTaskSwitchContext+0xd8>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	4a08      	ldr	r2, [pc, #32]	@ (8007e74 <vTaskSwitchContext+0xdc>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e56:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <vTaskSwitchContext+0xd8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3354      	adds	r3, #84	@ 0x54
 8007e5c:	4a07      	ldr	r2, [pc, #28]	@ (8007e7c <vTaskSwitchContext+0xe4>)
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20001954 	.word	0x20001954
 8007e6c:	20001940 	.word	0x20001940
 8007e70:	20001458 	.word	0x20001458
 8007e74:	20001934 	.word	0x20001934
 8007e78:	2000145c 	.word	0x2000145c
 8007e7c:	20000b18 	.word	0x20000b18

08007e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10b      	bne.n	8007ea8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60fb      	str	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	e7fd      	b.n	8007ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ea8:	4b07      	ldr	r3, [pc, #28]	@ (8007ec8 <vTaskPlaceOnEventList+0x48>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3318      	adds	r3, #24
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7fe fb9e 	bl	80065f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	6838      	ldr	r0, [r7, #0]
 8007eba:	f000 fbeb 	bl	8008694 <prvAddCurrentTaskToDelayedList>
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20001458 	.word	0x20001458

08007ecc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	617b      	str	r3, [r7, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007ef6:	4b12      	ldr	r3, [pc, #72]	@ (8007f40 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	613b      	str	r3, [r7, #16]
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	e7fd      	b.n	8007f12 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007f16:	4b0b      	ldr	r3, [pc, #44]	@ (8007f44 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007f20:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f22:	4b08      	ldr	r3, [pc, #32]	@ (8007f44 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3318      	adds	r3, #24
 8007f28:	4619      	mov	r1, r3
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7fe fb3e 	bl	80065ac <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fbae 	bl	8008694 <prvAddCurrentTaskToDelayedList>
}
 8007f38:	bf00      	nop
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20001954 	.word	0x20001954
 8007f44:	20001458 	.word	0x20001458

08007f48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	617b      	str	r3, [r7, #20]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f72:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <vTaskPlaceOnEventListRestricted+0x54>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3318      	adds	r3, #24
 8007f78:	4619      	mov	r1, r3
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7fe fb16 	bl	80065ac <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	68b8      	ldr	r0, [r7, #8]
 8007f90:	f000 fb80 	bl	8008694 <prvAddCurrentTaskToDelayedList>
	}
 8007f94:	bf00      	nop
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20001458 	.word	0x20001458

08007fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60fb      	str	r3, [r7, #12]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	3318      	adds	r3, #24
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fb45 	bl	8006662 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <xTaskRemoveFromEventList+0xb0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d11d      	bne.n	800801c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe fb3c 	bl	8006662 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fee:	4b19      	ldr	r3, [pc, #100]	@ (8008054 <xTaskRemoveFromEventList+0xb4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d903      	bls.n	8007ffe <xTaskRemoveFromEventList+0x5e>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffa:	4a16      	ldr	r2, [pc, #88]	@ (8008054 <xTaskRemoveFromEventList+0xb4>)
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4a13      	ldr	r2, [pc, #76]	@ (8008058 <xTaskRemoveFromEventList+0xb8>)
 800800c:	441a      	add	r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	4610      	mov	r0, r2
 8008016:	f7fe fac9 	bl	80065ac <vListInsertEnd>
 800801a:	e005      	b.n	8008028 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3318      	adds	r3, #24
 8008020:	4619      	mov	r1, r3
 8008022:	480e      	ldr	r0, [pc, #56]	@ (800805c <xTaskRemoveFromEventList+0xbc>)
 8008024:	f7fe fac2 	bl	80065ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802c:	4b0c      	ldr	r3, [pc, #48]	@ (8008060 <xTaskRemoveFromEventList+0xc0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	429a      	cmp	r2, r3
 8008034:	d905      	bls.n	8008042 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008036:	2301      	movs	r3, #1
 8008038:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800803a:	4b0a      	ldr	r3, [pc, #40]	@ (8008064 <xTaskRemoveFromEventList+0xc4>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e001      	b.n	8008046 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008042:	2300      	movs	r3, #0
 8008044:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20001954 	.word	0x20001954
 8008054:	20001934 	.word	0x20001934
 8008058:	2000145c 	.word	0x2000145c
 800805c:	200018ec 	.word	0x200018ec
 8008060:	20001458 	.word	0x20001458
 8008064:	20001940 	.word	0x20001940

08008068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008070:	4b06      	ldr	r3, [pc, #24]	@ (800808c <vTaskInternalSetTimeOutState+0x24>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008078:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <vTaskInternalSetTimeOutState+0x28>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	605a      	str	r2, [r3, #4]
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20001944 	.word	0x20001944
 8008090:	20001930 	.word	0x20001930

08008094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10b      	bne.n	80080bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	613b      	str	r3, [r7, #16]
}
 80080b6:	bf00      	nop
 80080b8:	bf00      	nop
 80080ba:	e7fd      	b.n	80080b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60fb      	str	r3, [r7, #12]
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080da:	f000 ff97 	bl	800900c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080de:	4b1d      	ldr	r3, [pc, #116]	@ (8008154 <xTaskCheckForTimeOut+0xc0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d102      	bne.n	80080fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]
 80080fc:	e023      	b.n	8008146 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b15      	ldr	r3, [pc, #84]	@ (8008158 <xTaskCheckForTimeOut+0xc4>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d007      	beq.n	800811a <xTaskCheckForTimeOut+0x86>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	429a      	cmp	r2, r3
 8008112:	d302      	bcc.n	800811a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e015      	b.n	8008146 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	429a      	cmp	r2, r3
 8008122:	d20b      	bcs.n	800813c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ff99 	bl	8008068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	e004      	b.n	8008146 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008146:	f000 ff91 	bl	800906c <vPortExitCritical>

	return xReturn;
 800814a:	69fb      	ldr	r3, [r7, #28]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20001930 	.word	0x20001930
 8008158:	20001944 	.word	0x20001944

0800815c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008160:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <vTaskMissedYield+0x14>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20001940 	.word	0x20001940

08008174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800817c:	f000 f852 	bl	8008224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008180:	4b06      	ldr	r3, [pc, #24]	@ (800819c <prvIdleTask+0x28>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d9f9      	bls.n	800817c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <prvIdleTask+0x2c>)
 800818a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008198:	e7f0      	b.n	800817c <prvIdleTask+0x8>
 800819a:	bf00      	nop
 800819c:	2000145c 	.word	0x2000145c
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
 80081ae:	e00c      	b.n	80081ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4a12      	ldr	r2, [pc, #72]	@ (8008204 <prvInitialiseTaskLists+0x60>)
 80081bc:	4413      	add	r3, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f9c9 	bl	8006556 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3301      	adds	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b37      	cmp	r3, #55	@ 0x37
 80081ce:	d9ef      	bls.n	80081b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081d0:	480d      	ldr	r0, [pc, #52]	@ (8008208 <prvInitialiseTaskLists+0x64>)
 80081d2:	f7fe f9c0 	bl	8006556 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081d6:	480d      	ldr	r0, [pc, #52]	@ (800820c <prvInitialiseTaskLists+0x68>)
 80081d8:	f7fe f9bd 	bl	8006556 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081dc:	480c      	ldr	r0, [pc, #48]	@ (8008210 <prvInitialiseTaskLists+0x6c>)
 80081de:	f7fe f9ba 	bl	8006556 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081e2:	480c      	ldr	r0, [pc, #48]	@ (8008214 <prvInitialiseTaskLists+0x70>)
 80081e4:	f7fe f9b7 	bl	8006556 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081e8:	480b      	ldr	r0, [pc, #44]	@ (8008218 <prvInitialiseTaskLists+0x74>)
 80081ea:	f7fe f9b4 	bl	8006556 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ee:	4b0b      	ldr	r3, [pc, #44]	@ (800821c <prvInitialiseTaskLists+0x78>)
 80081f0:	4a05      	ldr	r2, [pc, #20]	@ (8008208 <prvInitialiseTaskLists+0x64>)
 80081f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <prvInitialiseTaskLists+0x7c>)
 80081f6:	4a05      	ldr	r2, [pc, #20]	@ (800820c <prvInitialiseTaskLists+0x68>)
 80081f8:	601a      	str	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	2000145c 	.word	0x2000145c
 8008208:	200018bc 	.word	0x200018bc
 800820c:	200018d0 	.word	0x200018d0
 8008210:	200018ec 	.word	0x200018ec
 8008214:	20001900 	.word	0x20001900
 8008218:	20001918 	.word	0x20001918
 800821c:	200018e4 	.word	0x200018e4
 8008220:	200018e8 	.word	0x200018e8

08008224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800822a:	e019      	b.n	8008260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800822c:	f000 feee 	bl	800900c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008230:	4b10      	ldr	r3, [pc, #64]	@ (8008274 <prvCheckTasksWaitingTermination+0x50>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3304      	adds	r3, #4
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe fa10 	bl	8006662 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008242:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <prvCheckTasksWaitingTermination+0x54>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3b01      	subs	r3, #1
 8008248:	4a0b      	ldr	r2, [pc, #44]	@ (8008278 <prvCheckTasksWaitingTermination+0x54>)
 800824a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800824c:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <prvCheckTasksWaitingTermination+0x58>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3b01      	subs	r3, #1
 8008252:	4a0a      	ldr	r2, [pc, #40]	@ (800827c <prvCheckTasksWaitingTermination+0x58>)
 8008254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008256:	f000 ff09 	bl	800906c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f810 	bl	8008280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <prvCheckTasksWaitingTermination+0x58>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e1      	bne.n	800822c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20001900 	.word	0x20001900
 8008278:	2000192c 	.word	0x2000192c
 800827c:	20001914 	.word	0x20001914

08008280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3354      	adds	r3, #84	@ 0x54
 800828c:	4618      	mov	r0, r3
 800828e:	f004 fddf 	bl	800ce50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008298:	2b00      	cmp	r3, #0
 800829a:	d108      	bne.n	80082ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fffb 	bl	800929c <vPortFree>
				vPortFree( pxTCB );
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fff8 	bl	800929c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ac:	e019      	b.n	80082e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d103      	bne.n	80082c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 ffef 	bl	800929c <vPortFree>
	}
 80082be:	e010      	b.n	80082e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d00b      	beq.n	80082e2 <prvDeleteTCB+0x62>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60fb      	str	r3, [r7, #12]
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <prvDeleteTCB+0x5e>
	}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <prvResetNextTaskUnblockTime+0x38>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <prvResetNextTaskUnblockTime+0x3c>)
 80082fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008304:	e008      	b.n	8008318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008306:	4b07      	ldr	r3, [pc, #28]	@ (8008324 <prvResetNextTaskUnblockTime+0x38>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	4a04      	ldr	r2, [pc, #16]	@ (8008328 <prvResetNextTaskUnblockTime+0x3c>)
 8008316:	6013      	str	r3, [r2, #0]
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	200018e4 	.word	0x200018e4
 8008328:	2000194c 	.word	0x2000194c

0800832c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008332:	4b04      	ldr	r3, [pc, #16]	@ (8008344 <xTaskGetCurrentTaskHandle+0x18>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008338:	687b      	ldr	r3, [r7, #4]
	}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr
 8008344:	20001458 	.word	0x20001458

08008348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800834e:	4b0b      	ldr	r3, [pc, #44]	@ (800837c <xTaskGetSchedulerState+0x34>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008356:	2301      	movs	r3, #1
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e008      	b.n	800836e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835c:	4b08      	ldr	r3, [pc, #32]	@ (8008380 <xTaskGetSchedulerState+0x38>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008364:	2302      	movs	r3, #2
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	e001      	b.n	800836e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800836a:	2300      	movs	r3, #0
 800836c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800836e:	687b      	ldr	r3, [r7, #4]
	}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20001938 	.word	0x20001938
 8008380:	20001954 	.word	0x20001954

08008384 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d051      	beq.n	800843e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839e:	4b2a      	ldr	r3, [pc, #168]	@ (8008448 <xTaskPriorityInherit+0xc4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d241      	bcs.n	800842c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	db06      	blt.n	80083be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b0:	4b25      	ldr	r3, [pc, #148]	@ (8008448 <xTaskPriorityInherit+0xc4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6959      	ldr	r1, [r3, #20]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a1f      	ldr	r2, [pc, #124]	@ (800844c <xTaskPriorityInherit+0xc8>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4299      	cmp	r1, r3
 80083d4:	d122      	bne.n	800841c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe f941 	bl	8006662 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083e0:	4b19      	ldr	r3, [pc, #100]	@ (8008448 <xTaskPriorityInherit+0xc4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ee:	4b18      	ldr	r3, [pc, #96]	@ (8008450 <xTaskPriorityInherit+0xcc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d903      	bls.n	80083fe <xTaskPriorityInherit+0x7a>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	4a15      	ldr	r2, [pc, #84]	@ (8008450 <xTaskPriorityInherit+0xcc>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a10      	ldr	r2, [pc, #64]	@ (800844c <xTaskPriorityInherit+0xc8>)
 800840c:	441a      	add	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7fe f8c9 	bl	80065ac <vListInsertEnd>
 800841a:	e004      	b.n	8008426 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800841c:	4b0a      	ldr	r3, [pc, #40]	@ (8008448 <xTaskPriorityInherit+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e008      	b.n	800843e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008430:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <xTaskPriorityInherit+0xc4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008436:	429a      	cmp	r2, r3
 8008438:	d201      	bcs.n	800843e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800843a:	2301      	movs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800843e:	68fb      	ldr	r3, [r7, #12]
	}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20001458 	.word	0x20001458
 800844c:	2000145c 	.word	0x2000145c
 8008450:	20001934 	.word	0x20001934

08008454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d058      	beq.n	800851c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800846a:	4b2f      	ldr	r3, [pc, #188]	@ (8008528 <xTaskPriorityDisinherit+0xd4>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	429a      	cmp	r2, r3
 8008472:	d00b      	beq.n	800848c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	bf00      	nop
 800848a:	e7fd      	b.n	8008488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60bb      	str	r3, [r7, #8]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084be:	429a      	cmp	r2, r3
 80084c0:	d02c      	beq.n	800851c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d128      	bne.n	800851c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe f8c7 	bl	8006662 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ec:	4b0f      	ldr	r3, [pc, #60]	@ (800852c <xTaskPriorityDisinherit+0xd8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d903      	bls.n	80084fc <xTaskPriorityDisinherit+0xa8>
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f8:	4a0c      	ldr	r2, [pc, #48]	@ (800852c <xTaskPriorityDisinherit+0xd8>)
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4a09      	ldr	r2, [pc, #36]	@ (8008530 <xTaskPriorityDisinherit+0xdc>)
 800850a:	441a      	add	r2, r3
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7fe f84a 	bl	80065ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800851c:	697b      	ldr	r3, [r7, #20]
	}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20001458 	.word	0x20001458
 800852c:	20001934 	.word	0x20001934
 8008530:	2000145c 	.word	0x2000145c

08008534 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008542:	2301      	movs	r3, #1
 8008544:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d06c      	beq.n	8008626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	60fb      	str	r3, [r7, #12]
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d902      	bls.n	800857c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	61fb      	str	r3, [r7, #28]
 800857a:	e002      	b.n	8008582 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008580:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	429a      	cmp	r2, r3
 800858a:	d04c      	beq.n	8008626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	429a      	cmp	r2, r3
 8008594:	d147      	bne.n	8008626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008596:	4b26      	ldr	r3, [pc, #152]	@ (8008630 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	429a      	cmp	r2, r3
 800859e:	d10b      	bne.n	80085b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60bb      	str	r3, [r7, #8]
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db04      	blt.n	80085d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	6959      	ldr	r1, [r3, #20]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4a13      	ldr	r2, [pc, #76]	@ (8008634 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085e6:	4413      	add	r3, r2
 80085e8:	4299      	cmp	r1, r3
 80085ea:	d11c      	bne.n	8008626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe f836 	bl	8006662 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008638 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d903      	bls.n	800860a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	4a0c      	ldr	r2, [pc, #48]	@ (8008638 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4a07      	ldr	r2, [pc, #28]	@ (8008634 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008618:	441a      	add	r2, r3
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	3304      	adds	r3, #4
 800861e:	4619      	mov	r1, r3
 8008620:	4610      	mov	r0, r2
 8008622:	f7fd ffc3 	bl	80065ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008626:	bf00      	nop
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20001458 	.word	0x20001458
 8008634:	2000145c 	.word	0x2000145c
 8008638:	20001934 	.word	0x20001934

0800863c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008642:	4b09      	ldr	r3, [pc, #36]	@ (8008668 <uxTaskResetEventItemValue+0x2c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864a:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <uxTaskResetEventItemValue+0x2c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008650:	4b05      	ldr	r3, [pc, #20]	@ (8008668 <uxTaskResetEventItemValue+0x2c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8008658:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800865a:	687b      	ldr	r3, [r7, #4]
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20001458 	.word	0x20001458

0800866c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <pvTaskIncrementMutexHeldCount+0x24>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <pvTaskIncrementMutexHeldCount+0x24>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800867e:	3201      	adds	r2, #1
 8008680:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008682:	4b03      	ldr	r3, [pc, #12]	@ (8008690 <pvTaskIncrementMutexHeldCount+0x24>)
 8008684:	681b      	ldr	r3, [r3, #0]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20001458 	.word	0x20001458

08008694 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800869e:	4b21      	ldr	r3, [pc, #132]	@ (8008724 <prvAddCurrentTaskToDelayedList+0x90>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a4:	4b20      	ldr	r3, [pc, #128]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd ffd9 	bl	8006662 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b6:	d10a      	bne.n	80086ce <prvAddCurrentTaskToDelayedList+0x3a>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086be:	4b1a      	ldr	r3, [pc, #104]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4819      	ldr	r0, [pc, #100]	@ (800872c <prvAddCurrentTaskToDelayedList+0x98>)
 80086c8:	f7fd ff70 	bl	80065ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086cc:	e026      	b.n	800871c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086d6:	4b14      	ldr	r3, [pc, #80]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d209      	bcs.n	80086fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e6:	4b12      	ldr	r3, [pc, #72]	@ (8008730 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fd ff7d 	bl	80065f2 <vListInsert>
}
 80086f8:	e010      	b.n	800871c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008734 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <prvAddCurrentTaskToDelayedList+0x94>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fd ff73 	bl	80065f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800870c:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	429a      	cmp	r2, r3
 8008714:	d202      	bcs.n	800871c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008716:	4a08      	ldr	r2, [pc, #32]	@ (8008738 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6013      	str	r3, [r2, #0]
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20001930 	.word	0x20001930
 8008728:	20001458 	.word	0x20001458
 800872c:	20001918 	.word	0x20001918
 8008730:	200018e8 	.word	0x200018e8
 8008734:	200018e4 	.word	0x200018e4
 8008738:	2000194c 	.word	0x2000194c

0800873c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	@ 0x28
 8008740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008746:	f000 fb11 	bl	8008d6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800874a:	4b1d      	ldr	r3, [pc, #116]	@ (80087c0 <xTimerCreateTimerTask+0x84>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d021      	beq.n	8008796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800875a:	1d3a      	adds	r2, r7, #4
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	f107 030c 	add.w	r3, r7, #12
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd fd17 	bl	8006198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	9202      	str	r2, [sp, #8]
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	2302      	movs	r3, #2
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	2300      	movs	r3, #0
 800877a:	460a      	mov	r2, r1
 800877c:	4911      	ldr	r1, [pc, #68]	@ (80087c4 <xTimerCreateTimerTask+0x88>)
 800877e:	4812      	ldr	r0, [pc, #72]	@ (80087c8 <xTimerCreateTimerTask+0x8c>)
 8008780:	f7fe ff32 	bl	80075e8 <xTaskCreateStatic>
 8008784:	4603      	mov	r3, r0
 8008786:	4a11      	ldr	r2, [pc, #68]	@ (80087cc <xTimerCreateTimerTask+0x90>)
 8008788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800878a:	4b10      	ldr	r3, [pc, #64]	@ (80087cc <xTimerCreateTimerTask+0x90>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008792:	2301      	movs	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	613b      	str	r3, [r7, #16]
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80087b4:	697b      	ldr	r3, [r7, #20]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20001988 	.word	0x20001988
 80087c4:	0800e2fc 	.word	0x0800e2fc
 80087c8:	08008909 	.word	0x08008909
 80087cc:	2000198c 	.word	0x2000198c

080087d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	@ 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087de:	2300      	movs	r3, #0
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10b      	bne.n	8008800 <xTimerGenericCommand+0x30>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	623b      	str	r3, [r7, #32]
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	e7fd      	b.n	80087fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008800:	4b19      	ldr	r3, [pc, #100]	@ (8008868 <xTimerGenericCommand+0x98>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d02a      	beq.n	800885e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b05      	cmp	r3, #5
 8008818:	dc18      	bgt.n	800884c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800881a:	f7ff fd95 	bl	8008348 <xTaskGetSchedulerState>
 800881e:	4603      	mov	r3, r0
 8008820:	2b02      	cmp	r3, #2
 8008822:	d109      	bne.n	8008838 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008824:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <xTimerGenericCommand+0x98>)
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	f107 0110 	add.w	r1, r7, #16
 800882c:	2300      	movs	r3, #0
 800882e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008830:	f7fe f944 	bl	8006abc <xQueueGenericSend>
 8008834:	6278      	str	r0, [r7, #36]	@ 0x24
 8008836:	e012      	b.n	800885e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008838:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <xTimerGenericCommand+0x98>)
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	f107 0110 	add.w	r1, r7, #16
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	f7fe f93a 	bl	8006abc <xQueueGenericSend>
 8008848:	6278      	str	r0, [r7, #36]	@ 0x24
 800884a:	e008      	b.n	800885e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800884c:	4b06      	ldr	r3, [pc, #24]	@ (8008868 <xTimerGenericCommand+0x98>)
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	f107 0110 	add.w	r1, r7, #16
 8008854:	2300      	movs	r3, #0
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	f7fe fa32 	bl	8006cc0 <xQueueGenericSendFromISR>
 800885c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008860:	4618      	mov	r0, r3
 8008862:	3728      	adds	r7, #40	@ 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20001988 	.word	0x20001988

0800886c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008876:	4b23      	ldr	r3, [pc, #140]	@ (8008904 <prvProcessExpiredTimer+0x98>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	3304      	adds	r3, #4
 8008884:	4618      	mov	r0, r3
 8008886:	f7fd feec 	bl	8006662 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d023      	beq.n	80088e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	18d1      	adds	r1, r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	6978      	ldr	r0, [r7, #20]
 80088a6:	f000 f8d3 	bl	8008a50 <prvInsertTimerInActiveList>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d020      	beq.n	80088f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	2100      	movs	r1, #0
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f7ff ff88 	bl	80087d0 <xTimerGenericCommand>
 80088c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d114      	bne.n	80088f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	60fb      	str	r3, [r7, #12]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	6978      	ldr	r0, [r7, #20]
 80088f8:	4798      	blx	r3
}
 80088fa:	bf00      	nop
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20001980 	.word	0x20001980

08008908 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008910:	f107 0308 	add.w	r3, r7, #8
 8008914:	4618      	mov	r0, r3
 8008916:	f000 f859 	bl	80089cc <prvGetNextExpireTime>
 800891a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4619      	mov	r1, r3
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f805 	bl	8008930 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008926:	f000 f8d5 	bl	8008ad4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800892a:	bf00      	nop
 800892c:	e7f0      	b.n	8008910 <prvTimerTask+0x8>
	...

08008930 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800893a:	f7ff f8b9 	bl	8007ab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800893e:	f107 0308 	add.w	r3, r7, #8
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f864 	bl	8008a10 <prvSampleTimeNow>
 8008948:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d130      	bne.n	80089b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <prvProcessTimerOrBlockTask+0x3c>
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	429a      	cmp	r2, r3
 800895c:	d806      	bhi.n	800896c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800895e:	f7ff f8b5 	bl	8007acc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ff81 	bl	800886c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800896a:	e024      	b.n	80089b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d008      	beq.n	8008984 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008972:	4b13      	ldr	r3, [pc, #76]	@ (80089c0 <prvProcessTimerOrBlockTask+0x90>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <prvProcessTimerOrBlockTask+0x50>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <prvProcessTimerOrBlockTask+0x52>
 8008980:	2300      	movs	r3, #0
 8008982:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008984:	4b0f      	ldr	r3, [pc, #60]	@ (80089c4 <prvProcessTimerOrBlockTask+0x94>)
 8008986:	6818      	ldr	r0, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	4619      	mov	r1, r3
 8008992:	f7fe fdf5 	bl	8007580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008996:	f7ff f899 	bl	8007acc <xTaskResumeAll>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089a0:	4b09      	ldr	r3, [pc, #36]	@ (80089c8 <prvProcessTimerOrBlockTask+0x98>)
 80089a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
}
 80089b0:	e001      	b.n	80089b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089b2:	f7ff f88b 	bl	8007acc <xTaskResumeAll>
}
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20001984 	.word	0x20001984
 80089c4:	20001988 	.word	0x20001988
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089d4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <prvGetNextExpireTime+0x40>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <prvGetNextExpireTime+0x16>
 80089de:	2201      	movs	r2, #1
 80089e0:	e000      	b.n	80089e4 <prvGetNextExpireTime+0x18>
 80089e2:	2200      	movs	r2, #0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089f0:	4b06      	ldr	r3, [pc, #24]	@ (8008a0c <prvGetNextExpireTime+0x40>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	e001      	b.n	8008a00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a00:	68fb      	ldr	r3, [r7, #12]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr
 8008a0c:	20001980 	.word	0x20001980

08008a10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a18:	f7ff f8f6 	bl	8007c08 <xTaskGetTickCount>
 8008a1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <prvSampleTimeNow+0x3c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d205      	bcs.n	8008a34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a28:	f000 f93a 	bl	8008ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e002      	b.n	8008a3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a3a:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <prvSampleTimeNow+0x3c>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20001990 	.word	0x20001990

08008a50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d812      	bhi.n	8008a9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d302      	bcc.n	8008a8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	e01b      	b.n	8008ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a8a:	4b10      	ldr	r3, [pc, #64]	@ (8008acc <prvInsertTimerInActiveList+0x7c>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f7fd fdac 	bl	80065f2 <vListInsert>
 8008a9a:	e012      	b.n	8008ac2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d206      	bcs.n	8008ab2 <prvInsertTimerInActiveList+0x62>
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e007      	b.n	8008ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ab2:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <prvInsertTimerInActiveList+0x80>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4610      	mov	r0, r2
 8008abe:	f7fd fd98 	bl	80065f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ac2:	697b      	ldr	r3, [r7, #20]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20001984 	.word	0x20001984
 8008ad0:	20001980 	.word	0x20001980

08008ad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	@ 0x38
 8008ad8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ada:	e0ce      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da19      	bge.n	8008b16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ae2:	1d3b      	adds	r3, r7, #4
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	61fb      	str	r3, [r7, #28]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b0c:	6850      	ldr	r0, [r2, #4]
 8008b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b10:	6892      	ldr	r2, [r2, #8]
 8008b12:	4611      	mov	r1, r2
 8008b14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f2c0 80ae 	blt.w	8008c7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d004      	beq.n	8008b34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd fd97 	bl	8006662 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b34:	463b      	mov	r3, r7
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ff6a 	bl	8008a10 <prvSampleTimeNow>
 8008b3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	f200 8097 	bhi.w	8008c74 <prvProcessReceivedCommands+0x1a0>
 8008b46:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <prvProcessReceivedCommands+0x78>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008b75 	.word	0x08008b75
 8008b58:	08008beb 	.word	0x08008beb
 8008b5c:	08008bff 	.word	0x08008bff
 8008b60:	08008c4b 	.word	0x08008c4b
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b75 	.word	0x08008b75
 8008b6c:	08008beb 	.word	0x08008beb
 8008b70:	08008bff 	.word	0x08008bff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	18d1      	adds	r1, r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b94:	f7ff ff5c 	bl	8008a50 <prvInsertTimerInActiveList>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d06c      	beq.n	8008c78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d061      	beq.n	8008c78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	441a      	add	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc6:	f7ff fe03 	bl	80087d0 <xTimerGenericCommand>
 8008bca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d152      	bne.n	8008c78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	61bb      	str	r3, [r7, #24]
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bf0:	f023 0301 	bic.w	r3, r3, #1
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bfc:	e03d      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	617b      	str	r3, [r7, #20]
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	e7fd      	b.n	8008c32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	18d1      	adds	r1, r2, r3
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c44:	f7ff ff04 	bl	8008a50 <prvInsertTimerInActiveList>
					break;
 8008c48:	e017      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c5a:	f000 fb1f 	bl	800929c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c5e:	e00c      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c66:	f023 0301 	bic.w	r3, r3, #1
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c72:	e002      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008c74:	bf00      	nop
 8008c76:	e000      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
					break;
 8008c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c7a:	4b08      	ldr	r3, [pc, #32]	@ (8008c9c <prvProcessReceivedCommands+0x1c8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1d39      	adds	r1, r7, #4
 8008c80:	2200      	movs	r2, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe f8b8 	bl	8006df8 <xQueueReceive>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af26 	bne.w	8008adc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	3730      	adds	r7, #48	@ 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20001988 	.word	0x20001988

08008ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ca6:	e049      	b.n	8008d3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd fcce 	bl	8006662 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02f      	beq.n	8008d3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90e      	bls.n	8008d0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fd fc74 	bl	80065f2 <vListInsert>
 8008d0a:	e017      	b.n	8008d3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2300      	movs	r3, #0
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff fd5a 	bl	80087d0 <xTimerGenericCommand>
 8008d1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10b      	bne.n	8008d3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	603b      	str	r3, [r7, #0]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1b0      	bne.n	8008ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d46:	4b07      	ldr	r3, [pc, #28]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d4c:	4b06      	ldr	r3, [pc, #24]	@ (8008d68 <prvSwitchTimerLists+0xc8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a04      	ldr	r2, [pc, #16]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d54:	4a04      	ldr	r2, [pc, #16]	@ (8008d68 <prvSwitchTimerLists+0xc8>)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	6013      	str	r3, [r2, #0]
}
 8008d5a:	bf00      	nop
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20001980 	.word	0x20001980
 8008d68:	20001984 	.word	0x20001984

08008d6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d72:	f000 f94b 	bl	800900c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d76:	4b15      	ldr	r3, [pc, #84]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d120      	bne.n	8008dc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d7e:	4814      	ldr	r0, [pc, #80]	@ (8008dd0 <prvCheckForValidListAndQueue+0x64>)
 8008d80:	f7fd fbe9 	bl	8006556 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d84:	4813      	ldr	r0, [pc, #76]	@ (8008dd4 <prvCheckForValidListAndQueue+0x68>)
 8008d86:	f7fd fbe6 	bl	8006556 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d8a:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <prvCheckForValidListAndQueue+0x6c>)
 8008d8c:	4a10      	ldr	r2, [pc, #64]	@ (8008dd0 <prvCheckForValidListAndQueue+0x64>)
 8008d8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d90:	4b12      	ldr	r3, [pc, #72]	@ (8008ddc <prvCheckForValidListAndQueue+0x70>)
 8008d92:	4a10      	ldr	r2, [pc, #64]	@ (8008dd4 <prvCheckForValidListAndQueue+0x68>)
 8008d94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d96:	2300      	movs	r3, #0
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	4b11      	ldr	r3, [pc, #68]	@ (8008de0 <prvCheckForValidListAndQueue+0x74>)
 8008d9c:	4a11      	ldr	r2, [pc, #68]	@ (8008de4 <prvCheckForValidListAndQueue+0x78>)
 8008d9e:	2110      	movs	r1, #16
 8008da0:	200a      	movs	r0, #10
 8008da2:	f7fd fcf1 	bl	8006788 <xQueueGenericCreateStatic>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4a08      	ldr	r2, [pc, #32]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008daa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dac:	4b07      	ldr	r3, [pc, #28]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	490b      	ldr	r1, [pc, #44]	@ (8008de8 <prvCheckForValidListAndQueue+0x7c>)
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fbb8 	bl	8007530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dc0:	f000 f954 	bl	800906c <vPortExitCritical>
}
 8008dc4:	bf00      	nop
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20001988 	.word	0x20001988
 8008dd0:	20001958 	.word	0x20001958
 8008dd4:	2000196c 	.word	0x2000196c
 8008dd8:	20001980 	.word	0x20001980
 8008ddc:	20001984 	.word	0x20001984
 8008de0:	20001a34 	.word	0x20001a34
 8008de4:	20001994 	.word	0x20001994
 8008de8:	0800e304 	.word	0x0800e304

08008dec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008dfa:	f06f 0301 	mvn.w	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e0c:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <xTimerPendFunctionCallFromISR+0x3c>)
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	f107 0114 	add.w	r1, r7, #20
 8008e14:	2300      	movs	r3, #0
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	f7fd ff52 	bl	8006cc0 <xQueueGenericSendFromISR>
 8008e1c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3728      	adds	r7, #40	@ 0x28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20001988 	.word	0x20001988

08008e2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3b04      	subs	r3, #4
 8008e3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3b04      	subs	r3, #4
 8008e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f023 0201 	bic.w	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b04      	subs	r3, #4
 8008e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e5c:	4a08      	ldr	r2, [pc, #32]	@ (8008e80 <pxPortInitialiseStack+0x54>)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3b14      	subs	r3, #20
 8008e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3b20      	subs	r3, #32
 8008e72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e74:	68fb      	ldr	r3, [r7, #12]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr
 8008e80:	08008e85 	.word	0x08008e85

08008e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e8e:	4b12      	ldr	r3, [pc, #72]	@ (8008ed8 <prvTaskExitError+0x54>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e96:	d00b      	beq.n	8008eb0 <prvTaskExitError+0x2c>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	60fb      	str	r3, [r7, #12]
}
 8008eaa:	bf00      	nop
 8008eac:	bf00      	nop
 8008eae:	e7fd      	b.n	8008eac <prvTaskExitError+0x28>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	60bb      	str	r3, [r7, #8]
}
 8008ec2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ec4:	bf00      	nop
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0fc      	beq.n	8008ec6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr
 8008ed8:	20000b10 	.word	0x20000b10
 8008edc:	00000000 	.word	0x00000000

08008ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ee0:	4b07      	ldr	r3, [pc, #28]	@ (8008f00 <pxCurrentTCBConst2>)
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008eea:	f380 8809 	msr	PSP, r0
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8811 	msr	BASEPRI, r0
 8008efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8008efe:	4770      	bx	lr

08008f00 <pxCurrentTCBConst2>:
 8008f00:	20001458 	.word	0x20001458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008f08:	4806      	ldr	r0, [pc, #24]	@ (8008f24 <prvPortStartFirstTask+0x1c>)
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f380 8808 	msr	MSP, r0
 8008f12:	b662      	cpsie	i
 8008f14:	b661      	cpsie	f
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	df00      	svc	0
 8008f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f22:	bf00      	nop
 8008f24:	e000ed08 	.word	0xe000ed08

08008f28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f2e:	4b32      	ldr	r3, [pc, #200]	@ (8008ff8 <xPortStartScheduler+0xd0>)
 8008f30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	22ff      	movs	r2, #255	@ 0xff
 8008f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	4b2a      	ldr	r3, [pc, #168]	@ (8008ffc <xPortStartScheduler+0xd4>)
 8008f54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f56:	4b2a      	ldr	r3, [pc, #168]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008f58:	2207      	movs	r2, #7
 8008f5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f5c:	e009      	b.n	8008f72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f5e:	4b28      	ldr	r3, [pc, #160]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	4a26      	ldr	r2, [pc, #152]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008f66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7a:	2b80      	cmp	r3, #128	@ 0x80
 8008f7c:	d0ef      	beq.n	8008f5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f7e:	4b20      	ldr	r3, [pc, #128]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f1c3 0307 	rsb	r3, r3, #7
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d00b      	beq.n	8008fa2 <xPortStartScheduler+0x7a>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	60bb      	str	r3, [r7, #8]
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fa2:	4b17      	ldr	r3, [pc, #92]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	4a15      	ldr	r2, [pc, #84]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008faa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fac:	4b14      	ldr	r3, [pc, #80]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fb4:	4a12      	ldr	r2, [pc, #72]	@ (8009000 <xPortStartScheduler+0xd8>)
 8008fb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fc0:	4b10      	ldr	r3, [pc, #64]	@ (8009004 <xPortStartScheduler+0xdc>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8009004 <xPortStartScheduler+0xdc>)
 8008fc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008fca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <xPortStartScheduler+0xdc>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8009004 <xPortStartScheduler+0xdc>)
 8008fd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008fd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fd8:	f000 f8b8 	bl	800914c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009008 <xPortStartScheduler+0xe0>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fe2:	f7ff ff91 	bl	8008f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fe6:	f7fe fed7 	bl	8007d98 <vTaskSwitchContext>
	prvTaskExitError();
 8008fea:	f7ff ff4b 	bl	8008e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	e000e400 	.word	0xe000e400
 8008ffc:	20001a84 	.word	0x20001a84
 8009000:	20001a88 	.word	0x20001a88
 8009004:	e000ed20 	.word	0xe000ed20
 8009008:	20000b10 	.word	0x20000b10

0800900c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	607b      	str	r3, [r7, #4]
}
 8009024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009026:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <vPortEnterCritical+0x58>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3301      	adds	r3, #1
 800902c:	4a0d      	ldr	r2, [pc, #52]	@ (8009064 <vPortEnterCritical+0x58>)
 800902e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009030:	4b0c      	ldr	r3, [pc, #48]	@ (8009064 <vPortEnterCritical+0x58>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d110      	bne.n	800905a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009038:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <vPortEnterCritical+0x5c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <vPortEnterCritical+0x4e>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	603b      	str	r3, [r7, #0]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <vPortEnterCritical+0x4a>
	}
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr
 8009064:	20000b10 	.word	0x20000b10
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009072:	4b12      	ldr	r3, [pc, #72]	@ (80090bc <vPortExitCritical+0x50>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <vPortExitCritical+0x26>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	607b      	str	r3, [r7, #4]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <vPortExitCritical+0x50>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3b01      	subs	r3, #1
 8009098:	4a08      	ldr	r2, [pc, #32]	@ (80090bc <vPortExitCritical+0x50>)
 800909a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <vPortExitCritical+0x50>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d105      	bne.n	80090b0 <vPortExitCritical+0x44>
 80090a4:	2300      	movs	r3, #0
 80090a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f383 8811 	msr	BASEPRI, r3
}
 80090ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000b10 	.word	0x20000b10

080090c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090c0:	f3ef 8009 	mrs	r0, PSP
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009100 <pxCurrentTCBConst>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090d0:	6010      	str	r0, [r2, #0]
 80090d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80090da:	f380 8811 	msr	BASEPRI, r0
 80090de:	f7fe fe5b 	bl	8007d98 <vTaskSwitchContext>
 80090e2:	f04f 0000 	mov.w	r0, #0
 80090e6:	f380 8811 	msr	BASEPRI, r0
 80090ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090f6:	f380 8809 	msr	PSP, r0
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	4770      	bx	lr

08009100 <pxCurrentTCBConst>:
 8009100:	20001458 	.word	0x20001458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop

08009108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	607b      	str	r3, [r7, #4]
}
 8009120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009122:	f7fe fd7f 	bl	8007c24 <xTaskIncrementTick>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800912c:	4b06      	ldr	r3, [pc, #24]	@ (8009148 <SysTick_Handler+0x40>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f383 8811 	msr	BASEPRI, r3
}
 800913e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009150:	4b0a      	ldr	r3, [pc, #40]	@ (800917c <vPortSetupTimerInterrupt+0x30>)
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <vPortSetupTimerInterrupt+0x34>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800915c:	4b09      	ldr	r3, [pc, #36]	@ (8009184 <vPortSetupTimerInterrupt+0x38>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a09      	ldr	r2, [pc, #36]	@ (8009188 <vPortSetupTimerInterrupt+0x3c>)
 8009162:	fba2 2303 	umull	r2, r3, r2, r3
 8009166:	099b      	lsrs	r3, r3, #6
 8009168:	4a08      	ldr	r2, [pc, #32]	@ (800918c <vPortSetupTimerInterrupt+0x40>)
 800916a:	3b01      	subs	r3, #1
 800916c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800916e:	4b03      	ldr	r3, [pc, #12]	@ (800917c <vPortSetupTimerInterrupt+0x30>)
 8009170:	2207      	movs	r2, #7
 8009172:	601a      	str	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	bc80      	pop	{r7}
 800917a:	4770      	bx	lr
 800917c:	e000e010 	.word	0xe000e010
 8009180:	e000e018 	.word	0xe000e018
 8009184:	20000b04 	.word	0x20000b04
 8009188:	10624dd3 	.word	0x10624dd3
 800918c:	e000e014 	.word	0xe000e014

08009190 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009196:	f3ef 8305 	mrs	r3, IPSR
 800919a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b0f      	cmp	r3, #15
 80091a0:	d915      	bls.n	80091ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091a2:	4a17      	ldr	r2, [pc, #92]	@ (8009200 <vPortValidateInterruptPriority+0x70>)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091ac:	4b15      	ldr	r3, [pc, #84]	@ (8009204 <vPortValidateInterruptPriority+0x74>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	7afa      	ldrb	r2, [r7, #11]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d20b      	bcs.n	80091ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	607b      	str	r3, [r7, #4]
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	e7fd      	b.n	80091ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009208 <vPortValidateInterruptPriority+0x78>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091d6:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <vPortValidateInterruptPriority+0x7c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d90b      	bls.n	80091f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	603b      	str	r3, [r7, #0]
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	e7fd      	b.n	80091f2 <vPortValidateInterruptPriority+0x62>
	}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr
 8009200:	e000e3f0 	.word	0xe000e3f0
 8009204:	20001a84 	.word	0x20001a84
 8009208:	e000ed0c 	.word	0xe000ed0c
 800920c:	20001a88 	.word	0x20001a88

08009210 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f023 0307 	bic.w	r3, r3, #7
 800922c:	3308      	adds	r3, #8
 800922e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8009230:	f7fe fc3e 	bl	8007ab0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8009234:	4b16      	ldr	r3, [pc, #88]	@ (8009290 <pvPortMalloc+0x80>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800923c:	4b15      	ldr	r3, [pc, #84]	@ (8009294 <pvPortMalloc+0x84>)
 800923e:	f023 0307 	bic.w	r3, r3, #7
 8009242:	461a      	mov	r2, r3
 8009244:	4b12      	ldr	r3, [pc, #72]	@ (8009290 <pvPortMalloc+0x80>)
 8009246:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009248:	4b13      	ldr	r3, [pc, #76]	@ (8009298 <pvPortMalloc+0x88>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4413      	add	r3, r2
 8009250:	f642 72f7 	movw	r2, #12279	@ 0x2ff7
 8009254:	4293      	cmp	r3, r2
 8009256:	d813      	bhi.n	8009280 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8009258:	4b0f      	ldr	r3, [pc, #60]	@ (8009298 <pvPortMalloc+0x88>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	441a      	add	r2, r3
 8009260:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <pvPortMalloc+0x88>)
 8009262:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009264:	429a      	cmp	r2, r3
 8009266:	d90b      	bls.n	8009280 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8009268:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <pvPortMalloc+0x80>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <pvPortMalloc+0x88>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4413      	add	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8009274:	4b08      	ldr	r3, [pc, #32]	@ (8009298 <pvPortMalloc+0x88>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	4a06      	ldr	r2, [pc, #24]	@ (8009298 <pvPortMalloc+0x88>)
 800927e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009280:	f7fe fc24 	bl	8007acc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009284:	68fb      	ldr	r3, [r7, #12]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20004a90 	.word	0x20004a90
 8009294:	20001a94 	.word	0x20001a94
 8009298:	20004a8c 	.word	0x20004a8c

0800929c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00b      	beq.n	80092c2 <vPortFree+0x26>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	60fb      	str	r3, [r7, #12]
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	e7fd      	b.n	80092be <vPortFree+0x22>
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bc80      	pop	{r7}
 80092ca:	4770      	bx	lr

080092cc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80092d4:	4a24      	ldr	r2, [pc, #144]	@ (8009368 <RadioInit+0x9c>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80092da:	4b24      	ldr	r3, [pc, #144]	@ (800936c <RadioInit+0xa0>)
 80092dc:	2200      	movs	r2, #0
 80092de:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80092e0:	4b22      	ldr	r3, [pc, #136]	@ (800936c <RadioInit+0xa0>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80092e6:	4b21      	ldr	r3, [pc, #132]	@ (800936c <RadioInit+0xa0>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80092ec:	4b1f      	ldr	r3, [pc, #124]	@ (800936c <RadioInit+0xa0>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80092f2:	481f      	ldr	r0, [pc, #124]	@ (8009370 <RadioInit+0xa4>)
 80092f4:	f001 ff86 	bl	800b204 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80092f8:	4b1c      	ldr	r3, [pc, #112]	@ (800936c <RadioInit+0xa0>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80092fe:	4b1b      	ldr	r3, [pc, #108]	@ (800936c <RadioInit+0xa0>)
 8009300:	2200      	movs	r2, #0
 8009302:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8009304:	f002 fa1a 	bl	800b73c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8009308:	2100      	movs	r1, #0
 800930a:	2000      	movs	r0, #0
 800930c:	f002 fde6 	bl	800bedc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8009310:	2204      	movs	r2, #4
 8009312:	2100      	movs	r1, #0
 8009314:	2001      	movs	r0, #1
 8009316:	f002 fba3 	bl	800ba60 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800931a:	2300      	movs	r3, #0
 800931c:	2200      	movs	r2, #0
 800931e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009322:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009326:	f002 fad3 	bl	800b8d0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800932a:	f000 fe91 	bl	800a050 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800932e:	2300      	movs	r3, #0
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4b10      	ldr	r3, [pc, #64]	@ (8009374 <RadioInit+0xa8>)
 8009334:	2200      	movs	r2, #0
 8009336:	f04f 31ff 	mov.w	r1, #4294967295
 800933a:	480f      	ldr	r0, [pc, #60]	@ (8009378 <RadioInit+0xac>)
 800933c:	f003 fa52 	bl	800c7e4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8009340:	2300      	movs	r3, #0
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	4b0d      	ldr	r3, [pc, #52]	@ (800937c <RadioInit+0xb0>)
 8009346:	2200      	movs	r2, #0
 8009348:	f04f 31ff 	mov.w	r1, #4294967295
 800934c:	480c      	ldr	r0, [pc, #48]	@ (8009380 <RadioInit+0xb4>)
 800934e:	f003 fa49 	bl	800c7e4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8009352:	4809      	ldr	r0, [pc, #36]	@ (8009378 <RadioInit+0xac>)
 8009354:	f003 faea 	bl	800c92c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8009358:	4809      	ldr	r0, [pc, #36]	@ (8009380 <RadioInit+0xb4>)
 800935a:	f003 fae7 	bl	800c92c <UTIL_TIMER_Stop>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20004b94 	.word	0x20004b94
 800936c:	20004b98 	.word	0x20004b98
 8009370:	0800a445 	.word	0x0800a445
 8009374:	0800a3cd 	.word	0x0800a3cd
 8009378:	20004bf4 	.word	0x20004bf4
 800937c:	0800a3e1 	.word	0x0800a3e1
 8009380:	20004c0c 	.word	0x20004c0c

08009384 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8009388:	f001 ff84 	bl	800b294 <SUBGRF_GetOperatingMode>
 800938c:	4603      	mov	r3, r0
 800938e:	2b07      	cmp	r3, #7
 8009390:	d00a      	beq.n	80093a8 <RadioGetStatus+0x24>
 8009392:	2b07      	cmp	r3, #7
 8009394:	dc0a      	bgt.n	80093ac <RadioGetStatus+0x28>
 8009396:	2b04      	cmp	r3, #4
 8009398:	d002      	beq.n	80093a0 <RadioGetStatus+0x1c>
 800939a:	2b05      	cmp	r3, #5
 800939c:	d002      	beq.n	80093a4 <RadioGetStatus+0x20>
 800939e:	e005      	b.n	80093ac <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80093a0:	2302      	movs	r3, #2
 80093a2:	e004      	b.n	80093ae <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e002      	b.n	80093ae <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e000      	b.n	80093ae <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80093ac:	2300      	movs	r3, #0
    }
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80093be:	4a2a      	ldr	r2, [pc, #168]	@ (8009468 <RadioSetModem+0xb4>)
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f003 f95b 	bl	800c682 <RFW_SetRadioModem>
    switch( modem )
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d80e      	bhi.n	80093f0 <RadioSetModem+0x3c>
 80093d2:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <RadioSetModem+0x24>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	080093ff 	.word	0x080093ff
 80093dc:	0800940d 	.word	0x0800940d
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	08009433 	.word	0x08009433
 80093e8:	08009441 	.word	0x08009441
 80093ec:	0800944f 	.word	0x0800944f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80093f0:	2003      	movs	r0, #3
 80093f2:	f002 fb0f 	bl	800ba14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80093f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009468 <RadioSetModem+0xb4>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	735a      	strb	r2, [r3, #13]
        break;
 80093fc:	e02f      	b.n	800945e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80093fe:	2000      	movs	r0, #0
 8009400:	f002 fb08 	bl	800ba14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009404:	4b18      	ldr	r3, [pc, #96]	@ (8009468 <RadioSetModem+0xb4>)
 8009406:	2200      	movs	r2, #0
 8009408:	735a      	strb	r2, [r3, #13]
        break;
 800940a:	e028      	b.n	800945e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800940c:	2001      	movs	r0, #1
 800940e:	f002 fb01 	bl	800ba14 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009412:	4b15      	ldr	r3, [pc, #84]	@ (8009468 <RadioSetModem+0xb4>)
 8009414:	7b5a      	ldrb	r2, [r3, #13]
 8009416:	4b14      	ldr	r3, [pc, #80]	@ (8009468 <RadioSetModem+0xb4>)
 8009418:	7b1b      	ldrb	r3, [r3, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d01e      	beq.n	800945c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800941e:	4b12      	ldr	r3, [pc, #72]	@ (8009468 <RadioSetModem+0xb4>)
 8009420:	7b1a      	ldrb	r2, [r3, #12]
 8009422:	4b11      	ldr	r3, [pc, #68]	@ (8009468 <RadioSetModem+0xb4>)
 8009424:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8009426:	4b10      	ldr	r3, [pc, #64]	@ (8009468 <RadioSetModem+0xb4>)
 8009428:	7b5b      	ldrb	r3, [r3, #13]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 ff98 	bl	800a360 <RadioSetPublicNetwork>
        }
        break;
 8009430:	e014      	b.n	800945c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009432:	2002      	movs	r0, #2
 8009434:	f002 faee 	bl	800ba14 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009438:	4b0b      	ldr	r3, [pc, #44]	@ (8009468 <RadioSetModem+0xb4>)
 800943a:	2200      	movs	r2, #0
 800943c:	735a      	strb	r2, [r3, #13]
        break;
 800943e:	e00e      	b.n	800945e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009440:	2002      	movs	r0, #2
 8009442:	f002 fae7 	bl	800ba14 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009446:	4b08      	ldr	r3, [pc, #32]	@ (8009468 <RadioSetModem+0xb4>)
 8009448:	2200      	movs	r2, #0
 800944a:	735a      	strb	r2, [r3, #13]
        break;
 800944c:	e007      	b.n	800945e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800944e:	2000      	movs	r0, #0
 8009450:	f002 fae0 	bl	800ba14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009454:	4b04      	ldr	r3, [pc, #16]	@ (8009468 <RadioSetModem+0xb4>)
 8009456:	2200      	movs	r2, #0
 8009458:	735a      	strb	r2, [r3, #13]
        break;
 800945a:	e000      	b.n	800945e <RadioSetModem+0xaa>
        break;
 800945c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20004b98 	.word	0x20004b98

0800946c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 fa87 	bl	800b988 <SUBGRF_SetRfFrequency>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b090      	sub	sp, #64	@ 0x40
 8009486:	af0a      	add	r7, sp, #40	@ 0x28
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800949e:	f000 fdea 	bl	800a076 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80094a2:	2000      	movs	r0, #0
 80094a4:	f7ff ff86 	bl	80093b4 <RadioSetModem>

    RadioSetChannel( freq );
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f7ff ffdf 	bl	800946c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80094ae:	2301      	movs	r3, #1
 80094b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b2:	2300      	movs	r3, #0
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	2300      	movs	r3, #0
 80094b8:	9307      	str	r3, [sp, #28]
 80094ba:	2300      	movs	r3, #0
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	2300      	movs	r3, #0
 80094c0:	9305      	str	r3, [sp, #20]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	2300      	movs	r3, #0
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	2303      	movs	r3, #3
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	2300      	movs	r3, #0
 80094d8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	2000      	movs	r0, #0
 80094e0:	f000 f83c 	bl	800955c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80094e4:	2000      	movs	r0, #0
 80094e6:	f000 fdcd 	bl	800a084 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80094ea:	f000 ff67 	bl	800a3bc <RadioGetWakeupTime>
 80094ee:	4603      	mov	r3, r0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f7 fedf 	bl	80012b4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80094f6:	f003 fab3 	bl	800ca60 <UTIL_TIMER_GetCurrentTime>
 80094fa:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80094fc:	e00d      	b.n	800951a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80094fe:	2000      	movs	r0, #0
 8009500:	f000 feae 	bl	800a260 <RadioRssi>
 8009504:	4603      	mov	r3, r0
 8009506:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8009508:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800950c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009510:	429a      	cmp	r2, r3
 8009512:	dd02      	ble.n	800951a <RadioIsChannelFree+0x98>
        {
            status = false;
 8009514:	2300      	movs	r3, #0
 8009516:	75fb      	strb	r3, [r7, #23]
            break;
 8009518:	e006      	b.n	8009528 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800951a:	6938      	ldr	r0, [r7, #16]
 800951c:	f003 fab2 	bl	800ca84 <UTIL_TIMER_GetElapsedTime>
 8009520:	4602      	mov	r2, r0
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	4293      	cmp	r3, r2
 8009526:	d8ea      	bhi.n	80094fe <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8009528:	f000 fda5 	bl	800a076 <RadioStandby>

    return status;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009540:	2300      	movs	r3, #0
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	2000      	movs	r0, #0
 8009548:	f002 f9c2 	bl	800b8d0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800954c:	f001 ff73 	bl	800b436 <SUBGRF_GetRandom>
 8009550:	6078      	str	r0, [r7, #4]

    return rnd;
 8009552:	687b      	ldr	r3, [r7, #4]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	@ 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	461a      	mov	r2, r3
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	4613      	mov	r3, r2
 800956e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8009570:	4ab9      	ldr	r2, [pc, #740]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009572:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8009576:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8009578:	f003 f841 	bl	800c5fe <RFW_DeInit>
    if( rxContinuous == true )
 800957c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8009588:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8009590:	4ab2      	ldr	r2, [pc, #712]	@ (800985c <RadioSetRxConfig+0x300>)
 8009592:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009596:	7013      	strb	r3, [r2, #0]
 8009598:	e002      	b.n	80095a0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800959a:	4bb0      	ldr	r3, [pc, #704]	@ (800985c <RadioSetRxConfig+0x300>)
 800959c:	22ff      	movs	r2, #255	@ 0xff
 800959e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	d009      	beq.n	80095ba <RadioSetRxConfig+0x5e>
 80095a6:	2b05      	cmp	r3, #5
 80095a8:	f300 81d7 	bgt.w	800995a <RadioSetRxConfig+0x3fe>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80bf 	beq.w	8009730 <RadioSetRxConfig+0x1d4>
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	f000 8124 	beq.w	8009800 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80095b8:	e1cf      	b.n	800995a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80095ba:	2001      	movs	r0, #1
 80095bc:	f002 f880 	bl	800b6c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80095c0:	4ba5      	ldr	r3, [pc, #660]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80095c8:	4aa3      	ldr	r2, [pc, #652]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80095ce:	4ba2      	ldr	r3, [pc, #648]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095d0:	2209      	movs	r2, #9
 80095d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80095d6:	4ba0      	ldr	r3, [pc, #640]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095d8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80095dc:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80095de:	68b8      	ldr	r0, [r7, #8]
 80095e0:	f002 ff40 	bl	800c464 <SUBGRF_GetFskBandwidthRegValue>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	4b9b      	ldr	r3, [pc, #620]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80095ee:	4b9a      	ldr	r3, [pc, #616]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80095f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	4b97      	ldr	r3, [pc, #604]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80095fc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80095fe:	4b96      	ldr	r3, [pc, #600]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009600:	2200      	movs	r2, #0
 8009602:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009604:	4b94      	ldr	r3, [pc, #592]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009606:	2210      	movs	r2, #16
 8009608:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800960a:	4b93      	ldr	r3, [pc, #588]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800960c:	2200      	movs	r2, #0
 800960e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8009610:	4b91      	ldr	r3, [pc, #580]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009612:	2200      	movs	r2, #0
 8009614:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009616:	4b91      	ldr	r3, [pc, #580]	@ (800985c <RadioSetRxConfig+0x300>)
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	4b8f      	ldr	r3, [pc, #572]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800961c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800961e:	4b8e      	ldr	r3, [pc, #568]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009620:	2201      	movs	r2, #1
 8009622:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009624:	4b8c      	ldr	r3, [pc, #560]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009626:	2200      	movs	r2, #0
 8009628:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800962a:	2005      	movs	r0, #5
 800962c:	f7ff fec2 	bl	80093b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009630:	488b      	ldr	r0, [pc, #556]	@ (8009860 <RadioSetRxConfig+0x304>)
 8009632:	f002 fae3 	bl	800bbfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009636:	488b      	ldr	r0, [pc, #556]	@ (8009864 <RadioSetRxConfig+0x308>)
 8009638:	f002 fbb2 	bl	800bda0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800963c:	4a8a      	ldr	r2, [pc, #552]	@ (8009868 <RadioSetRxConfig+0x30c>)
 800963e:	f107 031c 	add.w	r3, r7, #28
 8009642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009646:	e883 0003 	stmia.w	r3, {r0, r1}
 800964a:	f107 031c 	add.w	r3, r7, #28
 800964e:	4618      	mov	r0, r3
 8009650:	f001 fe6f 	bl	800b332 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009654:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009658:	f001 feba 	bl	800b3d0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800965c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8009660:	f000 fe1c 	bl	800a29c <RadioRead>
 8009664:	4603      	mov	r3, r0
 8009666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800966a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800966e:	f023 0310 	bic.w	r3, r3, #16
 8009672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8009676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800967a:	4619      	mov	r1, r3
 800967c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8009680:	f000 fdfa 	bl	800a278 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8009684:	2104      	movs	r1, #4
 8009686:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800968a:	f000 fdf5 	bl	800a278 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800968e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8009692:	f000 fe03 	bl	800a29c <RadioRead>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800969c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096a0:	f023 031c 	bic.w	r3, r3, #28
 80096a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096ac:	f043 0308 	orr.w	r3, r3, #8
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	4619      	mov	r1, r3
 80096b4:	f640 009b 	movw	r0, #2203	@ 0x89b
 80096b8:	f000 fdde 	bl	800a278 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80096bc:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80096c0:	f000 fdec 	bl	800a29c <RadioRead>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80096ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096ce:	f023 0318 	bic.w	r3, r3, #24
 80096d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80096d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096da:	f043 0318 	orr.w	r3, r3, #24
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80096e6:	f000 fdc7 	bl	800a278 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80096ea:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80096ee:	f000 fdd5 	bl	800a29c <RadioRead>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80096f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009708:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800970c:	b2db      	uxtb	r3, r3
 800970e:	4619      	mov	r1, r3
 8009710:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009714:	f000 fdb0 	bl	800a278 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009718:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800971a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800971e:	fb02 f303 	mul.w	r3, r2, r3
 8009722:	461a      	mov	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	fbb2 f3f3 	udiv	r3, r2, r3
 800972a:	4a4b      	ldr	r2, [pc, #300]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800972c:	6093      	str	r3, [r2, #8]
            break;
 800972e:	e115      	b.n	800995c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009730:	2000      	movs	r0, #0
 8009732:	f001 ffc5 	bl	800b6c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009736:	4b48      	ldr	r3, [pc, #288]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800973e:	4a46      	ldr	r2, [pc, #280]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009744:	4b44      	ldr	r3, [pc, #272]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009746:	220b      	movs	r2, #11
 8009748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800974c:	68b8      	ldr	r0, [r7, #8]
 800974e:	f002 fe89 	bl	800c464 <SUBGRF_GetFskBandwidthRegValue>
 8009752:	4603      	mov	r3, r0
 8009754:	461a      	mov	r2, r3
 8009756:	4b40      	ldr	r3, [pc, #256]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800975c:	4b3e      	ldr	r3, [pc, #248]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800975e:	2200      	movs	r2, #0
 8009760:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009762:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	b29a      	uxth	r2, r3
 8009768:	4b3b      	ldr	r3, [pc, #236]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800976a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800976c:	4b3a      	ldr	r3, [pc, #232]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800976e:	2204      	movs	r2, #4
 8009770:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8009772:	4b39      	ldr	r3, [pc, #228]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009774:	2218      	movs	r2, #24
 8009776:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009778:	4b37      	ldr	r3, [pc, #220]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800977a:	2200      	movs	r2, #0
 800977c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800977e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8009782:	f083 0301 	eor.w	r3, r3, #1
 8009786:	b2db      	uxtb	r3, r3
 8009788:	461a      	mov	r2, r3
 800978a:	4b33      	ldr	r3, [pc, #204]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800978c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800978e:	4b33      	ldr	r3, [pc, #204]	@ (800985c <RadioSetRxConfig+0x300>)
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	4b31      	ldr	r3, [pc, #196]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009794:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8009796:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800979e:	4b2e      	ldr	r3, [pc, #184]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80097a0:	22f2      	movs	r2, #242	@ 0xf2
 80097a2:	75da      	strb	r2, [r3, #23]
 80097a4:	e002      	b.n	80097ac <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80097a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80097ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80097b2:	f000 fc60 	bl	800a076 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80097b6:	2000      	movs	r0, #0
 80097b8:	f7ff fdfc 	bl	80093b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80097bc:	4828      	ldr	r0, [pc, #160]	@ (8009860 <RadioSetRxConfig+0x304>)
 80097be:	f002 fa1d 	bl	800bbfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80097c2:	4828      	ldr	r0, [pc, #160]	@ (8009864 <RadioSetRxConfig+0x308>)
 80097c4:	f002 faec 	bl	800bda0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80097c8:	4a28      	ldr	r2, [pc, #160]	@ (800986c <RadioSetRxConfig+0x310>)
 80097ca:	f107 0314 	add.w	r3, r7, #20
 80097ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80097d6:	f107 0314 	add.w	r3, r7, #20
 80097da:	4618      	mov	r0, r3
 80097dc:	f001 fda9 	bl	800b332 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80097e0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80097e4:	f001 fdf4 	bl	800b3d0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80097e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80097ea:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	461a      	mov	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097fa:	4a17      	ldr	r2, [pc, #92]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 80097fc:	6093      	str	r3, [r2, #8]
            break;
 80097fe:	e0ad      	b.n	800995c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009800:	2000      	movs	r0, #0
 8009802:	f001 ff5d 	bl	800b6c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009806:	4b14      	ldr	r3, [pc, #80]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	4b11      	ldr	r3, [pc, #68]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009818:	4a15      	ldr	r2, [pc, #84]	@ (8009870 <RadioSetRxConfig+0x314>)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	4413      	add	r3, r2
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8009826:	4a0c      	ldr	r2, [pc, #48]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <RadioSetRxConfig+0x2e4>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b0b      	cmp	r3, #11
 8009838:	d008      	beq.n	800984c <RadioSetRxConfig+0x2f0>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b0c      	cmp	r3, #12
 800983e:	d005      	beq.n	800984c <RadioSetRxConfig+0x2f0>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d116      	bne.n	8009874 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b0c      	cmp	r3, #12
 800984a:	d113      	bne.n	8009874 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800984c:	4b02      	ldr	r3, [pc, #8]	@ (8009858 <RadioSetRxConfig+0x2fc>)
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009854:	e012      	b.n	800987c <RadioSetRxConfig+0x320>
 8009856:	bf00      	nop
 8009858:	20004b98 	.word	0x20004b98
 800985c:	20000b14 	.word	0x20000b14
 8009860:	20004bd0 	.word	0x20004bd0
 8009864:	20004ba6 	.word	0x20004ba6
 8009868:	0800e30c 	.word	0x0800e30c
 800986c:	0800e314 	.word	0x0800e314
 8009870:	0800e5c4 	.word	0x0800e5c4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009874:	4b3b      	ldr	r3, [pc, #236]	@ (8009964 <RadioSetRxConfig+0x408>)
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800987c:	4b39      	ldr	r3, [pc, #228]	@ (8009964 <RadioSetRxConfig+0x408>)
 800987e:	2201      	movs	r2, #1
 8009880:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009882:	4b38      	ldr	r3, [pc, #224]	@ (8009964 <RadioSetRxConfig+0x408>)
 8009884:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009888:	2b05      	cmp	r3, #5
 800988a:	d004      	beq.n	8009896 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800988c:	4b35      	ldr	r3, [pc, #212]	@ (8009964 <RadioSetRxConfig+0x408>)
 800988e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009892:	2b06      	cmp	r3, #6
 8009894:	d10a      	bne.n	80098ac <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8009896:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009898:	2b0b      	cmp	r3, #11
 800989a:	d803      	bhi.n	80098a4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800989c:	4b31      	ldr	r3, [pc, #196]	@ (8009964 <RadioSetRxConfig+0x408>)
 800989e:	220c      	movs	r2, #12
 80098a0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80098a2:	e006      	b.n	80098b2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80098a4:	4a2f      	ldr	r2, [pc, #188]	@ (8009964 <RadioSetRxConfig+0x408>)
 80098a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80098a8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80098aa:	e002      	b.n	80098b2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80098ac:	4a2d      	ldr	r2, [pc, #180]	@ (8009964 <RadioSetRxConfig+0x408>)
 80098ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80098b0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80098b2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80098b6:	4b2b      	ldr	r3, [pc, #172]	@ (8009964 <RadioSetRxConfig+0x408>)
 80098b8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80098ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009968 <RadioSetRxConfig+0x40c>)
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	4b29      	ldr	r3, [pc, #164]	@ (8009964 <RadioSetRxConfig+0x408>)
 80098c0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80098c2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80098c6:	4b27      	ldr	r3, [pc, #156]	@ (8009964 <RadioSetRxConfig+0x408>)
 80098c8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80098cc:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80098d0:	4b24      	ldr	r3, [pc, #144]	@ (8009964 <RadioSetRxConfig+0x408>)
 80098d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80098d6:	f000 fbce 	bl	800a076 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80098da:	2001      	movs	r0, #1
 80098dc:	f7ff fd6a 	bl	80093b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80098e0:	4822      	ldr	r0, [pc, #136]	@ (800996c <RadioSetRxConfig+0x410>)
 80098e2:	f002 f98b 	bl	800bbfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098e6:	4822      	ldr	r0, [pc, #136]	@ (8009970 <RadioSetRxConfig+0x414>)
 80098e8:	f002 fa5a 	bl	800bda0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80098ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fef4 	bl	800b6de <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80098f6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80098fa:	f002 fbad 	bl	800c058 <SUBGRF_ReadRegister>
 80098fe:	4603      	mov	r3, r0
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	b2db      	uxtb	r3, r3
 8009906:	4619      	mov	r1, r3
 8009908:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800990c:	f002 fb90 	bl	800c030 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009910:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <RadioSetRxConfig+0x408>)
 8009912:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009916:	2b01      	cmp	r3, #1
 8009918:	d10d      	bne.n	8009936 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800991a:	f240 7036 	movw	r0, #1846	@ 0x736
 800991e:	f002 fb9b 	bl	800c058 <SUBGRF_ReadRegister>
 8009922:	4603      	mov	r3, r0
 8009924:	f023 0304 	bic.w	r3, r3, #4
 8009928:	b2db      	uxtb	r3, r3
 800992a:	4619      	mov	r1, r3
 800992c:	f240 7036 	movw	r0, #1846	@ 0x736
 8009930:	f002 fb7e 	bl	800c030 <SUBGRF_WriteRegister>
 8009934:	e00c      	b.n	8009950 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009936:	f240 7036 	movw	r0, #1846	@ 0x736
 800993a:	f002 fb8d 	bl	800c058 <SUBGRF_ReadRegister>
 800993e:	4603      	mov	r3, r0
 8009940:	f043 0304 	orr.w	r3, r3, #4
 8009944:	b2db      	uxtb	r3, r3
 8009946:	4619      	mov	r1, r3
 8009948:	f240 7036 	movw	r0, #1846	@ 0x736
 800994c:	f002 fb70 	bl	800c030 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8009950:	4b04      	ldr	r3, [pc, #16]	@ (8009964 <RadioSetRxConfig+0x408>)
 8009952:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009956:	609a      	str	r2, [r3, #8]
            break;
 8009958:	e000      	b.n	800995c <RadioSetRxConfig+0x400>
            break;
 800995a:	bf00      	nop
    }
}
 800995c:	bf00      	nop
 800995e:	3728      	adds	r7, #40	@ 0x28
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20004b98 	.word	0x20004b98
 8009968:	20000b14 	.word	0x20000b14
 800996c:	20004bd0 	.word	0x20004bd0
 8009970:	20004ba6 	.word	0x20004ba6

08009974 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60ba      	str	r2, [r7, #8]
 800997c:	607b      	str	r3, [r7, #4]
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
 8009982:	460b      	mov	r3, r1
 8009984:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8009986:	f002 fe3a 	bl	800c5fe <RFW_DeInit>
    switch( modem )
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	2b04      	cmp	r3, #4
 800998e:	f000 80c7 	beq.w	8009b20 <RadioSetTxConfig+0x1ac>
 8009992:	2b04      	cmp	r3, #4
 8009994:	f300 80d6 	bgt.w	8009b44 <RadioSetTxConfig+0x1d0>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <RadioSetTxConfig+0x2e>
 800999c:	2b01      	cmp	r3, #1
 800999e:	d059      	beq.n	8009a54 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80099a0:	e0d0      	b.n	8009b44 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80099a2:	4b77      	ldr	r3, [pc, #476]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80099aa:	4a75      	ldr	r2, [pc, #468]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80099b0:	4b73      	ldr	r3, [pc, #460]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099b2:	220b      	movs	r2, #11
 80099b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f002 fd53 	bl	800c464 <SUBGRF_GetFskBandwidthRegValue>
 80099be:	4603      	mov	r3, r0
 80099c0:	461a      	mov	r2, r3
 80099c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80099c8:	4a6d      	ldr	r2, [pc, #436]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80099ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80099d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	b29a      	uxth	r2, r3
 80099da:	4b69      	ldr	r3, [pc, #420]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099dc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80099de:	4b68      	ldr	r3, [pc, #416]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099e0:	2204      	movs	r2, #4
 80099e2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80099e4:	4b66      	ldr	r3, [pc, #408]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099e6:	2218      	movs	r2, #24
 80099e8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80099ea:	4b65      	ldr	r3, [pc, #404]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80099f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099f4:	f083 0301 	eor.w	r3, r3, #1
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	4b60      	ldr	r3, [pc, #384]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 80099fe:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8009a00:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009a08:	4b5d      	ldr	r3, [pc, #372]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a0a:	22f2      	movs	r2, #242	@ 0xf2
 8009a0c:	75da      	strb	r2, [r3, #23]
 8009a0e:	e002      	b.n	8009a16 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009a10:	4b5b      	ldr	r3, [pc, #364]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a12:	2201      	movs	r2, #1
 8009a14:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009a16:	4b5a      	ldr	r3, [pc, #360]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009a1c:	f000 fb2b 	bl	800a076 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8009a20:	2000      	movs	r0, #0
 8009a22:	f7ff fcc7 	bl	80093b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009a26:	4857      	ldr	r0, [pc, #348]	@ (8009b84 <RadioSetTxConfig+0x210>)
 8009a28:	f002 f8e8 	bl	800bbfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a2c:	4856      	ldr	r0, [pc, #344]	@ (8009b88 <RadioSetTxConfig+0x214>)
 8009a2e:	f002 f9b7 	bl	800bda0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009a32:	4a56      	ldr	r2, [pc, #344]	@ (8009b8c <RadioSetTxConfig+0x218>)
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 fc74 	bl	800b332 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009a4a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009a4e:	f001 fcbf 	bl	800b3d0 <SUBGRF_SetWhiteningSeed>
            break;
 8009a52:	e078      	b.n	8009b46 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a54:	4b4a      	ldr	r3, [pc, #296]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	4b47      	ldr	r3, [pc, #284]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8009a66:	4a4a      	ldr	r2, [pc, #296]	@ (8009b90 <RadioSetTxConfig+0x21c>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	781a      	ldrb	r2, [r3, #0]
 8009a6e:	4b44      	ldr	r3, [pc, #272]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009a74:	4a42      	ldr	r2, [pc, #264]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a7a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <RadioSetTxConfig+0x11c>
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2b0b      	cmp	r3, #11
 8009a88:	d008      	beq.n	8009a9c <RadioSetTxConfig+0x128>
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2b0c      	cmp	r3, #12
 8009a8e:	d005      	beq.n	8009a9c <RadioSetTxConfig+0x128>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d107      	bne.n	8009aa6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	2b0c      	cmp	r3, #12
 8009a9a:	d104      	bne.n	8009aa6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009a9c:	4b38      	ldr	r3, [pc, #224]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009aa4:	e003      	b.n	8009aae <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009aa6:	4b36      	ldr	r3, [pc, #216]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009aae:	4b34      	ldr	r3, [pc, #208]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009ab4:	4b32      	ldr	r3, [pc, #200]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d004      	beq.n	8009ac8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009abe:	4b30      	ldr	r3, [pc, #192]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009ac4:	2b06      	cmp	r3, #6
 8009ac6:	d10a      	bne.n	8009ade <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8009ac8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009aca:	2b0b      	cmp	r3, #11
 8009acc:	d803      	bhi.n	8009ad6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009ace:	4b2c      	ldr	r3, [pc, #176]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009ad0:	220c      	movs	r2, #12
 8009ad2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009ad4:	e006      	b.n	8009ae4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009ad8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ada:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009adc:	e002      	b.n	8009ae4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009ade:	4a28      	ldr	r2, [pc, #160]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009ae0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ae2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009ae4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009ae8:	4b25      	ldr	r3, [pc, #148]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009aea:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009aec:	4b29      	ldr	r3, [pc, #164]	@ (8009b94 <RadioSetTxConfig+0x220>)
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	4b23      	ldr	r3, [pc, #140]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009af2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009af4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009af8:	4b21      	ldr	r3, [pc, #132]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009afa:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009afe:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8009b02:	4b1f      	ldr	r3, [pc, #124]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8009b08:	f000 fab5 	bl	800a076 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	f7ff fc51 	bl	80093b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b12:	481c      	ldr	r0, [pc, #112]	@ (8009b84 <RadioSetTxConfig+0x210>)
 8009b14:	f002 f872 	bl	800bbfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b18:	481b      	ldr	r0, [pc, #108]	@ (8009b88 <RadioSetTxConfig+0x214>)
 8009b1a:	f002 f941 	bl	800bda0 <SUBGRF_SetPacketParams>
            break;
 8009b1e:	e012      	b.n	8009b46 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009b20:	2004      	movs	r0, #4
 8009b22:	f7ff fc47 	bl	80093b4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009b26:	4b16      	ldr	r3, [pc, #88]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b28:	2202      	movs	r2, #2
 8009b2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009b2e:	4a14      	ldr	r2, [pc, #80]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009b34:	4b12      	ldr	r3, [pc, #72]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b36:	2216      	movs	r2, #22
 8009b38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b3c:	4811      	ldr	r0, [pc, #68]	@ (8009b84 <RadioSetTxConfig+0x210>)
 8009b3e:	f002 f85d 	bl	800bbfc <SUBGRF_SetModulationParams>
            break;
 8009b42:	e000      	b.n	8009b46 <RadioSetTxConfig+0x1d2>
            break;
 8009b44:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f002 fb8c 	bl	800c268 <SUBGRF_SetRfTxPower>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	4b0a      	ldr	r3, [pc, #40]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b56:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009b5a:	210e      	movs	r1, #14
 8009b5c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009b60:	f002 fa66 	bl	800c030 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009b64:	4b06      	ldr	r3, [pc, #24]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b66:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f002 fd5b 	bl	800c626 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009b70:	4a03      	ldr	r2, [pc, #12]	@ (8009b80 <RadioSetTxConfig+0x20c>)
 8009b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b74:	6053      	str	r3, [r2, #4]
}
 8009b76:	bf00      	nop
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20004b98 	.word	0x20004b98
 8009b84:	20004bd0 	.word	0x20004bd0
 8009b88:	20004ba6 	.word	0x20004ba6
 8009b8c:	0800e314 	.word	0x0800e314
 8009b90:	0800e5c4 	.word	0x0800e5c4
 8009b94:	20000b14 	.word	0x20000b14

08009b98 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
    return true;
 8009ba0:	2301      	movs	r3, #1
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr

08009bac <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	2b0a      	cmp	r3, #10
 8009bbe:	d83e      	bhi.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <RadioGetLoRaBandwidthInHz+0x1c>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	08009c05 	.word	0x08009c05
 8009bd0:	08009c15 	.word	0x08009c15
 8009bd4:	08009c25 	.word	0x08009c25
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009c33 	.word	0x08009c33
 8009be0:	08009c39 	.word	0x08009c39
 8009be4:	08009c3f 	.word	0x08009c3f
 8009be8:	08009bfd 	.word	0x08009bfd
 8009bec:	08009c0d 	.word	0x08009c0d
 8009bf0:	08009c1d 	.word	0x08009c1d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8009bf4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8009bf8:	60fb      	str	r3, [r7, #12]
        break;
 8009bfa:	e020      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8009bfc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8009c00:	60fb      	str	r3, [r7, #12]
        break;
 8009c02:	e01c      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8009c04:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8009c08:	60fb      	str	r3, [r7, #12]
        break;
 8009c0a:	e018      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009c0c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8009c10:	60fb      	str	r3, [r7, #12]
        break;
 8009c12:	e014      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8009c14:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8009c18:	60fb      	str	r3, [r7, #12]
        break;
 8009c1a:	e010      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009c1c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8009c20:	60fb      	str	r3, [r7, #12]
        break;
 8009c22:	e00c      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009c24:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8009c28:	60fb      	str	r3, [r7, #12]
        break;
 8009c2a:	e008      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009c2c:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <RadioGetLoRaBandwidthInHz+0xa0>)
 8009c2e:	60fb      	str	r3, [r7, #12]
        break;
 8009c30:	e005      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8009c32:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <RadioGetLoRaBandwidthInHz+0xa4>)
 8009c34:	60fb      	str	r3, [r7, #12]
        break;
 8009c36:	e002      	b.n	8009c3e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8009c38:	4b06      	ldr	r3, [pc, #24]	@ (8009c54 <RadioGetLoRaBandwidthInHz+0xa8>)
 8009c3a:	60fb      	str	r3, [r7, #12]
        break;
 8009c3c:	bf00      	nop
    }

    return bandwidthInHz;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc80      	pop	{r7}
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	0001e848 	.word	0x0001e848
 8009c50:	0003d090 	.word	0x0003d090
 8009c54:	0007a120 	.word	0x0007a120

08009c58 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	4608      	mov	r0, r1
 8009c62:	4611      	mov	r1, r2
 8009c64:	461a      	mov	r2, r3
 8009c66:	4603      	mov	r3, r0
 8009c68:	70fb      	strb	r3, [r7, #3]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	803b      	strh	r3, [r7, #0]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8009c72:	883b      	ldrh	r3, [r7, #0]
 8009c74:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c76:	78ba      	ldrb	r2, [r7, #2]
 8009c78:	f082 0201 	eor.w	r2, r2, #1
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d001      	beq.n	8009c86 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8009c82:	2208      	movs	r2, #8
 8009c84:	e000      	b.n	8009c88 <RadioGetGfskTimeOnAirNumerator+0x30>
 8009c86:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8009c88:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009c8a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8009c8e:	7c3b      	ldrb	r3, [r7, #16]
 8009c90:	7d39      	ldrb	r1, [r7, #20]
 8009c92:	2900      	cmp	r1, #0
 8009c94:	d001      	beq.n	8009c9a <RadioGetGfskTimeOnAirNumerator+0x42>
 8009c96:	2102      	movs	r1, #2
 8009c98:	e000      	b.n	8009c9c <RadioGetGfskTimeOnAirNumerator+0x44>
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	440b      	add	r3, r1
 8009c9e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009ca0:	4413      	add	r3, r2
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bc80      	pop	{r7}
 8009caa:	4770      	bx	lr

08009cac <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b08b      	sub	sp, #44	@ 0x2c
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	460b      	mov	r3, r1
 8009cbc:	71fb      	strb	r3, [r7, #7]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d002      	beq.n	8009cda <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2b06      	cmp	r3, #6
 8009cd8:	d104      	bne.n	8009ce4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8009cda:	88bb      	ldrh	r3, [r7, #4]
 8009cdc:	2b0b      	cmp	r3, #11
 8009cde:	d801      	bhi.n	8009ce4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8009ce0:	230c      	movs	r3, #12
 8009ce2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d105      	bne.n	8009cf6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b0b      	cmp	r3, #11
 8009cee:	d008      	beq.n	8009d02 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b0c      	cmp	r3, #12
 8009cf4:	d005      	beq.n	8009d02 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d105      	bne.n	8009d08 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2b0c      	cmp	r3, #12
 8009d00:	d102      	bne.n	8009d08 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009d08:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009d0c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8009d0e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d12:	2a00      	cmp	r2, #0
 8009d14:	d001      	beq.n	8009d1a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8009d16:	2210      	movs	r2, #16
 8009d18:	e000      	b.n	8009d1c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8009d1a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009d1c:	4413      	add	r3, r2
 8009d1e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009d24:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8009d26:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	d001      	beq.n	8009d32 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	e000      	b.n	8009d34 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8009d32:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009d34:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009d36:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2b06      	cmp	r3, #6
 8009d3c:	d803      	bhi.n	8009d46 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	623b      	str	r3, [r7, #32]
 8009d44:	e00e      	b.n	8009d64 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	3b02      	subs	r3, #2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	623b      	str	r3, [r7, #32]
 8009d5c:	e002      	b.n	8009d64 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	da01      	bge.n	8009d6e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	4413      	add	r3, r2
 8009d74:	1e5a      	subs	r2, r3, #1
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	fb03 f202 	mul.w	r2, r3, r2
 8009d82:	88bb      	ldrh	r3, [r7, #4]
 8009d84:	4413      	add	r3, r2
    int32_t intermediate =
 8009d86:	330c      	adds	r3, #12
 8009d88:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b06      	cmp	r3, #6
 8009d8e:	d802      	bhi.n	8009d96 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	3302      	adds	r3, #2
 8009d94:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	3b02      	subs	r3, #2
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	372c      	adds	r7, #44	@ 0x2c
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr
	...

08009db0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	@ 0x28
 8009db4:	af04      	add	r7, sp, #16
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	613b      	str	r3, [r7, #16]

    switch( modem )
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <RadioTimeOnAir+0x28>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d017      	beq.n	8009e06 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8009dd6:	e035      	b.n	8009e44 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8009dd8:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8009ddc:	8c3a      	ldrh	r2, [r7, #32]
 8009dde:	7bb9      	ldrb	r1, [r7, #14]
 8009de0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	4603      	mov	r3, r0
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ff32 	bl	8009c58 <RadioGetGfskTimeOnAirNumerator>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009dfa:	fb02 f303 	mul.w	r3, r2, r3
 8009dfe:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	613b      	str	r3, [r7, #16]
        break;
 8009e04:	e01e      	b.n	8009e44 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8009e06:	8c39      	ldrh	r1, [r7, #32]
 8009e08:	7bba      	ldrb	r2, [r7, #14]
 8009e0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009e0e:	9302      	str	r3, [sp, #8]
 8009e10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	68b8      	ldr	r0, [r7, #8]
 8009e22:	f7ff ff43 	bl	8009cac <RadioGetLoRaTimeOnAirNumerator>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009e2c:	fb02 f303 	mul.w	r3, r2, r3
 8009e30:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009e32:	4a0a      	ldr	r2, [pc, #40]	@ (8009e5c <RadioTimeOnAir+0xac>)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4413      	add	r3, r2
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff feb6 	bl	8009bac <RadioGetLoRaBandwidthInHz>
 8009e40:	6138      	str	r0, [r7, #16]
        break;
 8009e42:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	4413      	add	r3, r2
 8009e4a:	1e5a      	subs	r2, r3, #1
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0800e5c4 	.word	0x0800e5c4

08009e60 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f240 2101 	movw	r1, #513	@ 0x201
 8009e74:	f240 2001 	movw	r0, #513	@ 0x201
 8009e78:	f001 fd2a 	bl	800b8d0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009e7c:	4b70      	ldr	r3, [pc, #448]	@ (800a040 <RadioSend+0x1e0>)
 8009e7e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009e82:	2101      	movs	r1, #1
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 f9c7 	bl	800c218 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8009e8a:	4b6d      	ldr	r3, [pc, #436]	@ (800a040 <RadioSend+0x1e0>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d112      	bne.n	8009eb8 <RadioSend+0x58>
 8009e92:	4b6b      	ldr	r3, [pc, #428]	@ (800a040 <RadioSend+0x1e0>)
 8009e94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e98:	2b06      	cmp	r3, #6
 8009e9a:	d10d      	bne.n	8009eb8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009e9c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009ea0:	f002 f8da 	bl	800c058 <SUBGRF_ReadRegister>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f023 0304 	bic.w	r3, r3, #4
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	4619      	mov	r1, r3
 8009eae:	f640 0089 	movw	r0, #2185	@ 0x889
 8009eb2:	f002 f8bd 	bl	800c030 <SUBGRF_WriteRegister>
 8009eb6:	e00c      	b.n	8009ed2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009eb8:	f640 0089 	movw	r0, #2185	@ 0x889
 8009ebc:	f002 f8cc 	bl	800c058 <SUBGRF_ReadRegister>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f043 0304 	orr.w	r3, r3, #4
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f640 0089 	movw	r0, #2185	@ 0x889
 8009ece:	f002 f8af 	bl	800c030 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009ed2:	4b5b      	ldr	r3, [pc, #364]	@ (800a040 <RadioSend+0x1e0>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	f200 80a2 	bhi.w	800a020 <RadioSend+0x1c0>
 8009edc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee4 <RadioSend+0x84>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009f13 	.word	0x08009f13
 8009ee8:	08009ef9 	.word	0x08009ef9
 8009eec:	08009f13 	.word	0x08009f13
 8009ef0:	08009f69 	.word	0x08009f69
 8009ef4:	08009f89 	.word	0x08009f89
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8009ef8:	4a51      	ldr	r2, [pc, #324]	@ (800a040 <RadioSend+0x1e0>)
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009efe:	4851      	ldr	r0, [pc, #324]	@ (800a044 <RadioSend+0x1e4>)
 8009f00:	f001 ff4e 	bl	800bda0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	2200      	movs	r2, #0
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 f9fe 	bl	800b30c <SUBGRF_SendPayload>
            break;
 8009f10:	e087      	b.n	800a022 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009f12:	f002 fb7a 	bl	800c60a <RFW_Is_Init>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d118      	bne.n	8009f4e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009f1c:	f107 020d 	add.w	r2, r7, #13
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f002 fb88 	bl	800c63a <RFW_TransmitInit>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10c      	bne.n	8009f4a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009f30:	7b7a      	ldrb	r2, [r7, #13]
 8009f32:	4b43      	ldr	r3, [pc, #268]	@ (800a040 <RadioSend+0x1e0>)
 8009f34:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f36:	4843      	ldr	r0, [pc, #268]	@ (800a044 <RadioSend+0x1e4>)
 8009f38:	f001 ff32 	bl	800bda0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8009f3c:	7b7b      	ldrb	r3, [r7, #13]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 f9e2 	bl	800b30c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009f48:	e06b      	b.n	800a022 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e073      	b.n	800a036 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8009f4e:	4a3c      	ldr	r2, [pc, #240]	@ (800a040 <RadioSend+0x1e0>)
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f54:	483b      	ldr	r0, [pc, #236]	@ (800a044 <RadioSend+0x1e4>)
 8009f56:	f001 ff23 	bl	800bda0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f9d3 	bl	800b30c <SUBGRF_SendPayload>
            break;
 8009f66:	e05c      	b.n	800a022 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009f68:	4b35      	ldr	r3, [pc, #212]	@ (800a040 <RadioSend+0x1e0>)
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009f6e:	4a34      	ldr	r2, [pc, #208]	@ (800a040 <RadioSend+0x1e0>)
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f74:	4833      	ldr	r0, [pc, #204]	@ (800a044 <RadioSend+0x1e4>)
 8009f76:	f001 ff13 	bl	800bda0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f9c3 	bl	800b30c <SUBGRF_SendPayload>
            break;
 8009f86:	e04c      	b.n	800a022 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	482e      	ldr	r0, [pc, #184]	@ (800a048 <RadioSend+0x1e8>)
 8009f90:	f000 fc96 	bl	800a8c0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009f94:	4b2a      	ldr	r3, [pc, #168]	@ (800a040 <RadioSend+0x1e0>)
 8009f96:	2202      	movs	r2, #2
 8009f98:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	4b27      	ldr	r3, [pc, #156]	@ (800a040 <RadioSend+0x1e0>)
 8009fa2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009fa4:	4827      	ldr	r0, [pc, #156]	@ (800a044 <RadioSend+0x1e4>)
 8009fa6:	f001 fefb 	bl	800bda0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009faa:	2100      	movs	r1, #0
 8009fac:	20f1      	movs	r0, #241	@ 0xf1
 8009fae:	f000 f963 	bl	800a278 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	20f0      	movs	r0, #240	@ 0xf0
 8009fb6:	f000 f95f 	bl	800a278 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009fba:	4b21      	ldr	r3, [pc, #132]	@ (800a040 <RadioSend+0x1e0>)
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fbe:	2b64      	cmp	r3, #100	@ 0x64
 8009fc0:	d108      	bne.n	8009fd4 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009fc2:	2170      	movs	r1, #112	@ 0x70
 8009fc4:	20f3      	movs	r0, #243	@ 0xf3
 8009fc6:	f000 f957 	bl	800a278 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8009fca:	211d      	movs	r1, #29
 8009fcc:	20f2      	movs	r0, #242	@ 0xf2
 8009fce:	f000 f953 	bl	800a278 <RadioWrite>
 8009fd2:	e007      	b.n	8009fe4 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009fd4:	21e1      	movs	r1, #225	@ 0xe1
 8009fd6:	20f3      	movs	r0, #243	@ 0xf3
 8009fd8:	f000 f94e 	bl	800a278 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009fdc:	2104      	movs	r1, #4
 8009fde:	20f2      	movs	r0, #242	@ 0xf2
 8009fe0:	f000 f94a 	bl	800a278 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3302      	adds	r3, #2
 8009fee:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009ff0:	89fb      	ldrh	r3, [r7, #14]
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	20f4      	movs	r0, #244	@ 0xf4
 8009ffc:	f000 f93c 	bl	800a278 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	4619      	mov	r1, r3
 800a006:	20f5      	movs	r0, #245	@ 0xf5
 800a008:	f000 f936 	bl	800a278 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	3301      	adds	r3, #1
 800a010:	b2db      	uxtb	r3, r3
 800a012:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800a016:	4619      	mov	r1, r3
 800a018:	480b      	ldr	r0, [pc, #44]	@ (800a048 <RadioSend+0x1e8>)
 800a01a:	f001 f977 	bl	800b30c <SUBGRF_SendPayload>
            break;
 800a01e:	e000      	b.n	800a022 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800a020:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800a022:	4b07      	ldr	r3, [pc, #28]	@ (800a040 <RadioSend+0x1e0>)
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	4619      	mov	r1, r3
 800a028:	4808      	ldr	r0, [pc, #32]	@ (800a04c <RadioSend+0x1ec>)
 800a02a:	f002 fcef 	bl	800ca0c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800a02e:	4807      	ldr	r0, [pc, #28]	@ (800a04c <RadioSend+0x1ec>)
 800a030:	f002 fc0e 	bl	800c850 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20004b98 	.word	0x20004b98
 800a044:	20004ba6 	.word	0x20004ba6
 800a048:	20004a94 	.word	0x20004a94
 800a04c:	20004bf4 	.word	0x20004bf4

0800a050 <RadioSleep>:

static void RadioSleep( void )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800a056:	2300      	movs	r3, #0
 800a058:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800a05a:	793b      	ldrb	r3, [r7, #4]
 800a05c:	f043 0304 	orr.w	r3, r3, #4
 800a060:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800a062:	7938      	ldrb	r0, [r7, #4]
 800a064:	f001 fa2e 	bl	800b4c4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800a068:	2002      	movs	r0, #2
 800a06a:	f7f7 f923 	bl	80012b4 <HAL_Delay>
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <RadioStandby>:

static void RadioStandby( void )
{
 800a076:	b580      	push	{r7, lr}
 800a078:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a07a:	2000      	movs	r0, #0
 800a07c:	f001 fa54 	bl	800b528 <SUBGRF_SetStandby>
}
 800a080:	bf00      	nop
 800a082:	bd80      	pop	{r7, pc}

0800a084 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800a08c:	f002 fabd 	bl	800c60a <RFW_Is_Init>
 800a090:	4603      	mov	r3, r0
 800a092:	2b01      	cmp	r3, #1
 800a094:	d102      	bne.n	800a09c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800a096:	f002 fae0 	bl	800c65a <RFW_ReceiveInit>
 800a09a:	e007      	b.n	800a0ac <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a09c:	2300      	movs	r3, #0
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f240 2162 	movw	r1, #610	@ 0x262
 800a0a4:	f240 2062 	movw	r0, #610	@ 0x262
 800a0a8:	f001 fc12 	bl	800b8d0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d006      	beq.n	800a0c0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	4811      	ldr	r0, [pc, #68]	@ (800a0fc <RadioRx+0x78>)
 800a0b6:	f002 fca9 	bl	800ca0c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a0ba:	4810      	ldr	r0, [pc, #64]	@ (800a0fc <RadioRx+0x78>)
 800a0bc:	f002 fbc8 	bl	800c850 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a100 <RadioRx+0x7c>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <RadioRx+0x7c>)
 800a0c8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f002 f8a2 	bl	800c218 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a100 <RadioRx+0x7c>)
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a0dc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a0e0:	f001 fa5e 	bl	800b5a0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800a0e4:	e005      	b.n	800a0f2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800a0e6:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <RadioRx+0x7c>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	019b      	lsls	r3, r3, #6
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 fa57 	bl	800b5a0 <SUBGRF_SetRx>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20004c0c 	.word	0x20004c0c
 800a100:	20004b98 	.word	0x20004b98

0800a104 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800a10c:	f002 fa7d 	bl	800c60a <RFW_Is_Init>
 800a110:	4603      	mov	r3, r0
 800a112:	2b01      	cmp	r3, #1
 800a114:	d102      	bne.n	800a11c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800a116:	f002 faa0 	bl	800c65a <RFW_ReceiveInit>
 800a11a:	e007      	b.n	800a12c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a11c:	2300      	movs	r3, #0
 800a11e:	2200      	movs	r2, #0
 800a120:	f240 2162 	movw	r1, #610	@ 0x262
 800a124:	f240 2062 	movw	r0, #610	@ 0x262
 800a128:	f001 fbd2 	bl	800b8d0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d006      	beq.n	800a140 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	4811      	ldr	r0, [pc, #68]	@ (800a17c <RadioRxBoosted+0x78>)
 800a136:	f002 fc69 	bl	800ca0c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a13a:	4810      	ldr	r0, [pc, #64]	@ (800a17c <RadioRxBoosted+0x78>)
 800a13c:	f002 fb88 	bl	800c850 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a140:	4b0f      	ldr	r3, [pc, #60]	@ (800a180 <RadioRxBoosted+0x7c>)
 800a142:	2200      	movs	r2, #0
 800a144:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a146:	4b0e      	ldr	r3, [pc, #56]	@ (800a180 <RadioRxBoosted+0x7c>)
 800a148:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a14c:	2100      	movs	r1, #0
 800a14e:	4618      	mov	r0, r3
 800a150:	f002 f862 	bl	800c218 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800a154:	4b0a      	ldr	r3, [pc, #40]	@ (800a180 <RadioRxBoosted+0x7c>)
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a15c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a160:	f001 fa3e 	bl	800b5e0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800a164:	e005      	b.n	800a172 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800a166:	4b06      	ldr	r3, [pc, #24]	@ (800a180 <RadioRxBoosted+0x7c>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	019b      	lsls	r3, r3, #6
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 fa37 	bl	800b5e0 <SUBGRF_SetRxBoosted>
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	20004c0c 	.word	0x20004c0c
 800a180:	20004b98 	.word	0x20004b98

0800a184 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	005a      	lsls	r2, r3, #1
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	4413      	add	r3, r2
 800a196:	4a0c      	ldr	r2, [pc, #48]	@ (800a1c8 <RadioSetRxDutyCycle+0x44>)
 800a198:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a19a:	2300      	movs	r3, #0
 800a19c:	2200      	movs	r2, #0
 800a19e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a1a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a1a6:	f001 fb93 	bl	800b8d0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a1aa:	4b07      	ldr	r3, [pc, #28]	@ (800a1c8 <RadioSetRxDutyCycle+0x44>)
 800a1ac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f002 f830 	bl	800c218 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fa34 	bl	800b628 <SUBGRF_SetRxDutyCycle>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20004b98 	.word	0x20004b98

0800a1cc <RadioStartCad>:

static void RadioStartCad( void )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a1d0:	4b09      	ldr	r3, [pc, #36]	@ (800a1f8 <RadioStartCad+0x2c>)
 800a1d2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f002 f81d 	bl	800c218 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a1e6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800a1ea:	f001 fb71 	bl	800b8d0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800a1ee:	f001 fa47 	bl	800b680 <SUBGRF_SetCad>
}
 800a1f2:	bf00      	nop
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20004b98 	.word	0x20004b98

0800a1fc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
 800a208:	4613      	mov	r3, r2
 800a20a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800a20c:	883b      	ldrh	r3, [r7, #0]
 800a20e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a212:	fb02 f303 	mul.w	r3, r2, r3
 800a216:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 fbb5 	bl	800b988 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800a21e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a222:	4618      	mov	r0, r3
 800a224:	f002 f820 	bl	800c268 <SUBGRF_SetRfTxPower>
 800a228:	4603      	mov	r3, r0
 800a22a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a22c:	210e      	movs	r1, #14
 800a22e:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a232:	f001 fefd 	bl	800c030 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	2101      	movs	r1, #1
 800a23a:	4618      	mov	r0, r3
 800a23c:	f001 ffec 	bl	800c218 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800a240:	f001 fa2c 	bl	800b69c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800a244:	68f9      	ldr	r1, [r7, #12]
 800a246:	4805      	ldr	r0, [pc, #20]	@ (800a25c <RadioSetTxContinuousWave+0x60>)
 800a248:	f002 fbe0 	bl	800ca0c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a24c:	4803      	ldr	r0, [pc, #12]	@ (800a25c <RadioSetTxContinuousWave+0x60>)
 800a24e:	f002 faff 	bl	800c850 <UTIL_TIMER_Start>
}
 800a252:	bf00      	nop
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20004bf4 	.word	0x20004bf4

0800a260 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800a26a:	f001 fe4e 	bl	800bf0a <SUBGRF_GetRssiInst>
 800a26e:	4603      	mov	r3, r0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	460a      	mov	r2, r1
 800a282:	80fb      	strh	r3, [r7, #6]
 800a284:	4613      	mov	r3, r2
 800a286:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800a288:	797a      	ldrb	r2, [r7, #5]
 800a28a:	88fb      	ldrh	r3, [r7, #6]
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 fece 	bl	800c030 <SUBGRF_WriteRegister>
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f001 fed5 	bl	800c058 <SUBGRF_ReadRegister>
 800a2ae:	4603      	mov	r3, r0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	80fb      	strh	r3, [r7, #6]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800a2c8:	797b      	ldrb	r3, [r7, #5]
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 fed5 	bl	800c080 <SUBGRF_WriteRegisters>
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	6039      	str	r1, [r7, #0]
 800a2e8:	80fb      	strh	r3, [r7, #6]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800a2ee:	797b      	ldrb	r3, [r7, #5]
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	88fb      	ldrh	r3, [r7, #6]
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 fee4 	bl	800c0c4 <SUBGRF_ReadRegisters>
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	460a      	mov	r2, r1
 800a30e:	71fb      	strb	r3, [r7, #7]
 800a310:	4613      	mov	r3, r2
 800a312:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d10a      	bne.n	800a330 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a31a:	4a0e      	ldr	r2, [pc, #56]	@ (800a354 <RadioSetMaxPayloadLength+0x50>)
 800a31c:	79bb      	ldrb	r3, [r7, #6]
 800a31e:	7013      	strb	r3, [r2, #0]
 800a320:	4b0c      	ldr	r3, [pc, #48]	@ (800a354 <RadioSetMaxPayloadLength+0x50>)
 800a322:	781a      	ldrb	r2, [r3, #0]
 800a324:	4b0c      	ldr	r3, [pc, #48]	@ (800a358 <RadioSetMaxPayloadLength+0x54>)
 800a326:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a328:	480c      	ldr	r0, [pc, #48]	@ (800a35c <RadioSetMaxPayloadLength+0x58>)
 800a32a:	f001 fd39 	bl	800bda0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800a32e:	e00d      	b.n	800a34c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a330:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <RadioSetMaxPayloadLength+0x54>)
 800a332:	7d5b      	ldrb	r3, [r3, #21]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d109      	bne.n	800a34c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a338:	4a06      	ldr	r2, [pc, #24]	@ (800a354 <RadioSetMaxPayloadLength+0x50>)
 800a33a:	79bb      	ldrb	r3, [r7, #6]
 800a33c:	7013      	strb	r3, [r2, #0]
 800a33e:	4b05      	ldr	r3, [pc, #20]	@ (800a354 <RadioSetMaxPayloadLength+0x50>)
 800a340:	781a      	ldrb	r2, [r3, #0]
 800a342:	4b05      	ldr	r3, [pc, #20]	@ (800a358 <RadioSetMaxPayloadLength+0x54>)
 800a344:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a346:	4805      	ldr	r0, [pc, #20]	@ (800a35c <RadioSetMaxPayloadLength+0x58>)
 800a348:	f001 fd2a 	bl	800bda0 <SUBGRF_SetPacketParams>
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000b14 	.word	0x20000b14
 800a358:	20004b98 	.word	0x20004b98
 800a35c:	20004ba6 	.word	0x20004ba6

0800a360 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800a36a:	4a13      	ldr	r2, [pc, #76]	@ (800a3b8 <RadioSetPublicNetwork+0x58>)
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	7313      	strb	r3, [r2, #12]
 800a370:	4b11      	ldr	r3, [pc, #68]	@ (800a3b8 <RadioSetPublicNetwork+0x58>)
 800a372:	7b1a      	ldrb	r2, [r3, #12]
 800a374:	4b10      	ldr	r3, [pc, #64]	@ (800a3b8 <RadioSetPublicNetwork+0x58>)
 800a376:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800a378:	2001      	movs	r0, #1
 800a37a:	f7ff f81b 	bl	80093b4 <RadioSetModem>
    if( enable == true )
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a384:	2134      	movs	r1, #52	@ 0x34
 800a386:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a38a:	f001 fe51 	bl	800c030 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a38e:	2144      	movs	r1, #68	@ 0x44
 800a390:	f240 7041 	movw	r0, #1857	@ 0x741
 800a394:	f001 fe4c 	bl	800c030 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800a398:	e009      	b.n	800a3ae <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a39a:	2114      	movs	r1, #20
 800a39c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800a3a0:	f001 fe46 	bl	800c030 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a3a4:	2124      	movs	r1, #36	@ 0x24
 800a3a6:	f240 7041 	movw	r0, #1857	@ 0x741
 800a3aa:	f001 fe41 	bl	800c030 <SUBGRF_WriteRegister>
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20004b98 	.word	0x20004b98

0800a3bc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800a3c0:	f001 ff86 	bl	800c2d0 <SUBGRF_GetRadioWakeUpTime>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	3303      	adds	r3, #3
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800a3d4:	f000 f80e 	bl	800a3f4 <RadioOnTxTimeoutProcess>
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800a3e8:	f000 f818 	bl	800a41c <RadioOnRxTimeoutProcess>
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a3f8:	4b07      	ldr	r3, [pc, #28]	@ (800a418 <RadioOnTxTimeoutProcess+0x24>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d008      	beq.n	800a412 <RadioOnTxTimeoutProcess+0x1e>
 800a400:	4b05      	ldr	r3, [pc, #20]	@ (800a418 <RadioOnTxTimeoutProcess+0x24>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800a40a:	4b03      	ldr	r3, [pc, #12]	@ (800a418 <RadioOnTxTimeoutProcess+0x24>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4798      	blx	r3
    }
}
 800a412:	bf00      	nop
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20004b94 	.word	0x20004b94

0800a41c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a420:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <RadioOnRxTimeoutProcess+0x24>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d008      	beq.n	800a43a <RadioOnRxTimeoutProcess+0x1e>
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <RadioOnRxTimeoutProcess+0x24>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800a432:	4b03      	ldr	r3, [pc, #12]	@ (800a440 <RadioOnRxTimeoutProcess+0x24>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	4798      	blx	r3
    }
}
 800a43a:	bf00      	nop
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20004b94 	.word	0x20004b94

0800a444 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800a44e:	4a05      	ldr	r2, [pc, #20]	@ (800a464 <RadioOnDioIrq+0x20>)
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 800a456:	f000 f807 	bl	800a468 <RadioIrqProcess>
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20004b98 	.word	0x20004b98

0800a468 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800a468:	b5b0      	push	{r4, r5, r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800a476:	4ba5      	ldr	r3, [pc, #660]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a478:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a480:	f000 810d 	beq.w	800a69e <RadioIrqProcess+0x236>
 800a484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a488:	f300 81c0 	bgt.w	800a80c <RadioIrqProcess+0x3a4>
 800a48c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a490:	f000 80f1 	beq.w	800a676 <RadioIrqProcess+0x20e>
 800a494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a498:	f300 81b8 	bgt.w	800a80c <RadioIrqProcess+0x3a4>
 800a49c:	2b80      	cmp	r3, #128	@ 0x80
 800a49e:	f000 80d6 	beq.w	800a64e <RadioIrqProcess+0x1e6>
 800a4a2:	2b80      	cmp	r3, #128	@ 0x80
 800a4a4:	f300 81b2 	bgt.w	800a80c <RadioIrqProcess+0x3a4>
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	dc49      	bgt.n	800a540 <RadioIrqProcess+0xd8>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f340 81ad 	ble.w	800a80c <RadioIrqProcess+0x3a4>
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	2b1f      	cmp	r3, #31
 800a4b6:	f200 81a9 	bhi.w	800a80c <RadioIrqProcess+0x3a4>
 800a4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c0 <RadioIrqProcess+0x58>)
 800a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c0:	0800a549 	.word	0x0800a549
 800a4c4:	0800a583 	.word	0x0800a583
 800a4c8:	0800a80d 	.word	0x0800a80d
 800a4cc:	0800a729 	.word	0x0800a729
 800a4d0:	0800a80d 	.word	0x0800a80d
 800a4d4:	0800a80d 	.word	0x0800a80d
 800a4d8:	0800a80d 	.word	0x0800a80d
 800a4dc:	0800a797 	.word	0x0800a797
 800a4e0:	0800a80d 	.word	0x0800a80d
 800a4e4:	0800a80d 	.word	0x0800a80d
 800a4e8:	0800a80d 	.word	0x0800a80d
 800a4ec:	0800a80d 	.word	0x0800a80d
 800a4f0:	0800a80d 	.word	0x0800a80d
 800a4f4:	0800a80d 	.word	0x0800a80d
 800a4f8:	0800a80d 	.word	0x0800a80d
 800a4fc:	0800a80d 	.word	0x0800a80d
 800a500:	0800a80d 	.word	0x0800a80d
 800a504:	0800a80d 	.word	0x0800a80d
 800a508:	0800a80d 	.word	0x0800a80d
 800a50c:	0800a80d 	.word	0x0800a80d
 800a510:	0800a80d 	.word	0x0800a80d
 800a514:	0800a80d 	.word	0x0800a80d
 800a518:	0800a80d 	.word	0x0800a80d
 800a51c:	0800a80d 	.word	0x0800a80d
 800a520:	0800a80d 	.word	0x0800a80d
 800a524:	0800a80d 	.word	0x0800a80d
 800a528:	0800a80d 	.word	0x0800a80d
 800a52c:	0800a80d 	.word	0x0800a80d
 800a530:	0800a80d 	.word	0x0800a80d
 800a534:	0800a80d 	.word	0x0800a80d
 800a538:	0800a80d 	.word	0x0800a80d
 800a53c:	0800a7a7 	.word	0x0800a7a7
 800a540:	2b40      	cmp	r3, #64	@ 0x40
 800a542:	f000 814b 	beq.w	800a7dc <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800a546:	e161      	b.n	800a80c <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800a548:	4871      	ldr	r0, [pc, #452]	@ (800a710 <RadioIrqProcess+0x2a8>)
 800a54a:	f002 f9ef 	bl	800c92c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800a54e:	2000      	movs	r0, #0
 800a550:	f000 ffea 	bl	800b528 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800a554:	f002 f860 	bl	800c618 <RFW_Is_LongPacketModeEnabled>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800a55e:	f002 f884 	bl	800c66a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800a562:	4b6c      	ldr	r3, [pc, #432]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8152 	beq.w	800a810 <RadioIrqProcess+0x3a8>
 800a56c:	4b69      	ldr	r3, [pc, #420]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 814c 	beq.w	800a810 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800a578:	4b66      	ldr	r3, [pc, #408]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4798      	blx	r3
        break;
 800a580:	e146      	b.n	800a810 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800a582:	4865      	ldr	r0, [pc, #404]	@ (800a718 <RadioIrqProcess+0x2b0>)
 800a584:	f002 f9d2 	bl	800c92c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a588:	4b60      	ldr	r3, [pc, #384]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	f083 0301 	eor.w	r3, r3, #1
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d014      	beq.n	800a5c0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800a596:	2000      	movs	r0, #0
 800a598:	f000 ffc6 	bl	800b528 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800a59c:	2100      	movs	r1, #0
 800a59e:	f640 1002 	movw	r0, #2306	@ 0x902
 800a5a2:	f001 fd45 	bl	800c030 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800a5a6:	f640 1044 	movw	r0, #2372	@ 0x944
 800a5aa:	f001 fd55 	bl	800c058 <SUBGRF_ReadRegister>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f043 0302 	orr.w	r3, r3, #2
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	f640 1044 	movw	r0, #2372	@ 0x944
 800a5bc:	f001 fd38 	bl	800c030 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800a5c0:	1dfb      	adds	r3, r7, #7
 800a5c2:	22ff      	movs	r2, #255	@ 0xff
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4855      	ldr	r0, [pc, #340]	@ (800a71c <RadioIrqProcess+0x2b4>)
 800a5c8:	f000 fe7e 	bl	800b2c8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800a5cc:	4854      	ldr	r0, [pc, #336]	@ (800a720 <RadioIrqProcess+0x2b8>)
 800a5ce:	f001 fcdd 	bl	800bf8c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a5d2:	4b50      	ldr	r3, [pc, #320]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 811c 	beq.w	800a814 <RadioIrqProcess+0x3ac>
 800a5dc:	4b4d      	ldr	r3, [pc, #308]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 8116 	beq.w	800a814 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800a5e8:	4b48      	ldr	r3, [pc, #288]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a5ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d10e      	bne.n	800a610 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800a5f2:	4b48      	ldr	r3, [pc, #288]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689c      	ldr	r4, [r3, #8]
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4b43      	ldr	r3, [pc, #268]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a5fe:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800a602:	461a      	mov	r2, r3
 800a604:	4b41      	ldr	r3, [pc, #260]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a606:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800a60a:	4844      	ldr	r0, [pc, #272]	@ (800a71c <RadioIrqProcess+0x2b4>)
 800a60c:	47a0      	blx	r4
                break;
 800a60e:	e01d      	b.n	800a64c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800a610:	4b3e      	ldr	r3, [pc, #248]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a614:	463a      	mov	r2, r7
 800a616:	4611      	mov	r1, r2
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 ff4b 	bl	800c4b4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800a61e:	4b3d      	ldr	r3, [pc, #244]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689c      	ldr	r4, [r3, #8]
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	4619      	mov	r1, r3
 800a628:	4b38      	ldr	r3, [pc, #224]	@ (800a70c <RadioIrqProcess+0x2a4>)
 800a62a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800a62e:	4618      	mov	r0, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a636:	4a3b      	ldr	r2, [pc, #236]	@ (800a724 <RadioIrqProcess+0x2bc>)
 800a638:	fb82 5203 	smull	r5, r2, r2, r3
 800a63c:	1192      	asrs	r2, r2, #6
 800a63e:	17db      	asrs	r3, r3, #31
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	b25b      	sxtb	r3, r3
 800a644:	4602      	mov	r2, r0
 800a646:	4835      	ldr	r0, [pc, #212]	@ (800a71c <RadioIrqProcess+0x2b4>)
 800a648:	47a0      	blx	r4
                break;
 800a64a:	bf00      	nop
        break;
 800a64c:	e0e2      	b.n	800a814 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800a64e:	2000      	movs	r0, #0
 800a650:	f000 ff6a 	bl	800b528 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a654:	4b2f      	ldr	r3, [pc, #188]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 80dd 	beq.w	800a818 <RadioIrqProcess+0x3b0>
 800a65e:	4b2d      	ldr	r3, [pc, #180]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80d7 	beq.w	800a818 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800a66a:	4b2a      	ldr	r3, [pc, #168]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	2000      	movs	r0, #0
 800a672:	4798      	blx	r3
        break;
 800a674:	e0d0      	b.n	800a818 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800a676:	2000      	movs	r0, #0
 800a678:	f000 ff56 	bl	800b528 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a67c:	4b25      	ldr	r3, [pc, #148]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80cb 	beq.w	800a81c <RadioIrqProcess+0x3b4>
 800a686:	4b23      	ldr	r3, [pc, #140]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 80c5 	beq.w	800a81c <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800a692:	4b20      	ldr	r3, [pc, #128]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	2001      	movs	r0, #1
 800a69a:	4798      	blx	r3
        break;
 800a69c:	e0be      	b.n	800a81c <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a69e:	f000 fdf9 	bl	800b294 <SUBGRF_GetOperatingMode>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	d115      	bne.n	800a6d4 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 800a6a8:	4819      	ldr	r0, [pc, #100]	@ (800a710 <RadioIrqProcess+0x2a8>)
 800a6aa:	f002 f93f 	bl	800c92c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f000 ff3a 	bl	800b528 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a6b4:	4b17      	ldr	r3, [pc, #92]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80b1 	beq.w	800a820 <RadioIrqProcess+0x3b8>
 800a6be:	4b15      	ldr	r3, [pc, #84]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 80ab 	beq.w	800a820 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800a6ca:	4b12      	ldr	r3, [pc, #72]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4798      	blx	r3
        break;
 800a6d2:	e0a5      	b.n	800a820 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a6d4:	f000 fdde 	bl	800b294 <SUBGRF_GetOperatingMode>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	f040 80a0 	bne.w	800a820 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 800a6e0:	480d      	ldr	r0, [pc, #52]	@ (800a718 <RadioIrqProcess+0x2b0>)
 800a6e2:	f002 f923 	bl	800c92c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f000 ff1e 	bl	800b528 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a6ec:	4b09      	ldr	r3, [pc, #36]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 8095 	beq.w	800a820 <RadioIrqProcess+0x3b8>
 800a6f6:	4b07      	ldr	r3, [pc, #28]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 808f 	beq.w	800a820 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800a702:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <RadioIrqProcess+0x2ac>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4798      	blx	r3
        break;
 800a70a:	e089      	b.n	800a820 <RadioIrqProcess+0x3b8>
 800a70c:	20004b98 	.word	0x20004b98
 800a710:	20004bf4 	.word	0x20004bf4
 800a714:	20004b94 	.word	0x20004b94
 800a718:	20004c0c 	.word	0x20004c0c
 800a71c:	20004a94 	.word	0x20004a94
 800a720:	20004bbc 	.word	0x20004bbc
 800a724:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800a728:	4b44      	ldr	r3, [pc, #272]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d079      	beq.n	800a824 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800a730:	4a43      	ldr	r2, [pc, #268]	@ (800a840 <RadioIrqProcess+0x3d8>)
 800a732:	4b42      	ldr	r3, [pc, #264]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a736:	0c1b      	lsrs	r3, r3, #16
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	4619      	mov	r1, r3
 800a73c:	f640 1003 	movw	r0, #2307	@ 0x903
 800a740:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800a742:	4a3f      	ldr	r2, [pc, #252]	@ (800a840 <RadioIrqProcess+0x3d8>)
 800a744:	4b3d      	ldr	r3, [pc, #244]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a748:	0a1b      	lsrs	r3, r3, #8
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	4619      	mov	r1, r3
 800a74e:	f640 1004 	movw	r0, #2308	@ 0x904
 800a752:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800a754:	4a3a      	ldr	r2, [pc, #232]	@ (800a840 <RadioIrqProcess+0x3d8>)
 800a756:	4b39      	ldr	r3, [pc, #228]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	4619      	mov	r1, r3
 800a75e:	f640 1005 	movw	r0, #2309	@ 0x905
 800a762:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800a764:	4c36      	ldr	r4, [pc, #216]	@ (800a840 <RadioIrqProcess+0x3d8>)
 800a766:	4b37      	ldr	r3, [pc, #220]	@ (800a844 <RadioIrqProcess+0x3dc>)
 800a768:	f640 1002 	movw	r0, #2306	@ 0x902
 800a76c:	4798      	blx	r3
 800a76e:	4603      	mov	r3, r0
 800a770:	f043 0301 	orr.w	r3, r3, #1
 800a774:	b2db      	uxtb	r3, r3
 800a776:	4619      	mov	r1, r3
 800a778:	f640 1002 	movw	r0, #2306	@ 0x902
 800a77c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800a77e:	4b2f      	ldr	r3, [pc, #188]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a780:	2200      	movs	r2, #0
 800a782:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a784:	2300      	movs	r3, #0
 800a786:	2200      	movs	r2, #0
 800a788:	f240 2162 	movw	r1, #610	@ 0x262
 800a78c:	f240 2062 	movw	r0, #610	@ 0x262
 800a790:	f001 f89e 	bl	800b8d0 <SUBGRF_SetDioIrqParams>
        break;
 800a794:	e046      	b.n	800a824 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800a796:	f001 ff38 	bl	800c60a <RFW_Is_Init>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d143      	bne.n	800a828 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 800a7a0:	f001 ff69 	bl	800c676 <RFW_ReceivePayload>
        break;
 800a7a4:	e040      	b.n	800a828 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800a7a6:	4828      	ldr	r0, [pc, #160]	@ (800a848 <RadioIrqProcess+0x3e0>)
 800a7a8:	f002 f8c0 	bl	800c92c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a7ac:	4b23      	ldr	r3, [pc, #140]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	f083 0301 	eor.w	r3, r3, #1
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f000 feb4 	bl	800b528 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a7c0:	4b22      	ldr	r3, [pc, #136]	@ (800a84c <RadioIrqProcess+0x3e4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d031      	beq.n	800a82c <RadioIrqProcess+0x3c4>
 800a7c8:	4b20      	ldr	r3, [pc, #128]	@ (800a84c <RadioIrqProcess+0x3e4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d02c      	beq.n	800a82c <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a84c <RadioIrqProcess+0x3e4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	4798      	blx	r3
        break;
 800a7da:	e027      	b.n	800a82c <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800a7dc:	4b17      	ldr	r3, [pc, #92]	@ (800a83c <RadioIrqProcess+0x3d4>)
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	f083 0301 	eor.w	r3, r3, #1
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	f000 fe9c 	bl	800b528 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800a7f0:	4b16      	ldr	r3, [pc, #88]	@ (800a84c <RadioIrqProcess+0x3e4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01b      	beq.n	800a830 <RadioIrqProcess+0x3c8>
 800a7f8:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <RadioIrqProcess+0x3e4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d016      	beq.n	800a830 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800a802:	4b12      	ldr	r3, [pc, #72]	@ (800a84c <RadioIrqProcess+0x3e4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	4798      	blx	r3
        break;
 800a80a:	e011      	b.n	800a830 <RadioIrqProcess+0x3c8>
        break;
 800a80c:	bf00      	nop
 800a80e:	e010      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a810:	bf00      	nop
 800a812:	e00e      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a814:	bf00      	nop
 800a816:	e00c      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a818:	bf00      	nop
 800a81a:	e00a      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a81c:	bf00      	nop
 800a81e:	e008      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a820:	bf00      	nop
 800a822:	e006      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a824:	bf00      	nop
 800a826:	e004      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a828:	bf00      	nop
 800a82a:	e002      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a82c:	bf00      	nop
 800a82e:	e000      	b.n	800a832 <RadioIrqProcess+0x3ca>
        break;
 800a830:	bf00      	nop
    }
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bdb0      	pop	{r4, r5, r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20004b98 	.word	0x20004b98
 800a840:	0800a279 	.word	0x0800a279
 800a844:	0800a29d 	.word	0x0800a29d
 800a848:	20004c0c 	.word	0x20004c0c
 800a84c:	20004b94 	.word	0x20004b94

0800a850 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a854:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <RadioTxPrbs+0x2c>)
 800a856:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a85a:	2101      	movs	r1, #1
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 fcdb 	bl	800c218 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a862:	4b07      	ldr	r3, [pc, #28]	@ (800a880 <RadioTxPrbs+0x30>)
 800a864:	212d      	movs	r1, #45	@ 0x2d
 800a866:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a86a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a86c:	f000 ff1f 	bl	800b6ae <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a870:	4804      	ldr	r0, [pc, #16]	@ (800a884 <RadioTxPrbs+0x34>)
 800a872:	f000 fe75 	bl	800b560 <SUBGRF_SetTx>
}
 800a876:	bf00      	nop
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20004b98 	.word	0x20004b98
 800a880:	0800a279 	.word	0x0800a279
 800a884:	000fffff 	.word	0x000fffff

0800a888 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a896:	4618      	mov	r0, r3
 800a898:	f001 fce6 	bl	800c268 <SUBGRF_SetRfTxPower>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a8a0:	210e      	movs	r1, #14
 800a8a2:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a8a6:	f001 fbc3 	bl	800c030 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 fcb2 	bl	800c218 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a8b4:	f000 fef2 	bl	800b69c <SUBGRF_SetTxContinuousWave>
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b089      	sub	sp, #36	@ 0x24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61bb      	str	r3, [r7, #24]
 800a8da:	e011      	b.n	800a900 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	781a      	ldrb	r2, [r3, #0]
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	440b      	add	r3, r1
 800a8ea:	43d2      	mvns	r2, r2
 800a8ec:	b2d2      	uxtb	r2, r2
 800a8ee:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	61bb      	str	r3, [r7, #24]
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	429a      	cmp	r2, r3
 800a906:	dbe9      	blt.n	800a8dc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a908:	2300      	movs	r3, #0
 800a90a:	61bb      	str	r3, [r7, #24]
 800a90c:	e049      	b.n	800a9a2 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	425a      	negs	r2, r3
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	f002 0207 	and.w	r2, r2, #7
 800a91a:	bf58      	it	pl
 800a91c:	4253      	negpl	r3, r2
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f1c3 0307 	rsb	r3, r3, #7
 800a924:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	da00      	bge.n	800a92e <payload_integration+0x6e>
 800a92c:	3307      	adds	r3, #7
 800a92e:	10db      	asrs	r3, r3, #3
 800a930:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	3301      	adds	r3, #1
 800a936:	425a      	negs	r2, r3
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	f002 0207 	and.w	r2, r2, #7
 800a940:	bf58      	it	pl
 800a942:	4253      	negpl	r3, r2
 800a944:	b2db      	uxtb	r3, r3
 800a946:	f1c3 0307 	rsb	r3, r3, #7
 800a94a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	3301      	adds	r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	da00      	bge.n	800a956 <payload_integration+0x96>
 800a954:	3307      	adds	r3, #7
 800a956:	10db      	asrs	r3, r3, #3
 800a958:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	4413      	add	r3, r2
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	fa42 f303 	asr.w	r3, r2, r3
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a972:	7ffa      	ldrb	r2, [r7, #31]
 800a974:	7cfb      	ldrb	r3, [r7, #19]
 800a976:	4053      	eors	r3, r2
 800a978:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a97a:	7d3b      	ldrb	r3, [r7, #20]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b25a      	sxtb	r2, r3
 800a984:	7ff9      	ldrb	r1, [r7, #31]
 800a986:	7d7b      	ldrb	r3, [r7, #21]
 800a988:	fa01 f303 	lsl.w	r3, r1, r3
 800a98c:	b25b      	sxtb	r3, r3
 800a98e:	4313      	orrs	r3, r2
 800a990:	b259      	sxtb	r1, r3
 800a992:	7d3b      	ldrb	r3, [r7, #20]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	b2ca      	uxtb	r2, r1
 800a99a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	61bb      	str	r3, [r7, #24]
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	dbb0      	blt.n	800a90e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
 800a9ae:	01db      	lsls	r3, r3, #7
 800a9b0:	b25a      	sxtb	r2, r3
 800a9b2:	7ffb      	ldrb	r3, [r7, #31]
 800a9b4:	019b      	lsls	r3, r3, #6
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	7ffa      	ldrb	r2, [r7, #31]
 800a9be:	2a00      	cmp	r2, #0
 800a9c0:	d101      	bne.n	800a9c6 <payload_integration+0x106>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	e000      	b.n	800a9c8 <payload_integration+0x108>
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	b259      	sxtb	r1, r3
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	b2ca      	uxtb	r2, r1
 800a9d4:	701a      	strb	r2, [r3, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	3724      	adds	r7, #36	@ 0x24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bc80      	pop	{r7}
 800a9de:	4770      	bx	lr

0800a9e0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08c      	sub	sp, #48	@ 0x30
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	623b      	str	r3, [r7, #32]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a9fc:	f001 fdff 	bl	800c5fe <RFW_DeInit>

    if( rxContinuous != 0 )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bf14      	ite	ne
 800aa10:	2301      	movne	r3, #1
 800aa12:	2300      	moveq	r3, #0
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	4ba3      	ldr	r3, [pc, #652]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aa18:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <RadioSetRxGenericConfig+0x48>
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	f000 80dc 	beq.w	800abde <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800aa26:	e194      	b.n	800ad52 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <RadioSetRxGenericConfig+0x58>
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <RadioSetRxGenericConfig+0x5e>
            return -1;
 800aa38:	f04f 33ff 	mov.w	r3, #4294967295
 800aa3c:	e18a      	b.n	800ad54 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	7f9b      	ldrb	r3, [r3, #30]
 800aa42:	2b08      	cmp	r3, #8
 800aa44:	d902      	bls.n	800aa4c <RadioSetRxGenericConfig+0x6c>
            return -1;
 800aa46:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4a:	e183      	b.n	800ad54 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	6919      	ldr	r1, [r3, #16]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	7f9b      	ldrb	r3, [r3, #30]
 800aa54:	461a      	mov	r2, r3
 800aa56:	f107 0320 	add.w	r3, r7, #32
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fe87 	bl	800c76e <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bf14      	ite	ne
 800aa68:	2301      	movne	r3, #1
 800aa6a:	2300      	moveq	r3, #0
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fe26 	bl	800b6c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800aa74:	4b8b      	ldr	r3, [pc, #556]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	4a88      	ldr	r2, [pc, #544]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aa82:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f893 2020 	ldrb.w	r2, [r3, #32]
 800aa8a:	4b86      	ldr	r3, [pc, #536]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aa8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 fce5 	bl	800c464 <SUBGRF_GetFskBandwidthRegValue>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4b81      	ldr	r3, [pc, #516]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aaa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800aaa4:	4b7f      	ldr	r3, [pc, #508]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	4b7b      	ldr	r3, [pc, #492]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aab6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	7fda      	ldrb	r2, [r3, #31]
 800aabc:	4b79      	ldr	r3, [pc, #484]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aabe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	7f9b      	ldrb	r3, [r3, #30]
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	4b76      	ldr	r3, [pc, #472]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aaca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800aad2:	4b74      	ldr	r3, [pc, #464]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aad4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	4b6f      	ldr	r3, [pc, #444]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aae8:	759a      	strb	r2, [r3, #22]
 800aaea:	e00b      	b.n	800ab04 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d103      	bne.n	800aafe <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800aaf6:	4b6b      	ldr	r3, [pc, #428]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800aaf8:	22ff      	movs	r2, #255	@ 0xff
 800aafa:	759a      	strb	r2, [r3, #22]
 800aafc:	e002      	b.n	800ab04 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800aafe:	4b69      	ldr	r3, [pc, #420]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab00:	22ff      	movs	r2, #255	@ 0xff
 800ab02:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d004      	beq.n	800ab18 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d12d      	bne.n	800ab74 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ab1e:	2bf1      	cmp	r3, #241	@ 0xf1
 800ab20:	d00c      	beq.n	800ab3c <RadioSetRxGenericConfig+0x15c>
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ab28:	2bf2      	cmp	r3, #242	@ 0xf2
 800ab2a:	d007      	beq.n	800ab3c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d002      	beq.n	800ab3c <RadioSetRxGenericConfig+0x15c>
                return -1;
 800ab36:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3a:	e10b      	b.n	800ad54 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800ab44:	4b58      	ldr	r3, [pc, #352]	@ (800aca8 <RadioSetRxGenericConfig+0x2c8>)
 800ab46:	6819      	ldr	r1, [r3, #0]
 800ab48:	f107 0314 	add.w	r3, r7, #20
 800ab4c:	4a57      	ldr	r2, [pc, #348]	@ (800acac <RadioSetRxGenericConfig+0x2cc>)
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 fd48 	bl	800c5e4 <RFW_Init>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <RadioSetRxGenericConfig+0x180>
                return -1;
 800ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5e:	e0f9      	b.n	800ad54 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ab60:	4b50      	ldr	r3, [pc, #320]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800ab66:	4b4f      	ldr	r3, [pc, #316]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ab6c:	4b4d      	ldr	r3, [pc, #308]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	755a      	strb	r2, [r3, #21]
        {
 800ab72:	e00e      	b.n	800ab92 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800ab7a:	4b4a      	ldr	r3, [pc, #296]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab7c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ab84:	4b47      	ldr	r3, [pc, #284]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab86:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800ab8e:	4b45      	ldr	r3, [pc, #276]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ab90:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ab92:	f7ff fa70 	bl	800a076 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ab96:	2000      	movs	r0, #0
 800ab98:	f7fe fc0c 	bl	80093b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ab9c:	4844      	ldr	r0, [pc, #272]	@ (800acb0 <RadioSetRxGenericConfig+0x2d0>)
 800ab9e:	f001 f82d 	bl	800bbfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aba2:	4844      	ldr	r0, [pc, #272]	@ (800acb4 <RadioSetRxGenericConfig+0x2d4>)
 800aba4:	f001 f8fc 	bl	800bda0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800aba8:	f107 0320 	add.w	r3, r7, #32
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fbc0 	bl	800b332 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	8b9b      	ldrh	r3, [r3, #28]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fc0a 	bl	800b3d0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	8b1b      	ldrh	r3, [r3, #24]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fbe5 	bl	800b390 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800abcc:	fb03 f202 	mul.w	r2, r3, r2
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd8:	4a32      	ldr	r2, [pc, #200]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800abda:	6093      	str	r3, [r2, #8]
        break;
 800abdc:	e0b9      	b.n	800ad52 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <RadioSetRxGenericConfig+0x20c>
            return -1;
 800abe6:	f04f 33ff 	mov.w	r3, #4294967295
 800abea:	e0b3      	b.n	800ad54 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d104      	bne.n	800ac00 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800abfe:	e002      	b.n	800ac06 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800ac00:	23ff      	movs	r3, #255	@ 0xff
 800ac02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	bf14      	ite	ne
 800ac0e:	2301      	movne	r3, #1
 800ac10:	2300      	moveq	r3, #0
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fd53 	bl	800b6c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fd5d 	bl	800b6de <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ac24:	4b1f      	ldr	r3, [pc, #124]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800ac32:	4b1c      	ldr	r3, [pc, #112]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800ac3e:	4b19      	ldr	r3, [pc, #100]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800ac4a:	4b16      	ldr	r3, [pc, #88]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac4c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d010      	beq.n	800ac7c <RadioSetRxGenericConfig+0x29c>
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	dc2c      	bgt.n	800acb8 <RadioSetRxGenericConfig+0x2d8>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <RadioSetRxGenericConfig+0x288>
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d005      	beq.n	800ac72 <RadioSetRxGenericConfig+0x292>
            break;
 800ac66:	e027      	b.n	800acb8 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ac68:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ac70:	e023      	b.n	800acba <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ac72:	4b0c      	ldr	r3, [pc, #48]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ac7a:	e01e      	b.n	800acba <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ac82:	2b0b      	cmp	r3, #11
 800ac84:	d004      	beq.n	800ac90 <RadioSetRxGenericConfig+0x2b0>
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ac8c:	2b0c      	cmp	r3, #12
 800ac8e:	d104      	bne.n	800ac9a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ac90:	4b04      	ldr	r3, [pc, #16]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ac98:	e00f      	b.n	800acba <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ac9a:	4b02      	ldr	r3, [pc, #8]	@ (800aca4 <RadioSetRxGenericConfig+0x2c4>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800aca2:	e00a      	b.n	800acba <RadioSetRxGenericConfig+0x2da>
 800aca4:	20004b98 	.word	0x20004b98
 800aca8:	20004b94 	.word	0x20004b94
 800acac:	20004c0c 	.word	0x20004c0c
 800acb0:	20004bd0 	.word	0x20004bd0
 800acb4:	20004ba6 	.word	0x20004ba6
            break;
 800acb8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800acba:	4b28      	ldr	r3, [pc, #160]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800acc4:	4b25      	ldr	r3, [pc, #148]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800acc6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800acce:	4b23      	ldr	r3, [pc, #140]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800acd0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800acd2:	4a22      	ldr	r2, [pc, #136]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800acd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800acd8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800ace0:	4b1e      	ldr	r3, [pc, #120]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800ace2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800acec:	4b1b      	ldr	r3, [pc, #108]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800acee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 800acf2:	f7ff f9c0 	bl	800a076 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800acf6:	2001      	movs	r0, #1
 800acf8:	f7fe fb5c 	bl	80093b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800acfc:	4818      	ldr	r0, [pc, #96]	@ (800ad60 <RadioSetRxGenericConfig+0x380>)
 800acfe:	f000 ff7d 	bl	800bbfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ad02:	4818      	ldr	r0, [pc, #96]	@ (800ad64 <RadioSetRxGenericConfig+0x384>)
 800ad04:	f001 f84c 	bl	800bda0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800ad08:	4b14      	ldr	r3, [pc, #80]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800ad0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d10d      	bne.n	800ad2e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800ad12:	f240 7036 	movw	r0, #1846	@ 0x736
 800ad16:	f001 f99f 	bl	800c058 <SUBGRF_ReadRegister>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f023 0304 	bic.w	r3, r3, #4
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	4619      	mov	r1, r3
 800ad24:	f240 7036 	movw	r0, #1846	@ 0x736
 800ad28:	f001 f982 	bl	800c030 <SUBGRF_WriteRegister>
 800ad2c:	e00c      	b.n	800ad48 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800ad2e:	f240 7036 	movw	r0, #1846	@ 0x736
 800ad32:	f001 f991 	bl	800c058 <SUBGRF_ReadRegister>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f043 0304 	orr.w	r3, r3, #4
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	4619      	mov	r1, r3
 800ad40:	f240 7036 	movw	r0, #1846	@ 0x736
 800ad44:	f001 f974 	bl	800c030 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800ad48:	4b04      	ldr	r3, [pc, #16]	@ (800ad5c <RadioSetRxGenericConfig+0x37c>)
 800ad4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ad4e:	609a      	str	r2, [r3, #8]
        break;
 800ad50:	bf00      	nop
    }
    return status;
 800ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3730      	adds	r7, #48	@ 0x30
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20004b98 	.word	0x20004b98
 800ad60:	20004bd0 	.word	0x20004bd0
 800ad64:	20004ba6 	.word	0x20004ba6

0800ad68 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	@ 0x38
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	4603      	mov	r3, r0
 800ad74:	73fb      	strb	r3, [r7, #15]
 800ad76:	4613      	mov	r3, r2
 800ad78:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad7e:	2300      	movs	r3, #0
 800ad80:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ad82:	f001 fc3c 	bl	800c5fe <RFW_DeInit>
    switch( modem )
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	f200 8204 	bhi.w	800b196 <RadioSetTxGenericConfig+0x42e>
 800ad8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad94 <RadioSetTxGenericConfig+0x2c>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800af19 	.word	0x0800af19
 800ad98:	0800b061 	.word	0x0800b061
 800ad9c:	0800b159 	.word	0x0800b159
 800ada0:	0800ada5 	.word	0x0800ada5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	7c9b      	ldrb	r3, [r3, #18]
 800ada8:	2b08      	cmp	r3, #8
 800adaa:	d902      	bls.n	800adb2 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800adac:	f04f 33ff 	mov.w	r3, #4294967295
 800adb0:	e206      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	6899      	ldr	r1, [r3, #8]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	7c9b      	ldrb	r3, [r3, #18]
 800adba:	461a      	mov	r2, r3
 800adbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fcd4 	bl	800c76e <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d102      	bne.n	800add4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
 800add2:	e1f5      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f242 7210 	movw	r2, #10000	@ 0x2710
 800addc:	4293      	cmp	r3, r2
 800adde:	d813      	bhi.n	800ae08 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800ade0:	2302      	movs	r3, #2
 800ade2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800ade6:	4b99      	ldr	r3, [pc, #612]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ade8:	2203      	movs	r2, #3
 800adea:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800adec:	4b97      	ldr	r3, [pc, #604]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800adee:	2203      	movs	r2, #3
 800adf0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a94      	ldr	r2, [pc, #592]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800adfa:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	7cda      	ldrb	r2, [r3, #19]
 800ae00:	4b92      	ldr	r3, [pc, #584]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae06:	e017      	b.n	800ae38 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ae0e:	4b8f      	ldr	r3, [pc, #572]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ae14:	4b8d      	ldr	r3, [pc, #564]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a8a      	ldr	r2, [pc, #552]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae22:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	7cda      	ldrb	r2, [r3, #19]
 800ae28:	4b88      	ldr	r3, [pc, #544]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	089b      	lsrs	r3, r3, #2
 800ae34:	4a85      	ldr	r2, [pc, #532]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae36:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	4b82      	ldr	r3, [pc, #520]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae44:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800ae46:	4b81      	ldr	r3, [pc, #516]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae48:	2204      	movs	r2, #4
 800ae4a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	7c9b      	ldrb	r3, [r3, #18]
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	4b7d      	ldr	r3, [pc, #500]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae56:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ae58:	4b7c      	ldr	r3, [pc, #496]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	7d9b      	ldrb	r3, [r3, #22]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d003      	beq.n	800ae6e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	7d1b      	ldrb	r3, [r3, #20]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d12b      	bne.n	800aec6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	7d5b      	ldrb	r3, [r3, #21]
 800ae72:	2bf1      	cmp	r3, #241	@ 0xf1
 800ae74:	d00a      	beq.n	800ae8c <RadioSetTxGenericConfig+0x124>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	7d5b      	ldrb	r3, [r3, #21]
 800ae7a:	2bf2      	cmp	r3, #242	@ 0xf2
 800ae7c:	d006      	beq.n	800ae8c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	7d5b      	ldrb	r3, [r3, #21]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d002      	beq.n	800ae8c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800ae86:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8a:	e199      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800ae90:	2301      	movs	r3, #1
 800ae92:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800ae96:	4b6e      	ldr	r3, [pc, #440]	@ (800b050 <RadioSetTxGenericConfig+0x2e8>)
 800ae98:	6819      	ldr	r1, [r3, #0]
 800ae9a:	f107 0320 	add.w	r3, r7, #32
 800ae9e:	4a6d      	ldr	r2, [pc, #436]	@ (800b054 <RadioSetTxGenericConfig+0x2ec>)
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 fb9f 	bl	800c5e4 <RFW_Init>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	e186      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800aeb2:	4b66      	ldr	r3, [pc, #408]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800aeb8:	4b64      	ldr	r3, [pc, #400]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800aebe:	4b63      	ldr	r3, [pc, #396]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	755a      	strb	r2, [r3, #21]
        {
 800aec4:	e00b      	b.n	800aede <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	7d5a      	ldrb	r2, [r3, #21]
 800aeca:	4b60      	ldr	r3, [pc, #384]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aecc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	7d9a      	ldrb	r2, [r3, #22]
 800aed2:	4b5e      	ldr	r3, [pc, #376]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aed4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	7d1a      	ldrb	r2, [r3, #20]
 800aeda:	4b5c      	ldr	r3, [pc, #368]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aedc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800aede:	f7ff f8ca 	bl	800a076 <RadioStandby>
        RadioSetModem( radio_modem );
 800aee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fa64 	bl	80093b4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800aeec:	485a      	ldr	r0, [pc, #360]	@ (800b058 <RadioSetTxGenericConfig+0x2f0>)
 800aeee:	f000 fe85 	bl	800bbfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aef2:	485a      	ldr	r0, [pc, #360]	@ (800b05c <RadioSetTxGenericConfig+0x2f4>)
 800aef4:	f000 ff54 	bl	800bda0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800aef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 fa18 	bl	800b332 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	8a1b      	ldrh	r3, [r3, #16]
 800af06:	4618      	mov	r0, r3
 800af08:	f000 fa62 	bl	800b3d0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	899b      	ldrh	r3, [r3, #12]
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fa3d 	bl	800b390 <SUBGRF_SetCrcPolynomial>
        break;
 800af16:	e13f      	b.n	800b198 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295
 800af24:	e14c      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	7c9b      	ldrb	r3, [r3, #18]
 800af2a:	2b08      	cmp	r3, #8
 800af2c:	d902      	bls.n	800af34 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
 800af32:	e145      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	6899      	ldr	r1, [r3, #8]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	7c9b      	ldrb	r3, [r3, #18]
 800af3c:	461a      	mov	r2, r3
 800af3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af42:	4618      	mov	r0, r3
 800af44:	f001 fc13 	bl	800c76e <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800af48:	4b40      	ldr	r3, [pc, #256]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a3d      	ldr	r2, [pc, #244]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af56:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	7cda      	ldrb	r2, [r3, #19]
 800af5c:	4b3b      	ldr	r3, [pc, #236]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	4a39      	ldr	r2, [pc, #228]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af68:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800af6a:	4b38      	ldr	r3, [pc, #224]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	b29b      	uxth	r3, r3
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	b29a      	uxth	r2, r3
 800af7a:	4b34      	ldr	r3, [pc, #208]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af7c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800af7e:	4b33      	ldr	r3, [pc, #204]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af80:	2204      	movs	r2, #4
 800af82:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	7c9b      	ldrb	r3, [r3, #18]
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	4b2f      	ldr	r3, [pc, #188]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af8e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800af90:	4b2e      	ldr	r3, [pc, #184]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800af92:	2200      	movs	r2, #0
 800af94:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	7d9b      	ldrb	r3, [r3, #22]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d003      	beq.n	800afa6 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d12a      	bne.n	800affc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	7d5b      	ldrb	r3, [r3, #21]
 800afaa:	2bf1      	cmp	r3, #241	@ 0xf1
 800afac:	d00a      	beq.n	800afc4 <RadioSetTxGenericConfig+0x25c>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	7d5b      	ldrb	r3, [r3, #21]
 800afb2:	2bf2      	cmp	r3, #242	@ 0xf2
 800afb4:	d006      	beq.n	800afc4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	7d5b      	ldrb	r3, [r3, #21]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d002      	beq.n	800afc4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800afbe:	f04f 33ff 	mov.w	r3, #4294967295
 800afc2:	e0fd      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800afc4:	2301      	movs	r3, #1
 800afc6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800afcc:	4b20      	ldr	r3, [pc, #128]	@ (800b050 <RadioSetTxGenericConfig+0x2e8>)
 800afce:	6819      	ldr	r1, [r3, #0]
 800afd0:	f107 0314 	add.w	r3, r7, #20
 800afd4:	4a1f      	ldr	r2, [pc, #124]	@ (800b054 <RadioSetTxGenericConfig+0x2ec>)
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 fb04 	bl	800c5e4 <RFW_Init>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800afe2:	f04f 33ff 	mov.w	r3, #4294967295
 800afe6:	e0eb      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800afe8:	4b18      	ldr	r3, [pc, #96]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800afea:	2200      	movs	r2, #0
 800afec:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800afee:	4b17      	ldr	r3, [pc, #92]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800aff4:	4b15      	ldr	r3, [pc, #84]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	755a      	strb	r2, [r3, #21]
        {
 800affa:	e00b      	b.n	800b014 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	7d5a      	ldrb	r2, [r3, #21]
 800b000:	4b12      	ldr	r3, [pc, #72]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800b002:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	7d9a      	ldrb	r2, [r3, #22]
 800b008:	4b10      	ldr	r3, [pc, #64]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800b00a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	7d1a      	ldrb	r2, [r3, #20]
 800b010:	4b0e      	ldr	r3, [pc, #56]	@ (800b04c <RadioSetTxGenericConfig+0x2e4>)
 800b012:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800b014:	f7ff f82f 	bl	800a076 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b018:	2000      	movs	r0, #0
 800b01a:	f7fe f9cb 	bl	80093b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b01e:	480e      	ldr	r0, [pc, #56]	@ (800b058 <RadioSetTxGenericConfig+0x2f0>)
 800b020:	f000 fdec 	bl	800bbfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b024:	480d      	ldr	r0, [pc, #52]	@ (800b05c <RadioSetTxGenericConfig+0x2f4>)
 800b026:	f000 febb 	bl	800bda0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b02a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 f97f 	bl	800b332 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	8a1b      	ldrh	r3, [r3, #16]
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f9c9 	bl	800b3d0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	899b      	ldrh	r3, [r3, #12]
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f9a4 	bl	800b390 <SUBGRF_SetCrcPolynomial>
        break;
 800b048:	e0a6      	b.n	800b198 <RadioSetTxGenericConfig+0x430>
 800b04a:	bf00      	nop
 800b04c:	20004b98 	.word	0x20004b98
 800b050:	20004b94 	.word	0x20004b94
 800b054:	20004bf4 	.word	0x20004bf4
 800b058:	20004bd0 	.word	0x20004bd0
 800b05c:	20004ba6 	.word	0x20004ba6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b060:	4b59      	ldr	r3, [pc, #356]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	781a      	ldrb	r2, [r3, #0]
 800b06c:	4b56      	ldr	r3, [pc, #344]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b06e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	785a      	ldrb	r2, [r3, #1]
 800b076:	4b54      	ldr	r3, [pc, #336]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	789a      	ldrb	r2, [r3, #2]
 800b080:	4b51      	ldr	r3, [pc, #324]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b082:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	78db      	ldrb	r3, [r3, #3]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d010      	beq.n	800b0b0 <RadioSetTxGenericConfig+0x348>
 800b08e:	2b02      	cmp	r3, #2
 800b090:	dc20      	bgt.n	800b0d4 <RadioSetTxGenericConfig+0x36c>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <RadioSetTxGenericConfig+0x334>
 800b096:	2b01      	cmp	r3, #1
 800b098:	d005      	beq.n	800b0a6 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800b09a:	e01b      	b.n	800b0d4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b09c:	4b4a      	ldr	r3, [pc, #296]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b0a4:	e017      	b.n	800b0d6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b0a6:	4b48      	ldr	r3, [pc, #288]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b0ae:	e012      	b.n	800b0d6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	2b0b      	cmp	r3, #11
 800b0b6:	d003      	beq.n	800b0c0 <RadioSetTxGenericConfig+0x358>
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	2b0c      	cmp	r3, #12
 800b0be:	d104      	bne.n	800b0ca <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b0c0:	4b41      	ldr	r3, [pc, #260]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b0c8:	e005      	b.n	800b0d6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b0ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b0d2:	e000      	b.n	800b0d6 <RadioSetTxGenericConfig+0x36e>
            break;
 800b0d4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b0d6:	4b3c      	ldr	r3, [pc, #240]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	889a      	ldrh	r2, [r3, #4]
 800b0e0:	4b39      	ldr	r3, [pc, #228]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0e2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	799a      	ldrb	r2, [r3, #6]
 800b0e8:	4b37      	ldr	r3, [pc, #220]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0ea:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	79da      	ldrb	r2, [r3, #7]
 800b0f0:	4b35      	ldr	r3, [pc, #212]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0f2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	7a1a      	ldrb	r2, [r3, #8]
 800b0fa:	4b33      	ldr	r3, [pc, #204]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b0fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800b100:	f7fe ffb9 	bl	800a076 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b104:	2001      	movs	r0, #1
 800b106:	f7fe f955 	bl	80093b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b10a:	4830      	ldr	r0, [pc, #192]	@ (800b1cc <RadioSetTxGenericConfig+0x464>)
 800b10c:	f000 fd76 	bl	800bbfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b110:	482f      	ldr	r0, [pc, #188]	@ (800b1d0 <RadioSetTxGenericConfig+0x468>)
 800b112:	f000 fe45 	bl	800bda0 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b116:	4b2c      	ldr	r3, [pc, #176]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b118:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b11c:	2b06      	cmp	r3, #6
 800b11e:	d10d      	bne.n	800b13c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b120:	f640 0089 	movw	r0, #2185	@ 0x889
 800b124:	f000 ff98 	bl	800c058 <SUBGRF_ReadRegister>
 800b128:	4603      	mov	r3, r0
 800b12a:	f023 0304 	bic.w	r3, r3, #4
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	4619      	mov	r1, r3
 800b132:	f640 0089 	movw	r0, #2185	@ 0x889
 800b136:	f000 ff7b 	bl	800c030 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800b13a:	e02d      	b.n	800b198 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b13c:	f640 0089 	movw	r0, #2185	@ 0x889
 800b140:	f000 ff8a 	bl	800c058 <SUBGRF_ReadRegister>
 800b144:	4603      	mov	r3, r0
 800b146:	f043 0304 	orr.w	r3, r3, #4
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	4619      	mov	r1, r3
 800b14e:	f640 0089 	movw	r0, #2185	@ 0x889
 800b152:	f000 ff6d 	bl	800c030 <SUBGRF_WriteRegister>
        break;
 800b156:	e01f      	b.n	800b198 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d004      	beq.n	800b16a <RadioSetTxGenericConfig+0x402>
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b168:	d902      	bls.n	800b170 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800b16a:	f04f 33ff 	mov.w	r3, #4294967295
 800b16e:	e027      	b.n	800b1c0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800b170:	2003      	movs	r0, #3
 800b172:	f7fe f91f 	bl	80093b4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b176:	4b14      	ldr	r3, [pc, #80]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a11      	ldr	r2, [pc, #68]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b184:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b186:	4b10      	ldr	r3, [pc, #64]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b188:	2216      	movs	r2, #22
 800b18a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b18e:	480f      	ldr	r0, [pc, #60]	@ (800b1cc <RadioSetTxGenericConfig+0x464>)
 800b190:	f000 fd34 	bl	800bbfc <SUBGRF_SetModulationParams>
        break;
 800b194:	e000      	b.n	800b198 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800b196:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f001 f863 	bl	800c268 <SUBGRF_SetRfTxPower>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	4b08      	ldr	r3, [pc, #32]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b1a8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b1ac:	4b06      	ldr	r3, [pc, #24]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b1ae:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f001 fa37 	bl	800c626 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b1b8:	4a03      	ldr	r2, [pc, #12]	@ (800b1c8 <RadioSetTxGenericConfig+0x460>)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6053      	str	r3, [r2, #4]
    return 0;
 800b1be:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3738      	adds	r7, #56	@ 0x38
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	20004b98 	.word	0x20004b98
 800b1cc:	20004bd0 	.word	0x20004bd0
 800b1d0:	20004ba6 	.word	0x20004ba6

0800b1d4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bc80      	pop	{r7}
 800b1ea:	4770      	bx	lr

0800b1ec <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800b1f6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bc80      	pop	{r7}
 800b200:	4770      	bx	lr
	...

0800b204 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800b212:	4a1d      	ldr	r2, [pc, #116]	@ (800b288 <SUBGRF_Init+0x84>)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800b218:	f7f6 f812 	bl	8001240 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b21c:	2002      	movs	r0, #2
 800b21e:	f001 f8ff 	bl	800c420 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800b222:	4b1a      	ldr	r3, [pc, #104]	@ (800b28c <SUBGRF_Init+0x88>)
 800b224:	2200      	movs	r2, #0
 800b226:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800b228:	2000      	movs	r0, #0
 800b22a:	f000 f97d 	bl	800b528 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800b22e:	f001 fa73 	bl	800c718 <RBI_IsTCXO>
 800b232:	4603      	mov	r3, r0
 800b234:	2b01      	cmp	r3, #1
 800b236:	d10e      	bne.n	800b256 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800b238:	2140      	movs	r1, #64	@ 0x40
 800b23a:	2001      	movs	r0, #1
 800b23c:	f000 fb82 	bl	800b944 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800b240:	2100      	movs	r1, #0
 800b242:	f640 1011 	movw	r0, #2321	@ 0x911
 800b246:	f000 fef3 	bl	800c030 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800b24a:	237f      	movs	r3, #127	@ 0x7f
 800b24c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800b24e:	7b38      	ldrb	r0, [r7, #12]
 800b250:	f000 fa8b 	bl	800b76a <SUBGRF_Calibrate>
 800b254:	e009      	b.n	800b26a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b256:	2120      	movs	r1, #32
 800b258:	f640 1011 	movw	r0, #2321	@ 0x911
 800b25c:	f000 fee8 	bl	800c030 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b260:	2120      	movs	r1, #32
 800b262:	f640 1012 	movw	r0, #2322	@ 0x912
 800b266:	f000 fee3 	bl	800c030 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800b26a:	210e      	movs	r1, #14
 800b26c:	f640 101f 	movw	r0, #2335	@ 0x91f
 800b270:	f000 fede 	bl	800c030 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800b274:	f001 fa0f 	bl	800c696 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800b278:	4b05      	ldr	r3, [pc, #20]	@ (800b290 <SUBGRF_Init+0x8c>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	701a      	strb	r2, [r3, #0]
}
 800b27e:	bf00      	nop
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20004c30 	.word	0x20004c30
 800b28c:	20004c2c 	.word	0x20004c2c
 800b290:	20004c24 	.word	0x20004c24

0800b294 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
    return OperatingMode;
 800b298:	4b02      	ldr	r3, [pc, #8]	@ (800b2a4 <SUBGRF_GetOperatingMode+0x10>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bc80      	pop	{r7}
 800b2a2:	4770      	bx	lr
 800b2a4:	20004c24 	.word	0x20004c24

0800b2a8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6879      	ldr	r1, [r7, #4]
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	f000 ff24 	bl	800c108 <SUBGRF_WriteBuffer>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800b2da:	f107 0317 	add.w	r3, r7, #23
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68b8      	ldr	r0, [r7, #8]
 800b2e2:	f000 fe27 	bl	800bf34 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	79fa      	ldrb	r2, [r7, #7]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d201      	bcs.n	800b2f4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e007      	b.n	800b304 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800b2f4:	7df8      	ldrb	r0, [r7, #23]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	68f9      	ldr	r1, [r7, #12]
 800b2fe:	f000 ff25 	bl	800c14c <SUBGRF_ReadBuffer>

    return 0;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	460b      	mov	r3, r1
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	4619      	mov	r1, r3
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7ff ffc2 	bl	800b2a8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f91b 	bl	800b560 <SUBGRF_SetTx>
}
 800b32a:	bf00      	nop
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800b33a:	2208      	movs	r2, #8
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800b342:	f000 fe9d 	bl	800c080 <SUBGRF_WriteRegisters>
    return 0;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b35a:	88fb      	ldrh	r3, [r7, #6]
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	b29b      	uxth	r3, r3
 800b360:	b2db      	uxtb	r3, r3
 800b362:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800b364:	88fb      	ldrh	r3, [r7, #6]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b36a:	f000 fb6f 	bl	800ba4c <SUBGRF_GetPacketType>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d108      	bne.n	800b386 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	2202      	movs	r2, #2
 800b37a:	4619      	mov	r1, r3
 800b37c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800b380:	f000 fe7e 	bl	800c080 <SUBGRF_WriteRegisters>
            break;
 800b384:	e000      	b.n	800b388 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800b386:	bf00      	nop
    }
}
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b39a:	88fb      	ldrh	r3, [r7, #6]
 800b39c:	0a1b      	lsrs	r3, r3, #8
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b3aa:	f000 fb4f 	bl	800ba4c <SUBGRF_GetPacketType>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d108      	bne.n	800b3c6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	f240 60be 	movw	r0, #1726	@ 0x6be
 800b3c0:	f000 fe5e 	bl	800c080 <SUBGRF_WriteRegisters>
            break;
 800b3c4:	e000      	b.n	800b3c8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800b3c6:	bf00      	nop
    }
}
 800b3c8:	bf00      	nop
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800b3de:	f000 fb35 	bl	800ba4c <SUBGRF_GetPacketType>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d121      	bne.n	800b42c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b3e8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800b3ec:	f000 fe34 	bl	800c058 <SUBGRF_ReadRegister>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f023 0301 	bic.w	r3, r3, #1
 800b3f6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	b25b      	sxtb	r3, r3
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	b25a      	sxtb	r2, r3
 800b406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	b25b      	sxtb	r3, r3
 800b40e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	4619      	mov	r1, r3
 800b414:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800b418:	f000 fe0a 	bl	800c030 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	4619      	mov	r1, r3
 800b422:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800b426:	f000 fe03 	bl	800c030 <SUBGRF_WriteRegister>
            break;
 800b42a:	e000      	b.n	800b42e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800b42c:	bf00      	nop
    }
}
 800b42e:	bf00      	nop
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800b448:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800b44c:	f000 fe04 	bl	800c058 <SUBGRF_ReadRegister>
 800b450:	4603      	mov	r3, r0
 800b452:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	f023 0301 	bic.w	r3, r3, #1
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	4619      	mov	r1, r3
 800b45e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800b462:	f000 fde5 	bl	800c030 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800b466:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800b46a:	f000 fdf5 	bl	800c058 <SUBGRF_ReadRegister>
 800b46e:	4603      	mov	r3, r0
 800b470:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800b472:	79bb      	ldrb	r3, [r7, #6]
 800b474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	4619      	mov	r1, r3
 800b47c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800b480:	f000 fdd6 	bl	800c030 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800b484:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800b488:	f000 f88a 	bl	800b5a0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800b48c:	463b      	mov	r3, r7
 800b48e:	2204      	movs	r2, #4
 800b490:	4619      	mov	r1, r3
 800b492:	f640 0019 	movw	r0, #2073	@ 0x819
 800b496:	f000 fe15 	bl	800c0c4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800b49a:	2000      	movs	r0, #0
 800b49c:	f000 f844 	bl	800b528 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800b4a0:	79fb      	ldrb	r3, [r7, #7]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800b4a8:	f000 fdc2 	bl	800c030 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800b4ac:	79bb      	ldrb	r3, [r7, #6]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800b4b4:	f000 fdbc 	bl	800c030 <SUBGRF_WriteRegister>

    return number;
 800b4b8:	683b      	ldr	r3, [r7, #0]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
	...

0800b4c4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	f001 f8ed 	bl	800c6ac <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b4d2:	2002      	movs	r0, #2
 800b4d4:	f000 ffa4 	bl	800c420 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b4d8:	793b      	ldrb	r3, [r7, #4]
 800b4da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b4e4:	793b      	ldrb	r3, [r7, #4]
 800b4e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b4ee:	b25b      	sxtb	r3, r3
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800b4f4:	793b      	ldrb	r3, [r7, #4]
 800b4f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b25b      	sxtb	r3, r3
 800b502:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b504:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b506:	f107 030f 	add.w	r3, r7, #15
 800b50a:	2201      	movs	r2, #1
 800b50c:	4619      	mov	r1, r3
 800b50e:	2084      	movs	r0, #132	@ 0x84
 800b510:	f000 fe3e 	bl	800c190 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800b514:	4b03      	ldr	r3, [pc, #12]	@ (800b524 <SUBGRF_SetSleep+0x60>)
 800b516:	2200      	movs	r2, #0
 800b518:	701a      	strb	r2, [r3, #0]
}
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20004c24 	.word	0x20004c24

0800b528 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b532:	1dfb      	adds	r3, r7, #7
 800b534:	2201      	movs	r2, #1
 800b536:	4619      	mov	r1, r3
 800b538:	2080      	movs	r0, #128	@ 0x80
 800b53a:	f000 fe29 	bl	800c190 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800b53e:	79fb      	ldrb	r3, [r7, #7]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800b544:	4b05      	ldr	r3, [pc, #20]	@ (800b55c <SUBGRF_SetStandby+0x34>)
 800b546:	2201      	movs	r2, #1
 800b548:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800b54a:	e002      	b.n	800b552 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800b54c:	4b03      	ldr	r3, [pc, #12]	@ (800b55c <SUBGRF_SetStandby+0x34>)
 800b54e:	2202      	movs	r2, #2
 800b550:	701a      	strb	r2, [r3, #0]
}
 800b552:	bf00      	nop
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20004c24 	.word	0x20004c24

0800b560 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800b568:	4b0c      	ldr	r3, [pc, #48]	@ (800b59c <SUBGRF_SetTx+0x3c>)
 800b56a:	2204      	movs	r2, #4
 800b56c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	0c1b      	lsrs	r3, r3, #16
 800b572:	b2db      	uxtb	r3, r3
 800b574:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	0a1b      	lsrs	r3, r3, #8
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800b584:	f107 030c 	add.w	r3, r7, #12
 800b588:	2203      	movs	r2, #3
 800b58a:	4619      	mov	r1, r3
 800b58c:	2083      	movs	r0, #131	@ 0x83
 800b58e:	f000 fdff 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20004c24 	.word	0x20004c24

0800b5a0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b5dc <SUBGRF_SetRx+0x3c>)
 800b5aa:	2205      	movs	r2, #5
 800b5ac:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	0c1b      	lsrs	r3, r3, #16
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	0a1b      	lsrs	r3, r3, #8
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	2082      	movs	r0, #130	@ 0x82
 800b5ce:	f000 fddf 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b5d2:	bf00      	nop
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20004c24 	.word	0x20004c24

0800b5e0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b624 <SUBGRF_SetRxBoosted+0x44>)
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b5ee:	2197      	movs	r1, #151	@ 0x97
 800b5f0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800b5f4:	f000 fd1c 	bl	800c030 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	0c1b      	lsrs	r3, r3, #16
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	0a1b      	lsrs	r3, r3, #8
 800b604:	b2db      	uxtb	r3, r3
 800b606:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b60e:	f107 030c 	add.w	r3, r7, #12
 800b612:	2203      	movs	r2, #3
 800b614:	4619      	mov	r1, r3
 800b616:	2082      	movs	r0, #130	@ 0x82
 800b618:	f000 fdba 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20004c24 	.word	0x20004c24

0800b628 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	b2db      	uxtb	r3, r3
 800b638:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	0a1b      	lsrs	r3, r3, #8
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	0c1b      	lsrs	r3, r3, #16
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	0a1b      	lsrs	r3, r3, #8
 800b654:	b2db      	uxtb	r3, r3
 800b656:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b65e:	f107 0308 	add.w	r3, r7, #8
 800b662:	2206      	movs	r2, #6
 800b664:	4619      	mov	r1, r3
 800b666:	2094      	movs	r0, #148	@ 0x94
 800b668:	f000 fd92 	bl	800c190 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800b66c:	4b03      	ldr	r3, [pc, #12]	@ (800b67c <SUBGRF_SetRxDutyCycle+0x54>)
 800b66e:	2206      	movs	r2, #6
 800b670:	701a      	strb	r2, [r3, #0]
}
 800b672:	bf00      	nop
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20004c24 	.word	0x20004c24

0800b680 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800b684:	2200      	movs	r2, #0
 800b686:	2100      	movs	r1, #0
 800b688:	20c5      	movs	r0, #197	@ 0xc5
 800b68a:	f000 fd81 	bl	800c190 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800b68e:	4b02      	ldr	r3, [pc, #8]	@ (800b698 <SUBGRF_SetCad+0x18>)
 800b690:	2207      	movs	r2, #7
 800b692:	701a      	strb	r2, [r3, #0]
}
 800b694:	bf00      	nop
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20004c24 	.word	0x20004c24

0800b69c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	20d1      	movs	r0, #209	@ 0xd1
 800b6a6:	f000 fd73 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b6aa:	bf00      	nop
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	20d2      	movs	r0, #210	@ 0xd2
 800b6b8:	f000 fd6a 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b6ca:	1dfb      	adds	r3, r7, #7
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	209f      	movs	r0, #159	@ 0x9f
 800b6d2:	f000 fd5d 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b6d6:	bf00      	nop
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800b6e8:	1dfb      	adds	r3, r7, #7
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	20a0      	movs	r0, #160	@ 0xa0
 800b6f0:	f000 fd4e 	bl	800c190 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	2b3f      	cmp	r3, #63	@ 0x3f
 800b6f8:	d91c      	bls.n	800b734 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	085b      	lsrs	r3, r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800b708:	e005      	b.n	800b716 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	089b      	lsrs	r3, r3, #2
 800b70e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	3301      	adds	r3, #1
 800b714:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	2b1f      	cmp	r3, #31
 800b71a:	d8f6      	bhi.n	800b70a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	b2da      	uxtb	r2, r3
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	4413      	add	r3, r2
 800b726:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b728:	7b7b      	ldrb	r3, [r7, #13]
 800b72a:	4619      	mov	r1, r3
 800b72c:	f240 7006 	movw	r0, #1798	@ 0x706
 800b730:	f000 fc7e 	bl	800c030 <SUBGRF_WriteRegister>
    }
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b742:	f000 fff4 	bl	800c72e <RBI_IsDCDC>
 800b746:	4603      	mov	r3, r0
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d102      	bne.n	800b752 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800b74c:	2301      	movs	r3, #1
 800b74e:	71fb      	strb	r3, [r7, #7]
 800b750:	e001      	b.n	800b756 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800b752:	2300      	movs	r3, #0
 800b754:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b756:	1dfb      	adds	r3, r7, #7
 800b758:	2201      	movs	r2, #1
 800b75a:	4619      	mov	r1, r3
 800b75c:	2096      	movs	r0, #150	@ 0x96
 800b75e:	f000 fd17 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b772:	793b      	ldrb	r3, [r7, #4]
 800b774:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	019b      	lsls	r3, r3, #6
 800b77c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b77e:	793b      	ldrb	r3, [r7, #4]
 800b780:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b784:	b2db      	uxtb	r3, r3
 800b786:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b788:	b25b      	sxtb	r3, r3
 800b78a:	4313      	orrs	r3, r2
 800b78c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b78e:	793b      	ldrb	r3, [r7, #4]
 800b790:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b794:	b2db      	uxtb	r3, r3
 800b796:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b798:	b25b      	sxtb	r3, r3
 800b79a:	4313      	orrs	r3, r2
 800b79c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b79e:	793b      	ldrb	r3, [r7, #4]
 800b7a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b7a8:	b25b      	sxtb	r3, r3
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b7ae:	793b      	ldrb	r3, [r7, #4]
 800b7b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b7b8:	b25b      	sxtb	r3, r3
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b7be:	793b      	ldrb	r3, [r7, #4]
 800b7c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b7c8:	b25b      	sxtb	r3, r3
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800b7ce:	793b      	ldrb	r3, [r7, #4]
 800b7d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	b25b      	sxtb	r3, r3
 800b7dc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b7de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b7e0:	f107 030f 	add.w	r3, r7, #15
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	2089      	movs	r0, #137	@ 0x89
 800b7ea:	f000 fcd1 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a1d      	ldr	r2, [pc, #116]	@ (800b878 <SUBGRF_CalibrateImage+0x80>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d904      	bls.n	800b812 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800b808:	23e1      	movs	r3, #225	@ 0xe1
 800b80a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800b80c:	23e9      	movs	r3, #233	@ 0xe9
 800b80e:	737b      	strb	r3, [r7, #13]
 800b810:	e027      	b.n	800b862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a19      	ldr	r2, [pc, #100]	@ (800b87c <SUBGRF_CalibrateImage+0x84>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d904      	bls.n	800b824 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800b81a:	23d7      	movs	r3, #215	@ 0xd7
 800b81c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800b81e:	23db      	movs	r3, #219	@ 0xdb
 800b820:	737b      	strb	r3, [r7, #13]
 800b822:	e01e      	b.n	800b862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a16      	ldr	r2, [pc, #88]	@ (800b880 <SUBGRF_CalibrateImage+0x88>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d904      	bls.n	800b836 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800b82c:	23c1      	movs	r3, #193	@ 0xc1
 800b82e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800b830:	23c5      	movs	r3, #197	@ 0xc5
 800b832:	737b      	strb	r3, [r7, #13]
 800b834:	e015      	b.n	800b862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a12      	ldr	r2, [pc, #72]	@ (800b884 <SUBGRF_CalibrateImage+0x8c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d904      	bls.n	800b848 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800b83e:	2375      	movs	r3, #117	@ 0x75
 800b840:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b842:	2381      	movs	r3, #129	@ 0x81
 800b844:	737b      	strb	r3, [r7, #13]
 800b846:	e00c      	b.n	800b862 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a0f      	ldr	r2, [pc, #60]	@ (800b888 <SUBGRF_CalibrateImage+0x90>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d904      	bls.n	800b85a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800b850:	236b      	movs	r3, #107	@ 0x6b
 800b852:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b854:	236f      	movs	r3, #111	@ 0x6f
 800b856:	737b      	strb	r3, [r7, #13]
 800b858:	e003      	b.n	800b862 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800b85a:	2329      	movs	r3, #41	@ 0x29
 800b85c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800b85e:	232b      	movs	r3, #43	@ 0x2b
 800b860:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b862:	f107 030c 	add.w	r3, r7, #12
 800b866:	2202      	movs	r2, #2
 800b868:	4619      	mov	r1, r3
 800b86a:	2098      	movs	r0, #152	@ 0x98
 800b86c:	f000 fc90 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	35a4e900 	.word	0x35a4e900
 800b87c:	32a9f880 	.word	0x32a9f880
 800b880:	2de54480 	.word	0x2de54480
 800b884:	1b6b0b00 	.word	0x1b6b0b00
 800b888:	1954fc40 	.word	0x1954fc40

0800b88c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b88c:	b590      	push	{r4, r7, lr}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	461a      	mov	r2, r3
 800b89a:	4623      	mov	r3, r4
 800b89c:	71fb      	strb	r3, [r7, #7]
 800b89e:	4603      	mov	r3, r0
 800b8a0:	71bb      	strb	r3, [r7, #6]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	717b      	strb	r3, [r7, #5]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b8ae:	79bb      	ldrb	r3, [r7, #6]
 800b8b0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b8b2:	797b      	ldrb	r3, [r7, #5]
 800b8b4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b8b6:	793b      	ldrb	r3, [r7, #4]
 800b8b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	2204      	movs	r2, #4
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	2095      	movs	r0, #149	@ 0x95
 800b8c4:	f000 fc64 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b8c8:	bf00      	nop
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd90      	pop	{r4, r7, pc}

0800b8d0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4608      	mov	r0, r1
 800b8da:	4611      	mov	r1, r2
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4623      	mov	r3, r4
 800b8e0:	80fb      	strh	r3, [r7, #6]
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	80bb      	strh	r3, [r7, #4]
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	807b      	strh	r3, [r7, #2]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b8ee:	88fb      	ldrh	r3, [r7, #6]
 800b8f0:	0a1b      	lsrs	r3, r3, #8
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b8f8:	88fb      	ldrh	r3, [r7, #6]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b8fe:	88bb      	ldrh	r3, [r7, #4]
 800b900:	0a1b      	lsrs	r3, r3, #8
 800b902:	b29b      	uxth	r3, r3
 800b904:	b2db      	uxtb	r3, r3
 800b906:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b908:	88bb      	ldrh	r3, [r7, #4]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b90e:	887b      	ldrh	r3, [r7, #2]
 800b910:	0a1b      	lsrs	r3, r3, #8
 800b912:	b29b      	uxth	r3, r3
 800b914:	b2db      	uxtb	r3, r3
 800b916:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b918:	887b      	ldrh	r3, [r7, #2]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b91e:	883b      	ldrh	r3, [r7, #0]
 800b920:	0a1b      	lsrs	r3, r3, #8
 800b922:	b29b      	uxth	r3, r3
 800b924:	b2db      	uxtb	r3, r3
 800b926:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b928:	883b      	ldrh	r3, [r7, #0]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b92e:	f107 0308 	add.w	r3, r7, #8
 800b932:	2208      	movs	r2, #8
 800b934:	4619      	mov	r1, r3
 800b936:	2008      	movs	r0, #8
 800b938:	f000 fc2a 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b93c:	bf00      	nop
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}

0800b944 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	6039      	str	r1, [r7, #0]
 800b94e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	b2db      	uxtb	r3, r3
 800b958:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	0c1b      	lsrs	r3, r3, #16
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	0a1b      	lsrs	r3, r3, #8
 800b966:	b2db      	uxtb	r3, r3
 800b968:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b970:	f107 030c 	add.w	r3, r7, #12
 800b974:	2204      	movs	r2, #4
 800b976:	4619      	mov	r1, r3
 800b978:	2097      	movs	r0, #151	@ 0x97
 800b97a:	f000 fc09 	bl	800c190 <SUBGRF_WriteCommand>
}
 800b97e:	bf00      	nop
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b996:	4b1d      	ldr	r3, [pc, #116]	@ (800ba0c <SUBGRF_SetRfFrequency+0x84>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f083 0301 	eor.w	r3, r3, #1
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d005      	beq.n	800b9b0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff ff27 	bl	800b7f8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b9aa:	4b18      	ldr	r3, [pc, #96]	@ (800ba0c <SUBGRF_SetRfFrequency+0x84>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	461c      	mov	r4, r3
 800b9b6:	4615      	mov	r5, r2
 800b9b8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b9bc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b9c0:	4a13      	ldr	r2, [pc, #76]	@ (800ba10 <SUBGRF_SetRfFrequency+0x88>)
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	f7f4 fc31 	bl	8000230 <__aeabi_uldivmod>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	0e1b      	lsrs	r3, r3, #24
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	0c1b      	lsrs	r3, r3, #16
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	0a1b      	lsrs	r3, r3, #8
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	2086      	movs	r0, #134	@ 0x86
 800b9fe:	f000 fbc7 	bl	800c190 <SUBGRF_WriteCommand>
}
 800ba02:	bf00      	nop
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ba0c:	20004c2c 	.word	0x20004c2c
 800ba10:	01e84800 	.word	0x01e84800

0800ba14 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800ba1e:	79fa      	ldrb	r2, [r7, #7]
 800ba20:	4b09      	ldr	r3, [pc, #36]	@ (800ba48 <SUBGRF_SetPacketType+0x34>)
 800ba22:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800ba24:	79fb      	ldrb	r3, [r7, #7]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d104      	bne.n	800ba34 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800ba30:	f000 fafe 	bl	800c030 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800ba34:	1dfb      	adds	r3, r7, #7
 800ba36:	2201      	movs	r2, #1
 800ba38:	4619      	mov	r1, r3
 800ba3a:	208a      	movs	r0, #138	@ 0x8a
 800ba3c:	f000 fba8 	bl	800c190 <SUBGRF_WriteCommand>
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	20004c25 	.word	0x20004c25

0800ba4c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
    return PacketType;
 800ba50:	4b02      	ldr	r3, [pc, #8]	@ (800ba5c <SUBGRF_GetPacketType+0x10>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc80      	pop	{r7}
 800ba5a:	4770      	bx	lr
 800ba5c:	20004c25 	.word	0x20004c25

0800ba60 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	71fb      	strb	r3, [r7, #7]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	71bb      	strb	r3, [r7, #6]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d149      	bne.n	800bb0c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800ba78:	2000      	movs	r0, #0
 800ba7a:	f000 fe63 	bl	800c744 <RBI_GetRFOMaxPowerConfig>
 800ba7e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800ba80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	da01      	bge.n	800ba8e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2b0e      	cmp	r3, #14
 800ba92:	d10e      	bne.n	800bab2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800ba94:	2301      	movs	r3, #1
 800ba96:	2201      	movs	r2, #1
 800ba98:	2100      	movs	r1, #0
 800ba9a:	2004      	movs	r0, #4
 800ba9c:	f7ff fef6 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800baa0:	79ba      	ldrb	r2, [r7, #6]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	330e      	adds	r3, #14
 800baac:	b2db      	uxtb	r3, r3
 800baae:	71bb      	strb	r3, [r7, #6]
 800bab0:	e01f      	b.n	800baf2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b0a      	cmp	r3, #10
 800bab6:	d10e      	bne.n	800bad6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800bab8:	2301      	movs	r3, #1
 800baba:	2201      	movs	r2, #1
 800babc:	2100      	movs	r1, #0
 800babe:	2001      	movs	r0, #1
 800bac0:	f7ff fee4 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800bac4:	79ba      	ldrb	r2, [r7, #6]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	330d      	adds	r3, #13
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	71bb      	strb	r3, [r7, #6]
 800bad4:	e00d      	b.n	800baf2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800bad6:	2301      	movs	r3, #1
 800bad8:	2201      	movs	r2, #1
 800bada:	2100      	movs	r1, #0
 800badc:	2007      	movs	r0, #7
 800bade:	f7ff fed5 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800bae2:	79ba      	ldrb	r2, [r7, #6]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	b2db      	uxtb	r3, r3
 800baec:	330e      	adds	r3, #14
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800baf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800baf6:	f113 0f11 	cmn.w	r3, #17
 800bafa:	da01      	bge.n	800bb00 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800bafc:	23ef      	movs	r3, #239	@ 0xef
 800bafe:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800bb00:	2118      	movs	r1, #24
 800bb02:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800bb06:	f000 fa93 	bl	800c030 <SUBGRF_WriteRegister>
 800bb0a:	e067      	b.n	800bbdc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800bb0c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800bb10:	f000 faa2 	bl	800c058 <SUBGRF_ReadRegister>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f043 031e 	orr.w	r3, r3, #30
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800bb22:	f000 fa85 	bl	800c030 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800bb26:	2001      	movs	r0, #1
 800bb28:	f000 fe0c 	bl	800c744 <RBI_GetRFOMaxPowerConfig>
 800bb2c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800bb2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	da01      	bge.n	800bb3c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b14      	cmp	r3, #20
 800bb40:	d10e      	bne.n	800bb60 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800bb42:	2301      	movs	r3, #1
 800bb44:	2200      	movs	r2, #0
 800bb46:	2105      	movs	r1, #5
 800bb48:	2003      	movs	r0, #3
 800bb4a:	f7ff fe9f 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bb4e:	79ba      	ldrb	r2, [r7, #6]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	3316      	adds	r3, #22
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	71bb      	strb	r3, [r7, #6]
 800bb5e:	e031      	b.n	800bbc4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b11      	cmp	r3, #17
 800bb64:	d10e      	bne.n	800bb84 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800bb66:	2301      	movs	r3, #1
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2103      	movs	r1, #3
 800bb6c:	2002      	movs	r0, #2
 800bb6e:	f7ff fe8d 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bb72:	79ba      	ldrb	r2, [r7, #6]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	3316      	adds	r3, #22
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	71bb      	strb	r3, [r7, #6]
 800bb82:	e01f      	b.n	800bbc4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b0e      	cmp	r3, #14
 800bb88:	d10e      	bne.n	800bba8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2102      	movs	r1, #2
 800bb90:	2002      	movs	r0, #2
 800bb92:	f7ff fe7b 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800bb96:	79ba      	ldrb	r2, [r7, #6]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	330e      	adds	r3, #14
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	71bb      	strb	r3, [r7, #6]
 800bba6:	e00d      	b.n	800bbc4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800bba8:	2301      	movs	r3, #1
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2107      	movs	r1, #7
 800bbae:	2004      	movs	r0, #4
 800bbb0:	f7ff fe6c 	bl	800b88c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800bbb4:	79ba      	ldrb	r2, [r7, #6]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	3316      	adds	r3, #22
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800bbc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bbc8:	f113 0f09 	cmn.w	r3, #9
 800bbcc:	da01      	bge.n	800bbd2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800bbce:	23f7      	movs	r3, #247	@ 0xf7
 800bbd0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800bbd2:	2138      	movs	r1, #56	@ 0x38
 800bbd4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800bbd8:	f000 fa2a 	bl	800c030 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800bbdc:	79bb      	ldrb	r3, [r7, #6]
 800bbde:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800bbe0:	797b      	ldrb	r3, [r7, #5]
 800bbe2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800bbe4:	f107 0308 	add.w	r3, r7, #8
 800bbe8:	2202      	movs	r2, #2
 800bbea:	4619      	mov	r1, r3
 800bbec:	208e      	movs	r0, #142	@ 0x8e
 800bbee:	f000 facf 	bl	800c190 <SUBGRF_WriteCommand>
}
 800bbf2:	bf00      	nop
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800bbfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bc0a:	4a61      	ldr	r2, [pc, #388]	@ (800bd90 <SUBGRF_SetModulationParams+0x194>)
 800bc0c:	f107 0308 	add.w	r3, r7, #8
 800bc10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc14:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	781a      	ldrb	r2, [r3, #0]
 800bc1c:	4b5d      	ldr	r3, [pc, #372]	@ (800bd94 <SUBGRF_SetModulationParams+0x198>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d004      	beq.n	800bc2e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff fef3 	bl	800ba14 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	f200 80a5 	bhi.w	800bd82 <SUBGRF_SetModulationParams+0x186>
 800bc38:	a201      	add	r2, pc, #4	@ (adr r2, 800bc40 <SUBGRF_SetModulationParams+0x44>)
 800bc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3e:	bf00      	nop
 800bc40:	0800bc51 	.word	0x0800bc51
 800bc44:	0800bd11 	.word	0x0800bd11
 800bc48:	0800bcd3 	.word	0x0800bcd3
 800bc4c:	0800bd3f 	.word	0x0800bd3f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800bc50:	2308      	movs	r3, #8
 800bc52:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	4a4f      	ldr	r2, [pc, #316]	@ (800bd98 <SUBGRF_SetModulationParams+0x19c>)
 800bc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc5e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	0c1b      	lsrs	r3, r3, #16
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	0a1b      	lsrs	r3, r3, #8
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	7b1b      	ldrb	r3, [r3, #12]
 800bc7a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7b5b      	ldrb	r3, [r3, #13]
 800bc80:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	2200      	movs	r2, #0
 800bc88:	461c      	mov	r4, r3
 800bc8a:	4615      	mov	r5, r2
 800bc8c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800bc90:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800bc94:	4a41      	ldr	r2, [pc, #260]	@ (800bd9c <SUBGRF_SetModulationParams+0x1a0>)
 800bc96:	f04f 0300 	mov.w	r3, #0
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 fac7 	bl	8000230 <__aeabi_uldivmod>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4613      	mov	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	0c1b      	lsrs	r3, r3, #16
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	0a1b      	lsrs	r3, r3, #8
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bcc0:	7cfb      	ldrb	r3, [r7, #19]
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	f107 0308 	add.w	r3, r7, #8
 800bcc8:	4619      	mov	r1, r3
 800bcca:	208b      	movs	r0, #139	@ 0x8b
 800bccc:	f000 fa60 	bl	800c190 <SUBGRF_WriteCommand>
        break;
 800bcd0:	e058      	b.n	800bd84 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800bcd2:	2304      	movs	r3, #4
 800bcd4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	4a2f      	ldr	r2, [pc, #188]	@ (800bd98 <SUBGRF_SetModulationParams+0x19c>)
 800bcdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	0c1b      	lsrs	r3, r3, #16
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	0a1b      	lsrs	r3, r3, #8
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	7d1b      	ldrb	r3, [r3, #20]
 800bcfc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bcfe:	7cfb      	ldrb	r3, [r7, #19]
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	f107 0308 	add.w	r3, r7, #8
 800bd06:	4619      	mov	r1, r3
 800bd08:	208b      	movs	r0, #139	@ 0x8b
 800bd0a:	f000 fa41 	bl	800c190 <SUBGRF_WriteCommand>
        break;
 800bd0e:	e039      	b.n	800bd84 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800bd10:	2304      	movs	r3, #4
 800bd12:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	7e1b      	ldrb	r3, [r3, #24]
 800bd18:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7e5b      	ldrb	r3, [r3, #25]
 800bd1e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7e9b      	ldrb	r3, [r3, #26]
 800bd24:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7edb      	ldrb	r3, [r3, #27]
 800bd2a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bd2c:	7cfb      	ldrb	r3, [r7, #19]
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	f107 0308 	add.w	r3, r7, #8
 800bd34:	4619      	mov	r1, r3
 800bd36:	208b      	movs	r0, #139	@ 0x8b
 800bd38:	f000 fa2a 	bl	800c190 <SUBGRF_WriteCommand>

        break;
 800bd3c:	e022      	b.n	800bd84 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800bd3e:	2305      	movs	r3, #5
 800bd40:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	4a14      	ldr	r2, [pc, #80]	@ (800bd98 <SUBGRF_SetModulationParams+0x19c>)
 800bd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	0c1b      	lsrs	r3, r3, #16
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	0a1b      	lsrs	r3, r3, #8
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7b1b      	ldrb	r3, [r3, #12]
 800bd68:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7b5b      	ldrb	r3, [r3, #13]
 800bd6e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800bd70:	7cfb      	ldrb	r3, [r7, #19]
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	f107 0308 	add.w	r3, r7, #8
 800bd78:	4619      	mov	r1, r3
 800bd7a:	208b      	movs	r0, #139	@ 0x8b
 800bd7c:	f000 fa08 	bl	800c190 <SUBGRF_WriteCommand>
        break;
 800bd80:	e000      	b.n	800bd84 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800bd82:	bf00      	nop
    }
}
 800bd84:	bf00      	nop
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bd8e:	bf00      	nop
 800bd90:	0800e31c 	.word	0x0800e31c
 800bd94:	20004c25 	.word	0x20004c25
 800bd98:	3d090000 	.word	0x3d090000
 800bd9c:	01e84800 	.word	0x01e84800

0800bda0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bdac:	4a48      	ldr	r2, [pc, #288]	@ (800bed0 <SUBGRF_SetPacketParams+0x130>)
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	ca07      	ldmia	r2, {r0, r1, r2}
 800bdb4:	c303      	stmia	r3!, {r0, r1}
 800bdb6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	781a      	ldrb	r2, [r3, #0]
 800bdbc:	4b45      	ldr	r3, [pc, #276]	@ (800bed4 <SUBGRF_SetPacketParams+0x134>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d004      	beq.n	800bdce <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fe23 	bl	800ba14 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d878      	bhi.n	800bec8 <SUBGRF_SetPacketParams+0x128>
 800bdd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bddc <SUBGRF_SetPacketParams+0x3c>)
 800bdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bddc:	0800bded 	.word	0x0800bded
 800bde0:	0800be7d 	.word	0x0800be7d
 800bde4:	0800be71 	.word	0x0800be71
 800bde8:	0800bded 	.word	0x0800bded
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7a5b      	ldrb	r3, [r3, #9]
 800bdf0:	2bf1      	cmp	r3, #241	@ 0xf1
 800bdf2:	d10a      	bne.n	800be0a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800bdf4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800bdf8:	f7ff faaa 	bl	800b350 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800bdfc:	f248 0005 	movw	r0, #32773	@ 0x8005
 800be00:	f7ff fac6 	bl	800b390 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800be04:	2302      	movs	r3, #2
 800be06:	75bb      	strb	r3, [r7, #22]
 800be08:	e011      	b.n	800be2e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7a5b      	ldrb	r3, [r3, #9]
 800be0e:	2bf2      	cmp	r3, #242	@ 0xf2
 800be10:	d10a      	bne.n	800be28 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800be12:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800be16:	f7ff fa9b 	bl	800b350 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800be1a:	f241 0021 	movw	r0, #4129	@ 0x1021
 800be1e:	f7ff fab7 	bl	800b390 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800be22:	2306      	movs	r3, #6
 800be24:	75bb      	strb	r3, [r7, #22]
 800be26:	e002      	b.n	800be2e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7a5b      	ldrb	r3, [r3, #9]
 800be2c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800be2e:	2309      	movs	r3, #9
 800be30:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	885b      	ldrh	r3, [r3, #2]
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	b29b      	uxth	r3, r3
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	791b      	ldrb	r3, [r3, #4]
 800be4a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	795b      	ldrb	r3, [r3, #5]
 800be50:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	799b      	ldrb	r3, [r3, #6]
 800be56:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	79db      	ldrb	r3, [r3, #7]
 800be5c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7a1b      	ldrb	r3, [r3, #8]
 800be62:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800be64:	7dbb      	ldrb	r3, [r7, #22]
 800be66:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7a9b      	ldrb	r3, [r3, #10]
 800be6c:	753b      	strb	r3, [r7, #20]
        break;
 800be6e:	e022      	b.n	800beb6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800be70:	2301      	movs	r3, #1
 800be72:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	7b1b      	ldrb	r3, [r3, #12]
 800be78:	733b      	strb	r3, [r7, #12]
        break;
 800be7a:	e01c      	b.n	800beb6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800be7c:	2306      	movs	r3, #6
 800be7e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	89db      	ldrh	r3, [r3, #14]
 800be84:	0a1b      	lsrs	r3, r3, #8
 800be86:	b29b      	uxth	r3, r3
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	89db      	ldrh	r3, [r3, #14]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7c1a      	ldrb	r2, [r3, #16]
 800be98:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <SUBGRF_SetPacketParams+0x138>)
 800be9a:	4611      	mov	r1, r2
 800be9c:	7019      	strb	r1, [r3, #0]
 800be9e:	4613      	mov	r3, r2
 800bea0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	7c5b      	ldrb	r3, [r3, #17]
 800bea6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7c9b      	ldrb	r3, [r3, #18]
 800beac:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	7cdb      	ldrb	r3, [r3, #19]
 800beb2:	747b      	strb	r3, [r7, #17]
        break;
 800beb4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	b29a      	uxth	r2, r3
 800beba:	f107 030c 	add.w	r3, r7, #12
 800bebe:	4619      	mov	r1, r3
 800bec0:	208c      	movs	r0, #140	@ 0x8c
 800bec2:	f000 f965 	bl	800c190 <SUBGRF_WriteCommand>
 800bec6:	e000      	b.n	800beca <SUBGRF_SetPacketParams+0x12a>
        return;
 800bec8:	bf00      	nop
}
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	0800e324 	.word	0x0800e324
 800bed4:	20004c25 	.word	0x20004c25
 800bed8:	20004c26 	.word	0x20004c26

0800bedc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	460a      	mov	r2, r1
 800bee6:	71fb      	strb	r3, [r7, #7]
 800bee8:	4613      	mov	r3, r2
 800beea:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800beec:	79fb      	ldrb	r3, [r7, #7]
 800beee:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800bef0:	79bb      	ldrb	r3, [r7, #6]
 800bef2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800bef4:	f107 030c 	add.w	r3, r7, #12
 800bef8:	2202      	movs	r2, #2
 800befa:	4619      	mov	r1, r3
 800befc:	208f      	movs	r0, #143	@ 0x8f
 800befe:	f000 f947 	bl	800c190 <SUBGRF_WriteCommand>
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800bf14:	1d3b      	adds	r3, r7, #4
 800bf16:	2201      	movs	r2, #1
 800bf18:	4619      	mov	r1, r3
 800bf1a:	2015      	movs	r0, #21
 800bf1c:	f000 f95a 	bl	800c1d4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800bf20:	793b      	ldrb	r3, [r7, #4]
 800bf22:	425b      	negs	r3, r3
 800bf24:	105b      	asrs	r3, r3, #1
 800bf26:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800bf28:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800bf3e:	f107 030c 	add.w	r3, r7, #12
 800bf42:	2202      	movs	r2, #2
 800bf44:	4619      	mov	r1, r3
 800bf46:	2013      	movs	r0, #19
 800bf48:	f000 f944 	bl	800c1d4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800bf4c:	f7ff fd7e 	bl	800ba4c <SUBGRF_GetPacketType>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d10d      	bne.n	800bf72 <SUBGRF_GetRxBufferStatus+0x3e>
 800bf56:	4b0c      	ldr	r3, [pc, #48]	@ (800bf88 <SUBGRF_GetRxBufferStatus+0x54>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d108      	bne.n	800bf72 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800bf60:	f240 7002 	movw	r0, #1794	@ 0x702
 800bf64:	f000 f878 	bl	800c058 <SUBGRF_ReadRegister>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	701a      	strb	r2, [r3, #0]
 800bf70:	e002      	b.n	800bf78 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800bf72:	7b3a      	ldrb	r2, [r7, #12]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800bf78:	7b7a      	ldrb	r2, [r7, #13]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	701a      	strb	r2, [r3, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20004c26 	.word	0x20004c26

0800bf8c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800bf94:	f107 030c 	add.w	r3, r7, #12
 800bf98:	2203      	movs	r2, #3
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	2014      	movs	r0, #20
 800bf9e:	f000 f919 	bl	800c1d4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800bfa2:	f7ff fd53 	bl	800ba4c <SUBGRF_GetPacketType>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <SUBGRF_GetPacketStatus+0x30>
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d013      	beq.n	800bfe2 <SUBGRF_GetPacketStatus+0x56>
 800bfba:	e02a      	b.n	800c012 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800bfbc:	7b3a      	ldrb	r2, [r7, #12]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800bfc2:	7b7b      	ldrb	r3, [r7, #13]
 800bfc4:	425b      	negs	r3, r3
 800bfc6:	105b      	asrs	r3, r3, #1
 800bfc8:	b25a      	sxtb	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	105b      	asrs	r3, r3, #1
 800bfd4:	b25a      	sxtb	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	609a      	str	r2, [r3, #8]
            break;
 800bfe0:	e020      	b.n	800c024 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800bfe2:	7b3b      	ldrb	r3, [r7, #12]
 800bfe4:	425b      	negs	r3, r3
 800bfe6:	105b      	asrs	r3, r3, #1
 800bfe8:	b25a      	sxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800bfee:	7b7b      	ldrb	r3, [r7, #13]
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	3302      	adds	r3, #2
 800bff4:	109b      	asrs	r3, r3, #2
 800bff6:	b25a      	sxtb	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	425b      	negs	r3, r3
 800c000:	105b      	asrs	r3, r3, #1
 800c002:	b25a      	sxtb	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c008:	4b08      	ldr	r3, [pc, #32]	@ (800c02c <SUBGRF_GetPacketStatus+0xa0>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	611a      	str	r2, [r3, #16]
            break;
 800c010:	e008      	b.n	800c024 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800c012:	2214      	movs	r2, #20
 800c014:	2100      	movs	r1, #0
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fbc8 	bl	800c7ac <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	220f      	movs	r2, #15
 800c020:	701a      	strb	r2, [r3, #0]
            break;
 800c022:	bf00      	nop
    }
}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20004c28 	.word	0x20004c28

0800c030 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	460a      	mov	r2, r1
 800c03a:	80fb      	strh	r3, [r7, #6]
 800c03c:	4613      	mov	r3, r2
 800c03e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800c040:	1d7a      	adds	r2, r7, #5
 800c042:	88f9      	ldrh	r1, [r7, #6]
 800c044:	2301      	movs	r3, #1
 800c046:	4803      	ldr	r0, [pc, #12]	@ (800c054 <SUBGRF_WriteRegister+0x24>)
 800c048:	f7f7 fa76 	bl	8003538 <HAL_SUBGHZ_WriteRegisters>
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	20000c14 	.word	0x20000c14

0800c058 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800c062:	f107 020f 	add.w	r2, r7, #15
 800c066:	88f9      	ldrh	r1, [r7, #6]
 800c068:	2301      	movs	r3, #1
 800c06a:	4804      	ldr	r0, [pc, #16]	@ (800c07c <SUBGRF_ReadRegister+0x24>)
 800c06c:	f7f7 fac3 	bl	80035f6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800c070:	7bfb      	ldrb	r3, [r7, #15]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	20000c14 	.word	0x20000c14

0800c080 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	6039      	str	r1, [r7, #0]
 800c08a:	80fb      	strh	r3, [r7, #6]
 800c08c:	4613      	mov	r3, r2
 800c08e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c090:	f3ef 8310 	mrs	r3, PRIMASK
 800c094:	60fb      	str	r3, [r7, #12]
  return(result);
 800c096:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c09a:	b672      	cpsid	i
}
 800c09c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800c09e:	88bb      	ldrh	r3, [r7, #4]
 800c0a0:	88f9      	ldrh	r1, [r7, #6]
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	4806      	ldr	r0, [pc, #24]	@ (800c0c0 <SUBGRF_WriteRegisters+0x40>)
 800c0a6:	f7f7 fa47 	bl	8003538 <HAL_SUBGHZ_WriteRegisters>
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	f383 8810 	msr	PRIMASK, r3
}
 800c0b4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c0b6:	bf00      	nop
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000c14 	.word	0x20000c14

0800c0c4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	80fb      	strh	r3, [r7, #6]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c0d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0da:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c0dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0de:	b672      	cpsid	i
}
 800c0e0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800c0e2:	88bb      	ldrh	r3, [r7, #4]
 800c0e4:	88f9      	ldrh	r1, [r7, #6]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	4806      	ldr	r0, [pc, #24]	@ (800c104 <SUBGRF_ReadRegisters+0x40>)
 800c0ea:	f7f7 fa84 	bl	80035f6 <HAL_SUBGHZ_ReadRegisters>
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f383 8810 	msr	PRIMASK, r3
}
 800c0f8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c0fa:	bf00      	nop
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	20000c14 	.word	0x20000c14

0800c108 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	6039      	str	r1, [r7, #0]
 800c112:	71fb      	strb	r3, [r7, #7]
 800c114:	4613      	mov	r3, r2
 800c116:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c118:	f3ef 8310 	mrs	r3, PRIMASK
 800c11c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c11e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c120:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c122:	b672      	cpsid	i
}
 800c124:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800c126:	79bb      	ldrb	r3, [r7, #6]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	79f9      	ldrb	r1, [r7, #7]
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	4806      	ldr	r0, [pc, #24]	@ (800c148 <SUBGRF_WriteBuffer+0x40>)
 800c130:	f7f7 fb75 	bl	800381e <HAL_SUBGHZ_WriteBuffer>
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	f383 8810 	msr	PRIMASK, r3
}
 800c13e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c140:	bf00      	nop
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20000c14 	.word	0x20000c14

0800c14c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	6039      	str	r1, [r7, #0]
 800c156:	71fb      	strb	r3, [r7, #7]
 800c158:	4613      	mov	r3, r2
 800c15a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c15c:	f3ef 8310 	mrs	r3, PRIMASK
 800c160:	60fb      	str	r3, [r7, #12]
  return(result);
 800c162:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c166:	b672      	cpsid	i
}
 800c168:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800c16a:	79bb      	ldrb	r3, [r7, #6]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	79f9      	ldrb	r1, [r7, #7]
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	4806      	ldr	r0, [pc, #24]	@ (800c18c <SUBGRF_ReadBuffer+0x40>)
 800c174:	f7f7 fba6 	bl	80038c4 <HAL_SUBGHZ_ReadBuffer>
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f383 8810 	msr	PRIMASK, r3
}
 800c182:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c184:	bf00      	nop
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	20000c14 	.word	0x20000c14

0800c190 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	6039      	str	r1, [r7, #0]
 800c19a:	71fb      	strb	r3, [r7, #7]
 800c19c:	4613      	mov	r3, r2
 800c19e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c1a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c1a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1aa:	b672      	cpsid	i
}
 800c1ac:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800c1ae:	88bb      	ldrh	r3, [r7, #4]
 800c1b0:	79f9      	ldrb	r1, [r7, #7]
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	4806      	ldr	r0, [pc, #24]	@ (800c1d0 <SUBGRF_WriteCommand+0x40>)
 800c1b6:	f7f7 fa7f 	bl	80036b8 <HAL_SUBGHZ_ExecSetCmd>
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f383 8810 	msr	PRIMASK, r3
}
 800c1c4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c1c6:	bf00      	nop
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000c14 	.word	0x20000c14

0800c1d4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	71fb      	strb	r3, [r7, #7]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1e4:	f3ef 8310 	mrs	r3, PRIMASK
 800c1e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c1ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1ee:	b672      	cpsid	i
}
 800c1f0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c1f2:	88bb      	ldrh	r3, [r7, #4]
 800c1f4:	79f9      	ldrb	r1, [r7, #7]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	4806      	ldr	r0, [pc, #24]	@ (800c214 <SUBGRF_ReadCommand+0x40>)
 800c1fa:	f7f7 fabc 	bl	8003776 <HAL_SUBGHZ_ExecGetCmd>
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	f383 8810 	msr	PRIMASK, r3
}
 800c208:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c20a:	bf00      	nop
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000c14 	.word	0x20000c14

0800c218 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	460a      	mov	r2, r1
 800c222:	71fb      	strb	r3, [r7, #7]
 800c224:	4613      	mov	r3, r2
 800c226:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c228:	2301      	movs	r3, #1
 800c22a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800c22c:	79bb      	ldrb	r3, [r7, #6]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d10d      	bne.n	800c24e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d104      	bne.n	800c242 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800c238:	2302      	movs	r3, #2
 800c23a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c23c:	2004      	movs	r0, #4
 800c23e:	f000 f8ef 	bl	800c420 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800c242:	79fb      	ldrb	r3, [r7, #7]
 800c244:	2b02      	cmp	r3, #2
 800c246:	d107      	bne.n	800c258 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800c248:	2303      	movs	r3, #3
 800c24a:	73fb      	strb	r3, [r7, #15]
 800c24c:	e004      	b.n	800c258 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800c24e:	79bb      	ldrb	r3, [r7, #6]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d101      	bne.n	800c258 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800c254:	2301      	movs	r3, #1
 800c256:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800c258:	7bfb      	ldrb	r3, [r7, #15]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fa26 	bl	800c6ac <RBI_ConfigRFSwitch>
}
 800c260:	bf00      	nop
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800c272:	2301      	movs	r3, #1
 800c274:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800c276:	f000 fa44 	bl	800c702 <RBI_GetTxConfig>
 800c27a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d016      	beq.n	800c2b0 <SUBGRF_SetRfTxPower+0x48>
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b02      	cmp	r3, #2
 800c286:	dc16      	bgt.n	800c2b6 <SUBGRF_SetRfTxPower+0x4e>
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <SUBGRF_SetRfTxPower+0x2e>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d00a      	beq.n	800c2aa <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800c294:	e00f      	b.n	800c2b6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800c296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c29a:	2b0f      	cmp	r3, #15
 800c29c:	dd02      	ble.n	800c2a4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800c29e:	2302      	movs	r3, #2
 800c2a0:	73fb      	strb	r3, [r7, #15]
            break;
 800c2a2:	e009      	b.n	800c2b8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	73fb      	strb	r3, [r7, #15]
            break;
 800c2a8:	e006      	b.n	800c2b8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	73fb      	strb	r3, [r7, #15]
            break;
 800c2ae:	e003      	b.n	800c2b8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	73fb      	strb	r3, [r7, #15]
            break;
 800c2b4:	e000      	b.n	800c2b8 <SUBGRF_SetRfTxPower+0x50>
            break;
 800c2b6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c2b8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800c2bc:	7bfb      	ldrb	r3, [r7, #15]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fbcd 	bl	800ba60 <SUBGRF_SetTxParams>

    return paSelect;
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800c2d4:	2301      	movs	r3, #1
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bc80      	pop	{r7}
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800c2e8:	4b03      	ldr	r3, [pc, #12]	@ (800c2f8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	4798      	blx	r3
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20004c30 	.word	0x20004c30

0800c2fc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800c304:	4b03      	ldr	r3, [pc, #12]	@ (800c314 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2002      	movs	r0, #2
 800c30a:	4798      	blx	r3
}
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20004c30 	.word	0x20004c30

0800c318 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800c320:	4b03      	ldr	r3, [pc, #12]	@ (800c330 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2040      	movs	r0, #64	@ 0x40
 800c326:	4798      	blx	r3
}
 800c328:	bf00      	nop
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20004c30 	.word	0x20004c30

0800c334 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <HAL_SUBGHZ_CADStatusCallback+0x18>
 800c346:	2b01      	cmp	r3, #1
 800c348:	d005      	beq.n	800c356 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800c34a:	e00a      	b.n	800c362 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800c34c:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2080      	movs	r0, #128	@ 0x80
 800c352:	4798      	blx	r3
            break;
 800c354:	e005      	b.n	800c362 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800c356:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c35e:	4798      	blx	r3
            break;
 800c360:	bf00      	nop
    }
}
 800c362:	bf00      	nop
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20004c30 	.word	0x20004c30

0800c370 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800c378:	4b04      	ldr	r3, [pc, #16]	@ (800c38c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c380:	4798      	blx	r3
}
 800c382:	bf00      	nop
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20004c30 	.word	0x20004c30

0800c390 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800c398:	4b03      	ldr	r3, [pc, #12]	@ (800c3a8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2020      	movs	r0, #32
 800c39e:	4798      	blx	r3
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	20004c30 	.word	0x20004c30

0800c3ac <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800c3b4:	4b03      	ldr	r3, [pc, #12]	@ (800c3c4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2004      	movs	r0, #4
 800c3ba:	4798      	blx	r3
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20004c30 	.word	0x20004c30

0800c3c8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800c3d0:	4b03      	ldr	r3, [pc, #12]	@ (800c3e0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2008      	movs	r0, #8
 800c3d6:	4798      	blx	r3
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20004c30 	.word	0x20004c30

0800c3e4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800c3ec:	4b03      	ldr	r3, [pc, #12]	@ (800c3fc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2010      	movs	r0, #16
 800c3f2:	4798      	blx	r3
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20004c30 	.word	0x20004c30

0800c400 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800c408:	4b04      	ldr	r3, [pc, #16]	@ (800c41c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c410:	4798      	blx	r3
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	20004c30 	.word	0x20004c30

0800c420 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800c42a:	f000 f980 	bl	800c72e <RBI_IsDCDC>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b01      	cmp	r3, #1
 800c432:	d112      	bne.n	800c45a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800c434:	f640 1023 	movw	r0, #2339	@ 0x923
 800c438:	f7ff fe0e 	bl	800c058 <SUBGRF_ReadRegister>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	f023 0306 	bic.w	r3, r3, #6
 800c446:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800c448:	7bfa      	ldrb	r2, [r7, #15]
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	4619      	mov	r1, r3
 800c452:	f640 1023 	movw	r0, #2339	@ 0x923
 800c456:	f7ff fdeb 	bl	800c030 <SUBGRF_WriteRegister>
  }
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
	...

0800c464 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800c472:	231f      	movs	r3, #31
 800c474:	e017      	b.n	800c4a6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c476:	2300      	movs	r3, #0
 800c478:	73fb      	strb	r3, [r7, #15]
 800c47a:	e00f      	b.n	800c49c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	4a0c      	ldr	r2, [pc, #48]	@ (800c4b0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	429a      	cmp	r2, r3
 800c488:	d205      	bcs.n	800c496 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	4a08      	ldr	r2, [pc, #32]	@ (800c4b0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	4413      	add	r3, r2
 800c492:	791b      	ldrb	r3, [r3, #4]
 800c494:	e007      	b.n	800c4a6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	3301      	adds	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	2b15      	cmp	r3, #21
 800c4a0:	d9ec      	bls.n	800c47c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c4a2:	bf00      	nop
 800c4a4:	e7fd      	b.n	800c4a2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bc80      	pop	{r7}
 800c4ae:	4770      	bx	lr
 800c4b0:	0800e5c8 	.word	0x0800e5c8

0800c4b4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b08a      	sub	sp, #40	@ 0x28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800c4be:	4b35      	ldr	r3, [pc, #212]	@ (800c594 <SUBGRF_GetCFO+0xe0>)
 800c4c0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800c4c2:	f640 0007 	movw	r0, #2055	@ 0x807
 800c4c6:	f7ff fdc7 	bl	800c058 <SUBGRF_ReadRegister>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800c4ce:	7ffb      	ldrb	r3, [r7, #31]
 800c4d0:	08db      	lsrs	r3, r3, #3
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0303 	and.w	r3, r3, #3
 800c4d8:	3328      	adds	r3, #40	@ 0x28
 800c4da:	443b      	add	r3, r7
 800c4dc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800c4e0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800c4e2:	7ffb      	ldrb	r3, [r7, #31]
 800c4e4:	f003 0307 	and.w	r3, r3, #7
 800c4e8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800c4ea:	7fba      	ldrb	r2, [r7, #30]
 800c4ec:	7f7b      	ldrb	r3, [r7, #29]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	4b28      	ldr	r3, [pc, #160]	@ (800c598 <SUBGRF_GetCFO+0xe4>)
 800c4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4fc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800c4fe:	69ba      	ldr	r2, [r7, #24]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	fbb2 f3f3 	udiv	r3, r2, r3
 800c506:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800c508:	2301      	movs	r3, #1
 800c50a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800c50e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	2b07      	cmp	r3, #7
 800c51a:	d802      	bhi.n	800c522 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800c51c:	2302      	movs	r3, #2
 800c51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800c522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	fb02 f303 	mul.w	r3, r2, r3
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d802      	bhi.n	800c536 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800c530:	2304      	movs	r3, #4
 800c532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c536:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	fb02 f303 	mul.w	r3, r2, r3
 800c540:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800c542:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800c546:	f7ff fd87 	bl	800c058 <SUBGRF_ReadRegister>
 800c54a:	4603      	mov	r3, r0
 800c54c:	021b      	lsls	r3, r3, #8
 800c54e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c552:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800c554:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800c558:	f7ff fd7e 	bl	800c058 <SUBGRF_ReadRegister>
 800c55c:	4603      	mov	r3, r0
 800c55e:	461a      	mov	r2, r3
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	4313      	orrs	r3, r2
 800c564:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c576:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c57a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	095b      	lsrs	r3, r3, #5
 800c580:	6a3a      	ldr	r2, [r7, #32]
 800c582:	fb02 f303 	mul.w	r3, r2, r3
 800c586:	11da      	asrs	r2, r3, #7
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	601a      	str	r2, [r3, #0]
}
 800c58c:	bf00      	nop
 800c58e:	3728      	adds	r7, #40	@ 0x28
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	0c0a0804 	.word	0x0c0a0804
 800c598:	01e84800 	.word	0x01e84800

0800c59c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800c5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c5b4:	697b      	ldr	r3, [r7, #20]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bc80      	pop	{r7}
 800c5be:	4770      	bx	lr

0800c5c0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b087      	sub	sp, #28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c5d8:	697b      	ldr	r3, [r7, #20]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bc80      	pop	{r7}
 800c5e2:	4770      	bx	lr

0800c5e4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800c5f0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr

0800c5fe <RFW_DeInit>:

void RFW_DeInit( void )
{
 800c5fe:	b480      	push	{r7}
 800c600:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800c602:	bf00      	nop
 800c604:	46bd      	mov	sp, r7
 800c606:	bc80      	pop	{r7}
 800c608:	4770      	bx	lr

0800c60a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800c60a:	b480      	push	{r7}
 800c60c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800c60e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c610:	4618      	mov	r0, r3
 800c612:	46bd      	mov	sp, r7
 800c614:	bc80      	pop	{r7}
 800c616:	4770      	bx	lr

0800c618 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800c618:	b480      	push	{r7}
 800c61a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800c61c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c61e:	4618      	mov	r0, r3
 800c620:	46bd      	mov	sp, r7
 800c622:	bc80      	pop	{r7}
 800c624:	4770      	bx	lr

0800c626 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	4603      	mov	r3, r0
 800c62e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	bc80      	pop	{r7}
 800c638:	4770      	bx	lr

0800c63a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800c63a:	b480      	push	{r7}
 800c63c:	b087      	sub	sp, #28
 800c63e:	af00      	add	r7, sp, #0
 800c640:	60f8      	str	r0, [r7, #12]
 800c642:	460b      	mov	r3, r1
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800c648:	f04f 33ff 	mov.w	r3, #4294967295
 800c64c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800c64e:	697b      	ldr	r3, [r7, #20]
}
 800c650:	4618      	mov	r0, r3
 800c652:	371c      	adds	r7, #28
 800c654:	46bd      	mov	sp, r7
 800c656:	bc80      	pop	{r7}
 800c658:	4770      	bx	lr

0800c65a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c65a:	b480      	push	{r7}
 800c65c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800c662:	4618      	mov	r0, r3
 800c664:	46bd      	mov	sp, r7
 800c666:	bc80      	pop	{r7}
 800c668:	4770      	bx	lr

0800c66a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800c66a:	b480      	push	{r7}
 800c66c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800c66e:	bf00      	nop
 800c670:	46bd      	mov	sp, r7
 800c672:	bc80      	pop	{r7}
 800c674:	4770      	bx	lr

0800c676 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800c676:	b480      	push	{r7}
 800c678:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800c67a:	bf00      	nop
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bc80      	pop	{r7}
 800c680:	4770      	bx	lr

0800c682 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800c682:	b480      	push	{r7}
 800c684:	b083      	sub	sp, #12
 800c686:	af00      	add	r7, sp, #0
 800c688:	4603      	mov	r3, r0
 800c68a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	bc80      	pop	{r7}
 800c694:	4770      	bx	lr

0800c696 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c6a0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bc80      	pop	{r7}
 800c6aa:	4770      	bx	lr

0800c6ac <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
  if (Config == RBI_SWITCH_RFO_HP || Config == RBI_SWITCH_RFO_LP) {
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d002      	beq.n	800c6c6 <RBI_ConfigRFSwitch+0x1a>
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d10c      	bne.n	800c6e0 <RBI_ConfigRFSwitch+0x34>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2120      	movs	r1, #32
 800c6ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c6ce:	f7f5 fad3 	bl	8001c78 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	2140      	movs	r1, #64	@ 0x40
 800c6d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c6da:	f7f5 facd 	bl	8001c78 <HAL_GPIO_WritePin>
 800c6de:	e00b      	b.n	800c6f8 <RBI_ConfigRFSwitch+0x4c>
  } else {
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	2120      	movs	r1, #32
 800c6e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c6e8:	f7f5 fac6 	bl	8001c78 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2140      	movs	r1, #64	@ 0x40
 800c6f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c6f4:	f7f5 fac0 	bl	8001c78 <HAL_GPIO_WritePin>
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800c708:	2302      	movs	r3, #2
 800c70a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800c70c:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	bc80      	pop	{r7}
 800c716:	4770      	bx	lr

0800c718 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c71e:	2300      	movs	r3, #0
 800c720:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800c722:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	bc80      	pop	{r7}
 800c72c:	4770      	bx	lr

0800c72e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c72e:	b480      	push	{r7}
 800c730:	b083      	sub	sp, #12
 800c732:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c734:	2300      	movs	r3, #0
 800c736:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800c738:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	bc80      	pop	{r7}
 800c742:	4770      	bx	lr

0800c744 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800c752:	79fb      	ldrb	r3, [r7, #7]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d102      	bne.n	800c75e <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800c758:	230f      	movs	r3, #15
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	e001      	b.n	800c762 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800c75e:	2316      	movs	r3, #22
 800c760:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c762:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	bc80      	pop	{r7}
 800c76c:	4770      	bx	lr

0800c76e <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800c76e:	b480      	push	{r7}
 800c770:	b087      	sub	sp, #28
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	4613      	mov	r3, r2
 800c77a:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	613b      	str	r3, [r7, #16]

  while( size-- )
 800c784:	e007      	b.n	800c796 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	1c53      	adds	r3, r2, #1
 800c78a:	613b      	str	r3, [r7, #16]
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	1c59      	adds	r1, r3, #1
 800c790:	6179      	str	r1, [r7, #20]
 800c792:	7812      	ldrb	r2, [r2, #0]
 800c794:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c796:	88fb      	ldrh	r3, [r7, #6]
 800c798:	1e5a      	subs	r2, r3, #1
 800c79a:	80fa      	strh	r2, [r7, #6]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1f2      	bne.n	800c786 <UTIL_MEM_cpy_8+0x18>
    }
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bc80      	pop	{r7}
 800c7aa:	4770      	bx	lr

0800c7ac <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c7c0:	e004      	b.n	800c7cc <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	60fa      	str	r2, [r7, #12]
 800c7c8:	78fa      	ldrb	r2, [r7, #3]
 800c7ca:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c7cc:	883b      	ldrh	r3, [r7, #0]
 800c7ce:	1e5a      	subs	r2, r3, #1
 800c7d0:	803a      	strh	r2, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1f5      	bne.n	800c7c2 <UTIL_MEM_set_8+0x16>
  }
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr
	...

0800c7e4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d023      	beq.n	800c842 <UTIL_TIMER_Create+0x5e>
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d020      	beq.n	800c842 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c806:	4b11      	ldr	r3, [pc, #68]	@ (800c84c <UTIL_TIMER_Create+0x68>)
 800c808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c80a:	68b8      	ldr	r0, [r7, #8]
 800c80c:	4798      	blx	r3
 800c80e:	4602      	mov	r2, r0
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	79fa      	ldrb	r2, [r7, #7]
 800c836:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	e000      	b.n	800c844 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c842:	2301      	movs	r3, #1
  }
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	0800e4e4 	.word	0x0800e4e4

0800c850 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	@ 0x28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d056      	beq.n	800c912 <UTIL_TIMER_Start+0xc2>
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f929 	bl	800cabc <TimerExists>
 800c86a:	4603      	mov	r3, r0
 800c86c:	f083 0301 	eor.w	r3, r3, #1
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d04d      	beq.n	800c912 <UTIL_TIMER_Start+0xc2>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7a5b      	ldrb	r3, [r3, #9]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d149      	bne.n	800c912 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c87e:	f3ef 8310 	mrs	r3, PRIMASK
 800c882:	613b      	str	r3, [r7, #16]
  return(result);
 800c884:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c888:	b672      	cpsid	i
}
 800c88a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c892:	4b24      	ldr	r3, [pc, #144]	@ (800c924 <UTIL_TIMER_Start+0xd4>)
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	4798      	blx	r3
 800c898:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c89a:	6a3a      	ldr	r2, [r7, #32]
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d201      	bcs.n	800c8a6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a3a      	ldr	r2, [r7, #32]
 800c8aa:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c8be:	4b1a      	ldr	r3, [pc, #104]	@ (800c928 <UTIL_TIMER_Start+0xd8>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c8c6:	4b17      	ldr	r3, [pc, #92]	@ (800c924 <UTIL_TIMER_Start+0xd4>)
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f96b 	bl	800cba8 <TimerInsertNewHeadTimer>
 800c8d2:	e017      	b.n	800c904 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c8d4:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <UTIL_TIMER_Start+0xd4>)
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	4798      	blx	r3
 800c8da:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	441a      	add	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <UTIL_TIMER_Start+0xd8>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d203      	bcs.n	800c8fe <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f956 	bl	800cba8 <TimerInsertNewHeadTimer>
 800c8fc:	e002      	b.n	800c904 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f922 	bl	800cb48 <TimerInsertTimer>
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f383 8810 	msr	PRIMASK, r3
}
 800c90e:	bf00      	nop
  {
 800c910:	e002      	b.n	800c918 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c912:	2301      	movs	r3, #1
 800c914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800c918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3728      	adds	r7, #40	@ 0x28
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	0800e4e4 	.word	0x0800e4e4
 800c928:	20004c34 	.word	0x20004c34

0800c92c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d05b      	beq.n	800c9f6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93e:	f3ef 8310 	mrs	r3, PRIMASK
 800c942:	60fb      	str	r3, [r7, #12]
  return(result);
 800c944:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c948:	b672      	cpsid	i
}
 800c94a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c94c:	4b2d      	ldr	r3, [pc, #180]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800c952:	4b2c      	ldr	r3, [pc, #176]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800c95e:	4b29      	ldr	r3, [pc, #164]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d041      	beq.n	800c9ea <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c96c:	4b25      	ldr	r3, [pc, #148]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	429a      	cmp	r2, r3
 800c974:	d134      	bne.n	800c9e0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800c976:	4b23      	ldr	r3, [pc, #140]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2200      	movs	r2, #0
 800c97c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800c97e:	4b21      	ldr	r3, [pc, #132]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00a      	beq.n	800c99e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800c988:	4b1e      	ldr	r3, [pc, #120]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	695b      	ldr	r3, [r3, #20]
 800c98e:	4a1d      	ldr	r2, [pc, #116]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c990:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800c992:	4b1c      	ldr	r3, [pc, #112]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 f8ac 	bl	800caf4 <TimerSetTimeout>
 800c99c:	e023      	b.n	800c9e6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800c99e:	4b1a      	ldr	r3, [pc, #104]	@ (800ca08 <UTIL_TIMER_Stop+0xdc>)
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	4798      	blx	r3
            TimerListHead = NULL;
 800c9a4:	4b17      	ldr	r3, [pc, #92]	@ (800ca04 <UTIL_TIMER_Stop+0xd8>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	e01c      	b.n	800c9e6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d110      	bne.n	800c9d6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d006      	beq.n	800c9ca <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800c9c8:	e00d      	b.n	800c9e6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	615a      	str	r2, [r3, #20]
            break;
 800c9d4:	e007      	b.n	800c9e6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e2      	bne.n	800c9ac <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	77fb      	strb	r3, [r7, #31]
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f383 8810 	msr	PRIMASK, r3
}
 800c9f4:	e001      	b.n	800c9fa <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c9fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20004c34 	.word	0x20004c34
 800ca08:	0800e4e4 	.word	0x0800e4e4

0800ca0c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d102      	bne.n	800ca26 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ca20:	2301      	movs	r3, #1
 800ca22:	73fb      	strb	r3, [r7, #15]
 800ca24:	e014      	b.n	800ca50 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800ca26:	4b0d      	ldr	r3, [pc, #52]	@ (800ca5c <UTIL_TIMER_SetPeriod+0x50>)
 800ca28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2a:	6838      	ldr	r0, [r7, #0]
 800ca2c:	4798      	blx	r3
 800ca2e:	4602      	mov	r2, r0
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f841 	bl	800cabc <TimerExists>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d007      	beq.n	800ca50 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff ff73 	bl	800c92c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff ff02 	bl	800c850 <UTIL_TIMER_Start>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	0800e4e4 	.word	0x0800e4e4

0800ca60 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ca66:	4b06      	ldr	r3, [pc, #24]	@ (800ca80 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	4798      	blx	r3
 800ca6c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800ca6e:	4b04      	ldr	r3, [pc, #16]	@ (800ca80 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ca70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	4798      	blx	r3
 800ca76:	4603      	mov	r3, r0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	0800e4e4 	.word	0x0800e4e4

0800ca84 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ca8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cab8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ca8e:	69db      	ldr	r3, [r3, #28]
 800ca90:	4798      	blx	r3
 800ca92:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ca94:	4b08      	ldr	r3, [pc, #32]	@ (800cab8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ca96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	4798      	blx	r3
 800ca9c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ca9e:	4b06      	ldr	r3, [pc, #24]	@ (800cab8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa2:	68f9      	ldr	r1, [r7, #12]
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	1a8a      	subs	r2, r1, r2
 800caa8:	4610      	mov	r0, r2
 800caaa:	4798      	blx	r3
 800caac:	4603      	mov	r3, r0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	0800e4e4 	.word	0x0800e4e4

0800cabc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cac4:	4b0a      	ldr	r3, [pc, #40]	@ (800caf0 <TimerExists+0x34>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800caca:	e008      	b.n	800cade <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d101      	bne.n	800cad8 <TimerExists+0x1c>
    {
      return true;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e006      	b.n	800cae6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1f3      	bne.n	800cacc <TimerExists+0x10>
  }
  return false;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	bc80      	pop	{r7}
 800caee:	4770      	bx	lr
 800caf0:	20004c34 	.word	0x20004c34

0800caf4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800caf4:	b590      	push	{r4, r7, lr}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800cafc:	4b11      	ldr	r3, [pc, #68]	@ (800cb44 <TimerSetTimeout+0x50>)
 800cafe:	6a1b      	ldr	r3, [r3, #32]
 800cb00:	4798      	blx	r3
 800cb02:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681c      	ldr	r4, [r3, #0]
 800cb0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb44 <TimerSetTimeout+0x50>)
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	4798      	blx	r3
 800cb14:	4602      	mov	r2, r0
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	4413      	add	r3, r2
 800cb1a:	429c      	cmp	r4, r3
 800cb1c:	d207      	bcs.n	800cb2e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800cb1e:	4b09      	ldr	r3, [pc, #36]	@ (800cb44 <TimerSetTimeout+0x50>)
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	4798      	blx	r3
 800cb24:	4602      	mov	r2, r0
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	441a      	add	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800cb2e:	4b05      	ldr	r3, [pc, #20]	@ (800cb44 <TimerSetTimeout+0x50>)
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	6812      	ldr	r2, [r2, #0]
 800cb36:	4610      	mov	r0, r2
 800cb38:	4798      	blx	r3
}
 800cb3a:	bf00      	nop
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd90      	pop	{r4, r7, pc}
 800cb42:	bf00      	nop
 800cb44:	0800e4e4 	.word	0x0800e4e4

0800cb48 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cb50:	4b14      	ldr	r3, [pc, #80]	@ (800cba4 <TimerInsertTimer+0x5c>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800cb56:	4b13      	ldr	r3, [pc, #76]	@ (800cba4 <TimerInsertTimer+0x5c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800cb5e:	e012      	b.n	800cb86 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d905      	bls.n	800cb78 <TimerInsertTimer+0x30>
    {
        cur = next;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	60bb      	str	r3, [r7, #8]
 800cb76:	e006      	b.n	800cb86 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	615a      	str	r2, [r3, #20]
        return;
 800cb84:	e009      	b.n	800cb9a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1e8      	bne.n	800cb60 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	615a      	str	r2, [r3, #20]
}
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bc80      	pop	{r7}
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	20004c34 	.word	0x20004c34

0800cba8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cbb0:	4b0b      	ldr	r3, [pc, #44]	@ (800cbe0 <TimerInsertNewHeadTimer+0x38>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800cbc8:	4a05      	ldr	r2, [pc, #20]	@ (800cbe0 <TimerInsertNewHeadTimer+0x38>)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800cbce:	4b04      	ldr	r3, [pc, #16]	@ (800cbe0 <TimerInsertNewHeadTimer+0x38>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff ff8e 	bl	800caf4 <TimerSetTimeout>
}
 800cbd8:	bf00      	nop
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20004c34 	.word	0x20004c34

0800cbe4 <calloc>:
 800cbe4:	4b02      	ldr	r3, [pc, #8]	@ (800cbf0 <calloc+0xc>)
 800cbe6:	460a      	mov	r2, r1
 800cbe8:	4601      	mov	r1, r0
 800cbea:	6818      	ldr	r0, [r3, #0]
 800cbec:	f000 b802 	b.w	800cbf4 <_calloc_r>
 800cbf0:	20000b18 	.word	0x20000b18

0800cbf4 <_calloc_r>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	fba1 5402 	umull	r5, r4, r1, r2
 800cbfa:	b93c      	cbnz	r4, 800cc0c <_calloc_r+0x18>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	f000 f83f 	bl	800cc80 <_malloc_r>
 800cc02:	4606      	mov	r6, r0
 800cc04:	b928      	cbnz	r0, 800cc12 <_calloc_r+0x1e>
 800cc06:	2600      	movs	r6, #0
 800cc08:	4630      	mov	r0, r6
 800cc0a:	bd70      	pop	{r4, r5, r6, pc}
 800cc0c:	220c      	movs	r2, #12
 800cc0e:	6002      	str	r2, [r0, #0]
 800cc10:	e7f9      	b.n	800cc06 <_calloc_r+0x12>
 800cc12:	462a      	mov	r2, r5
 800cc14:	4621      	mov	r1, r4
 800cc16:	f000 f8df 	bl	800cdd8 <memset>
 800cc1a:	e7f5      	b.n	800cc08 <_calloc_r+0x14>

0800cc1c <malloc>:
 800cc1c:	4b02      	ldr	r3, [pc, #8]	@ (800cc28 <malloc+0xc>)
 800cc1e:	4601      	mov	r1, r0
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	f000 b82d 	b.w	800cc80 <_malloc_r>
 800cc26:	bf00      	nop
 800cc28:	20000b18 	.word	0x20000b18

0800cc2c <free>:
 800cc2c:	4b02      	ldr	r3, [pc, #8]	@ (800cc38 <free+0xc>)
 800cc2e:	4601      	mov	r1, r0
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	f000 b9b5 	b.w	800cfa0 <_free_r>
 800cc36:	bf00      	nop
 800cc38:	20000b18 	.word	0x20000b18

0800cc3c <sbrk_aligned>:
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	4e0f      	ldr	r6, [pc, #60]	@ (800cc7c <sbrk_aligned+0x40>)
 800cc40:	460c      	mov	r4, r1
 800cc42:	6831      	ldr	r1, [r6, #0]
 800cc44:	4605      	mov	r5, r0
 800cc46:	b911      	cbnz	r1, 800cc4e <sbrk_aligned+0x12>
 800cc48:	f000 f958 	bl	800cefc <_sbrk_r>
 800cc4c:	6030      	str	r0, [r6, #0]
 800cc4e:	4621      	mov	r1, r4
 800cc50:	4628      	mov	r0, r5
 800cc52:	f000 f953 	bl	800cefc <_sbrk_r>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	d103      	bne.n	800cc62 <sbrk_aligned+0x26>
 800cc5a:	f04f 34ff 	mov.w	r4, #4294967295
 800cc5e:	4620      	mov	r0, r4
 800cc60:	bd70      	pop	{r4, r5, r6, pc}
 800cc62:	1cc4      	adds	r4, r0, #3
 800cc64:	f024 0403 	bic.w	r4, r4, #3
 800cc68:	42a0      	cmp	r0, r4
 800cc6a:	d0f8      	beq.n	800cc5e <sbrk_aligned+0x22>
 800cc6c:	1a21      	subs	r1, r4, r0
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f000 f944 	bl	800cefc <_sbrk_r>
 800cc74:	3001      	adds	r0, #1
 800cc76:	d1f2      	bne.n	800cc5e <sbrk_aligned+0x22>
 800cc78:	e7ef      	b.n	800cc5a <sbrk_aligned+0x1e>
 800cc7a:	bf00      	nop
 800cc7c:	20004c38 	.word	0x20004c38

0800cc80 <_malloc_r>:
 800cc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc84:	1ccd      	adds	r5, r1, #3
 800cc86:	f025 0503 	bic.w	r5, r5, #3
 800cc8a:	3508      	adds	r5, #8
 800cc8c:	2d0c      	cmp	r5, #12
 800cc8e:	bf38      	it	cc
 800cc90:	250c      	movcc	r5, #12
 800cc92:	2d00      	cmp	r5, #0
 800cc94:	4606      	mov	r6, r0
 800cc96:	db01      	blt.n	800cc9c <_malloc_r+0x1c>
 800cc98:	42a9      	cmp	r1, r5
 800cc9a:	d904      	bls.n	800cca6 <_malloc_r+0x26>
 800cc9c:	230c      	movs	r3, #12
 800cc9e:	6033      	str	r3, [r6, #0]
 800cca0:	2000      	movs	r0, #0
 800cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd7c <_malloc_r+0xfc>
 800ccaa:	f000 f869 	bl	800cd80 <__malloc_lock>
 800ccae:	f8d8 3000 	ldr.w	r3, [r8]
 800ccb2:	461c      	mov	r4, r3
 800ccb4:	bb44      	cbnz	r4, 800cd08 <_malloc_r+0x88>
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f7ff ffbf 	bl	800cc3c <sbrk_aligned>
 800ccbe:	1c43      	adds	r3, r0, #1
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	d158      	bne.n	800cd76 <_malloc_r+0xf6>
 800ccc4:	f8d8 4000 	ldr.w	r4, [r8]
 800ccc8:	4627      	mov	r7, r4
 800ccca:	2f00      	cmp	r7, #0
 800cccc:	d143      	bne.n	800cd56 <_malloc_r+0xd6>
 800ccce:	2c00      	cmp	r4, #0
 800ccd0:	d04b      	beq.n	800cd6a <_malloc_r+0xea>
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	eb04 0903 	add.w	r9, r4, r3
 800ccdc:	f000 f90e 	bl	800cefc <_sbrk_r>
 800cce0:	4581      	cmp	r9, r0
 800cce2:	d142      	bne.n	800cd6a <_malloc_r+0xea>
 800cce4:	6821      	ldr	r1, [r4, #0]
 800cce6:	1a6d      	subs	r5, r5, r1
 800cce8:	4629      	mov	r1, r5
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ffa6 	bl	800cc3c <sbrk_aligned>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	d03a      	beq.n	800cd6a <_malloc_r+0xea>
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	442b      	add	r3, r5
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	f8d8 3000 	ldr.w	r3, [r8]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	bb62      	cbnz	r2, 800cd5c <_malloc_r+0xdc>
 800cd02:	f8c8 7000 	str.w	r7, [r8]
 800cd06:	e00f      	b.n	800cd28 <_malloc_r+0xa8>
 800cd08:	6822      	ldr	r2, [r4, #0]
 800cd0a:	1b52      	subs	r2, r2, r5
 800cd0c:	d420      	bmi.n	800cd50 <_malloc_r+0xd0>
 800cd0e:	2a0b      	cmp	r2, #11
 800cd10:	d917      	bls.n	800cd42 <_malloc_r+0xc2>
 800cd12:	1961      	adds	r1, r4, r5
 800cd14:	42a3      	cmp	r3, r4
 800cd16:	6025      	str	r5, [r4, #0]
 800cd18:	bf18      	it	ne
 800cd1a:	6059      	strne	r1, [r3, #4]
 800cd1c:	6863      	ldr	r3, [r4, #4]
 800cd1e:	bf08      	it	eq
 800cd20:	f8c8 1000 	streq.w	r1, [r8]
 800cd24:	5162      	str	r2, [r4, r5]
 800cd26:	604b      	str	r3, [r1, #4]
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 f82f 	bl	800cd8c <__malloc_unlock>
 800cd2e:	f104 000b 	add.w	r0, r4, #11
 800cd32:	1d23      	adds	r3, r4, #4
 800cd34:	f020 0007 	bic.w	r0, r0, #7
 800cd38:	1ac2      	subs	r2, r0, r3
 800cd3a:	bf1c      	itt	ne
 800cd3c:	1a1b      	subne	r3, r3, r0
 800cd3e:	50a3      	strne	r3, [r4, r2]
 800cd40:	e7af      	b.n	800cca2 <_malloc_r+0x22>
 800cd42:	6862      	ldr	r2, [r4, #4]
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	bf0c      	ite	eq
 800cd48:	f8c8 2000 	streq.w	r2, [r8]
 800cd4c:	605a      	strne	r2, [r3, #4]
 800cd4e:	e7eb      	b.n	800cd28 <_malloc_r+0xa8>
 800cd50:	4623      	mov	r3, r4
 800cd52:	6864      	ldr	r4, [r4, #4]
 800cd54:	e7ae      	b.n	800ccb4 <_malloc_r+0x34>
 800cd56:	463c      	mov	r4, r7
 800cd58:	687f      	ldr	r7, [r7, #4]
 800cd5a:	e7b6      	b.n	800ccca <_malloc_r+0x4a>
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	d1fb      	bne.n	800cd5c <_malloc_r+0xdc>
 800cd64:	2300      	movs	r3, #0
 800cd66:	6053      	str	r3, [r2, #4]
 800cd68:	e7de      	b.n	800cd28 <_malloc_r+0xa8>
 800cd6a:	230c      	movs	r3, #12
 800cd6c:	6033      	str	r3, [r6, #0]
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f000 f80c 	bl	800cd8c <__malloc_unlock>
 800cd74:	e794      	b.n	800cca0 <_malloc_r+0x20>
 800cd76:	6005      	str	r5, [r0, #0]
 800cd78:	e7d6      	b.n	800cd28 <_malloc_r+0xa8>
 800cd7a:	bf00      	nop
 800cd7c:	20004c3c 	.word	0x20004c3c

0800cd80 <__malloc_lock>:
 800cd80:	4801      	ldr	r0, [pc, #4]	@ (800cd88 <__malloc_lock+0x8>)
 800cd82:	f000 b8f5 	b.w	800cf70 <__retarget_lock_acquire_recursive>
 800cd86:	bf00      	nop
 800cd88:	20004d7c 	.word	0x20004d7c

0800cd8c <__malloc_unlock>:
 800cd8c:	4801      	ldr	r0, [pc, #4]	@ (800cd94 <__malloc_unlock+0x8>)
 800cd8e:	f000 b8f0 	b.w	800cf72 <__retarget_lock_release_recursive>
 800cd92:	bf00      	nop
 800cd94:	20004d7c 	.word	0x20004d7c

0800cd98 <siprintf>:
 800cd98:	b40e      	push	{r1, r2, r3}
 800cd9a:	b500      	push	{lr}
 800cd9c:	b09c      	sub	sp, #112	@ 0x70
 800cd9e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cda0:	9002      	str	r0, [sp, #8]
 800cda2:	9006      	str	r0, [sp, #24]
 800cda4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cda8:	4809      	ldr	r0, [pc, #36]	@ (800cdd0 <siprintf+0x38>)
 800cdaa:	9107      	str	r1, [sp, #28]
 800cdac:	9104      	str	r1, [sp, #16]
 800cdae:	4909      	ldr	r1, [pc, #36]	@ (800cdd4 <siprintf+0x3c>)
 800cdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdb4:	9105      	str	r1, [sp, #20]
 800cdb6:	6800      	ldr	r0, [r0, #0]
 800cdb8:	9301      	str	r3, [sp, #4]
 800cdba:	a902      	add	r1, sp, #8
 800cdbc:	f000 f996 	bl	800d0ec <_svfiprintf_r>
 800cdc0:	9b02      	ldr	r3, [sp, #8]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	701a      	strb	r2, [r3, #0]
 800cdc6:	b01c      	add	sp, #112	@ 0x70
 800cdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdcc:	b003      	add	sp, #12
 800cdce:	4770      	bx	lr
 800cdd0:	20000b18 	.word	0x20000b18
 800cdd4:	ffff0208 	.word	0xffff0208

0800cdd8 <memset>:
 800cdd8:	4402      	add	r2, r0
 800cdda:	4603      	mov	r3, r0
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d100      	bne.n	800cde2 <memset+0xa>
 800cde0:	4770      	bx	lr
 800cde2:	f803 1b01 	strb.w	r1, [r3], #1
 800cde6:	e7f9      	b.n	800cddc <memset+0x4>

0800cde8 <strcat>:
 800cde8:	b510      	push	{r4, lr}
 800cdea:	4602      	mov	r2, r0
 800cdec:	7814      	ldrb	r4, [r2, #0]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	3201      	adds	r2, #1
 800cdf2:	2c00      	cmp	r4, #0
 800cdf4:	d1fa      	bne.n	800cdec <strcat+0x4>
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce00:	2a00      	cmp	r2, #0
 800ce02:	d1f9      	bne.n	800cdf8 <strcat+0x10>
 800ce04:	bd10      	pop	{r4, pc}

0800ce06 <strncmp>:
 800ce06:	b510      	push	{r4, lr}
 800ce08:	b16a      	cbz	r2, 800ce26 <strncmp+0x20>
 800ce0a:	3901      	subs	r1, #1
 800ce0c:	1884      	adds	r4, r0, r2
 800ce0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d103      	bne.n	800ce22 <strncmp+0x1c>
 800ce1a:	42a0      	cmp	r0, r4
 800ce1c:	d001      	beq.n	800ce22 <strncmp+0x1c>
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	d1f5      	bne.n	800ce0e <strncmp+0x8>
 800ce22:	1ad0      	subs	r0, r2, r3
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	4610      	mov	r0, r2
 800ce28:	e7fc      	b.n	800ce24 <strncmp+0x1e>

0800ce2a <strncpy>:
 800ce2a:	b510      	push	{r4, lr}
 800ce2c:	3901      	subs	r1, #1
 800ce2e:	4603      	mov	r3, r0
 800ce30:	b132      	cbz	r2, 800ce40 <strncpy+0x16>
 800ce32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce36:	f803 4b01 	strb.w	r4, [r3], #1
 800ce3a:	3a01      	subs	r2, #1
 800ce3c:	2c00      	cmp	r4, #0
 800ce3e:	d1f7      	bne.n	800ce30 <strncpy+0x6>
 800ce40:	441a      	add	r2, r3
 800ce42:	2100      	movs	r1, #0
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d100      	bne.n	800ce4a <strncpy+0x20>
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce4e:	e7f9      	b.n	800ce44 <strncpy+0x1a>

0800ce50 <_reclaim_reent>:
 800ce50:	4b29      	ldr	r3, [pc, #164]	@ (800cef8 <_reclaim_reent+0xa8>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4283      	cmp	r3, r0
 800ce56:	b570      	push	{r4, r5, r6, lr}
 800ce58:	4604      	mov	r4, r0
 800ce5a:	d04b      	beq.n	800cef4 <_reclaim_reent+0xa4>
 800ce5c:	69c3      	ldr	r3, [r0, #28]
 800ce5e:	b1ab      	cbz	r3, 800ce8c <_reclaim_reent+0x3c>
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	b16b      	cbz	r3, 800ce80 <_reclaim_reent+0x30>
 800ce64:	2500      	movs	r5, #0
 800ce66:	69e3      	ldr	r3, [r4, #28]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	5959      	ldr	r1, [r3, r5]
 800ce6c:	2900      	cmp	r1, #0
 800ce6e:	d13b      	bne.n	800cee8 <_reclaim_reent+0x98>
 800ce70:	3504      	adds	r5, #4
 800ce72:	2d80      	cmp	r5, #128	@ 0x80
 800ce74:	d1f7      	bne.n	800ce66 <_reclaim_reent+0x16>
 800ce76:	69e3      	ldr	r3, [r4, #28]
 800ce78:	4620      	mov	r0, r4
 800ce7a:	68d9      	ldr	r1, [r3, #12]
 800ce7c:	f000 f890 	bl	800cfa0 <_free_r>
 800ce80:	69e3      	ldr	r3, [r4, #28]
 800ce82:	6819      	ldr	r1, [r3, #0]
 800ce84:	b111      	cbz	r1, 800ce8c <_reclaim_reent+0x3c>
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 f88a 	bl	800cfa0 <_free_r>
 800ce8c:	6961      	ldr	r1, [r4, #20]
 800ce8e:	b111      	cbz	r1, 800ce96 <_reclaim_reent+0x46>
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 f885 	bl	800cfa0 <_free_r>
 800ce96:	69e1      	ldr	r1, [r4, #28]
 800ce98:	b111      	cbz	r1, 800cea0 <_reclaim_reent+0x50>
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f880 	bl	800cfa0 <_free_r>
 800cea0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cea2:	b111      	cbz	r1, 800ceaa <_reclaim_reent+0x5a>
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 f87b 	bl	800cfa0 <_free_r>
 800ceaa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceac:	b111      	cbz	r1, 800ceb4 <_reclaim_reent+0x64>
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 f876 	bl	800cfa0 <_free_r>
 800ceb4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ceb6:	b111      	cbz	r1, 800cebe <_reclaim_reent+0x6e>
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f000 f871 	bl	800cfa0 <_free_r>
 800cebe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cec0:	b111      	cbz	r1, 800cec8 <_reclaim_reent+0x78>
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 f86c 	bl	800cfa0 <_free_r>
 800cec8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ceca:	b111      	cbz	r1, 800ced2 <_reclaim_reent+0x82>
 800cecc:	4620      	mov	r0, r4
 800cece:	f000 f867 	bl	800cfa0 <_free_r>
 800ced2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ced4:	b111      	cbz	r1, 800cedc <_reclaim_reent+0x8c>
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 f862 	bl	800cfa0 <_free_r>
 800cedc:	6a23      	ldr	r3, [r4, #32]
 800cede:	b14b      	cbz	r3, 800cef4 <_reclaim_reent+0xa4>
 800cee0:	4620      	mov	r0, r4
 800cee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cee6:	4718      	bx	r3
 800cee8:	680e      	ldr	r6, [r1, #0]
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 f858 	bl	800cfa0 <_free_r>
 800cef0:	4631      	mov	r1, r6
 800cef2:	e7bb      	b.n	800ce6c <_reclaim_reent+0x1c>
 800cef4:	bd70      	pop	{r4, r5, r6, pc}
 800cef6:	bf00      	nop
 800cef8:	20000b18 	.word	0x20000b18

0800cefc <_sbrk_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d06      	ldr	r5, [pc, #24]	@ (800cf18 <_sbrk_r+0x1c>)
 800cf00:	2300      	movs	r3, #0
 800cf02:	4604      	mov	r4, r0
 800cf04:	4608      	mov	r0, r1
 800cf06:	602b      	str	r3, [r5, #0]
 800cf08:	f7f4 f9e0 	bl	80012cc <_sbrk>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	d102      	bne.n	800cf16 <_sbrk_r+0x1a>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	b103      	cbz	r3, 800cf16 <_sbrk_r+0x1a>
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	20004d78 	.word	0x20004d78

0800cf1c <__errno>:
 800cf1c:	4b01      	ldr	r3, [pc, #4]	@ (800cf24 <__errno+0x8>)
 800cf1e:	6818      	ldr	r0, [r3, #0]
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	20000b18 	.word	0x20000b18

0800cf28 <__libc_init_array>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	4d0d      	ldr	r5, [pc, #52]	@ (800cf60 <__libc_init_array+0x38>)
 800cf2c:	4c0d      	ldr	r4, [pc, #52]	@ (800cf64 <__libc_init_array+0x3c>)
 800cf2e:	1b64      	subs	r4, r4, r5
 800cf30:	10a4      	asrs	r4, r4, #2
 800cf32:	2600      	movs	r6, #0
 800cf34:	42a6      	cmp	r6, r4
 800cf36:	d109      	bne.n	800cf4c <__libc_init_array+0x24>
 800cf38:	4d0b      	ldr	r5, [pc, #44]	@ (800cf68 <__libc_init_array+0x40>)
 800cf3a:	4c0c      	ldr	r4, [pc, #48]	@ (800cf6c <__libc_init_array+0x44>)
 800cf3c:	f000 fbb0 	bl	800d6a0 <_init>
 800cf40:	1b64      	subs	r4, r4, r5
 800cf42:	10a4      	asrs	r4, r4, #2
 800cf44:	2600      	movs	r6, #0
 800cf46:	42a6      	cmp	r6, r4
 800cf48:	d105      	bne.n	800cf56 <__libc_init_array+0x2e>
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf50:	4798      	blx	r3
 800cf52:	3601      	adds	r6, #1
 800cf54:	e7ee      	b.n	800cf34 <__libc_init_array+0xc>
 800cf56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5a:	4798      	blx	r3
 800cf5c:	3601      	adds	r6, #1
 800cf5e:	e7f2      	b.n	800cf46 <__libc_init_array+0x1e>
 800cf60:	0800e6b4 	.word	0x0800e6b4
 800cf64:	0800e6b4 	.word	0x0800e6b4
 800cf68:	0800e6b4 	.word	0x0800e6b4
 800cf6c:	0800e6b8 	.word	0x0800e6b8

0800cf70 <__retarget_lock_acquire_recursive>:
 800cf70:	4770      	bx	lr

0800cf72 <__retarget_lock_release_recursive>:
 800cf72:	4770      	bx	lr

0800cf74 <strcpy>:
 800cf74:	4603      	mov	r3, r0
 800cf76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf7a:	f803 2b01 	strb.w	r2, [r3], #1
 800cf7e:	2a00      	cmp	r2, #0
 800cf80:	d1f9      	bne.n	800cf76 <strcpy+0x2>
 800cf82:	4770      	bx	lr

0800cf84 <memcpy>:
 800cf84:	440a      	add	r2, r1
 800cf86:	4291      	cmp	r1, r2
 800cf88:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf8c:	d100      	bne.n	800cf90 <memcpy+0xc>
 800cf8e:	4770      	bx	lr
 800cf90:	b510      	push	{r4, lr}
 800cf92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf9a:	4291      	cmp	r1, r2
 800cf9c:	d1f9      	bne.n	800cf92 <memcpy+0xe>
 800cf9e:	bd10      	pop	{r4, pc}

0800cfa0 <_free_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	d041      	beq.n	800d02c <_free_r+0x8c>
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f0c      	subs	r4, r1, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfb8      	it	lt
 800cfb2:	18e4      	addlt	r4, r4, r3
 800cfb4:	f7ff fee4 	bl	800cd80 <__malloc_lock>
 800cfb8:	4a1d      	ldr	r2, [pc, #116]	@ (800d030 <_free_r+0x90>)
 800cfba:	6813      	ldr	r3, [r2, #0]
 800cfbc:	b933      	cbnz	r3, 800cfcc <_free_r+0x2c>
 800cfbe:	6063      	str	r3, [r4, #4]
 800cfc0:	6014      	str	r4, [r2, #0]
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc8:	f7ff bee0 	b.w	800cd8c <__malloc_unlock>
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	d908      	bls.n	800cfe2 <_free_r+0x42>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	1821      	adds	r1, r4, r0
 800cfd4:	428b      	cmp	r3, r1
 800cfd6:	bf01      	itttt	eq
 800cfd8:	6819      	ldreq	r1, [r3, #0]
 800cfda:	685b      	ldreq	r3, [r3, #4]
 800cfdc:	1809      	addeq	r1, r1, r0
 800cfde:	6021      	streq	r1, [r4, #0]
 800cfe0:	e7ed      	b.n	800cfbe <_free_r+0x1e>
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	b10b      	cbz	r3, 800cfec <_free_r+0x4c>
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	d9fa      	bls.n	800cfe2 <_free_r+0x42>
 800cfec:	6811      	ldr	r1, [r2, #0]
 800cfee:	1850      	adds	r0, r2, r1
 800cff0:	42a0      	cmp	r0, r4
 800cff2:	d10b      	bne.n	800d00c <_free_r+0x6c>
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	4401      	add	r1, r0
 800cff8:	1850      	adds	r0, r2, r1
 800cffa:	4283      	cmp	r3, r0
 800cffc:	6011      	str	r1, [r2, #0]
 800cffe:	d1e0      	bne.n	800cfc2 <_free_r+0x22>
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	6053      	str	r3, [r2, #4]
 800d006:	4408      	add	r0, r1
 800d008:	6010      	str	r0, [r2, #0]
 800d00a:	e7da      	b.n	800cfc2 <_free_r+0x22>
 800d00c:	d902      	bls.n	800d014 <_free_r+0x74>
 800d00e:	230c      	movs	r3, #12
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	e7d6      	b.n	800cfc2 <_free_r+0x22>
 800d014:	6820      	ldr	r0, [r4, #0]
 800d016:	1821      	adds	r1, r4, r0
 800d018:	428b      	cmp	r3, r1
 800d01a:	bf04      	itt	eq
 800d01c:	6819      	ldreq	r1, [r3, #0]
 800d01e:	685b      	ldreq	r3, [r3, #4]
 800d020:	6063      	str	r3, [r4, #4]
 800d022:	bf04      	itt	eq
 800d024:	1809      	addeq	r1, r1, r0
 800d026:	6021      	streq	r1, [r4, #0]
 800d028:	6054      	str	r4, [r2, #4]
 800d02a:	e7ca      	b.n	800cfc2 <_free_r+0x22>
 800d02c:	bd38      	pop	{r3, r4, r5, pc}
 800d02e:	bf00      	nop
 800d030:	20004c3c 	.word	0x20004c3c

0800d034 <__ssputs_r>:
 800d034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d038:	688e      	ldr	r6, [r1, #8]
 800d03a:	461f      	mov	r7, r3
 800d03c:	42be      	cmp	r6, r7
 800d03e:	680b      	ldr	r3, [r1, #0]
 800d040:	4682      	mov	sl, r0
 800d042:	460c      	mov	r4, r1
 800d044:	4690      	mov	r8, r2
 800d046:	d82d      	bhi.n	800d0a4 <__ssputs_r+0x70>
 800d048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d04c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d050:	d026      	beq.n	800d0a0 <__ssputs_r+0x6c>
 800d052:	6965      	ldr	r5, [r4, #20]
 800d054:	6909      	ldr	r1, [r1, #16]
 800d056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d05a:	eba3 0901 	sub.w	r9, r3, r1
 800d05e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d062:	1c7b      	adds	r3, r7, #1
 800d064:	444b      	add	r3, r9
 800d066:	106d      	asrs	r5, r5, #1
 800d068:	429d      	cmp	r5, r3
 800d06a:	bf38      	it	cc
 800d06c:	461d      	movcc	r5, r3
 800d06e:	0553      	lsls	r3, r2, #21
 800d070:	d527      	bpl.n	800d0c2 <__ssputs_r+0x8e>
 800d072:	4629      	mov	r1, r5
 800d074:	f7ff fe04 	bl	800cc80 <_malloc_r>
 800d078:	4606      	mov	r6, r0
 800d07a:	b360      	cbz	r0, 800d0d6 <__ssputs_r+0xa2>
 800d07c:	6921      	ldr	r1, [r4, #16]
 800d07e:	464a      	mov	r2, r9
 800d080:	f7ff ff80 	bl	800cf84 <memcpy>
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d08a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d08e:	81a3      	strh	r3, [r4, #12]
 800d090:	6126      	str	r6, [r4, #16]
 800d092:	6165      	str	r5, [r4, #20]
 800d094:	444e      	add	r6, r9
 800d096:	eba5 0509 	sub.w	r5, r5, r9
 800d09a:	6026      	str	r6, [r4, #0]
 800d09c:	60a5      	str	r5, [r4, #8]
 800d09e:	463e      	mov	r6, r7
 800d0a0:	42be      	cmp	r6, r7
 800d0a2:	d900      	bls.n	800d0a6 <__ssputs_r+0x72>
 800d0a4:	463e      	mov	r6, r7
 800d0a6:	6820      	ldr	r0, [r4, #0]
 800d0a8:	4632      	mov	r2, r6
 800d0aa:	4641      	mov	r1, r8
 800d0ac:	f000 faa8 	bl	800d600 <memmove>
 800d0b0:	68a3      	ldr	r3, [r4, #8]
 800d0b2:	1b9b      	subs	r3, r3, r6
 800d0b4:	60a3      	str	r3, [r4, #8]
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	4433      	add	r3, r6
 800d0ba:	6023      	str	r3, [r4, #0]
 800d0bc:	2000      	movs	r0, #0
 800d0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c2:	462a      	mov	r2, r5
 800d0c4:	f000 fab6 	bl	800d634 <_realloc_r>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d1e0      	bne.n	800d090 <__ssputs_r+0x5c>
 800d0ce:	6921      	ldr	r1, [r4, #16]
 800d0d0:	4650      	mov	r0, sl
 800d0d2:	f7ff ff65 	bl	800cfa0 <_free_r>
 800d0d6:	230c      	movs	r3, #12
 800d0d8:	f8ca 3000 	str.w	r3, [sl]
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	e7e9      	b.n	800d0be <__ssputs_r+0x8a>
	...

0800d0ec <_svfiprintf_r>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	4698      	mov	r8, r3
 800d0f2:	898b      	ldrh	r3, [r1, #12]
 800d0f4:	061b      	lsls	r3, r3, #24
 800d0f6:	b09d      	sub	sp, #116	@ 0x74
 800d0f8:	4607      	mov	r7, r0
 800d0fa:	460d      	mov	r5, r1
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	d510      	bpl.n	800d122 <_svfiprintf_r+0x36>
 800d100:	690b      	ldr	r3, [r1, #16]
 800d102:	b973      	cbnz	r3, 800d122 <_svfiprintf_r+0x36>
 800d104:	2140      	movs	r1, #64	@ 0x40
 800d106:	f7ff fdbb 	bl	800cc80 <_malloc_r>
 800d10a:	6028      	str	r0, [r5, #0]
 800d10c:	6128      	str	r0, [r5, #16]
 800d10e:	b930      	cbnz	r0, 800d11e <_svfiprintf_r+0x32>
 800d110:	230c      	movs	r3, #12
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	b01d      	add	sp, #116	@ 0x74
 800d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11e:	2340      	movs	r3, #64	@ 0x40
 800d120:	616b      	str	r3, [r5, #20]
 800d122:	2300      	movs	r3, #0
 800d124:	9309      	str	r3, [sp, #36]	@ 0x24
 800d126:	2320      	movs	r3, #32
 800d128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d12c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d130:	2330      	movs	r3, #48	@ 0x30
 800d132:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2d0 <_svfiprintf_r+0x1e4>
 800d136:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d13a:	f04f 0901 	mov.w	r9, #1
 800d13e:	4623      	mov	r3, r4
 800d140:	469a      	mov	sl, r3
 800d142:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d146:	b10a      	cbz	r2, 800d14c <_svfiprintf_r+0x60>
 800d148:	2a25      	cmp	r2, #37	@ 0x25
 800d14a:	d1f9      	bne.n	800d140 <_svfiprintf_r+0x54>
 800d14c:	ebba 0b04 	subs.w	fp, sl, r4
 800d150:	d00b      	beq.n	800d16a <_svfiprintf_r+0x7e>
 800d152:	465b      	mov	r3, fp
 800d154:	4622      	mov	r2, r4
 800d156:	4629      	mov	r1, r5
 800d158:	4638      	mov	r0, r7
 800d15a:	f7ff ff6b 	bl	800d034 <__ssputs_r>
 800d15e:	3001      	adds	r0, #1
 800d160:	f000 80a7 	beq.w	800d2b2 <_svfiprintf_r+0x1c6>
 800d164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d166:	445a      	add	r2, fp
 800d168:	9209      	str	r2, [sp, #36]	@ 0x24
 800d16a:	f89a 3000 	ldrb.w	r3, [sl]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 809f 	beq.w	800d2b2 <_svfiprintf_r+0x1c6>
 800d174:	2300      	movs	r3, #0
 800d176:	f04f 32ff 	mov.w	r2, #4294967295
 800d17a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d17e:	f10a 0a01 	add.w	sl, sl, #1
 800d182:	9304      	str	r3, [sp, #16]
 800d184:	9307      	str	r3, [sp, #28]
 800d186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d18a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d18c:	4654      	mov	r4, sl
 800d18e:	2205      	movs	r2, #5
 800d190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d194:	484e      	ldr	r0, [pc, #312]	@ (800d2d0 <_svfiprintf_r+0x1e4>)
 800d196:	f7f2 fffb 	bl	8000190 <memchr>
 800d19a:	9a04      	ldr	r2, [sp, #16]
 800d19c:	b9d8      	cbnz	r0, 800d1d6 <_svfiprintf_r+0xea>
 800d19e:	06d0      	lsls	r0, r2, #27
 800d1a0:	bf44      	itt	mi
 800d1a2:	2320      	movmi	r3, #32
 800d1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1a8:	0711      	lsls	r1, r2, #28
 800d1aa:	bf44      	itt	mi
 800d1ac:	232b      	movmi	r3, #43	@ 0x2b
 800d1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1b8:	d015      	beq.n	800d1e6 <_svfiprintf_r+0xfa>
 800d1ba:	9a07      	ldr	r2, [sp, #28]
 800d1bc:	4654      	mov	r4, sl
 800d1be:	2000      	movs	r0, #0
 800d1c0:	f04f 0c0a 	mov.w	ip, #10
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ca:	3b30      	subs	r3, #48	@ 0x30
 800d1cc:	2b09      	cmp	r3, #9
 800d1ce:	d94b      	bls.n	800d268 <_svfiprintf_r+0x17c>
 800d1d0:	b1b0      	cbz	r0, 800d200 <_svfiprintf_r+0x114>
 800d1d2:	9207      	str	r2, [sp, #28]
 800d1d4:	e014      	b.n	800d200 <_svfiprintf_r+0x114>
 800d1d6:	eba0 0308 	sub.w	r3, r0, r8
 800d1da:	fa09 f303 	lsl.w	r3, r9, r3
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	46a2      	mov	sl, r4
 800d1e4:	e7d2      	b.n	800d18c <_svfiprintf_r+0xa0>
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	1d19      	adds	r1, r3, #4
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	9103      	str	r1, [sp, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	bfbb      	ittet	lt
 800d1f2:	425b      	neglt	r3, r3
 800d1f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d1f8:	9307      	strge	r3, [sp, #28]
 800d1fa:	9307      	strlt	r3, [sp, #28]
 800d1fc:	bfb8      	it	lt
 800d1fe:	9204      	strlt	r2, [sp, #16]
 800d200:	7823      	ldrb	r3, [r4, #0]
 800d202:	2b2e      	cmp	r3, #46	@ 0x2e
 800d204:	d10a      	bne.n	800d21c <_svfiprintf_r+0x130>
 800d206:	7863      	ldrb	r3, [r4, #1]
 800d208:	2b2a      	cmp	r3, #42	@ 0x2a
 800d20a:	d132      	bne.n	800d272 <_svfiprintf_r+0x186>
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	1d1a      	adds	r2, r3, #4
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	9203      	str	r2, [sp, #12]
 800d214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d218:	3402      	adds	r4, #2
 800d21a:	9305      	str	r3, [sp, #20]
 800d21c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d2d4 <_svfiprintf_r+0x1e8>
 800d220:	7821      	ldrb	r1, [r4, #0]
 800d222:	2203      	movs	r2, #3
 800d224:	4650      	mov	r0, sl
 800d226:	f7f2 ffb3 	bl	8000190 <memchr>
 800d22a:	b138      	cbz	r0, 800d23c <_svfiprintf_r+0x150>
 800d22c:	9b04      	ldr	r3, [sp, #16]
 800d22e:	eba0 000a 	sub.w	r0, r0, sl
 800d232:	2240      	movs	r2, #64	@ 0x40
 800d234:	4082      	lsls	r2, r0
 800d236:	4313      	orrs	r3, r2
 800d238:	3401      	adds	r4, #1
 800d23a:	9304      	str	r3, [sp, #16]
 800d23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d240:	4825      	ldr	r0, [pc, #148]	@ (800d2d8 <_svfiprintf_r+0x1ec>)
 800d242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d246:	2206      	movs	r2, #6
 800d248:	f7f2 ffa2 	bl	8000190 <memchr>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d036      	beq.n	800d2be <_svfiprintf_r+0x1d2>
 800d250:	4b22      	ldr	r3, [pc, #136]	@ (800d2dc <_svfiprintf_r+0x1f0>)
 800d252:	bb1b      	cbnz	r3, 800d29c <_svfiprintf_r+0x1b0>
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	3307      	adds	r3, #7
 800d258:	f023 0307 	bic.w	r3, r3, #7
 800d25c:	3308      	adds	r3, #8
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d262:	4433      	add	r3, r6
 800d264:	9309      	str	r3, [sp, #36]	@ 0x24
 800d266:	e76a      	b.n	800d13e <_svfiprintf_r+0x52>
 800d268:	fb0c 3202 	mla	r2, ip, r2, r3
 800d26c:	460c      	mov	r4, r1
 800d26e:	2001      	movs	r0, #1
 800d270:	e7a8      	b.n	800d1c4 <_svfiprintf_r+0xd8>
 800d272:	2300      	movs	r3, #0
 800d274:	3401      	adds	r4, #1
 800d276:	9305      	str	r3, [sp, #20]
 800d278:	4619      	mov	r1, r3
 800d27a:	f04f 0c0a 	mov.w	ip, #10
 800d27e:	4620      	mov	r0, r4
 800d280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d284:	3a30      	subs	r2, #48	@ 0x30
 800d286:	2a09      	cmp	r2, #9
 800d288:	d903      	bls.n	800d292 <_svfiprintf_r+0x1a6>
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0c6      	beq.n	800d21c <_svfiprintf_r+0x130>
 800d28e:	9105      	str	r1, [sp, #20]
 800d290:	e7c4      	b.n	800d21c <_svfiprintf_r+0x130>
 800d292:	fb0c 2101 	mla	r1, ip, r1, r2
 800d296:	4604      	mov	r4, r0
 800d298:	2301      	movs	r3, #1
 800d29a:	e7f0      	b.n	800d27e <_svfiprintf_r+0x192>
 800d29c:	ab03      	add	r3, sp, #12
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	462a      	mov	r2, r5
 800d2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d2e0 <_svfiprintf_r+0x1f4>)
 800d2a4:	a904      	add	r1, sp, #16
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	f3af 8000 	nop.w
 800d2ac:	1c42      	adds	r2, r0, #1
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	d1d6      	bne.n	800d260 <_svfiprintf_r+0x174>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	065b      	lsls	r3, r3, #25
 800d2b6:	f53f af2d 	bmi.w	800d114 <_svfiprintf_r+0x28>
 800d2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2bc:	e72c      	b.n	800d118 <_svfiprintf_r+0x2c>
 800d2be:	ab03      	add	r3, sp, #12
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	4b06      	ldr	r3, [pc, #24]	@ (800d2e0 <_svfiprintf_r+0x1f4>)
 800d2c6:	a904      	add	r1, sp, #16
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f000 f879 	bl	800d3c0 <_printf_i>
 800d2ce:	e7ed      	b.n	800d2ac <_svfiprintf_r+0x1c0>
 800d2d0:	0800e678 	.word	0x0800e678
 800d2d4:	0800e67e 	.word	0x0800e67e
 800d2d8:	0800e682 	.word	0x0800e682
 800d2dc:	00000000 	.word	0x00000000
 800d2e0:	0800d035 	.word	0x0800d035

0800d2e4 <_printf_common>:
 800d2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e8:	4616      	mov	r6, r2
 800d2ea:	4698      	mov	r8, r3
 800d2ec:	688a      	ldr	r2, [r1, #8]
 800d2ee:	690b      	ldr	r3, [r1, #16]
 800d2f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	bfb8      	it	lt
 800d2f8:	4613      	movlt	r3, r2
 800d2fa:	6033      	str	r3, [r6, #0]
 800d2fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d300:	4607      	mov	r7, r0
 800d302:	460c      	mov	r4, r1
 800d304:	b10a      	cbz	r2, 800d30a <_printf_common+0x26>
 800d306:	3301      	adds	r3, #1
 800d308:	6033      	str	r3, [r6, #0]
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	0699      	lsls	r1, r3, #26
 800d30e:	bf42      	ittt	mi
 800d310:	6833      	ldrmi	r3, [r6, #0]
 800d312:	3302      	addmi	r3, #2
 800d314:	6033      	strmi	r3, [r6, #0]
 800d316:	6825      	ldr	r5, [r4, #0]
 800d318:	f015 0506 	ands.w	r5, r5, #6
 800d31c:	d106      	bne.n	800d32c <_printf_common+0x48>
 800d31e:	f104 0a19 	add.w	sl, r4, #25
 800d322:	68e3      	ldr	r3, [r4, #12]
 800d324:	6832      	ldr	r2, [r6, #0]
 800d326:	1a9b      	subs	r3, r3, r2
 800d328:	42ab      	cmp	r3, r5
 800d32a:	dc26      	bgt.n	800d37a <_printf_common+0x96>
 800d32c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d330:	6822      	ldr	r2, [r4, #0]
 800d332:	3b00      	subs	r3, #0
 800d334:	bf18      	it	ne
 800d336:	2301      	movne	r3, #1
 800d338:	0692      	lsls	r2, r2, #26
 800d33a:	d42b      	bmi.n	800d394 <_printf_common+0xb0>
 800d33c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d340:	4641      	mov	r1, r8
 800d342:	4638      	mov	r0, r7
 800d344:	47c8      	blx	r9
 800d346:	3001      	adds	r0, #1
 800d348:	d01e      	beq.n	800d388 <_printf_common+0xa4>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	6922      	ldr	r2, [r4, #16]
 800d34e:	f003 0306 	and.w	r3, r3, #6
 800d352:	2b04      	cmp	r3, #4
 800d354:	bf02      	ittt	eq
 800d356:	68e5      	ldreq	r5, [r4, #12]
 800d358:	6833      	ldreq	r3, [r6, #0]
 800d35a:	1aed      	subeq	r5, r5, r3
 800d35c:	68a3      	ldr	r3, [r4, #8]
 800d35e:	bf0c      	ite	eq
 800d360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d364:	2500      	movne	r5, #0
 800d366:	4293      	cmp	r3, r2
 800d368:	bfc4      	itt	gt
 800d36a:	1a9b      	subgt	r3, r3, r2
 800d36c:	18ed      	addgt	r5, r5, r3
 800d36e:	2600      	movs	r6, #0
 800d370:	341a      	adds	r4, #26
 800d372:	42b5      	cmp	r5, r6
 800d374:	d11a      	bne.n	800d3ac <_printf_common+0xc8>
 800d376:	2000      	movs	r0, #0
 800d378:	e008      	b.n	800d38c <_printf_common+0xa8>
 800d37a:	2301      	movs	r3, #1
 800d37c:	4652      	mov	r2, sl
 800d37e:	4641      	mov	r1, r8
 800d380:	4638      	mov	r0, r7
 800d382:	47c8      	blx	r9
 800d384:	3001      	adds	r0, #1
 800d386:	d103      	bne.n	800d390 <_printf_common+0xac>
 800d388:	f04f 30ff 	mov.w	r0, #4294967295
 800d38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d390:	3501      	adds	r5, #1
 800d392:	e7c6      	b.n	800d322 <_printf_common+0x3e>
 800d394:	18e1      	adds	r1, r4, r3
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	2030      	movs	r0, #48	@ 0x30
 800d39a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d39e:	4422      	add	r2, r4
 800d3a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d3a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d3a8:	3302      	adds	r3, #2
 800d3aa:	e7c7      	b.n	800d33c <_printf_common+0x58>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	4641      	mov	r1, r8
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	47c8      	blx	r9
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	d0e6      	beq.n	800d388 <_printf_common+0xa4>
 800d3ba:	3601      	adds	r6, #1
 800d3bc:	e7d9      	b.n	800d372 <_printf_common+0x8e>
	...

0800d3c0 <_printf_i>:
 800d3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c4:	7e0f      	ldrb	r7, [r1, #24]
 800d3c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3c8:	2f78      	cmp	r7, #120	@ 0x78
 800d3ca:	4691      	mov	r9, r2
 800d3cc:	4680      	mov	r8, r0
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	469a      	mov	sl, r3
 800d3d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3d6:	d807      	bhi.n	800d3e8 <_printf_i+0x28>
 800d3d8:	2f62      	cmp	r7, #98	@ 0x62
 800d3da:	d80a      	bhi.n	800d3f2 <_printf_i+0x32>
 800d3dc:	2f00      	cmp	r7, #0
 800d3de:	f000 80d2 	beq.w	800d586 <_printf_i+0x1c6>
 800d3e2:	2f58      	cmp	r7, #88	@ 0x58
 800d3e4:	f000 80b9 	beq.w	800d55a <_printf_i+0x19a>
 800d3e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3f0:	e03a      	b.n	800d468 <_printf_i+0xa8>
 800d3f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3f6:	2b15      	cmp	r3, #21
 800d3f8:	d8f6      	bhi.n	800d3e8 <_printf_i+0x28>
 800d3fa:	a101      	add	r1, pc, #4	@ (adr r1, 800d400 <_printf_i+0x40>)
 800d3fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d400:	0800d459 	.word	0x0800d459
 800d404:	0800d46d 	.word	0x0800d46d
 800d408:	0800d3e9 	.word	0x0800d3e9
 800d40c:	0800d3e9 	.word	0x0800d3e9
 800d410:	0800d3e9 	.word	0x0800d3e9
 800d414:	0800d3e9 	.word	0x0800d3e9
 800d418:	0800d46d 	.word	0x0800d46d
 800d41c:	0800d3e9 	.word	0x0800d3e9
 800d420:	0800d3e9 	.word	0x0800d3e9
 800d424:	0800d3e9 	.word	0x0800d3e9
 800d428:	0800d3e9 	.word	0x0800d3e9
 800d42c:	0800d56d 	.word	0x0800d56d
 800d430:	0800d497 	.word	0x0800d497
 800d434:	0800d527 	.word	0x0800d527
 800d438:	0800d3e9 	.word	0x0800d3e9
 800d43c:	0800d3e9 	.word	0x0800d3e9
 800d440:	0800d58f 	.word	0x0800d58f
 800d444:	0800d3e9 	.word	0x0800d3e9
 800d448:	0800d497 	.word	0x0800d497
 800d44c:	0800d3e9 	.word	0x0800d3e9
 800d450:	0800d3e9 	.word	0x0800d3e9
 800d454:	0800d52f 	.word	0x0800d52f
 800d458:	6833      	ldr	r3, [r6, #0]
 800d45a:	1d1a      	adds	r2, r3, #4
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6032      	str	r2, [r6, #0]
 800d460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d464:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d468:	2301      	movs	r3, #1
 800d46a:	e09d      	b.n	800d5a8 <_printf_i+0x1e8>
 800d46c:	6833      	ldr	r3, [r6, #0]
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	1d19      	adds	r1, r3, #4
 800d472:	6031      	str	r1, [r6, #0]
 800d474:	0606      	lsls	r6, r0, #24
 800d476:	d501      	bpl.n	800d47c <_printf_i+0xbc>
 800d478:	681d      	ldr	r5, [r3, #0]
 800d47a:	e003      	b.n	800d484 <_printf_i+0xc4>
 800d47c:	0645      	lsls	r5, r0, #25
 800d47e:	d5fb      	bpl.n	800d478 <_printf_i+0xb8>
 800d480:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d484:	2d00      	cmp	r5, #0
 800d486:	da03      	bge.n	800d490 <_printf_i+0xd0>
 800d488:	232d      	movs	r3, #45	@ 0x2d
 800d48a:	426d      	negs	r5, r5
 800d48c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d490:	4859      	ldr	r0, [pc, #356]	@ (800d5f8 <_printf_i+0x238>)
 800d492:	230a      	movs	r3, #10
 800d494:	e011      	b.n	800d4ba <_printf_i+0xfa>
 800d496:	6821      	ldr	r1, [r4, #0]
 800d498:	6833      	ldr	r3, [r6, #0]
 800d49a:	0608      	lsls	r0, r1, #24
 800d49c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d4a0:	d402      	bmi.n	800d4a8 <_printf_i+0xe8>
 800d4a2:	0649      	lsls	r1, r1, #25
 800d4a4:	bf48      	it	mi
 800d4a6:	b2ad      	uxthmi	r5, r5
 800d4a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d4aa:	4853      	ldr	r0, [pc, #332]	@ (800d5f8 <_printf_i+0x238>)
 800d4ac:	6033      	str	r3, [r6, #0]
 800d4ae:	bf14      	ite	ne
 800d4b0:	230a      	movne	r3, #10
 800d4b2:	2308      	moveq	r3, #8
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d4ba:	6866      	ldr	r6, [r4, #4]
 800d4bc:	60a6      	str	r6, [r4, #8]
 800d4be:	2e00      	cmp	r6, #0
 800d4c0:	bfa2      	ittt	ge
 800d4c2:	6821      	ldrge	r1, [r4, #0]
 800d4c4:	f021 0104 	bicge.w	r1, r1, #4
 800d4c8:	6021      	strge	r1, [r4, #0]
 800d4ca:	b90d      	cbnz	r5, 800d4d0 <_printf_i+0x110>
 800d4cc:	2e00      	cmp	r6, #0
 800d4ce:	d04b      	beq.n	800d568 <_printf_i+0x1a8>
 800d4d0:	4616      	mov	r6, r2
 800d4d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4d6:	fb03 5711 	mls	r7, r3, r1, r5
 800d4da:	5dc7      	ldrb	r7, [r0, r7]
 800d4dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4e0:	462f      	mov	r7, r5
 800d4e2:	42bb      	cmp	r3, r7
 800d4e4:	460d      	mov	r5, r1
 800d4e6:	d9f4      	bls.n	800d4d2 <_printf_i+0x112>
 800d4e8:	2b08      	cmp	r3, #8
 800d4ea:	d10b      	bne.n	800d504 <_printf_i+0x144>
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	07df      	lsls	r7, r3, #31
 800d4f0:	d508      	bpl.n	800d504 <_printf_i+0x144>
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	6861      	ldr	r1, [r4, #4]
 800d4f6:	4299      	cmp	r1, r3
 800d4f8:	bfde      	ittt	le
 800d4fa:	2330      	movle	r3, #48	@ 0x30
 800d4fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d500:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d504:	1b92      	subs	r2, r2, r6
 800d506:	6122      	str	r2, [r4, #16]
 800d508:	f8cd a000 	str.w	sl, [sp]
 800d50c:	464b      	mov	r3, r9
 800d50e:	aa03      	add	r2, sp, #12
 800d510:	4621      	mov	r1, r4
 800d512:	4640      	mov	r0, r8
 800d514:	f7ff fee6 	bl	800d2e4 <_printf_common>
 800d518:	3001      	adds	r0, #1
 800d51a:	d14a      	bne.n	800d5b2 <_printf_i+0x1f2>
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	b004      	add	sp, #16
 800d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	f043 0320 	orr.w	r3, r3, #32
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	4833      	ldr	r0, [pc, #204]	@ (800d5fc <_printf_i+0x23c>)
 800d530:	2778      	movs	r7, #120	@ 0x78
 800d532:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	6831      	ldr	r1, [r6, #0]
 800d53a:	061f      	lsls	r7, r3, #24
 800d53c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d540:	d402      	bmi.n	800d548 <_printf_i+0x188>
 800d542:	065f      	lsls	r7, r3, #25
 800d544:	bf48      	it	mi
 800d546:	b2ad      	uxthmi	r5, r5
 800d548:	6031      	str	r1, [r6, #0]
 800d54a:	07d9      	lsls	r1, r3, #31
 800d54c:	bf44      	itt	mi
 800d54e:	f043 0320 	orrmi.w	r3, r3, #32
 800d552:	6023      	strmi	r3, [r4, #0]
 800d554:	b11d      	cbz	r5, 800d55e <_printf_i+0x19e>
 800d556:	2310      	movs	r3, #16
 800d558:	e7ac      	b.n	800d4b4 <_printf_i+0xf4>
 800d55a:	4827      	ldr	r0, [pc, #156]	@ (800d5f8 <_printf_i+0x238>)
 800d55c:	e7e9      	b.n	800d532 <_printf_i+0x172>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	f023 0320 	bic.w	r3, r3, #32
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	e7f6      	b.n	800d556 <_printf_i+0x196>
 800d568:	4616      	mov	r6, r2
 800d56a:	e7bd      	b.n	800d4e8 <_printf_i+0x128>
 800d56c:	6833      	ldr	r3, [r6, #0]
 800d56e:	6825      	ldr	r5, [r4, #0]
 800d570:	6961      	ldr	r1, [r4, #20]
 800d572:	1d18      	adds	r0, r3, #4
 800d574:	6030      	str	r0, [r6, #0]
 800d576:	062e      	lsls	r6, r5, #24
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	d501      	bpl.n	800d580 <_printf_i+0x1c0>
 800d57c:	6019      	str	r1, [r3, #0]
 800d57e:	e002      	b.n	800d586 <_printf_i+0x1c6>
 800d580:	0668      	lsls	r0, r5, #25
 800d582:	d5fb      	bpl.n	800d57c <_printf_i+0x1bc>
 800d584:	8019      	strh	r1, [r3, #0]
 800d586:	2300      	movs	r3, #0
 800d588:	6123      	str	r3, [r4, #16]
 800d58a:	4616      	mov	r6, r2
 800d58c:	e7bc      	b.n	800d508 <_printf_i+0x148>
 800d58e:	6833      	ldr	r3, [r6, #0]
 800d590:	1d1a      	adds	r2, r3, #4
 800d592:	6032      	str	r2, [r6, #0]
 800d594:	681e      	ldr	r6, [r3, #0]
 800d596:	6862      	ldr	r2, [r4, #4]
 800d598:	2100      	movs	r1, #0
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7f2 fdf8 	bl	8000190 <memchr>
 800d5a0:	b108      	cbz	r0, 800d5a6 <_printf_i+0x1e6>
 800d5a2:	1b80      	subs	r0, r0, r6
 800d5a4:	6060      	str	r0, [r4, #4]
 800d5a6:	6863      	ldr	r3, [r4, #4]
 800d5a8:	6123      	str	r3, [r4, #16]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5b0:	e7aa      	b.n	800d508 <_printf_i+0x148>
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	4632      	mov	r2, r6
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	47d0      	blx	sl
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d0ad      	beq.n	800d51c <_printf_i+0x15c>
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	079b      	lsls	r3, r3, #30
 800d5c4:	d413      	bmi.n	800d5ee <_printf_i+0x22e>
 800d5c6:	68e0      	ldr	r0, [r4, #12]
 800d5c8:	9b03      	ldr	r3, [sp, #12]
 800d5ca:	4298      	cmp	r0, r3
 800d5cc:	bfb8      	it	lt
 800d5ce:	4618      	movlt	r0, r3
 800d5d0:	e7a6      	b.n	800d520 <_printf_i+0x160>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	4640      	mov	r0, r8
 800d5da:	47d0      	blx	sl
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d09d      	beq.n	800d51c <_printf_i+0x15c>
 800d5e0:	3501      	adds	r5, #1
 800d5e2:	68e3      	ldr	r3, [r4, #12]
 800d5e4:	9903      	ldr	r1, [sp, #12]
 800d5e6:	1a5b      	subs	r3, r3, r1
 800d5e8:	42ab      	cmp	r3, r5
 800d5ea:	dcf2      	bgt.n	800d5d2 <_printf_i+0x212>
 800d5ec:	e7eb      	b.n	800d5c6 <_printf_i+0x206>
 800d5ee:	2500      	movs	r5, #0
 800d5f0:	f104 0619 	add.w	r6, r4, #25
 800d5f4:	e7f5      	b.n	800d5e2 <_printf_i+0x222>
 800d5f6:	bf00      	nop
 800d5f8:	0800e689 	.word	0x0800e689
 800d5fc:	0800e69a 	.word	0x0800e69a

0800d600 <memmove>:
 800d600:	4288      	cmp	r0, r1
 800d602:	b510      	push	{r4, lr}
 800d604:	eb01 0402 	add.w	r4, r1, r2
 800d608:	d902      	bls.n	800d610 <memmove+0x10>
 800d60a:	4284      	cmp	r4, r0
 800d60c:	4623      	mov	r3, r4
 800d60e:	d807      	bhi.n	800d620 <memmove+0x20>
 800d610:	1e43      	subs	r3, r0, #1
 800d612:	42a1      	cmp	r1, r4
 800d614:	d008      	beq.n	800d628 <memmove+0x28>
 800d616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d61a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d61e:	e7f8      	b.n	800d612 <memmove+0x12>
 800d620:	4402      	add	r2, r0
 800d622:	4601      	mov	r1, r0
 800d624:	428a      	cmp	r2, r1
 800d626:	d100      	bne.n	800d62a <memmove+0x2a>
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d62e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d632:	e7f7      	b.n	800d624 <memmove+0x24>

0800d634 <_realloc_r>:
 800d634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d638:	4680      	mov	r8, r0
 800d63a:	4615      	mov	r5, r2
 800d63c:	460c      	mov	r4, r1
 800d63e:	b921      	cbnz	r1, 800d64a <_realloc_r+0x16>
 800d640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d644:	4611      	mov	r1, r2
 800d646:	f7ff bb1b 	b.w	800cc80 <_malloc_r>
 800d64a:	b92a      	cbnz	r2, 800d658 <_realloc_r+0x24>
 800d64c:	f7ff fca8 	bl	800cfa0 <_free_r>
 800d650:	2400      	movs	r4, #0
 800d652:	4620      	mov	r0, r4
 800d654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d658:	f000 f81a 	bl	800d690 <_malloc_usable_size_r>
 800d65c:	4285      	cmp	r5, r0
 800d65e:	4606      	mov	r6, r0
 800d660:	d802      	bhi.n	800d668 <_realloc_r+0x34>
 800d662:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d666:	d8f4      	bhi.n	800d652 <_realloc_r+0x1e>
 800d668:	4629      	mov	r1, r5
 800d66a:	4640      	mov	r0, r8
 800d66c:	f7ff fb08 	bl	800cc80 <_malloc_r>
 800d670:	4607      	mov	r7, r0
 800d672:	2800      	cmp	r0, #0
 800d674:	d0ec      	beq.n	800d650 <_realloc_r+0x1c>
 800d676:	42b5      	cmp	r5, r6
 800d678:	462a      	mov	r2, r5
 800d67a:	4621      	mov	r1, r4
 800d67c:	bf28      	it	cs
 800d67e:	4632      	movcs	r2, r6
 800d680:	f7ff fc80 	bl	800cf84 <memcpy>
 800d684:	4621      	mov	r1, r4
 800d686:	4640      	mov	r0, r8
 800d688:	f7ff fc8a 	bl	800cfa0 <_free_r>
 800d68c:	463c      	mov	r4, r7
 800d68e:	e7e0      	b.n	800d652 <_realloc_r+0x1e>

0800d690 <_malloc_usable_size_r>:
 800d690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d694:	1f18      	subs	r0, r3, #4
 800d696:	2b00      	cmp	r3, #0
 800d698:	bfbc      	itt	lt
 800d69a:	580b      	ldrlt	r3, [r1, r0]
 800d69c:	18c0      	addlt	r0, r0, r3
 800d69e:	4770      	bx	lr

0800d6a0 <_init>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	bf00      	nop
 800d6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a6:	bc08      	pop	{r3}
 800d6a8:	469e      	mov	lr, r3
 800d6aa:	4770      	bx	lr

0800d6ac <_fini>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	bf00      	nop
 800d6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b2:	bc08      	pop	{r3}
 800d6b4:	469e      	mov	lr, r3
 800d6b6:	4770      	bx	lr
