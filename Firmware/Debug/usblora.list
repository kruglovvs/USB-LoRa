
usblora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3fc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001104  0800c53c  0800c53c  0000d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d640  0800d640  0000f064  2**0
                  CONTENTS
  4 .ARM          00000008  0800d640  0800d640  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d648  0800d648  0000f064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d648  0800d648  0000e648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d64c  0800d64c  0000e64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800d650  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004204  20000064  0800d6b4  0000f064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004268  0800d6b4  0000f268  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adc5  00000000  00000000  0000f08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006001  00000000  00000000  00039e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002528  00000000  00000000  0003fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c7d  00000000  00000000  00042380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f37  00000000  00000000  00043ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002993c  00000000  00000000  00064f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc0cc  00000000  00000000  0008e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a93c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fec  00000000  00000000  0014a980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c524 	.word	0x0800c524

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800c524 	.word	0x0800c524

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SendLoraQueue */
  SendLoraQueueHandle = osMessageQueueNew (4, sizeof(char *), &SendLoraQueue_attributes);
 8000538:	4a14      	ldr	r2, [pc, #80]	@ (800058c <MX_FREERTOS_Init+0x58>)
 800053a:	2104      	movs	r1, #4
 800053c:	2004      	movs	r0, #4
 800053e:	f005 f81b 	bl	8005578 <osMessageQueueNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <MX_FREERTOS_Init+0x5c>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of SendUsbQueue */
  SendUsbQueueHandle = osMessageQueueNew (4, sizeof(char *), &SendUsbQueue_attributes);
 8000548:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <MX_FREERTOS_Init+0x60>)
 800054a:	2104      	movs	r1, #4
 800054c:	2004      	movs	r0, #4
 800054e:	f005 f813 	bl	8005578 <osMessageQueueNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a10      	ldr	r2, [pc, #64]	@ (8000598 <MX_FREERTOS_Init+0x64>)
 8000556:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000558:	4a10      	ldr	r2, [pc, #64]	@ (800059c <MX_FREERTOS_Init+0x68>)
 800055a:	2100      	movs	r1, #0
 800055c:	4810      	ldr	r0, [pc, #64]	@ (80005a0 <MX_FREERTOS_Init+0x6c>)
 800055e:	f004 ff37 	bl	80053d0 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <MX_FREERTOS_Init+0x70>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of UsbTask */
  UsbTaskHandle = osThreadNew(StartUsbTask, NULL, &UsbTask_attributes);
 8000568:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_FREERTOS_Init+0x74>)
 800056a:	2100      	movs	r1, #0
 800056c:	480f      	ldr	r0, [pc, #60]	@ (80005ac <MX_FREERTOS_Init+0x78>)
 800056e:	f004 ff2f 	bl	80053d0 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <MX_FREERTOS_Init+0x7c>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of LoraTask */
  LoraTaskHandle = osThreadNew(StartLoraTask, NULL, &LoraTask_attributes);
 8000578:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <MX_FREERTOS_Init+0x80>)
 800057a:	2100      	movs	r1, #0
 800057c:	480e      	ldr	r0, [pc, #56]	@ (80005b8 <MX_FREERTOS_Init+0x84>)
 800057e:	f004 ff27 	bl	80053d0 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <MX_FREERTOS_Init+0x88>)
 8000586:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	0800d3a8 	.word	0x0800d3a8
 8000590:	2000008c 	.word	0x2000008c
 8000594:	0800d3c0 	.word	0x0800d3c0
 8000598:	20000090 	.word	0x20000090
 800059c:	0800d33c 	.word	0x0800d33c
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	20000080 	.word	0x20000080
 80005a8:	0800d360 	.word	0x0800d360
 80005ac:	080005d1 	.word	0x080005d1
 80005b0:	20000084 	.word	0x20000084
 80005b4:	0800d384 	.word	0x0800d384
 80005b8:	08000991 	.word	0x08000991
 80005bc:	20000088 	.word	0x20000088

080005c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* init code for SubGHz_Phy */
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f004 ffa7 	bl	800551c <osDelay>
 80005ce:	e7fb      	b.n	80005c8 <StartDefaultTask+0x8>

080005d0 <StartUsbTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsbTask */
void StartUsbTask(void *argument)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	f5ad 6d64 	sub.w	sp, sp, #3648	@ 0xe40
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 80005dc:	f6a3 633c 	subw	r3, r3, #3644	@ 0xe3c
 80005e0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartUsbTask */

	  uint8_t initializing_radio[] =
 80005e2:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 80005e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005ea:	4ac9      	ldr	r2, [pc, #804]	@ (8000910 <StartUsbTask+0x340>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	4611      	mov	r1, r2
 80005f0:	23f9      	movs	r3, #249	@ 0xf9
 80005f2:	461a      	mov	r2, r3
 80005f4:	f00b fc08 	bl	800be08 <memcpy>
			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	"\n\r"
				"|------------------------------------------------------------------------------|\n\r"
				"| Initializing radio. Please, wait some seconds                                |\n\r"
				"|------------------------------------------------------------------------------|\n\r";
	  HAL_UART_Transmit(&huart1, initializing_radio, sizeof(initializing_radio), HAL_MAX_DELAY);
 80005f8:	f607 513c 	addw	r1, r7, #3388	@ 0xd3c
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	22f9      	movs	r2, #249	@ 0xf9
 8000602:	48c4      	ldr	r0, [pc, #784]	@ (8000914 <StartUsbTask+0x344>)
 8000604:	f003 fbfa 	bl	8003dfc <HAL_UART_Transmit>
      MX_SubGHz_Phy_Init();
 8000608:	f00a fe9f 	bl	800b34a <MX_SubGHz_Phy_Init>
	  uint8_t radio_is_init[] =
 800060c:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000614:	4ac0      	ldr	r2, [pc, #768]	@ (8000918 <StartUsbTask+0x348>)
 8000616:	4618      	mov	r0, r3
 8000618:	4611      	mov	r1, r2
 800061a:	23f7      	movs	r3, #247	@ 0xf7
 800061c:	461a      	mov	r2, r3
 800061e:	f00b fbf3 	bl	800be08 <memcpy>
				"|------------------------------------------------------------------------------|\n\r"
				"| Radio is initialized                                                         |\n\r"
				"|------------------------------------------------------------------------------|\n\r";
	  HAL_UART_Transmit(&huart1, radio_is_init, sizeof(radio_is_init), HAL_MAX_DELAY);
 8000622:	f607 4144 	addw	r1, r7, #3140	@ 0xc44
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	22f7      	movs	r2, #247	@ 0xf7
 800062c:	48b9      	ldr	r0, [pc, #740]	@ (8000914 <StartUsbTask+0x344>)
 800062e:	f003 fbe5 	bl	8003dfc <HAL_UART_Transmit>

	  uint8_t input_buffer[300];
	  uint8_t welcome[] =
 8000632:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000636:	f6a3 53a8 	subw	r3, r3, #3496	@ 0xda8
 800063a:	4ab8      	ldr	r2, [pc, #736]	@ (800091c <StartUsbTask+0x34c>)
 800063c:	4618      	mov	r0, r3
 800063e:	4611      	mov	r1, r2
 8000640:	f640 237d 	movw	r3, #2685	@ 0xa7d
 8000644:	461a      	mov	r2, r3
 8000646:	f00b fbdf 	bl	800be08 <memcpy>
			  "|    @config terminal echo {true/false} - set uart echo for input              |\n\r"
			  "| ctrl+C or ctrl+Z - for undo                                                  |\n\r"
			  "|------------------------------------------------------------------------------|\n\r"
	  	  	  "| when LoRa receives data it will be written to this terminal                  |\n\r"
			  "|------------------------------------------------------------------------------|\n\r";
	  uint8_t new_line[] =
 800064a:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 800064e:	f6a3 53ac 	subw	r3, r3, #3500	@ 0xdac
 8000652:	4ab3      	ldr	r2, [pc, #716]	@ (8000920 <StartUsbTask+0x350>)
 8000654:	601a      	str	r2, [r3, #0]
			  "\n\r@";
	  uint8_t error_parse[] =
 8000656:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 800065a:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800065e:	4ab1      	ldr	r2, [pc, #708]	@ (8000924 <StartUsbTask+0x354>)
 8000660:	461c      	mov	r4, r3
 8000662:	4615      	mov	r5, r2
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800066c:	c407      	stmia	r4!, {r0, r1, r2}
 800066e:	7023      	strb	r3, [r4, #0]
			  "\n\r#cannot parse your command";
	  uint8_t error_send[] =
 8000670:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000674:	f6a3 53f8 	subw	r3, r3, #3576	@ 0xdf8
 8000678:	4aab      	ldr	r2, [pc, #684]	@ (8000928 <StartUsbTask+0x358>)
 800067a:	461c      	mov	r4, r3
 800067c:	4615      	mov	r5, r2
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	c403      	stmia	r4!, {r0, r1}
 800068c:	7022      	strb	r2, [r4, #0]
			  "\n\r#cannot send text, maybe memory errors";
	  uint8_t command_send[] =
 800068e:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000692:	f5a3 6360 	sub.w	r3, r3, #3584	@ 0xe00
 8000696:	4aa5      	ldr	r2, [pc, #660]	@ (800092c <StartUsbTask+0x35c>)
 8000698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069c:	6018      	str	r0, [r3, #0]
 800069e:	3304      	adds	r3, #4
 80006a0:	8019      	strh	r1, [r3, #0]
			  "send ";
	  uint8_t command_help[] =
 80006a2:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 80006a6:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80006aa:	4aa1      	ldr	r2, [pc, #644]	@ (8000930 <StartUsbTask+0x360>)
 80006ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b0:	6018      	str	r0, [r3, #0]
 80006b2:	3304      	adds	r3, #4
 80006b4:	7019      	strb	r1, [r3, #0]
			  "help";
	  uint8_t config_terminal_echo[] =
 80006b6:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 80006ba:	f5a3 6362 	sub.w	r3, r3, #3616	@ 0xe20
 80006be:	4a9d      	ldr	r2, [pc, #628]	@ (8000934 <StartUsbTask+0x364>)
 80006c0:	461c      	mov	r4, r3
 80006c2:	4615      	mov	r5, r2
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006cc:	6020      	str	r0, [r4, #0]
 80006ce:	3404      	adds	r4, #4
 80006d0:	8021      	strh	r1, [r4, #0]
			  "config terminal echo ";
	  uint8_t true_str[] =
 80006d2:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 80006d6:	f6a3 6328 	subw	r3, r3, #3624	@ 0xe28
 80006da:	4a97      	ldr	r2, [pc, #604]	@ (8000938 <StartUsbTask+0x368>)
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	6018      	str	r0, [r3, #0]
 80006e2:	3304      	adds	r3, #4
 80006e4:	7019      	strb	r1, [r3, #0]
			  "true";
	  uint8_t false_str[] =
 80006e6:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 80006ea:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 80006ee:	4a93      	ldr	r2, [pc, #588]	@ (800093c <StartUsbTask+0x36c>)
 80006f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f4:	6018      	str	r0, [r3, #0]
 80006f6:	3304      	adds	r3, #4
 80006f8:	8019      	strh	r1, [r3, #0]
			  "false";
	  bool echo = true;
 80006fa:	2301      	movs	r3, #1
 80006fc:	f887 3e3f 	strb.w	r3, [r7, #3647]	@ 0xe3f
	  HAL_UART_Transmit(&huart1, welcome, sizeof(welcome), HAL_MAX_DELAY);
 8000700:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	f640 227d 	movw	r2, #2685	@ 0xa7d
 800070c:	4881      	ldr	r0, [pc, #516]	@ (8000914 <StartUsbTask+0x344>)
 800070e:	f003 fb75 	bl	8003dfc <HAL_UART_Transmit>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, new_line, sizeof(new_line), HAL_MAX_DELAY);
 8000712:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2204      	movs	r2, #4
 800071c:	487d      	ldr	r0, [pc, #500]	@ (8000914 <StartUsbTask+0x344>)
 800071e:	f003 fb6d 	bl	8003dfc <HAL_UART_Transmit>
		for (int i = 0; i < sizeof(input_buffer); ++i) {
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 3e38 	str.w	r3, [r7, #3640]	@ 0xe38
 8000728:	e127      	b.n	800097a <StartUsbTask+0x3aa>
			HAL_UART_Receive(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 800072a:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800072e:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 8000732:	18d1      	adds	r1, r2, r3
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	2201      	movs	r2, #1
 800073a:	4876      	ldr	r0, [pc, #472]	@ (8000914 <StartUsbTask+0x344>)
 800073c:	f003 fbe4 	bl	8003f08 <HAL_UART_Receive>
			if (echo) {
 8000740:	f897 3e3f 	ldrb.w	r3, [r7, #3647]	@ 0xe3f
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <StartUsbTask+0x18e>
				HAL_UART_Transmit(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 8000748:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800074c:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 8000750:	18d1      	adds	r1, r2, r3
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	2201      	movs	r2, #1
 8000758:	486e      	ldr	r0, [pc, #440]	@ (8000914 <StartUsbTask+0x344>)
 800075a:	f003 fb4f 	bl	8003dfc <HAL_UART_Transmit>
			}
			if (input_buffer[i] == '\n' || input_buffer[i] == '\r') {
 800075e:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000762:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8000766:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b0a      	cmp	r3, #10
 8000770:	d00a      	beq.n	8000788 <StartUsbTask+0x1b8>
 8000772:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000776:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 800077a:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0d      	cmp	r3, #13
 8000784:	f040 80de 	bne.w	8000944 <StartUsbTask+0x374>

				input_buffer[i] = '\0';
 8000788:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 800078c:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8000790:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 8000794:	4413      	add	r3, r2
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
				if (i == 0) {
 800079a:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 80f2 	beq.w	8000988 <StartUsbTask+0x3b8>
					// do nothing
				}
				else if (!strncmp((char*)input_buffer, (char*)command_help, sizeof(command_help) - 1))
 80007a4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80007a8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80007ac:	2204      	movs	r2, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b fa72 	bl	800bc98 <strncmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d109      	bne.n	80007ce <StartUsbTask+0x1fe>
				{
					  HAL_UART_Transmit(&huart1, welcome, sizeof(welcome), HAL_MAX_DELAY);
 80007ba:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	f640 227d 	movw	r2, #2685	@ 0xa7d
 80007c6:	4853      	ldr	r0, [pc, #332]	@ (8000914 <StartUsbTask+0x344>)
 80007c8:	f003 fb18 	bl	8003dfc <HAL_UART_Transmit>
					}
				}
				else {
					HAL_UART_Transmit(&huart1, error_parse, sizeof(error_parse), HAL_MAX_DELAY);
				}
				break;
 80007cc:	e0dc      	b.n	8000988 <StartUsbTask+0x3b8>
				else if (i > strlen((char*)command_send) && !strncmp((char*)input_buffer, (char*)command_send, sizeof(command_send) - 1)) {
 80007ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fcd4 	bl	8000180 <strlen>
 80007d8:	4602      	mov	r2, r0
 80007da:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 80007de:	429a      	cmp	r2, r3
 80007e0:	d24d      	bcs.n	800087e <StartUsbTask+0x2ae>
 80007e2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80007e6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80007ea:	2205      	movs	r2, #5
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00b fa53 	bl	800bc98 <strncmp>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d142      	bne.n	800087e <StartUsbTask+0x2ae>
					char *malloc_buffer = malloc(strlen(input_buffer) - (sizeof(command_send) - 1));
 80007f8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fcbf 	bl	8000180 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	3b05      	subs	r3, #5
 8000806:	4618      	mov	r0, r3
 8000808:	f00b f960 	bl	800bacc <malloc>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000814:	f6a3 6334 	subw	r3, r3, #3636	@ 0xe34
 8000818:	601a      	str	r2, [r3, #0]
					if(!malloc_buffer) {
 800081a:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 800081e:	f6a3 6334 	subw	r3, r3, #3636	@ 0xe34
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	f000 80b1 	beq.w	800098c <StartUsbTask+0x3bc>
					strncpy(malloc_buffer, input_buffer + sizeof(command_send) - 1, 256);
 800082a:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 800082e:	f6a3 6334 	subw	r3, r3, #3636	@ 0xe34
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8000838:	3305      	adds	r3, #5
 800083a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800083e:	4619      	mov	r1, r3
 8000840:	f00b fa3c 	bl	800bcbc <strncpy>
					if (osMessageQueuePut(SendLoraQueueHandle, &malloc_buffer, NULL, osWaitForever)){
 8000844:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <StartUsbTask+0x370>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	f107 010c 	add.w	r1, r7, #12
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	2200      	movs	r2, #0
 8000852:	f004 ff17 	bl	8005684 <osMessageQueuePut>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d057      	beq.n	800090c <StartUsbTask+0x33c>
						free(malloc_buffer);
 800085c:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000860:	f6a3 6334 	subw	r3, r3, #3636	@ 0xe34
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f00b f938 	bl	800badc <free>
						HAL_UART_Transmit(&huart1, error_send, sizeof(error_send), HAL_MAX_DELAY);
 800086c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2229      	movs	r2, #41	@ 0x29
 8000876:	4827      	ldr	r0, [pc, #156]	@ (8000914 <StartUsbTask+0x344>)
 8000878:	f003 fac0 	bl	8003dfc <HAL_UART_Transmit>
				else if (i > strlen((char*)command_send) && !strncmp((char*)input_buffer, (char*)command_send, sizeof(command_send) - 1)) {
 800087c:	e046      	b.n	800090c <StartUsbTask+0x33c>
				else if (i > strlen((char*)config_terminal_echo) && !strncmp((char*)input_buffer, (char*)config_terminal_echo, sizeof(config_terminal_echo) - 1)) {
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc7c 	bl	8000180 <strlen>
 8000888:	4602      	mov	r2, r0
 800088a:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800088e:	429a      	cmp	r2, r3
 8000890:	d233      	bcs.n	80008fa <StartUsbTask+0x32a>
 8000892:	f107 0120 	add.w	r1, r7, #32
 8000896:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800089a:	2215      	movs	r2, #21
 800089c:	4618      	mov	r0, r3
 800089e:	f00b f9fb 	bl	800bc98 <strncmp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d128      	bne.n	80008fa <StartUsbTask+0x32a>
					if (!strncmp((char*)input_buffer + (sizeof(config_terminal_echo) - 1), (char*)true_str, sizeof(true_str) - 1)) {
 80008a8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80008ac:	3315      	adds	r3, #21
 80008ae:	f107 0118 	add.w	r1, r7, #24
 80008b2:	2204      	movs	r2, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f00b f9ef 	bl	800bc98 <strncmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <StartUsbTask+0x2f8>
						echo = true;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f887 3e3f 	strb.w	r3, [r7, #3647]	@ 0xe3f
					if (!strncmp((char*)input_buffer + (sizeof(config_terminal_echo) - 1), (char*)true_str, sizeof(true_str) - 1)) {
 80008c6:	e022      	b.n	800090e <StartUsbTask+0x33e>
					} else if (!strncmp((char*)input_buffer + (sizeof(config_terminal_echo) - 1), (char*)false_str, sizeof(false_str) - 1)) {
 80008c8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80008cc:	3315      	adds	r3, #21
 80008ce:	f107 0110 	add.w	r1, r7, #16
 80008d2:	2205      	movs	r2, #5
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00b f9df 	bl	800bc98 <strncmp>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <StartUsbTask+0x318>
						echo = false;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3e3f 	strb.w	r3, [r7, #3647]	@ 0xe3f
					if (!strncmp((char*)input_buffer + (sizeof(config_terminal_echo) - 1), (char*)true_str, sizeof(true_str) - 1)) {
 80008e6:	e012      	b.n	800090e <StartUsbTask+0x33e>
						HAL_UART_Transmit(&huart1, error_parse, sizeof(error_parse), HAL_MAX_DELAY);
 80008e8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	221d      	movs	r2, #29
 80008f2:	4808      	ldr	r0, [pc, #32]	@ (8000914 <StartUsbTask+0x344>)
 80008f4:	f003 fa82 	bl	8003dfc <HAL_UART_Transmit>
					if (!strncmp((char*)input_buffer + (sizeof(config_terminal_echo) - 1), (char*)true_str, sizeof(true_str) - 1)) {
 80008f8:	e009      	b.n	800090e <StartUsbTask+0x33e>
					HAL_UART_Transmit(&huart1, error_parse, sizeof(error_parse), HAL_MAX_DELAY);
 80008fa:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	221d      	movs	r2, #29
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <StartUsbTask+0x344>)
 8000906:	f003 fa79 	bl	8003dfc <HAL_UART_Transmit>
				break;
 800090a:	e03d      	b.n	8000988 <StartUsbTask+0x3b8>
				else if (i > strlen((char*)command_send) && !strncmp((char*)input_buffer, (char*)command_send, sizeof(command_send) - 1)) {
 800090c:	bf00      	nop
				break;
 800090e:	e03b      	b.n	8000988 <StartUsbTask+0x3b8>
 8000910:	0800c57c 	.word	0x0800c57c
 8000914:	200000f8 	.word	0x200000f8
 8000918:	0800c678 	.word	0x0800c678
 800091c:	0800c770 	.word	0x0800c770
 8000920:	00400d0a 	.word	0x00400d0a
 8000924:	0800d1f0 	.word	0x0800d1f0
 8000928:	0800d210 	.word	0x0800d210
 800092c:	0800d23c 	.word	0x0800d23c
 8000930:	0800d244 	.word	0x0800d244
 8000934:	0800d24c 	.word	0x0800d24c
 8000938:	0800d264 	.word	0x0800d264
 800093c:	0800d26c 	.word	0x0800d26c
 8000940:	2000008c 	.word	0x2000008c
			} else if (input_buffer[i] == '\x03' || input_buffer[i] == '\x1A') {
 8000944:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 8000948:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 800094c:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	f43f aedc 	beq.w	8000712 <StartUsbTask+0x142>
 800095a:	f507 6364 	add.w	r3, r7, #3648	@ 0xe40
 800095e:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8000962:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b1a      	cmp	r3, #26
 800096c:	f43f aed1 	beq.w	8000712 <StartUsbTask+0x142>
		for (int i = 0; i < sizeof(input_buffer); ++i) {
 8000970:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 8000974:	3301      	adds	r3, #1
 8000976:	f8c7 3e38 	str.w	r3, [r7, #3640]	@ 0xe38
 800097a:	f8d7 3e38 	ldr.w	r3, [r7, #3640]	@ 0xe38
 800097e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000982:	f4ff aed2 	bcc.w	800072a <StartUsbTask+0x15a>
 8000986:	e6c4      	b.n	8000712 <StartUsbTask+0x142>
				break;
 8000988:	bf00      	nop
 800098a:	e6c2      	b.n	8000712 <StartUsbTask+0x142>
						break;
 800098c:	bf00      	nop
		HAL_UART_Transmit(&huart1, new_line, sizeof(new_line), HAL_MAX_DELAY);
 800098e:	e6c0      	b.n	8000712 <StartUsbTask+0x142>

08000990 <StartLoraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoraTask */
void StartLoraTask(void *argument)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000996:	af00      	add	r7, sp, #0
 8000998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800099c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80009a0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoraTask */
  /* Infinite loop */
  //MX_SubGHz_Phy_Init();

  char formatter[500];
  osDelay(4000);
 80009a2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80009a6:	f004 fdb9 	bl	800551c <osDelay>
  char *input_buffer = NULL;
 80009aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009ae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
	  for(;;)
	  {
		  if(!osMessageQueueGet(SendLoraQueueHandle, &input_buffer, NULL, 1000)){
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <StartLoraTask+0x8c>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	f107 0108 	add.w	r1, r7, #8
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	2200      	movs	r2, #0
 80009c4:	f004 fed2 	bl	800576c <osMessageQueueGet>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1f3      	bne.n	80009b6 <StartLoraTask+0x26>
			  if (Radio.Send(input_buffer, strlen(input_buffer)) != RADIO_STATUS_OK) {
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <StartLoraTask+0x90>)
 80009d0:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80009d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80009da:	681d      	ldr	r5, [r3, #0]
 80009dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009e0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fbca 	bl	8000180 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	4628      	mov	r0, r5
 80009f4:	47a0      	blx	r4
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d006      	beq.n	8000a0a <StartLoraTask+0x7a>
				  HAL_UART_Transmit(&huart1, "!unsent\n\r@", sizeof("!unsent\n\r@"), HAL_MAX_DELAY);
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	220b      	movs	r2, #11
 8000a02:	4908      	ldr	r1, [pc, #32]	@ (8000a24 <StartLoraTask+0x94>)
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <StartLoraTask+0x98>)
 8000a06:	f003 f9f9 	bl	8003dfc <HAL_UART_Transmit>
			  }
			  free(input_buffer);
 8000a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a0e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00b f861 	bl	800badc <free>
		  if(!osMessageQueueGet(SendLoraQueueHandle, &input_buffer, NULL, 1000)){
 8000a1a:	e7cc      	b.n	80009b6 <StartLoraTask+0x26>
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	0800d4cc 	.word	0x0800d4cc
 8000a24:	0800d274 	.word	0x0800d274
 8000a28:	200000f8 	.word	0x200000f8

08000a2c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	2002      	movs	r0, #2
 8000a72:	f7ff ffdb 	bl	8000a2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff ffd8 	bl	8000a2c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2160      	movs	r1, #96	@ 0x60
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f000 fec0 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a88:	2360      	movs	r3, #96	@ 0x60
 8000a8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f000 fd52 	bl	8001548 <HAL_GPIO_Init>

}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 fb7e 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f80c 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f7ff ffd0 	bl	8000a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000abc:	f000 fab2 	bl	8001024 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ac0:	f004 fc1e 	bl	8005300 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ac4:	f7ff fd36 	bl	8000534 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ac8:	f004 fc4c 	bl	8005364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <main+0x20>

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09a      	sub	sp, #104	@ 0x68
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2248      	movs	r2, #72	@ 0x48
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00b f8d2 	bl	800bc88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <SystemClock_Config+0xa0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <SystemClock_Config+0xa0>)
 8000b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <SystemClock_Config+0xa0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b12:	2320      	movs	r3, #32
 8000b14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b16:	2301      	movs	r3, #1
 8000b18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000b1e:	23b0      	movs	r3, #176	@ 0xb0
 8000b20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 f952 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b36:	f000 f82f 	bl	8000b98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000b3a:	234f      	movs	r3, #79	@ 0x4f
 8000b3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	2102      	movs	r1, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fcbd 	bl	80024d8 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b64:	f000 f818 	bl	8000b98 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3768      	adds	r7, #104	@ 0x68
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000400 	.word	0x58000400

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 fb33 	bl	80011f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40012c00 	.word	0x40012c00

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000bd8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000bdc:	f7ff ffe2 	bl	8000ba4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210f      	movs	r1, #15
 8000be4:	f06f 0001 	mvn.w	r0, #1
 8000be8:	f000 fbc9 	bl	800137e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2105      	movs	r1, #5
 8000bf0:	2005      	movs	r0, #5
 8000bf2:	f000 fbc4 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f000 fbdb 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2105      	movs	r1, #5
 8000c00:	202f      	movs	r0, #47	@ 0x2f
 8000c02:	f000 fbbc 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000c06:	202f      	movs	r0, #47	@ 0x2f
 8000c08:	f000 fbd3 	bl	80013b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c34:	68fb      	ldr	r3, [r7, #12]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c56:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000c5a:	f7ff ffd9 	bl	8000c10 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5e:	f107 0208 	add.w	r2, r7, #8
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fe31 	bl	80028d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c6e:	f001 fe1d 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8000c72:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c76:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <HAL_InitTick+0xbc>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	0c9b      	lsrs	r3, r3, #18
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000c84:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <HAL_InitTick+0xc4>)
 8000c86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000c8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c8e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c90:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000ca2:	4817      	ldr	r0, [pc, #92]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000ca4:	f002 fdcc 	bl	8003840 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d11b      	bne.n	8000cee <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cb6:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <HAL_InitTick+0xc0>)
 8000cb8:	f002 fe22 	bl	8003900 <HAL_TIM_Base_Start_IT>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d111      	bne.n	8000cee <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cca:	2018      	movs	r0, #24
 8000ccc:	f000 fb71 	bl	80013b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b0f      	cmp	r3, #15
 8000cd4:	d808      	bhi.n	8000ce8 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	2018      	movs	r0, #24
 8000cdc:	f000 fb4f 	bl	800137e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce0:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_InitTick+0xc8>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e002      	b.n	8000cee <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3730      	adds	r7, #48	@ 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	20000094 	.word	0x20000094
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	20000004 	.word	0x20000004

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <TIM1_UP_IRQHandler+0x10>)
 8000d52:	f002 fe21 	bl	8003998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000094 	.word	0x20000094

08000d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART1_IRQHandler+0x10>)
 8000d66:	f003 f993 	bl	8004090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000f8 	.word	0x200000f8

08000d74 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM Interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000d78:	f000 fd5e 	bl	8001838 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000d86:	f002 fbbd 	bl	8003504 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000e0 	.word	0x200000e0

08000d94 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_SUBGHZ_Init+0x20>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_SUBGHZ_Init+0x20>)
 8000dd0:	f002 f916 	bl	8003000 <HAL_SUBGHZ_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000dda:	f7ff fedd 	bl	8000b98 <Error_Handler>
  /* USER CODE BEGIN SUBGHZ_Init 2 */


  /* USER CODE END SUBGHZ_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000e0 	.word	0x200000e0

08000de8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff ffcf 	bl	8000d94 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2032      	movs	r0, #50	@ 0x32
 8000dfc:	f000 fabf 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000e00:	2032      	movs	r0, #50	@ 0x32
 8000e02:	f000 fad6 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_GetTick+0x24>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000e2e:	f000 f892 	bl	8000f56 <TIMER_IF_GetTimerValue>
 8000e32:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000ec 	.word	0x200000ec

08000e44 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f8af 	bl	8000fb2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f00a ff90 	bl	800bdb0 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20010000 	.word	0x20010000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	200000f0 	.word	0x200000f0
 8000ec4:	20004268 	.word	0x20004268

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b085      	sub	sp, #20
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	@ (8000f28 <TIMER_IF_SetTimerContext+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	200000f4 	.word	0x200000f4

08000f2c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000f30:	4b02      	ldr	r3, [pc, #8]	@ (8000f3c <TIMER_IF_GetTimerContext+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	200000f4 	.word	0x200000f4

08000f40 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000f76:	687b      	ldr	r3, [r7, #4]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <LL_AHB2_GRP1_EnableClock>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_APB2_GRP1_EnableClock>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001000:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001002:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001028:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 800102a:	4a24      	ldr	r2, [pc, #144]	@ (80010bc <MX_USART1_UART_Init+0x98>)
 800102c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001050:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001054:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106e:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001070:	f002 fe74 	bl	8003d5c <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800107a:	f7ff fd8d 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001082:	f004 f86e 	bl	8005162 <HAL_UARTEx_SetTxFifoThreshold>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800108c:	f7ff fd84 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 8001094:	f004 f8a3 	bl	80051de <HAL_UARTEx_SetRxFifoThreshold>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800109e:	f7ff fd7b 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_USART1_UART_Init+0x94>)
 80010a4:	f004 f822 	bl	80050ec <HAL_UARTEx_EnableFifoMode>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f7ff fd73 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000f8 	.word	0x200000f8
 80010bc:	40013800 	.word	0x40013800

080010c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b096      	sub	sp, #88	@ 0x58
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2238      	movs	r2, #56	@ 0x38
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a fdd1 	bl	800bc88 <memset>
  if(uartHandle->Instance==USART1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <HAL_UART_MspInit+0x94>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d12d      	bne.n	800114c <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010f4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80010f8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fdca 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800110a:	f7ff fd45 	bl	8000b98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001112:	f7ff ff6f 	bl	8000ff4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff ff54 	bl	8000fc4 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> USART1_RTS
    PB4     ------> USART1_CTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800111c:	23d8      	movs	r3, #216	@ 0xd8
 800111e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800112c:	2307      	movs	r3, #7
 800112e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001134:	4619      	mov	r1, r3
 8001136:	4808      	ldr	r0, [pc, #32]	@ (8001158 <HAL_UART_MspInit+0x98>)
 8001138:	f000 fa06 	bl	8001548 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2105      	movs	r1, #5
 8001140:	2024      	movs	r0, #36	@ 0x24
 8001142:	f000 f91c 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001146:	2024      	movs	r0, #36	@ 0x24
 8001148:	f000 f933 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800114c:	bf00      	nop
 800114e:	3758      	adds	r7, #88	@ 0x58
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013800 	.word	0x40013800
 8001158:	48000400 	.word	0x48000400

0800115c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001160:	f7ff feb2 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopForever+0xe>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118a:	f00a fe17 	bl	800bdbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118e:	f7ff fc8d 	bl	8000aac <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   r0, =_estack
 8001194:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011a0:	0800d650 	.word	0x0800d650
  ldr r2, =_sbss
 80011a4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011a8:	20004268 	.word	0x20004268

080011ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f8d4 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011c0:	f001 fb4e 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <HAL_Init+0x3c>)
 80011c8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	200f      	movs	r0, #15
 80011cc:	f7ff fd38 	bl	8000c40 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e001      	b.n	80011e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011dc:	f7ff fcfa 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000

080011f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_IncTick+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_IncTick+0x20>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a03      	ldr	r2, [pc, #12]	@ (8001210 <HAL_IncTick+0x20>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000008 	.word	0x20000008
 8001210:	2000018c 	.word	0x2000018c

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4906      	ldr	r1, [pc, #24]	@ (80012ac <__NVIC_EnableIRQ+0x34>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff4f 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff66 	bl	800125c <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ffb4 	bl	8001304 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff83 	bl	80012b0 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff59 	bl	8001278 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e04f      	b.n	8001480 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d008      	beq.n	80013fe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e040      	b.n	8001480 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 020e 	bic.w	r2, r2, #14
 800140c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800141c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f003 021c 	and.w	r2, r3, #28
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800144a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001462:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800146c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d005      	beq.n	80014ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2204      	movs	r2, #4
 80014a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e047      	b.n	800153e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 020e 	bic.w	r2, r2, #14
 80014bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f003 021c 	and.w	r2, r3, #28
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00c      	beq.n	800151e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001512:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800151c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
    }
  }
  return status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e140      	b.n	80017da <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8132 	beq.w	80017d4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_GPIO_Init+0x40>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d130      	bne.n	80015ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015be:	2201      	movs	r2, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 0201 	and.w	r2, r3, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d123      	bne.n	800167a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0203 	and.w	r2, r3, #3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 808c 	beq.w	80017d4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016bc:	4a4e      	ldr	r2, [pc, #312]	@ (80017f8 <HAL_GPIO_Init+0x2b0>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	2207      	movs	r2, #7
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016e6:	d00d      	beq.n	8001704 <HAL_GPIO_Init+0x1bc>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a44      	ldr	r2, [pc, #272]	@ (80017fc <HAL_GPIO_Init+0x2b4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0x1b8>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a43      	ldr	r2, [pc, #268]	@ (8001800 <HAL_GPIO_Init+0x2b8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_GPIO_Init+0x1b4>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1be>
 80016fc:	2307      	movs	r3, #7
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1be>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1be>
 8001704:	2300      	movs	r3, #0
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001716:	4938      	ldr	r1, [pc, #224]	@ (80017f8 <HAL_GPIO_Init+0x2b0>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001748:	4a2e      	ldr	r2, [pc, #184]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800174e:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001772:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800177e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800179e:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 80017a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ac:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <HAL_GPIO_Init+0x2bc>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f aeb7 	bne.w	8001558 <HAL_GPIO_Init+0x10>
  }
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	58000800 	.word	0x58000800

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
	...

08001838 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_HSEM_IRQHandler+0x30>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_HSEM_IRQHandler+0x30>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	43db      	mvns	r3, r3
 800184c:	4906      	ldr	r1, [pc, #24]	@ (8001868 <HAL_HSEM_IRQHandler+0x30>)
 800184e:	4013      	ands	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <HAL_HSEM_IRQHandler+0x30>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f807 	bl	800186c <HAL_HSEM_FreeCallback>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	58001500 	.word	0x58001500

0800186c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
	...

08001880 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a03      	ldr	r2, [pc, #12]	@ (8001898 <HAL_PWR_EnableBkUpAccess+0x18>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	58000400 	.word	0x58000400

0800189c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_PWREx_GetVoltageRange+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	58000400 	.word	0x58000400

080018b4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c4:	d101      	bne.n	80018ca <LL_PWR_IsEnabledBkUpAccess+0x16>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	58000400 	.word	0x58000400

080018d8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001902:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001922:	d101      	bne.n	8001928 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800195c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800197c:	d101      	bne.n	8001982 <LL_RCC_HSE_IsReady+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_RCC_HSE_IsReady+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d6:	d101      	bne.n	80019dc <LL_RCC_HSI_IsReady+0x18>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LL_RCC_HSI_IsReady+0x1a>
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d101      	bne.n	8001a26 <LL_RCC_LSE_IsReady+0x18>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_RCC_LSE_IsReady+0x1a>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d101      	bne.n	8001a88 <LL_RCC_LSI_IsReady+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_RCC_LSI_IsReady+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d101      	bne.n	8001ae0 <LL_RCC_MSI_IsReady+0x16>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <LL_RCC_MSI_IsReady+0x18>
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d101      	bne.n	8001b00 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bd2:	f023 020f 	bic.w	r2, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c58:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ce0:	d101      	bne.n	8001ce6 <LL_RCC_PLL_IsReady+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_RCC_PLL_IsReady+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d101      	bne.n	8001d62 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d80:	d101      	bne.n	8001d86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001da2:	d101      	bne.n	8001da8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001dc4:	d101      	bne.n	8001dca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e36f      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	f7ff fece 	bl	8001b86 <LL_RCC_GetSysClkSource>
 8001dea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	f7ff ffa2 	bl	8001d34 <LL_RCC_PLL_GetMainSource>
 8001df0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80c4 	beq.w	8001f88 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3e>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d176      	bne.n	8001efa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d173      	bne.n	8001efa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e353      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_OscConfig+0x68>
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3a:	e006      	b.n	8001e4a <HAL_RCC_OscConfig+0x76>
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d222      	bcs.n	8001e94 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd7a 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e331      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fe53 	bl	8001b38 <LL_RCC_MSI_SetCalibTrimming>
 8001e92:	e021      	b.n	8001ed8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe3a 	bl	8001b38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fd3f 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e2f6      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ed8:	f000 fcc2 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4aa7      	ldr	r2, [pc, #668]	@ (800217c <HAL_RCC_OscConfig+0x3a8>)
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001ee2:	4ba7      	ldr	r3, [pc, #668]	@ (8002180 <HAL_RCC_OscConfig+0x3ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe feaa 	bl	8000c40 <HAL_InitTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d047      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	e2e5      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f02:	f7ff fdc6 	bl	8001a92 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f06:	f7fe ff89 	bl	8000e1c <HAL_GetTick>
 8001f0a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f0e:	f7fe ff85 	bl	8000e1c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e2d2      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f20:	f7ff fdd3 	bl	8001aca <LL_RCC_MSI_IsReady>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f1      	beq.n	8001f0e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fdef 	bl	8001b38 <LL_RCC_MSI_SetCalibTrimming>
 8001f5a:	e015      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5c:	f7ff fda7 	bl	8001aae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f60:	f7fe ff5c 	bl	8000e1c <HAL_GetTick>
 8001f64:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f68:	f7fe ff58 	bl	8000e1c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e2a5      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f7a:	f7ff fda6 	bl	8001aca <LL_RCC_MSI_IsReady>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f1      	bne.n	8001f68 <HAL_RCC_OscConfig+0x194>
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f86:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d058      	beq.n	8002046 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1d2>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d108      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d14b      	bne.n	8002046 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e289      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x204>
 8001fd2:	f7ff fcae 	bl	8001932 <LL_RCC_HSE_Enable>
 8001fd6:	e00d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x220>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001fe0:	d104      	bne.n	8001fec <HAL_RCC_OscConfig+0x218>
 8001fe2:	f7ff fc79 	bl	80018d8 <LL_RCC_HSE_EnableTcxo>
 8001fe6:	f7ff fca4 	bl	8001932 <LL_RCC_HSE_Enable>
 8001fea:	e003      	b.n	8001ff4 <HAL_RCC_OscConfig+0x220>
 8001fec:	f7ff fcaf 	bl	800194e <LL_RCC_HSE_Disable>
 8001ff0:	f7ff fc80 	bl	80018f4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff0e 	bl	8000e1c <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe ff0a 	bl	8000e1c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e257      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002016:	f7ff fca8 	bl	800196a <LL_RCC_HSE_IsReady>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f1      	beq.n	8002004 <HAL_RCC_OscConfig+0x230>
 8002020:	e011      	b.n	8002046 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fefb 	bl	8000e1c <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202a:	f7fe fef7 	bl	8000e1c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b64      	cmp	r3, #100	@ 0x64
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e244      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800203c:	f7ff fc95 	bl	800196a <LL_RCC_HSE_IsReady>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f1      	bne.n	800202a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d046      	beq.n	80020e0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d005      	beq.n	8002064 <HAL_RCC_OscConfig+0x290>
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d10e      	bne.n	800207c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d10b      	bne.n	800207c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e22a      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fcb6 	bl	80019e6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800207a:	e031      	b.n	80020e0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d019      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	f7ff fc82 	bl	800198c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fec8 	bl	8000e1c <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe fec4 	bl	8000e1c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e211      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020a2:	f7ff fc8f 	bl	80019c4 <LL_RCC_HSI_IsReady>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f1      	beq.n	8002090 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fc98 	bl	80019e6 <LL_RCC_HSI_SetCalibTrimming>
 80020b6:	e013      	b.n	80020e0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	f7ff fc76 	bl	80019a8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe feae 	bl	8000e1c <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c4:	f7fe feaa 	bl	8000e1c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1f7      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020d6:	f7ff fc75 	bl	80019c4 <LL_RCC_HSI_IsReady>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f1      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d06e      	beq.n	80021ca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d056      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	429a      	cmp	r2, r3
 800210a:	d031      	beq.n	8002170 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e1d0      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d013      	beq.n	8002156 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800212e:	f7ff fc8f 	bl	8001a50 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002132:	f7fe fe73 	bl	8000e1c <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213a:	f7fe fe6f 	bl	8000e1c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b11      	cmp	r3, #17
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1bc      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800214c:	f7ff fc90 	bl	8001a70 <LL_RCC_LSI_IsReady>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f1      	bne.n	800213a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215e:	f023 0210 	bic.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002170:	f7ff fc5e 	bl	8001a30 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe fe52 	bl	8000e1c <HAL_GetTick>
 8002178:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800217a:	e00c      	b.n	8002196 <HAL_RCC_OscConfig+0x3c2>
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe fe4a 	bl	8000e1c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b11      	cmp	r3, #17
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e197      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002196:	f7ff fc6b 	bl	8001a70 <LL_RCC_LSI_IsReady>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f1      	beq.n	8002184 <HAL_RCC_OscConfig+0x3b0>
 80021a0:	e013      	b.n	80021ca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a2:	f7ff fc55 	bl	8001a50 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7fe fe39 	bl	8000e1c <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7fe fe35 	bl	8000e1c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b11      	cmp	r3, #17
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e182      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80021c0:	f7ff fc56 	bl	8001a70 <LL_RCC_LSI_IsReady>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f1      	bne.n	80021ae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80d8 	beq.w	8002388 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021d8:	f7ff fb6c 	bl	80018b4 <LL_PWR_IsEnabledBkUpAccess>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d113      	bne.n	800220a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021e2:	f7ff fb4d 	bl	8001880 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7fe fe19 	bl	8000e1c <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ee:	f7fe fe15 	bl	8000e1c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e162      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002200:	f7ff fb58 	bl	80018b4 <LL_PWR_IsEnabledBkUpAccess>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f1      	beq.n	80021ee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d07b      	beq.n	800230a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b85      	cmp	r3, #133	@ 0x85
 8002218:	d003      	beq.n	8002222 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d109      	bne.n	8002236 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fdf1 	bl	8000e1c <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002244:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fde3 	bl	8000e1c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e12e      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002268:	f7ff fbd1 	bl	8001a0e <LL_RCC_LSE_IsReady>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ef      	beq.n	8002252 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b81      	cmp	r3, #129	@ 0x81
 8002278:	d003      	beq.n	8002282 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b85      	cmp	r3, #133	@ 0x85
 8002280:	d121      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fdcb 	bl	8000e1c <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fdbd 	bl	8000e1c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e108      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ec      	beq.n	800229e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022c4:	e060      	b.n	8002388 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fda9 	bl	8000e1c <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fd9b 	bl	8000e1c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0e6      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ec      	bne.n	80022e2 <HAL_RCC_OscConfig+0x50e>
 8002308:	e03e      	b.n	8002388 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe fd87 	bl	8000e1c <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800231c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fd79 	bl	8000e1c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0c4      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ec      	bne.n	8002326 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7fe fd66 	bl	8000e1c <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fd58 	bl	8000e1c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0a3      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800237e:	f7ff fb46 	bl	8001a0e <LL_RCC_LSE_IsReady>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ef      	bne.n	8002368 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8099 	beq.w	80024c4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d06c      	beq.n	8002472 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14b      	bne.n	8002438 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	f7ff fc87 	bl	8001cb2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd3a 	bl	8000e1c <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fd36 	bl	8000e1c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b0a      	cmp	r3, #10
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e083      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80023be:	f7ff fc86 	bl	8001cce <LL_RCC_PLL_IsReady>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f1      	bne.n	80023ac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b40      	ldr	r3, [pc, #256]	@ (80024d0 <HAL_RCC_OscConfig+0x6fc>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023f4:	430a      	orrs	r2, r1
 80023f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fe:	f7ff fc4a 	bl	8001c96 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fd03 	bl	8000e1c <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fcff 	bl	8000e1c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b0a      	cmp	r3, #10
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e04c      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800242c:	f7ff fc4f 	bl	8001cce <LL_RCC_PLL_IsReady>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f1      	beq.n	800241a <HAL_RCC_OscConfig+0x646>
 8002436:	e045      	b.n	80024c4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	f7ff fc3b 	bl	8001cb2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fcee 	bl	8000e1c <HAL_GetTick>
 8002440:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fcea 	bl	8000e1c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b0a      	cmp	r3, #10
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e037      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002456:	f7ff fc3a 	bl	8001cce <LL_RCC_PLL_IsReady>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f1      	bne.n	8002444 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_RCC_OscConfig+0x700>)
 800246c:	4013      	ands	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
 8002470:	e028      	b.n	80024c4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e023      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0203 	and.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	429a      	cmp	r2, r3
 8002492:	d115      	bne.n	80024c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249e:	429a      	cmp	r2, r3
 80024a0:	d10e      	bne.n	80024c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	11c1808c 	.word	0x11c1808c
 80024d4:	eefefffc 	.word	0xeefefffc

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e10f      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b89      	ldr	r3, [pc, #548]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d91b      	bls.n	8002532 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b86      	ldr	r3, [pc, #536]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4984      	ldr	r1, [pc, #528]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250a:	f7fe fc87 	bl	8000e1c <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	e008      	b.n	8002524 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002512:	f7fe fc83 	bl	8000e1c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0f3      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002524:	4b7b      	ldr	r3, [pc, #492]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d1ef      	bne.n	8002512 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fb2a 	bl	8001b9c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002548:	f7fe fc68 	bl	8000e1c <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002550:	f7fe fc64 	bl	8000e1c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0d4      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002562:	f7ff fbf2 	bl	8001d4a <LL_RCC_IsActiveFlag_HPRE>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f1      	beq.n	8002550 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d016      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fb20 	bl	8001bc2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002582:	f7fe fc4b 	bl	8000e1c <HAL_GetTick>
 8002586:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800258a:	f7fe fc47 	bl	8000e1c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0b7      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800259c:	f7ff fbe6 	bl	8001d6c <LL_RCC_IsActiveFlag_SHDHPRE>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f1      	beq.n	800258a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fb19 	bl	8001bee <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fc2e 	bl	8000e1c <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025c4:	f7fe fc2a 	bl	8000e1c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e09a      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025d6:	f7ff fbdb 	bl	8001d90 <LL_RCC_IsActiveFlag_PPRE1>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f1      	beq.n	80025c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fb0e 	bl	8001c14 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fc10 	bl	8000e1c <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002600:	f7fe fc0c 	bl	8000e1c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e07c      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002612:	f7ff fbce 	bl	8001db2 <LL_RCC_IsActiveFlag_PPRE2>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f1      	beq.n	8002600 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d043      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d106      	bne.n	800263e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002630:	f7ff f99b 	bl	800196a <LL_RCC_HSE_IsReady>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11e      	bne.n	8002678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e066      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d106      	bne.n	8002654 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002646:	f7ff fb42 	bl	8001cce <LL_RCC_PLL_IsReady>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d113      	bne.n	8002678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e05b      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800265c:	f7ff fa35 	bl	8001aca <LL_RCC_MSI_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e050      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800266a:	f7ff f9ab 	bl	80019c4 <LL_RCC_HSI_IsReady>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e049      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fa6f 	bl	8001b60 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002682:	f7fe fbcb 	bl	8000e1c <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7fe fbc7 	bl	8000e1c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e035      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a0:	f7ff fa71 	bl	8001b86 <LL_RCC_GetSysClkSource>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ec      	bne.n	800268a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d21b      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4913      	ldr	r1, [pc, #76]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ce:	f7fe fba5 	bl	8000e1c <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026d6:	f7fe fba1 	bl	8000e1c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e011      	b.n	800270c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d1ef      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026f6:	f000 f8b3 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_RCC_ClockConfig+0x240>)
 80026fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_ClockConfig+0x244>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fa9b 	bl	8000c40 <HAL_InitTick>
 800270a:	4603      	mov	r3, r0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	58004000 	.word	0x58004000
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272e:	f7ff fa2a 	bl	8001b86 <LL_RCC_GetSysClkSource>
 8002732:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002734:	f7ff fafe 	bl	8001d34 <LL_RCC_PLL_GetMainSource>
 8002738:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x2c>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d139      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d136      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800274c:	f7ff f9cd 	bl	8001aea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0x62>
 8002756:	f7ff f9c8 	bl	8001aea <LL_RCC_MSI_IsEnabledRangeSelect>
 800275a:	4603      	mov	r3, r0
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x4e>
 8002760:	f7ff f9d3 	bl	8001b0a <LL_RCC_MSI_GetRange>
 8002764:	4603      	mov	r3, r0
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	e005      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x5a>
 800276e:	f7ff f9d7 	bl	8001b20 <LL_RCC_MSI_GetRangeAfterStandby>
 8002772:	4603      	mov	r3, r0
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4a36      	ldr	r2, [pc, #216]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x134>)
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	e014      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x8c>
 8002782:	f7ff f9b2 	bl	8001aea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x7a>
 800278c:	f7ff f9bd 	bl	8001b0a <LL_RCC_MSI_GetRange>
 8002790:	4603      	mov	r3, r0
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	e005      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x86>
 800279a:	f7ff f9c1 	bl	8001b20 <LL_RCC_MSI_GetRangeAfterStandby>
 800279e:	4603      	mov	r3, r0
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x134>)
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d115      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027b8:	e012      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x138>)
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e00c      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027cc:	f7ff f8a0 	bl	8001910 <LL_RCC_HSE_IsEnabledDiv2>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x138>)
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e001      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <HAL_RCC_GetSysClockFreq+0x13c>)
 80027de:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	f7ff f9d1 	bl	8001b86 <LL_RCC_GetSysClkSource>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d12f      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80027ea:	f7ff faa3 	bl	8001d34 <LL_RCC_PLL_GetMainSource>
 80027ee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0xde>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d003      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0xe4>
 80027fc:	e00d      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80027fe:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x138>)
 8002800:	60fb      	str	r3, [r7, #12]
        break;
 8002802:	e00d      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002804:	f7ff f884 	bl	8001910 <LL_RCC_HSE_IsEnabledDiv2>
 8002808:	4603      	mov	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d102      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800280e:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x138>)
 8002810:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002812:	e005      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002816:	60fb      	str	r3, [r7, #12]
        break;
 8002818:	e002      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	60fb      	str	r3, [r7, #12]
        break;
 800281e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002820:	f7ff fa66 	bl	8001cf0 <LL_RCC_PLL_GetN>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	fb03 f402 	mul.w	r4, r3, r2
 800282c:	f7ff fa77 	bl	8001d1e <LL_RCC_PLL_GetDivider>
 8002830:	4603      	mov	r3, r0
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	3301      	adds	r3, #1
 8002836:	fbb4 f4f3 	udiv	r4, r4, r3
 800283a:	f7ff fa65 	bl	8001d08 <LL_RCC_PLL_GetR>
 800283e:	4603      	mov	r3, r0
 8002840:	0f5b      	lsrs	r3, r3, #29
 8002842:	3301      	adds	r3, #1
 8002844:	fbb4 f3f3 	udiv	r3, r4, r3
 8002848:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800284a:	697b      	ldr	r3, [r7, #20]
}
 800284c:	4618      	mov	r0, r3
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	0800d438 	.word	0x0800d438
 8002858:	00f42400 	.word	0x00f42400
 800285c:	01e84800 	.word	0x01e84800

08002860 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b598      	push	{r3, r4, r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002864:	f7ff ff5c 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8002868:	4604      	mov	r4, r0
 800286a:	f7ff f9e6 	bl	8001c3a <LL_RCC_GetAHBPrescaler>
 800286e:	4603      	mov	r3, r0
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	4a03      	ldr	r2, [pc, #12]	@ (8002884 <HAL_RCC_GetHCLKFreq+0x24>)
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd98      	pop	{r3, r4, r7, pc}
 8002884:	0800d3d8 	.word	0x0800d3d8

08002888 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b598      	push	{r3, r4, r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800288c:	f7ff ffe8 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002890:	4604      	mov	r4, r0
 8002892:	f7ff f9ea 	bl	8001c6a <LL_RCC_GetAPB1Prescaler>
 8002896:	4603      	mov	r3, r0
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	4a03      	ldr	r2, [pc, #12]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd98      	pop	{r3, r4, r7, pc}
 80028a8:	0800d418 	.word	0x0800d418

080028ac <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b598      	push	{r3, r4, r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80028b0:	f7ff ffd6 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028b4:	4604      	mov	r4, r0
 80028b6:	f7ff f9e3 	bl	8001c80 <LL_RCC_GetAPB2Prescaler>
 80028ba:	4603      	mov	r3, r0
 80028bc:	0adb      	lsrs	r3, r3, #11
 80028be:	4a03      	ldr	r2, [pc, #12]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd98      	pop	{r3, r4, r7, pc}
 80028cc:	0800d418 	.word	0x0800d418

080028d0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d02d      	beq.n	800293c <HAL_RCC_GetClockConfig+0x6c>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02a      	beq.n	800293c <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	224f      	movs	r2, #79	@ 0x4f
 80028ea:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 5260 	and.w	r2, r3, #14336	@ 0x3800
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002920:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002924:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetClockConfig+0x78>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0207 	and.w	r2, r3, #7
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	601a      	str	r2, [r3, #0]
  }
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	58004000 	.word	0x58004000

0800294c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	4a10      	ldr	r2, [pc, #64]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002964:	f7ff f974 	bl	8001c50 <LL_RCC_GetAHB3Prescaler>
 8002968:	4603      	mov	r3, r0
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4a09      	ldr	r2, [pc, #36]	@ (80029a8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0c9c      	lsrs	r4, r3, #18
 8002988:	f7fe ff88 	bl	800189c <HAL_PWREx_GetVoltageRange>
 800298c:	4603      	mov	r3, r0
 800298e:	4619      	mov	r1, r3
 8002990:	4620      	mov	r0, r4
 8002992:	f000 f80b 	bl	80029ac <RCC_SetFlashLatency>
 8002996:	4603      	mov	r3, r0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	0800d438 	.word	0x0800d438
 80029a4:	0800d3d8 	.word	0x0800d3d8
 80029a8:	431bde83 	.word	0x431bde83

080029ac <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80029b6:	4a3a      	ldr	r2, [pc, #232]	@ (8002aa0 <RCC_SetFlashLatency+0xf4>)
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029c0:	6018      	str	r0, [r3, #0]
 80029c2:	3304      	adds	r3, #4
 80029c4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80029c6:	4a37      	ldr	r2, [pc, #220]	@ (8002aa4 <RCC_SetFlashLatency+0xf8>)
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029d0:	6018      	str	r0, [r3, #0]
 80029d2:	3304      	adds	r3, #4
 80029d4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80029d6:	4a34      	ldr	r2, [pc, #208]	@ (8002aa8 <RCC_SetFlashLatency+0xfc>)
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029ec:	d11b      	bne.n	8002a26 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029f2:	e014      	b.n	8002a1e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	3338      	adds	r3, #56	@ 0x38
 80029fa:	443b      	add	r3, r7
 80029fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d807      	bhi.n	8002a18 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	3338      	adds	r3, #56	@ 0x38
 8002a0e:	443b      	add	r3, r7
 8002a10:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a16:	e021      	b.n	8002a5c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d9e7      	bls.n	80029f4 <RCC_SetFlashLatency+0x48>
 8002a24:	e01a      	b.n	8002a5c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a2a:	e014      	b.n	8002a56 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	3338      	adds	r3, #56	@ 0x38
 8002a32:	443b      	add	r3, r7
 8002a34:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d807      	bhi.n	8002a50 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	3338      	adds	r3, #56	@ 0x38
 8002a46:	443b      	add	r3, r7
 8002a48:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a4e:	e005      	b.n	8002a5c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	3301      	adds	r3, #1
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d9e7      	bls.n	8002a2c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a5c:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <RCC_SetFlashLatency+0x100>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 0207 	bic.w	r2, r3, #7
 8002a64:	4911      	ldr	r1, [pc, #68]	@ (8002aac <RCC_SetFlashLatency+0x100>)
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a6c:	f7fe f9d6 	bl	8000e1c <HAL_GetTick>
 8002a70:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a72:	e008      	b.n	8002a86 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a74:	f7fe f9d2 	bl	8000e1c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e007      	b.n	8002a96 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <RCC_SetFlashLatency+0x100>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1ef      	bne.n	8002a74 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3738      	adds	r7, #56	@ 0x38
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	0800d280 	.word	0x0800d280
 8002aa4:	0800d288 	.word	0x0800d288
 8002aa8:	0800d290 	.word	0x0800d290
 8002aac:	58004000 	.word	0x58004000

08002ab0 <LL_RCC_LSE_IsReady>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d101      	bne.n	8002ac8 <LL_RCC_LSE_IsReady+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_RCC_LSE_IsReady+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_SetUSARTClockSource>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_SetI2SClockSource>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_SetLPUARTClockSource>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <LL_RCC_SetI2CClockSource>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_RCC_SetLPTIMClockSource>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_SetRNGClockSource>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002bd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_SetADCClockSource>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_SetRTCClockSource>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_GetRTCClockSource>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_ForceBackupDomainReset>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d058      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002cb8:	f7fe fde2 	bl	8001880 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f8ae 	bl	8000e1c <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc4:	f7fe f8aa 	bl	8000e1c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	74fb      	strb	r3, [r7, #19]
        break;
 8002cd6:	e006      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce4:	d1ee      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d13c      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002cec:	f7ff ffa7 	bl	8002c3e <LL_RCC_GetRTCClockSource>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d00f      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d06:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d08:	f7ff ffa5 	bl	8002c56 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	f7ff ffb3 	bl	8002c76 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe f87a 	bl	8000e1c <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe f876 	bl	8000e1c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	74fb      	strb	r3, [r7, #19]
            break;
 8002d42:	e004      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d44:	f7ff feb4 	bl	8002ab0 <LL_RCC_LSE_IsReady>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5b 	bl	8002c14 <LL_RCC_SetRTCClockSource>
 8002d5e:	e004      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
 8002d64:	e001      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fea9 	bl	8002ad2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe9e 	bl	8002ad2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fec0 	bl	8002b2c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fee6 	bl	8002b8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fedb 	bl	8002b8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fed0 	bl	8002b8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fea9 	bl	8002b56 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fe9e 	bl	8002b56 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fe93 	bl	8002b56 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d011      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fe5e 	bl	8002b02 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fea5 	bl	8002bc0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fea3 	bl	8002bea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eac:	d107      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002ebe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	58000400 	.word	0x58000400

08002ecc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002edc:	4904      	ldr	r1, [pc, #16]	@ (8002ef0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	58000400 	.word	0x58000400

08002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	58000400 	.word	0x58000400

08002f14 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002f20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	58000400 	.word	0x58000400

08002f34 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f3e:	619a      	str	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	58000400 	.word	0x58000400

08002f4c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d101      	bne.n	8002f60 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	58000400 	.word	0x58000400

08002f70 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d101      	bne.n	8002f84 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	58000400 	.word	0x58000400

08002f94 <LL_RCC_RF_DisableReset>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <LL_RCC_IsRFUnderReset>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc8:	d101      	bne.n	8002fce <LL_RCC_IsRFUnderReset+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_RCC_IsRFUnderReset+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <LL_EXTI_EnableIT_32_63+0x24>)
 8002fe2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002fe6:	4905      	ldr	r1, [pc, #20]	@ (8002ffc <LL_EXTI_EnableIT_32_63+0x24>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	58000800 	.word	0x58000800

08003000 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
    return status;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	e052      	b.n	80030bc <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	799b      	ldrb	r3, [r3, #6]
 800301e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SUBGHZ_Init+0x2c>
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d109      	bne.n	8003040 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fed8 	bl	8000de8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003038:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800303c:	f7ff ffcc 	bl	8002fd8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003040:	7bbb      	ldrb	r3, [r7, #14]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d126      	bne.n	8003094 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800304c:	f7ff ffa2 	bl	8002f94 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003050:	4b1c      	ldr	r3, [pc, #112]	@ (80030c4 <HAL_SUBGHZ_Init+0xc4>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	0cdb      	lsrs	r3, r3, #19
 800305e:	2264      	movs	r2, #100	@ 0x64
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	609a      	str	r2, [r3, #8]
        break;
 8003076:	e007      	b.n	8003088 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3b01      	subs	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800307e:	f7ff ff99 	bl	8002fb4 <LL_RCC_IsRFUnderReset>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003088:	f7ff ff34 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800308c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003090:	f7ff ff1c 	bl	8002ecc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003094:	f7ff ff4e 	bl	8002f34 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 faac 	bl	8003600 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	719a      	strb	r2, [r3, #6]

  return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000000 	.word	0x20000000

080030c8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	817b      	strh	r3, [r7, #10]
 80030d8:	4613      	mov	r3, r2
 80030da:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	799b      	ldrb	r3, [r3, #6]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d14a      	bne.n	800317c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	795b      	ldrb	r3, [r3, #5]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e045      	b.n	800317e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fb4c 	bl	800379c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003104:	f7ff ff06 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003108:	210d      	movs	r1, #13
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa98 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4619      	mov	r1, r3
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fa90 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa8a 	bl	8003640 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800312c:	2300      	movs	r3, #0
 800312e:	82bb      	strh	r3, [r7, #20]
 8003130:	e00a      	b.n	8003148 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003132:	8abb      	ldrh	r3, [r7, #20]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fa7f 	bl	8003640 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003142:	8abb      	ldrh	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	82bb      	strh	r3, [r7, #20]
 8003148:	8aba      	ldrh	r2, [r7, #20]
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3f0      	bcc.n	8003132 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003150:	f7ff fed0 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fb45 	bl	80037e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
 8003166:	e001      	b.n	800316c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	715a      	strb	r2, [r3, #5]

    return status;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	e000      	b.n	800317e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	461a      	mov	r2, r3
 8003192:	460b      	mov	r3, r1
 8003194:	817b      	strh	r3, [r7, #10]
 8003196:	4613      	mov	r3, r2
 8003198:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	799b      	ldrb	r3, [r3, #6]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d14a      	bne.n	800323e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	795b      	ldrb	r3, [r3, #5]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e045      	b.n	8003240 <HAL_SUBGHZ_ReadRegisters+0xba>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 faee 	bl	800379c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80031c0:	f7ff fea8 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80031c4:	211d      	movs	r1, #29
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fa3a 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80031cc:	897b      	ldrh	r3, [r7, #10]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fa32 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80031dc:	897b      	ldrh	r3, [r7, #10]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4619      	mov	r1, r3
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa2c 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80031e8:	2100      	movs	r1, #0
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fa28 	bl	8003640 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	82fb      	strh	r3, [r7, #22]
 80031f4:	e009      	b.n	800320a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fa77 	bl	80036ec <SUBGHZSPI_Receive>
      pData++;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	3301      	adds	r3, #1
 8003202:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003204:	8afb      	ldrh	r3, [r7, #22]
 8003206:	3301      	adds	r3, #1
 8003208:	82fb      	strh	r3, [r7, #22]
 800320a:	8afa      	ldrh	r2, [r7, #22]
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d3f1      	bcc.n	80031f6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003212:	f7ff fe6f 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fae4 	bl	80037e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e001      	b.n	800322e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	715a      	strb	r2, [r3, #5]

    return status;
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	e000      	b.n	8003240 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	460b      	mov	r3, r1
 8003256:	72fb      	strb	r3, [r7, #11]
 8003258:	4613      	mov	r3, r2
 800325a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	799b      	ldrb	r3, [r3, #6]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d14a      	bne.n	80032fc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	795b      	ldrb	r3, [r3, #5]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800326e:	2302      	movs	r3, #2
 8003270:	e045      	b.n	80032fe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa8f 	bl	800379c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	2b84      	cmp	r3, #132	@ 0x84
 8003282:	d002      	beq.n	800328a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	2b94      	cmp	r3, #148	@ 0x94
 8003288:	d103      	bne.n	8003292 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	711a      	strb	r2, [r3, #4]
 8003290:	e002      	b.n	8003298 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003298:	f7ff fe3c 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800329c:	7afb      	ldrb	r3, [r7, #11]
 800329e:	4619      	mov	r1, r3
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f9cd 	bl	8003640 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	82bb      	strh	r3, [r7, #20]
 80032aa:	e00a      	b.n	80032c2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80032ac:	8abb      	ldrh	r3, [r7, #20]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f9c2 	bl	8003640 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80032bc:	8abb      	ldrh	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	82bb      	strh	r3, [r7, #20]
 80032c2:	8aba      	ldrh	r2, [r7, #20]
 80032c4:	893b      	ldrh	r3, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3f0      	bcc.n	80032ac <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80032ca:	f7ff fe13 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	2b84      	cmp	r3, #132	@ 0x84
 80032d2:	d002      	beq.n	80032da <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fa85 	bl	80037e4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
 80032e6:	e001      	b.n	80032ec <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	715a      	strb	r2, [r3, #5]

    return status;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	e000      	b.n	80032fe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b088      	sub	sp, #32
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	461a      	mov	r2, r3
 8003312:	460b      	mov	r3, r1
 8003314:	72fb      	strb	r3, [r7, #11]
 8003316:	4613      	mov	r3, r2
 8003318:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	799b      	ldrb	r3, [r3, #6]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d13d      	bne.n	80033a4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	795b      	ldrb	r3, [r3, #5]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003330:	2302      	movs	r3, #2
 8003332:	e038      	b.n	80033a6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa2e 	bl	800379c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003340:	f7ff fde8 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	4619      	mov	r1, r3
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f979 	bl	8003640 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800334e:	2100      	movs	r1, #0
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f975 	bl	8003640 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	82fb      	strh	r3, [r7, #22]
 800335a:	e009      	b.n	8003370 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800335c:	69b9      	ldr	r1, [r7, #24]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f9c4 	bl	80036ec <SUBGHZSPI_Receive>
      pData++;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	3301      	adds	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800336a:	8afb      	ldrh	r3, [r7, #22]
 800336c:	3301      	adds	r3, #1
 800336e:	82fb      	strh	r3, [r7, #22]
 8003370:	8afa      	ldrh	r2, [r7, #22]
 8003372:	893b      	ldrh	r3, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d3f1      	bcc.n	800335c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003378:	f7ff fdbc 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fa31 	bl	80037e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e001      	b.n	8003394 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	715a      	strb	r2, [r3, #5]

    return status;
 80033a0:	7ffb      	ldrb	r3, [r7, #31]
 80033a2:	e000      	b.n	80033a6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	461a      	mov	r2, r3
 80033ba:	460b      	mov	r3, r1
 80033bc:	72fb      	strb	r3, [r7, #11]
 80033be:	4613      	mov	r3, r2
 80033c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	799b      	ldrb	r3, [r3, #6]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d13e      	bne.n	800344a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	795b      	ldrb	r3, [r3, #5]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e039      	b.n	800344c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f9dc 	bl	800379c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80033e4:	f7ff fd96 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80033e8:	210e      	movs	r1, #14
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f928 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	4619      	mov	r1, r3
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f923 	bl	8003640 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	82bb      	strh	r3, [r7, #20]
 80033fe:	e00a      	b.n	8003416 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003400:	8abb      	ldrh	r3, [r7, #20]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f918 	bl	8003640 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003410:	8abb      	ldrh	r3, [r7, #20]
 8003412:	3301      	adds	r3, #1
 8003414:	82bb      	strh	r3, [r7, #20]
 8003416:	8aba      	ldrh	r2, [r7, #20]
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d3f0      	bcc.n	8003400 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800341e:	f7ff fd69 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f9de 	bl	80037e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
 8003434:	e001      	b.n	800343a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	715a      	strb	r2, [r3, #5]

    return status;
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	e000      	b.n	800344c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	460b      	mov	r3, r1
 8003462:	72fb      	strb	r3, [r7, #11]
 8003464:	4613      	mov	r3, r2
 8003466:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	799b      	ldrb	r3, [r3, #6]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d141      	bne.n	80034fa <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	795b      	ldrb	r3, [r3, #5]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800347e:	2302      	movs	r3, #2
 8003480:	e03c      	b.n	80034fc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f987 	bl	800379c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800348e:	f7ff fd41 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003492:	211e      	movs	r1, #30
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f8d3 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	4619      	mov	r1, r3
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8ce 	bl	8003640 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80034a4:	2100      	movs	r1, #0
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8ca 	bl	8003640 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	82fb      	strh	r3, [r7, #22]
 80034b0:	e009      	b.n	80034c6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f919 	bl	80036ec <SUBGHZSPI_Receive>
      pData++;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	3301      	adds	r3, #1
 80034be:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80034c0:	8afb      	ldrh	r3, [r7, #22]
 80034c2:	3301      	adds	r3, #1
 80034c4:	82fb      	strh	r3, [r7, #22]
 80034c6:	8afa      	ldrh	r2, [r7, #22]
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3f1      	bcc.n	80034b2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034ce:	f7ff fd11 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f986 	bl	80037e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e001      	b.n	80034ea <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	715a      	strb	r2, [r3, #5]

    return status;
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	e000      	b.n	80034fc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800350c:	2300      	movs	r3, #0
 800350e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003510:	f107 020c 	add.w	r2, r7, #12
 8003514:	2302      	movs	r3, #2
 8003516:	2112      	movs	r1, #18
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fef4 	bl	8003306 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800351e:	7b3b      	ldrb	r3, [r7, #12]
 8003520:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	b21a      	sxth	r2, r3
 8003528:	7b7b      	ldrb	r3, [r7, #13]
 800352a:	b21b      	sxth	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b21b      	sxth	r3, r3
 8003530:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003532:	f107 020c 	add.w	r2, r7, #12
 8003536:	2302      	movs	r3, #2
 8003538:	2102      	movs	r1, #2
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fe84 	bl	8003248 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003540:	89fb      	ldrh	r3, [r7, #14]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f007 fd22 	bl	800af94 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f007 fd28 	bl	800afb0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f007 fd78 	bl	800b060 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f007 fd7e 	bl	800b07c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003580:	89fb      	ldrh	r3, [r7, #14]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f007 fd84 	bl	800b098 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003590:	89fb      	ldrh	r3, [r7, #14]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f007 fd52 	bl	800b044 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f007 fd0e 	bl	800afcc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80035b0:	89fb      	ldrh	r3, [r7, #14]
 80035b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80035c4:	2101      	movs	r1, #1
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f007 fd0e 	bl	800afe8 <HAL_SUBGHZ_CADStatusCallback>
 80035cc:	e003      	b.n	80035d6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80035ce:	2100      	movs	r1, #0
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f007 fd09 	bl	800afe8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f007 fd1f 	bl	800b024 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80035e6:	89fb      	ldrh	r3, [r7, #14]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f007 fd5f 	bl	800b0b4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <SUBGHZSPI_Init+0x3c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0b      	ldr	r2, [pc, #44]	@ (800363c <SUBGHZSPI_Init+0x3c>)
 800360e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003612:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003614:	4a09      	ldr	r2, [pc, #36]	@ (800363c <SUBGHZSPI_Init+0x3c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800361c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <SUBGHZSPI_Init+0x3c>)
 8003620:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003624:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003626:	4b05      	ldr	r3, [pc, #20]	@ (800363c <SUBGHZSPI_Init+0x3c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a04      	ldr	r2, [pc, #16]	@ (800363c <SUBGHZSPI_Init+0x3c>)
 800362c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003630:	6013      	str	r3, [r2, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	58010000 	.word	0x58010000

08003640 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003650:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <SUBGHZSPI_Transmit+0xa0>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	0cdb      	lsrs	r3, r3, #19
 800365e:	2264      	movs	r2, #100	@ 0x64
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	609a      	str	r2, [r3, #8]
      break;
 8003676:	e008      	b.n	800368a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3b01      	subs	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800367e:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <SUBGHZSPI_Transmit+0xa4>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d1ed      	bne.n	8003666 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800368a:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <SUBGHZSPI_Transmit+0xa8>)
 800368c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <SUBGHZSPI_Transmit+0xa0>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	0cdb      	lsrs	r3, r3, #19
 80036a2:	2264      	movs	r2, #100	@ 0x64
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	609a      	str	r2, [r3, #8]
      break;
 80036ba:	e008      	b.n	80036ce <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80036c2:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <SUBGHZSPI_Transmit+0xa4>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d1ed      	bne.n	80036aa <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <SUBGHZSPI_Transmit+0xa4>)
 80036d0:	68db      	ldr	r3, [r3, #12]

  return status;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000
 80036e4:	58010000 	.word	0x58010000
 80036e8:	5801000c 	.word	0x5801000c

080036ec <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80036fa:	4b25      	ldr	r3, [pc, #148]	@ (8003790 <SUBGHZSPI_Receive+0xa4>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	0cdb      	lsrs	r3, r3, #19
 8003708:	2264      	movs	r2, #100	@ 0x64
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e008      	b.n	8003734 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003728:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <SUBGHZSPI_Receive+0xa8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d1ed      	bne.n	8003710 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <SUBGHZSPI_Receive+0xac>)
 8003736:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	22ff      	movs	r2, #255	@ 0xff
 800373c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800373e:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <SUBGHZSPI_Receive+0xa4>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	0cdb      	lsrs	r3, r3, #19
 800374c:	2264      	movs	r2, #100	@ 0x64
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	609a      	str	r2, [r3, #8]
      break;
 8003764:	e008      	b.n	8003778 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3b01      	subs	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800376c:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <SUBGHZSPI_Receive+0xa8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d1ed      	bne.n	8003754 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <SUBGHZSPI_Receive+0xa8>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	701a      	strb	r2, [r3, #0]

  return status;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
}
 8003784:	4618      	mov	r0, r3
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000
 8003794:	58010000 	.word	0x58010000
 8003798:	5801000c 	.word	0x5801000c

0800379c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	791b      	ldrb	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d111      	bne.n	80037d0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <SUBGHZ_CheckDeviceReady+0x44>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80037bc:	f7ff fbaa 	bl	8002f14 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f9      	bne.n	80037c0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80037cc:	f7ff fb92 	bl	8002ef4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f807 	bl	80037e4 <SUBGHZ_WaitOnBusy>
 80037d6:	4603      	mov	r3, r0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000000 	.word	0x20000000

080037e4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80037f0:	4b12      	ldr	r3, [pc, #72]	@ (800383c <SUBGHZ_WaitOnBusy+0x58>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	0d1b      	lsrs	r3, r3, #20
 80037fe:	2264      	movs	r2, #100	@ 0x64
 8003800:	fb02 f303 	mul.w	r3, r2, r3
 8003804:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003806:	f7ff fbb3 	bl	8002f70 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800380a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	609a      	str	r2, [r3, #8]
      break;
 800381c:	e009      	b.n	8003832 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3b01      	subs	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003824:	f7ff fb92 	bl	8002f4c <LL_PWR_IsActiveFlag_RFBUSYS>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	2b01      	cmp	r3, #1
 8003830:	d0e9      	beq.n	8003806 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000000 	.word	0x20000000

08003840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e049      	b.n	80038e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f841 	bl	80038ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 f9ce 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d001      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e036      	b.n	8003986 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	@ (8003990 <HAL_TIM_Base_Start_IT+0x90>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x44>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003942:	d115      	bne.n	8003970 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_TIM_Base_Start_IT+0x94>)
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d015      	beq.n	8003982 <HAL_TIM_Base_Start_IT+0x82>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800395c:	d011      	beq.n	8003982 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	e008      	b.n	8003982 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e000      	b.n	8003984 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	40012c00 	.word	0x40012c00
 8003994:	00010007 	.word	0x00010007

08003998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d122      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d11b      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0202 	mvn.w	r2, #2
 80039c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f904 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8f7 	bl	8003bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f906 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d122      	bne.n	8003a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0204 	mvn.w	r2, #4
 8003a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8da 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8cd 	bl	8003bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8dc 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0208 	mvn.w	r2, #8
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2204      	movs	r2, #4
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8b0 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8a3 	bl	8003bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8b2 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0210 	mvn.w	r2, #16
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f886 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f879 	bl	8003bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f888 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0201 	mvn.w	r2, #1
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd f82c 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	2b80      	cmp	r3, #128	@ 0x80
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b34:	2b80      	cmp	r3, #128	@ 0x80
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8d7 	bl	8003cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b56:	d10e      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d107      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8c9 	bl	8003d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d10e      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d107      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f835 	bl	8003c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d10e      	bne.n	8003bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d107      	bne.n	8003bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0220 	mvn.w	r2, #32
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f88b 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
	...

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a29      	ldr	r2, [pc, #164]	@ (8003cd8 <TIM_Base_SetConfig+0xb8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0x20>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d108      	bne.n	8003c52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <TIM_Base_SetConfig+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_Base_SetConfig+0x52>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c60:	d007      	beq.n	8003c72 <TIM_Base_SetConfig+0x52>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	@ (8003cdc <TIM_Base_SetConfig+0xbc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_Base_SetConfig+0x52>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce0 <TIM_Base_SetConfig+0xc0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd8 <TIM_Base_SetConfig+0xb8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0xa0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cdc <TIM_Base_SetConfig+0xbc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0xa0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <TIM_Base_SetConfig+0xc0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d103      	bne.n	8003cc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	615a      	str	r2, [r3, #20]
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <LL_RCC_GetUSARTClockSource>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	401a      	ands	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	4313      	orrs	r3, r2
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_GetLPUARTClockSource>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4013      	ands	r3, r2
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e042      	b.n	8003df4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fd f99d 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2224      	movs	r2, #36	@ 0x24
 8003d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fcb8 	bl	8004714 <UART_SetConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e022      	b.n	8003df4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 ff20 	bl	8004bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 ffa6 	bl	8004d3e <UART_CheckIdleState>
 8003df2:	4603      	mov	r3, r0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	@ 0x28
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d173      	bne.n	8003efe <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_UART_Transmit+0x26>
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06c      	b.n	8003f00 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2221      	movs	r2, #33	@ 0x21
 8003e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e36:	f7fc fff1 	bl	8000e1c <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	88fa      	ldrh	r2, [r7, #6]
 8003e40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e54:	d108      	bne.n	8003e68 <HAL_UART_Transmit+0x6c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e003      	b.n	8003e70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e70:	e02c      	b.n	8003ecc <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2180      	movs	r1, #128	@ 0x80
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 ffac 	bl	8004dda <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e039      	b.n	8003f00 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	e007      	b.n	8003eba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1cc      	bne.n	8003e72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2140      	movs	r1, #64	@ 0x40
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 ff79 	bl	8004dda <UART_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e006      	b.n	8003f00 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	@ 0x28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	f040 80b1 	bne.w	8004086 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Receive+0x28>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a9      	b.n	8004088 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2222      	movs	r2, #34	@ 0x22
 8003f40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4a:	f7fc ff67 	bl	8000e1c <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f68:	d10e      	bne.n	8003f88 <HAL_UART_Receive+0x80>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_UART_Receive+0x76>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f7c:	e02d      	b.n	8003fda <HAL_UART_Receive+0xd2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	@ 0xff
 8003f82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f86:	e028      	b.n	8003fda <HAL_UART_Receive+0xd2>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10d      	bne.n	8003fac <HAL_UART_Receive+0xa4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <HAL_UART_Receive+0x9a>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	22ff      	movs	r2, #255	@ 0xff
 8003f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fa0:	e01b      	b.n	8003fda <HAL_UART_Receive+0xd2>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	227f      	movs	r2, #127	@ 0x7f
 8003fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003faa:	e016      	b.n	8003fda <HAL_UART_Receive+0xd2>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_UART_Receive+0xca>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_UART_Receive+0xc0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	227f      	movs	r2, #127	@ 0x7f
 8003fc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fc6:	e008      	b.n	8003fda <HAL_UART_Receive+0xd2>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	223f      	movs	r2, #63	@ 0x3f
 8003fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fd0:	e003      	b.n	8003fda <HAL_UART_Receive+0xd2>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003fe0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fea:	d108      	bne.n	8003ffe <HAL_UART_Receive+0xf6>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	e003      	b.n	8004006 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004006:	e032      	b.n	800406e <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	2120      	movs	r1, #32
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fee1 	bl	8004dda <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e032      	b.n	8004088 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10c      	bne.n	8004042 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	b29a      	uxth	r2, r3
 8004030:	8a7b      	ldrh	r3, [r7, #18]
 8004032:	4013      	ands	r3, r2
 8004034:	b29a      	uxth	r2, r3
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3302      	adds	r3, #2
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	e00c      	b.n	800405c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	b2da      	uxtb	r2, r3
 800404a:	8a7b      	ldrh	r3, [r7, #18]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	4013      	ands	r3, r2
 8004050:	b2da      	uxtb	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1c6      	bne.n	8004008 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b0ba      	sub	sp, #232	@ 0xe8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040be:	4013      	ands	r3, r2
 80040c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11b      	bne.n	8004104 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 82e3 	beq.w	80046c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
      }
      return;
 8004102:	e2dd      	b.n	80046c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8123 	beq.w	8004354 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800410e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004112:	4b8d      	ldr	r3, [pc, #564]	@ (8004348 <HAL_UART_IRQHandler+0x2b8>)
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800411a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800411e:	4b8b      	ldr	r3, [pc, #556]	@ (800434c <HAL_UART_IRQHandler+0x2bc>)
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8116 	beq.w	8004354 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d011      	beq.n	8004158 <HAL_UART_IRQHandler+0xc8>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d011      	beq.n	8004188 <HAL_UART_IRQHandler+0xf8>
 8004164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2202      	movs	r2, #2
 8004176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d011      	beq.n	80041b8 <HAL_UART_IRQHandler+0x128>
 8004194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2204      	movs	r2, #4
 80041a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	f043 0202 	orr.w	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d017      	beq.n	80041f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80041d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80041d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004348 <HAL_UART_IRQHandler+0x2b8>)
 80041d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2208      	movs	r2, #8
 80041e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d012      	beq.n	8004226 <HAL_UART_IRQHandler+0x196>
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00c      	beq.n	8004226 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8249 	beq.w	80046c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d013      	beq.n	8004266 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800424a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d005      	beq.n	800428a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800427e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004282:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004286:	2b00      	cmp	r3, #0
 8004288:	d054      	beq.n	8004334 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fe6d 	bl	8004f6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d146      	bne.n	800432c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1d9      	bne.n	800429e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042fa:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <HAL_UART_IRQHandler+0x2c0>)
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd f8c0 	bl	800148a <HAL_DMA_Abort_IT>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d019      	beq.n	8004344 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800431e:	4610      	mov	r0, r2
 8004320:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004322:	e00f      	b.n	8004344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f9e0 	bl	80046ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432a:	e00b      	b.n	8004344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f9dc 	bl	80046ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004332:	e007      	b.n	8004344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f9d8 	bl	80046ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004342:	e1bf      	b.n	80046c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	bf00      	nop
    return;
 8004346:	e1bd      	b.n	80046c4 <HAL_UART_IRQHandler+0x634>
 8004348:	10000001 	.word	0x10000001
 800434c:	04000120 	.word	0x04000120
 8004350:	08005035 	.word	0x08005035

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 8153 	bne.w	8004604 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 814c 	beq.w	8004604 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8145 	beq.w	8004604 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	f040 80bb 	bne.w	8004508 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 818f 	beq.w	80046c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043b4:	429a      	cmp	r2, r3
 80043b6:	f080 8187 	bcs.w	80046c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 8087 	bne.w	80044e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004406:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800440e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800441a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1da      	bne.n	80043d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004446:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800444a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800444e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e1      	bne.n	8004422 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800446e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3308      	adds	r3, #8
 800447e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004482:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004484:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004488:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e3      	bne.n	800445e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b4:	f023 0310 	bic.w	r3, r3, #16
 80044b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e4      	bne.n	80044a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fc ff74 	bl	80013ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8fb 	bl	80046fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004506:	e0df      	b.n	80046c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004514:	b29b      	uxth	r3, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80d1 	beq.w	80046cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800452a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80cc 	beq.w	80046cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004556:	647b      	str	r3, [r7, #68]	@ 0x44
 8004558:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800455c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e4      	bne.n	8004534 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	623b      	str	r3, [r7, #32]
   return(result);
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004592:	633a      	str	r2, [r7, #48]	@ 0x30
 8004594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e1      	bne.n	800456a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0310 	bic.w	r3, r3, #16
 80045ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	617b      	str	r3, [r7, #20]
   return(result);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e4      	bne.n	80045ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f87d 	bl	80046fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004602:	e063      	b.n	80046cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <HAL_UART_IRQHandler+0x59e>
 8004610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fd45 	bl	80050b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800462c:	e051      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03a      	beq.n	80046d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
    }
    return;
 8004662:	e035      	b.n	80046d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_UART_IRQHandler+0x5f4>
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fcef 	bl	8005060 <UART_EndTransmit_IT>
    return;
 8004682:	e026      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004688:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_UART_IRQHandler+0x614>
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fd1c 	bl	80050da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046a2:	e016      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <HAL_UART_IRQHandler+0x642>
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da0c      	bge.n	80046d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fd05 	bl	80050c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046be:	e008      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
      return;
 80046c0:	bf00      	nop
 80046c2:	e006      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
    return;
 80046c4:	bf00      	nop
 80046c6:	e004      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
      return;
 80046c8:	bf00      	nop
 80046ca:	e002      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
      return;
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <HAL_UART_IRQHandler+0x642>
    return;
 80046d0:	bf00      	nop
  }
}
 80046d2:	37e8      	adds	r7, #232	@ 0xe8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
	...

08004714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b08c      	sub	sp, #48	@ 0x30
 800471a:	af00      	add	r7, sp, #0
 800471c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	431a      	orrs	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	431a      	orrs	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4313      	orrs	r3, r2
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b94      	ldr	r3, [pc, #592]	@ (8004994 <UART_SetConfig+0x280>)
 8004744:	4013      	ands	r3, r2
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800474c:	430b      	orrs	r3, r1
 800474e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a89      	ldr	r2, [pc, #548]	@ (8004998 <UART_SetConfig+0x284>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800477c:	4313      	orrs	r3, r2
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800478a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004794:	430b      	orrs	r3, r1
 8004796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f023 010f 	bic.w	r1, r3, #15
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7a      	ldr	r2, [pc, #488]	@ (800499c <UART_SetConfig+0x288>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d127      	bne.n	8004808 <UART_SetConfig+0xf4>
 80047b8:	2003      	movs	r0, #3
 80047ba:	f7ff faae 	bl	8003d1a <LL_RCC_GetUSARTClockSource>
 80047be:	4603      	mov	r3, r0
 80047c0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d81b      	bhi.n	8004800 <UART_SetConfig+0xec>
 80047c8:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0xbc>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	080047f1 	.word	0x080047f1
 80047d8:	080047e9 	.word	0x080047e9
 80047dc:	080047f9 	.word	0x080047f9
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e6:	e080      	b.n	80048ea <UART_SetConfig+0x1d6>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ee:	e07c      	b.n	80048ea <UART_SetConfig+0x1d6>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f6:	e078      	b.n	80048ea <UART_SetConfig+0x1d6>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047fe:	e074      	b.n	80048ea <UART_SetConfig+0x1d6>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004806:	e070      	b.n	80048ea <UART_SetConfig+0x1d6>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a64      	ldr	r2, [pc, #400]	@ (80049a0 <UART_SetConfig+0x28c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d138      	bne.n	8004884 <UART_SetConfig+0x170>
 8004812:	200c      	movs	r0, #12
 8004814:	f7ff fa81 	bl	8003d1a <LL_RCC_GetUSARTClockSource>
 8004818:	4603      	mov	r3, r0
 800481a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d82c      	bhi.n	800487c <UART_SetConfig+0x168>
 8004822:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <UART_SetConfig+0x114>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	0800485d 	.word	0x0800485d
 800482c:	0800487d 	.word	0x0800487d
 8004830:	0800487d 	.word	0x0800487d
 8004834:	0800487d 	.word	0x0800487d
 8004838:	0800486d 	.word	0x0800486d
 800483c:	0800487d 	.word	0x0800487d
 8004840:	0800487d 	.word	0x0800487d
 8004844:	0800487d 	.word	0x0800487d
 8004848:	08004865 	.word	0x08004865
 800484c:	0800487d 	.word	0x0800487d
 8004850:	0800487d 	.word	0x0800487d
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004875 	.word	0x08004875
 800485c:	2300      	movs	r3, #0
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004862:	e042      	b.n	80048ea <UART_SetConfig+0x1d6>
 8004864:	2302      	movs	r3, #2
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486a:	e03e      	b.n	80048ea <UART_SetConfig+0x1d6>
 800486c:	2304      	movs	r3, #4
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004872:	e03a      	b.n	80048ea <UART_SetConfig+0x1d6>
 8004874:	2308      	movs	r3, #8
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487a:	e036      	b.n	80048ea <UART_SetConfig+0x1d6>
 800487c:	2310      	movs	r3, #16
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004882:	e032      	b.n	80048ea <UART_SetConfig+0x1d6>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a43      	ldr	r2, [pc, #268]	@ (8004998 <UART_SetConfig+0x284>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d12a      	bne.n	80048e4 <UART_SetConfig+0x1d0>
 800488e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004892:	f7ff fa54 	bl	8003d3e <LL_RCC_GetLPUARTClockSource>
 8004896:	4603      	mov	r3, r0
 8004898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800489c:	d01a      	beq.n	80048d4 <UART_SetConfig+0x1c0>
 800489e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048a2:	d81b      	bhi.n	80048dc <UART_SetConfig+0x1c8>
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a8:	d00c      	beq.n	80048c4 <UART_SetConfig+0x1b0>
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ae:	d815      	bhi.n	80048dc <UART_SetConfig+0x1c8>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <UART_SetConfig+0x1a8>
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b8:	d008      	beq.n	80048cc <UART_SetConfig+0x1b8>
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x1c8>
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e012      	b.n	80048ea <UART_SetConfig+0x1d6>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e00e      	b.n	80048ea <UART_SetConfig+0x1d6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e00a      	b.n	80048ea <UART_SetConfig+0x1d6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e006      	b.n	80048ea <UART_SetConfig+0x1d6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e2:	e002      	b.n	80048ea <UART_SetConfig+0x1d6>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004998 <UART_SetConfig+0x284>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f040 80a4 	bne.w	8004a3e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d823      	bhi.n	8004946 <UART_SetConfig+0x232>
 80048fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004904 <UART_SetConfig+0x1f0>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004929 	.word	0x08004929
 8004908:	08004947 	.word	0x08004947
 800490c:	08004931 	.word	0x08004931
 8004910:	08004947 	.word	0x08004947
 8004914:	08004937 	.word	0x08004937
 8004918:	08004947 	.word	0x08004947
 800491c:	08004947 	.word	0x08004947
 8004920:	08004947 	.word	0x08004947
 8004924:	0800493f 	.word	0x0800493f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fd ffae 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800492e:	e010      	b.n	8004952 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004930:	4b1c      	ldr	r3, [pc, #112]	@ (80049a4 <UART_SetConfig+0x290>)
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004934:	e00d      	b.n	8004952 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004936:	f7fd fef3 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 800493a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800493c:	e009      	b.n	8004952 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004944:	e005      	b.n	8004952 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8137 	beq.w	8004bc8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <UART_SetConfig+0x294>)
 8004960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004964:	461a      	mov	r2, r3
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	fbb3 f3f2 	udiv	r3, r3, r2
 800496c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	429a      	cmp	r2, r3
 800497c:	d305      	bcc.n	800498a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	429a      	cmp	r2, r3
 8004988:	d910      	bls.n	80049ac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004990:	e11a      	b.n	8004bc8 <UART_SetConfig+0x4b4>
 8004992:	bf00      	nop
 8004994:	cfff69f3 	.word	0xcfff69f3
 8004998:	40008000 	.word	0x40008000
 800499c:	40013800 	.word	0x40013800
 80049a0:	40004400 	.word	0x40004400
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	0800d4a4 	.word	0x0800d4a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	2200      	movs	r2, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	60fa      	str	r2, [r7, #12]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	4a8e      	ldr	r2, [pc, #568]	@ (8004bf4 <UART_SetConfig+0x4e0>)
 80049ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2200      	movs	r2, #0
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ce:	f7fb fc2f 	bl	8000230 <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4610      	mov	r0, r2
 80049d8:	4619      	mov	r1, r3
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	020b      	lsls	r3, r1, #8
 80049e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049e8:	0202      	lsls	r2, r0, #8
 80049ea:	6979      	ldr	r1, [r7, #20]
 80049ec:	6849      	ldr	r1, [r1, #4]
 80049ee:	0849      	lsrs	r1, r1, #1
 80049f0:	2000      	movs	r0, #0
 80049f2:	460c      	mov	r4, r1
 80049f4:	4605      	mov	r5, r0
 80049f6:	eb12 0804 	adds.w	r8, r2, r4
 80049fa:	eb43 0905 	adc.w	r9, r3, r5
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	469a      	mov	sl, r3
 8004a06:	4693      	mov	fp, r2
 8004a08:	4652      	mov	r2, sl
 8004a0a:	465b      	mov	r3, fp
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4649      	mov	r1, r9
 8004a10:	f7fb fc0e 	bl	8000230 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4613      	mov	r3, r2
 8004a1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a22:	d308      	bcc.n	8004a36 <UART_SetConfig+0x322>
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a2a:	d204      	bcs.n	8004a36 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	60da      	str	r2, [r3, #12]
 8004a34:	e0c8      	b.n	8004bc8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a3c:	e0c4      	b.n	8004bc8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a46:	d167      	bne.n	8004b18 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004a48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d828      	bhi.n	8004aa2 <UART_SetConfig+0x38e>
 8004a50:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0x344>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004aa3 	.word	0x08004aa3
 8004a68:	08004a93 	.word	0x08004a93
 8004a6c:	08004aa3 	.word	0x08004aa3
 8004a70:	08004aa3 	.word	0x08004aa3
 8004a74:	08004aa3 	.word	0x08004aa3
 8004a78:	08004a9b 	.word	0x08004a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fd ff04 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a82:	e014      	b.n	8004aae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a84:	f7fd ff12 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a8a:	e010      	b.n	8004aae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf8 <UART_SetConfig+0x4e4>)
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a90:	e00d      	b.n	8004aae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a92:	f7fd fe45 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8004a96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a98:	e009      	b.n	8004aae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aa0:	e005      	b.n	8004aae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8089 	beq.w	8004bc8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	4a4e      	ldr	r2, [pc, #312]	@ (8004bf4 <UART_SetConfig+0x4e0>)
 8004abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac8:	005a      	lsls	r2, r3, #1
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	441a      	add	r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d916      	bls.n	8004b10 <UART_SetConfig+0x3fc>
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae8:	d212      	bcs.n	8004b10 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f023 030f 	bic.w	r3, r3, #15
 8004af2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	8bfb      	ldrh	r3, [r7, #30]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	8bfa      	ldrh	r2, [r7, #30]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	e05b      	b.n	8004bc8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b16:	e057      	b.n	8004bc8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d828      	bhi.n	8004b72 <UART_SetConfig+0x45e>
 8004b20:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0x414>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	08004b73 	.word	0x08004b73
 8004b38:	08004b63 	.word	0x08004b63
 8004b3c:	08004b73 	.word	0x08004b73
 8004b40:	08004b73 	.word	0x08004b73
 8004b44:	08004b73 	.word	0x08004b73
 8004b48:	08004b6b 	.word	0x08004b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fd fe9c 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8004b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b52:	e014      	b.n	8004b7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b54:	f7fd feaa 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8004b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b5a:	e010      	b.n	8004b7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b5c:	4b26      	ldr	r3, [pc, #152]	@ (8004bf8 <UART_SetConfig+0x4e4>)
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b60:	e00d      	b.n	8004b7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b62:	f7fd fddd 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8004b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b68:	e009      	b.n	8004b7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b70:	e005      	b.n	8004b7e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b7c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d021      	beq.n	8004bc8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf4 <UART_SetConfig+0x4e0>)
 8004b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	441a      	add	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d909      	bls.n	8004bc2 <UART_SetConfig+0x4ae>
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb4:	d205      	bcs.n	8004bc2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
 8004bc0:	e002      	b.n	8004bc8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004be4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3730      	adds	r7, #48	@ 0x30
 8004bec:	46bd      	mov	sp, r7
 8004bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	0800d4a4 	.word	0x0800d4a4
 8004bf8:	00f42400 	.word	0x00f42400

08004bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cfa:	d10a      	bne.n	8004d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af02      	add	r7, sp, #8
 8004d44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d4e:	f7fc f865 	bl	8000e1c <HAL_GetTick>
 8004d52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d10e      	bne.n	8004d80 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f832 	bl	8004dda <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e028      	b.n	8004dd2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d10e      	bne.n	8004dac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f81c 	bl	8004dda <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e012      	b.n	8004dd2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b09c      	sub	sp, #112	@ 0x70
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	4613      	mov	r3, r2
 8004de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	e0a9      	b.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	f000 80a5 	beq.w	8004f40 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fc f811 	bl	8000e1c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d140      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e1c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e2c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e6      	bne.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3308      	adds	r3, #8
 8004e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e50:	f023 0301 	bic.w	r3, r3, #1
 8004e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e5e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e60:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e5      	bne.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e069      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d051      	beq.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eaa:	d149      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004eb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f08:	623a      	str	r2, [r7, #32]
 8004f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69f9      	ldr	r1, [r7, #28]
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e010      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	f43f af46 	beq.w	8004dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3770      	adds	r7, #112	@ 0x70
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b095      	sub	sp, #84	@ 0x54
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e3      	bne.n	8004fa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d118      	bne.n	8005016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	613b      	str	r3, [r7, #16]
   return(result);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800502a:	bf00      	nop
 800502c:	3754      	adds	r7, #84	@ 0x54
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fb49 	bl	80046ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	60bb      	str	r3, [r7, #8]
   return(result);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6979      	ldr	r1, [r7, #20]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	613b      	str	r3, [r7, #16]
   return(result);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e6      	bne.n	8005068 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff fb15 	bl	80046d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ae:	bf00      	nop
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_UARTEx_EnableFifoMode+0x16>
 80050fe:	2302      	movs	r3, #2
 8005100:	e02b      	b.n	800515a <HAL_UARTEx_EnableFifoMode+0x6e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2224      	movs	r2, #36	@ 0x24
 800510e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005138:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f88a 	bl	800525c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005176:	2302      	movs	r3, #2
 8005178:	e02d      	b.n	80051d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2224      	movs	r2, #36	@ 0x24
 8005186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f850 	bl	800525c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e02d      	b.n	8005252 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2224      	movs	r2, #36	@ 0x24
 8005202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f812 	bl	800525c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005268:	2b00      	cmp	r3, #0
 800526a:	d108      	bne.n	800527e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800527c:	e031      	b.n	80052e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800527e:	2308      	movs	r3, #8
 8005280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005282:	2308      	movs	r3, #8
 8005284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	0e5b      	lsrs	r3, r3, #25
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	0f5b      	lsrs	r3, r3, #29
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	7b3a      	ldrb	r2, [r7, #12]
 80052aa:	4910      	ldr	r1, [pc, #64]	@ (80052ec <UARTEx_SetNbDataToProcess+0x90>)
 80052ac:	5c8a      	ldrb	r2, [r1, r2]
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052b2:	7b3a      	ldrb	r2, [r7, #12]
 80052b4:	490e      	ldr	r1, [pc, #56]	@ (80052f0 <UARTEx_SetNbDataToProcess+0x94>)
 80052b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	7b7a      	ldrb	r2, [r7, #13]
 80052c8:	4908      	ldr	r1, [pc, #32]	@ (80052ec <UARTEx_SetNbDataToProcess+0x90>)
 80052ca:	5c8a      	ldrb	r2, [r1, r2]
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052d0:	7b7a      	ldrb	r2, [r7, #13]
 80052d2:	4907      	ldr	r1, [pc, #28]	@ (80052f0 <UARTEx_SetNbDataToProcess+0x94>)
 80052d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	0800d4bc 	.word	0x0800d4bc
 80052f0:	0800d4c4 	.word	0x0800d4c4

080052f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005306:	f3ef 8305 	mrs	r3, IPSR
 800530a:	60bb      	str	r3, [r7, #8]
  return(result);
 800530c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005312:	f3ef 8310 	mrs	r3, PRIMASK
 8005316:	607b      	str	r3, [r7, #4]
  return(result);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800531e:	f3ef 8311 	mrs	r3, BASEPRI
 8005322:	603b      	str	r3, [r7, #0]
  return(result);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <osKernelInitialize+0x3a>
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <osKernelInitialize+0x60>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d103      	bne.n	800533a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005332:	f06f 0305 	mvn.w	r3, #5
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e00c      	b.n	8005354 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800533a:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <osKernelInitialize+0x60>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005342:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <osKernelInitialize+0x60>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e002      	b.n	8005354 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	20000190 	.word	0x20000190

08005364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800536a:	f3ef 8305 	mrs	r3, IPSR
 800536e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005370:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10f      	bne.n	8005396 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005376:	f3ef 8310 	mrs	r3, PRIMASK
 800537a:	607b      	str	r3, [r7, #4]
  return(result);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005382:	f3ef 8311 	mrs	r3, BASEPRI
 8005386:	603b      	str	r3, [r7, #0]
  return(result);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <osKernelStart+0x3a>
 800538e:	4b0f      	ldr	r3, [pc, #60]	@ (80053cc <osKernelStart+0x68>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d103      	bne.n	800539e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005396:	f06f 0305 	mvn.w	r3, #5
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e010      	b.n	80053c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800539e:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <osKernelStart+0x68>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d109      	bne.n	80053ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053a6:	f7ff ffa5 	bl	80052f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053aa:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <osKernelStart+0x68>)
 80053ac:	2202      	movs	r2, #2
 80053ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053b0:	f001 fade 	bl	8006970 <vTaskStartScheduler>
      stat = osOK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e002      	b.n	80053c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
 80053be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000190 	.word	0x20000190

080053d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b090      	sub	sp, #64	@ 0x40
 80053d4:	af04      	add	r7, sp, #16
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e0:	f3ef 8305 	mrs	r3, IPSR
 80053e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f040 808f 	bne.w	800550c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053fa:	f3ef 8311 	mrs	r3, BASEPRI
 80053fe:	617b      	str	r3, [r7, #20]
  return(result);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <osThreadNew+0x3e>
 8005406:	4b44      	ldr	r3, [pc, #272]	@ (8005518 <osThreadNew+0x148>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d07e      	beq.n	800550c <osThreadNew+0x13c>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d07b      	beq.n	800550c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005418:	2318      	movs	r3, #24
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d045      	beq.n	80054b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <osThreadNew+0x6a>
        name = attr->name;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <osThreadNew+0x90>
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b38      	cmp	r3, #56	@ 0x38
 8005452:	d805      	bhi.n	8005460 <osThreadNew+0x90>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <osThreadNew+0x94>
        return (NULL);
 8005460:	2300      	movs	r3, #0
 8005462:	e054      	b.n	800550e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <osThreadNew+0xca>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2ba7      	cmp	r3, #167	@ 0xa7
 8005482:	d90a      	bls.n	800549a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005488:	2b00      	cmp	r3, #0
 800548a:	d006      	beq.n	800549a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <osThreadNew+0xca>
        mem = 1;
 8005494:	2301      	movs	r3, #1
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	e010      	b.n	80054bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <osThreadNew+0xec>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <osThreadNew+0xec>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <osThreadNew+0xec>
          mem = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	e001      	b.n	80054bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d110      	bne.n	80054e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054ca:	9202      	str	r2, [sp, #8]
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f001 f855 	bl	8006588 <xTaskCreateStatic>
 80054de:	4603      	mov	r3, r0
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	e013      	b.n	800550c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d110      	bne.n	800550c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f001 f8a3 	bl	8006648 <xTaskCreate>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d001      	beq.n	800550c <osThreadNew+0x13c>
          hTask = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800550c:	693b      	ldr	r3, [r7, #16]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3730      	adds	r7, #48	@ 0x30
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000190 	.word	0x20000190

0800551c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005524:	f3ef 8305 	mrs	r3, IPSR
 8005528:	613b      	str	r3, [r7, #16]
  return(result);
 800552a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10f      	bne.n	8005550 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005530:	f3ef 8310 	mrs	r3, PRIMASK
 8005534:	60fb      	str	r3, [r7, #12]
  return(result);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800553c:	f3ef 8311 	mrs	r3, BASEPRI
 8005540:	60bb      	str	r3, [r7, #8]
  return(result);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <osDelay+0x3c>
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <osDelay+0x58>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d103      	bne.n	8005558 <osDelay+0x3c>
    stat = osErrorISR;
 8005550:	f06f 0305 	mvn.w	r3, #5
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e007      	b.n	8005568 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 f9ce 	bl	8006904 <vTaskDelay>
    }
  }

  return (stat);
 8005568:	697b      	ldr	r3, [r7, #20]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000190 	.word	0x20000190

08005578 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	@ 0x30
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005588:	f3ef 8305 	mrs	r3, IPSR
 800558c:	61bb      	str	r3, [r7, #24]
  return(result);
 800558e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005590:	2b00      	cmp	r3, #0
 8005592:	d16f      	bne.n	8005674 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005594:	f3ef 8310 	mrs	r3, PRIMASK
 8005598:	617b      	str	r3, [r7, #20]
  return(result);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a0:	f3ef 8311 	mrs	r3, BASEPRI
 80055a4:	613b      	str	r3, [r7, #16]
  return(result);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <osMessageQueueNew+0x3c>
 80055ac:	4b34      	ldr	r3, [pc, #208]	@ (8005680 <osMessageQueueNew+0x108>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d05f      	beq.n	8005674 <osMessageQueueNew+0xfc>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d05c      	beq.n	8005674 <osMessageQueueNew+0xfc>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d059      	beq.n	8005674 <osMessageQueueNew+0xfc>
    mem = -1;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
 80055c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d029      	beq.n	8005620 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <osMessageQueueNew+0x82>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b4f      	cmp	r3, #79	@ 0x4f
 80055da:	d90e      	bls.n	80055fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <osMessageQueueNew+0x82>
        mem = 1;
 80055f4:	2301      	movs	r3, #1
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	e014      	b.n	8005624 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d110      	bne.n	8005624 <osMessageQueueNew+0xac>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800560e:	2b00      	cmp	r3, #0
 8005610:	d108      	bne.n	8005624 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <osMessageQueueNew+0xac>
          mem = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	e001      	b.n	8005624 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10b      	bne.n	8005642 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2100      	movs	r1, #0
 8005634:	9100      	str	r1, [sp, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fa55 	bl	8005ae8 <xQueueGenericCreateStatic>
 800563e:	6278      	str	r0, [r7, #36]	@ 0x24
 8005640:	e008      	b.n	8005654 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005648:	2200      	movs	r2, #0
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fac8 	bl	8005be2 <xQueueGenericCreate>
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	e001      	b.n	800566c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800566c:	69f9      	ldr	r1, [r7, #28]
 800566e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005670:	f000 ff2e 	bl	80064d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005676:	4618      	mov	r0, r3
 8005678:	3728      	adds	r7, #40	@ 0x28
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000190 	.word	0x20000190

08005684 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	@ 0x28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800569c:	f3ef 8305 	mrs	r3, IPSR
 80056a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80056a2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10f      	bne.n	80056c8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056b4:	f3ef 8311 	mrs	r3, BASEPRI
 80056b8:	617b      	str	r3, [r7, #20]
  return(result);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02c      	beq.n	800571a <osMessageQueuePut+0x96>
 80056c0:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <osMessageQueuePut+0xe0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d128      	bne.n	800571a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <osMessageQueuePut+0x56>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <osMessageQueuePut+0x56>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80056da:	f06f 0303 	mvn.w	r3, #3
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056e0:	e039      	b.n	8005756 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80056e6:	f107 0210 	add.w	r2, r7, #16
 80056ea:	2300      	movs	r3, #0
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	6a38      	ldr	r0, [r7, #32]
 80056f0:	f000 fbde 	bl	8005eb0 <xQueueGenericSendFromISR>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d003      	beq.n	8005702 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80056fa:	f06f 0302 	mvn.w	r3, #2
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005700:	e029      	b.n	8005756 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d026      	beq.n	8005756 <osMessageQueuePut+0xd2>
 8005708:	4b17      	ldr	r3, [pc, #92]	@ (8005768 <osMessageQueuePut+0xe4>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005718:	e01d      	b.n	8005756 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <osMessageQueuePut+0xa2>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005726:	f06f 0303 	mvn.w	r3, #3
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24
 800572c:	e014      	b.n	8005758 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800572e:	2300      	movs	r3, #0
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	6a38      	ldr	r0, [r7, #32]
 8005736:	f000 fab9 	bl	8005cac <xQueueGenericSend>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d00b      	beq.n	8005758 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005746:	f06f 0301 	mvn.w	r3, #1
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
 800574c:	e004      	b.n	8005758 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800574e:	f06f 0302 	mvn.w	r3, #2
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
 8005754:	e000      	b.n	8005758 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005756:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800575a:	4618      	mov	r0, r3
 800575c:	3728      	adds	r7, #40	@ 0x28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000190 	.word	0x20000190
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	@ 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005782:	f3ef 8305 	mrs	r3, IPSR
 8005786:	61fb      	str	r3, [r7, #28]
  return(result);
 8005788:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578e:	f3ef 8310 	mrs	r3, PRIMASK
 8005792:	61bb      	str	r3, [r7, #24]
  return(result);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800579a:	f3ef 8311 	mrs	r3, BASEPRI
 800579e:	617b      	str	r3, [r7, #20]
  return(result);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d02c      	beq.n	8005800 <osMessageQueueGet+0x94>
 80057a6:	4b28      	ldr	r3, [pc, #160]	@ (8005848 <osMessageQueueGet+0xdc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d128      	bne.n	8005800 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <osMessageQueueGet+0x54>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <osMessageQueueGet+0x54>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80057c0:	f06f 0303 	mvn.w	r3, #3
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057c6:	e038      	b.n	800583a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80057cc:	f107 0310 	add.w	r3, r7, #16
 80057d0:	461a      	mov	r2, r3
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	6a38      	ldr	r0, [r7, #32]
 80057d6:	f000 fce9 	bl	80061ac <xQueueReceiveFromISR>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d003      	beq.n	80057e8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80057e0:	f06f 0302 	mvn.w	r3, #2
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057e6:	e028      	b.n	800583a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d025      	beq.n	800583a <osMessageQueueGet+0xce>
 80057ee:	4b17      	ldr	r3, [pc, #92]	@ (800584c <osMessageQueueGet+0xe0>)
 80057f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057fe:	e01c      	b.n	800583a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <osMessageQueueGet+0xa0>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800580c:	f06f 0303 	mvn.w	r3, #3
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
 8005812:	e013      	b.n	800583c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	6a38      	ldr	r0, [r7, #32]
 800581a:	f000 fbe5 	bl	8005fe8 <xQueueReceive>
 800581e:	4603      	mov	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	d00b      	beq.n	800583c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800582a:	f06f 0301 	mvn.w	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005830:	e004      	b.n	800583c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005832:	f06f 0302 	mvn.w	r3, #2
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
 8005838:	e000      	b.n	800583c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800583a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800583e:	4618      	mov	r0, r3
 8005840:	3728      	adds	r7, #40	@ 0x28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000190 	.word	0x20000190
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a06      	ldr	r2, [pc, #24]	@ (8005878 <vApplicationGetIdleTaskMemory+0x28>)
 8005860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4a05      	ldr	r2, [pc, #20]	@ (800587c <vApplicationGetIdleTaskMemory+0x2c>)
 8005866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2280      	movs	r2, #128	@ 0x80
 800586c:	601a      	str	r2, [r3, #0]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr
 8005878:	20000194 	.word	0x20000194
 800587c:	2000023c 	.word	0x2000023c

08005880 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a07      	ldr	r2, [pc, #28]	@ (80058ac <vApplicationGetTimerTaskMemory+0x2c>)
 8005890:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4a06      	ldr	r2, [pc, #24]	@ (80058b0 <vApplicationGetTimerTaskMemory+0x30>)
 8005896:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800589e:	601a      	str	r2, [r3, #0]
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	2000043c 	.word	0x2000043c
 80058b0:	200004e4 	.word	0x200004e4

080058b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f103 0208 	add.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f103 0208 	add.w	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f103 0208 	add.w	r2, r3, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d103      	bne.n	8005970 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e00c      	b.n	800598a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3308      	adds	r3, #8
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e002      	b.n	800597e <vListInsert+0x2e>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	d2f6      	bcs.n	8005978 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6892      	ldr	r2, [r2, #8]
 80059d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6852      	ldr	r2, [r2, #4]
 80059e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d103      	bne.n	80059f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	1e5a      	subs	r2, r3, #1
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr
	...

08005a14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	e7fd      	b.n	8005a3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a40:	f002 f934 	bl	8007cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	3b01      	subs	r3, #1
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	441a      	add	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	22ff      	movs	r2, #255	@ 0xff
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	22ff      	movs	r2, #255	@ 0xff
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d114      	bne.n	8005ac0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fa0e 	bl	8006ec4 <xTaskRemoveFromEventList>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d012      	beq.n	8005ad4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <xQueueGenericReset+0xd0>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	e009      	b.n	8005ad4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3310      	adds	r3, #16
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fef5 	bl	80058b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3324      	adds	r3, #36	@ 0x24
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fef0 	bl	80058b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ad4:	f002 f91a 	bl	8007d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ad8:	2301      	movs	r3, #1
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08e      	sub	sp, #56	@ 0x38
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10b      	bne.n	8005b14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <xQueueGenericCreateStatic+0x56>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <xQueueGenericCreateStatic+0x5a>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <xQueueGenericCreateStatic+0x5c>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	623b      	str	r3, [r7, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <xQueueGenericCreateStatic+0x84>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <xQueueGenericCreateStatic+0x88>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <xQueueGenericCreateStatic+0x8a>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fb      	str	r3, [r7, #28]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b8e:	2350      	movs	r3, #80	@ 0x50
 8005b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b50      	cmp	r3, #80	@ 0x50
 8005b96:	d00b      	beq.n	8005bb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61bb      	str	r3, [r7, #24]
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	e7fd      	b.n	8005bac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f846 	bl	8005c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3730      	adds	r7, #48	@ 0x30
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b08a      	sub	sp, #40	@ 0x28
 8005be6:	af02      	add	r7, sp, #8
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	613b      	str	r3, [r7, #16]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e004      	b.n	8005c24 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3350      	adds	r3, #80	@ 0x50
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f002 f941 	bl	8007eb0 <pvPortMalloc>
 8005c2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d011      	beq.n	8005c5a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	3350      	adds	r3, #80	@ 0x50
 8005c3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c48:	79fa      	ldrb	r2, [r7, #7]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f805 	bl	8005c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c92:	2101      	movs	r1, #1
 8005c94:	69b8      	ldr	r0, [r7, #24]
 8005c96:	f7ff febd 	bl	8005a14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08e      	sub	sp, #56	@ 0x38
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xQueueGenericSend+0x34>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <xQueueGenericSend+0x42>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <xQueueGenericSend+0x46>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <xQueueGenericSend+0x48>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <xQueueGenericSend+0x64>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d103      	bne.n	8005d1e <xQueueGenericSend+0x72>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <xQueueGenericSend+0x76>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <xQueueGenericSend+0x78>
 8005d22:	2300      	movs	r3, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <xQueueGenericSend+0x94>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d40:	f001 fa86 	bl	8007250 <xTaskGetSchedulerState>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <xQueueGenericSend+0xa4>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <xQueueGenericSend+0xa8>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <xQueueGenericSend+0xaa>
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <xQueueGenericSend+0xc6>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	61fb      	str	r3, [r7, #28]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d72:	f001 ff9b 	bl	8007cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <xQueueGenericSend+0xdc>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d129      	bne.n	8005ddc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d8e:	f000 fa8f 	bl	80062b0 <prvCopyDataToQueue>
 8005d92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	3324      	adds	r3, #36	@ 0x24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 f88f 	bl	8006ec4 <xTaskRemoveFromEventList>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d013      	beq.n	8005dd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dac:	4b3f      	ldr	r3, [pc, #252]	@ (8005eac <xQueueGenericSend+0x200>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	e00a      	b.n	8005dd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005dc4:	4b39      	ldr	r3, [pc, #228]	@ (8005eac <xQueueGenericSend+0x200>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005dd4:	f001 ff9a 	bl	8007d0c <vPortExitCritical>
				return pdPASS;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e063      	b.n	8005ea4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005de2:	f001 ff93 	bl	8007d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e05c      	b.n	8005ea4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 f8c9 	bl	8006f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dfe:	f001 ff85 	bl	8007d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e02:	f000 fe25 	bl	8006a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e06:	f001 ff51 	bl	8007cac <vPortEnterCritical>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d103      	bne.n	8005e20 <xQueueGenericSend+0x174>
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d103      	bne.n	8005e36 <xQueueGenericSend+0x18a>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e36:	f001 ff69 	bl	8007d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e3a:	1d3a      	adds	r2, r7, #4
 8005e3c:	f107 0314 	add.w	r3, r7, #20
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 f8b8 	bl	8006fb8 <xTaskCheckForTimeOut>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d124      	bne.n	8005e98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e50:	f000 fb26 	bl	80064a0 <prvIsQueueFull>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d018      	beq.n	8005e8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 ffdc 	bl	8006e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e6a:	f000 fab1 	bl	80063d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e6e:	f000 fdfd 	bl	8006a6c <xTaskResumeAll>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f47f af7c 	bne.w	8005d72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005eac <xQueueGenericSend+0x200>)
 8005e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	e772      	b.n	8005d72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e8e:	f000 fa9f 	bl	80063d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e92:	f000 fdeb 	bl	8006a6c <xTaskResumeAll>
 8005e96:	e76c      	b.n	8005d72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e9a:	f000 fa99 	bl	80063d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e9e:	f000 fde5 	bl	8006a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3738      	adds	r7, #56	@ 0x38
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	@ 0x38
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	e7fd      	b.n	8005edc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <xQueueGenericSendFromISR+0x3e>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x42>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueGenericSendFromISR+0x44>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	623b      	str	r3, [r7, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	e7fd      	b.n	8005f0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSendFromISR+0x6e>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <xQueueGenericSendFromISR+0x72>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <xQueueGenericSendFromISR+0x74>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61fb      	str	r3, [r7, #28]
}
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f40:	f001 ff76 	bl	8007e30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f44:	f3ef 8211 	mrs	r2, BASEPRI
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	61ba      	str	r2, [r7, #24]
 8005f5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <xQueueGenericSendFromISR+0xc2>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d12c      	bne.n	8005fcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f82:	f000 f995 	bl	80062b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f86:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d112      	bne.n	8005fb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d016      	beq.n	8005fc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	3324      	adds	r3, #36	@ 0x24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 ff91 	bl	8006ec4 <xTaskRemoveFromEventList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e007      	b.n	8005fc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fba:	3301      	adds	r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	b25a      	sxtb	r2, r3
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005fca:	e001      	b.n	8005fd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3738      	adds	r7, #56	@ 0x38
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08c      	sub	sp, #48	@ 0x30
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <xQueueReceive+0x32>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	623b      	str	r3, [r7, #32]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <xQueueReceive+0x40>
 8006020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <xQueueReceive+0x44>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <xQueueReceive+0x46>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <xQueueReceive+0x62>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61fb      	str	r3, [r7, #28]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800604a:	f001 f901 	bl	8007250 <xTaskGetSchedulerState>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <xQueueReceive+0x72>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <xQueueReceive+0x76>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueReceive+0x78>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <xQueueReceive+0x94>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	61bb      	str	r3, [r7, #24]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800607c:	f001 fe16 	bl	8007cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01f      	beq.n	80060cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006090:	f000 f978 	bl	8006384 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00f      	beq.n	80060c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	3310      	adds	r3, #16
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 ff0b 	bl	8006ec4 <xTaskRemoveFromEventList>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060b4:	4b3c      	ldr	r3, [pc, #240]	@ (80061a8 <xQueueReceive+0x1c0>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060c4:	f001 fe22 	bl	8007d0c <vPortExitCritical>
				return pdPASS;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e069      	b.n	80061a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060d2:	f001 fe1b 	bl	8007d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e062      	b.n	80061a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 ff51 	bl	8006f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ee:	f001 fe0d 	bl	8007d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060f2:	f000 fcad 	bl	8006a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f6:	f001 fdd9 	bl	8007cac <vPortEnterCritical>
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006100:	b25b      	sxtb	r3, r3
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d103      	bne.n	8006110 <xQueueReceive+0x128>
 8006108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006116:	b25b      	sxtb	r3, r3
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d103      	bne.n	8006126 <xQueueReceive+0x13e>
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006126:	f001 fdf1 	bl	8007d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800612a:	1d3a      	adds	r2, r7, #4
 800612c:	f107 0310 	add.w	r3, r7, #16
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff40 	bl	8006fb8 <xTaskCheckForTimeOut>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d123      	bne.n	8006186 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800613e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006140:	f000 f998 	bl	8006474 <prvIsQueueEmpty>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	3324      	adds	r3, #36	@ 0x24
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fe64 	bl	8006e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800615a:	f000 f939 	bl	80063d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800615e:	f000 fc85 	bl	8006a6c <xTaskResumeAll>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d189      	bne.n	800607c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006168:	4b0f      	ldr	r3, [pc, #60]	@ (80061a8 <xQueueReceive+0x1c0>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	e780      	b.n	800607c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800617a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800617c:	f000 f928 	bl	80063d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006180:	f000 fc74 	bl	8006a6c <xTaskResumeAll>
 8006184:	e77a      	b.n	800607c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006188:	f000 f922 	bl	80063d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800618c:	f000 fc6e 	bl	8006a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006192:	f000 f96f 	bl	8006474 <prvIsQueueEmpty>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f43f af6f 	beq.w	800607c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800619e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3730      	adds	r7, #48	@ 0x30
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	@ 0x38
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	623b      	str	r3, [r7, #32]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <xQueueReceiveFromISR+0x3c>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <xQueueReceiveFromISR+0x40>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <xQueueReceiveFromISR+0x42>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	61fb      	str	r3, [r7, #28]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800620a:	f001 fe11 	bl	8007e30 <vPortValidateInterruptPriority>
	__asm volatile
 800620e:	f3ef 8211 	mrs	r2, BASEPRI
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	61ba      	str	r2, [r7, #24]
 8006224:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006226:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006228:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	2b00      	cmp	r3, #0
 8006234:	d02f      	beq.n	8006296 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800623c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006244:	f000 f89e 	bl	8006384 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	1e5a      	subs	r2, r3, #1
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006250:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d112      	bne.n	8006280 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	3310      	adds	r3, #16
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fe2c 	bl	8006ec4 <xTaskRemoveFromEventList>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e007      	b.n	8006290 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006284:	3301      	adds	r3, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	b25a      	sxtb	r2, r3
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006290:	2301      	movs	r3, #1
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
 8006294:	e001      	b.n	800629a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006296:	2300      	movs	r3, #0
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f383 8811 	msr	BASEPRI, r3
}
 80062a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3738      	adds	r7, #56	@ 0x38
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10d      	bne.n	80062ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d14d      	bne.n	8006372 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 ffd6 	bl	800728c <xTaskPriorityDisinherit>
 80062e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	609a      	str	r2, [r3, #8]
 80062e8:	e043      	b.n	8006372 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d119      	bne.n	8006324 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6858      	ldr	r0, [r3, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	461a      	mov	r2, r3
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	f005 fd84 	bl	800be08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d32b      	bcc.n	8006372 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	e026      	b.n	8006372 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68d8      	ldr	r0, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	461a      	mov	r2, r3
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	f005 fd6a 	bl	800be08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	425b      	negs	r3, r3
 800633e:	441a      	add	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d207      	bcs.n	8006360 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	425b      	negs	r3, r3
 800635a:	441a      	add	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d105      	bne.n	8006372 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3b01      	subs	r3, #1
 8006370:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	441a      	add	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d303      	bcc.n	80063b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68d9      	ldr	r1, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c0:	461a      	mov	r2, r3
 80063c2:	6838      	ldr	r0, [r7, #0]
 80063c4:	f005 fd20 	bl	800be08 <memcpy>
	}
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063d8:	f001 fc68 	bl	8007cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063e4:	e011      	b.n	800640a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3324      	adds	r3, #36	@ 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fd66 	bl	8006ec4 <xTaskRemoveFromEventList>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063fe:	f000 fe3f 	bl	8007080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	3b01      	subs	r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800640a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800640e:	2b00      	cmp	r3, #0
 8006410:	dce9      	bgt.n	80063e6 <prvUnlockQueue+0x16>
 8006412:	e000      	b.n	8006416 <prvUnlockQueue+0x46>
					break;
 8006414:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	22ff      	movs	r2, #255	@ 0xff
 800641a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800641e:	f001 fc75 	bl	8007d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006422:	f001 fc43 	bl	8007cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800642c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800642e:	e011      	b.n	8006454 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3310      	adds	r3, #16
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fd41 	bl	8006ec4 <xTaskRemoveFromEventList>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006448:	f000 fe1a 	bl	8007080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	3b01      	subs	r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dce9      	bgt.n	8006430 <prvUnlockQueue+0x60>
 800645c:	e000      	b.n	8006460 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800645e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	22ff      	movs	r2, #255	@ 0xff
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006468:	f001 fc50 	bl	8007d0c <vPortExitCritical>
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800647c:	f001 fc16 	bl	8007cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e001      	b.n	8006492 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006492:	f001 fc3b 	bl	8007d0c <vPortExitCritical>

	return xReturn;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a8:	f001 fc00 	bl	8007cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d102      	bne.n	80064be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e001      	b.n	80064c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 fc23 	bl	8007d0c <vPortExitCritical>

	return xReturn;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e014      	b.n	800650a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064e0:	4a0e      	ldr	r2, [pc, #56]	@ (800651c <vQueueAddToRegistry+0x4c>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10b      	bne.n	8006504 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064ec:	490b      	ldr	r1, [pc, #44]	@ (800651c <vQueueAddToRegistry+0x4c>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064f6:	4a09      	ldr	r2, [pc, #36]	@ (800651c <vQueueAddToRegistry+0x4c>)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4413      	add	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006502:	e006      	b.n	8006512 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b07      	cmp	r3, #7
 800650e:	d9e7      	bls.n	80064e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr
 800651c:	200008e4 	.word	0x200008e4

08006520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006530:	f001 fbbc 	bl	8007cac <vPortEnterCritical>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800653a:	b25b      	sxtb	r3, r3
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d103      	bne.n	800654a <vQueueWaitForMessageRestricted+0x2a>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006550:	b25b      	sxtb	r3, r3
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d103      	bne.n	8006560 <vQueueWaitForMessageRestricted+0x40>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006560:	f001 fbd4 	bl	8007d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3324      	adds	r3, #36	@ 0x24
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fc79 	bl	8006e6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f7ff ff28 	bl	80063d0 <prvUnlockQueue>
	}
 8006580:	bf00      	nop
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	@ 0x38
 800658c:	af04      	add	r7, sp, #16
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	623b      	str	r3, [r7, #32]
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	61fb      	str	r3, [r7, #28]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065d2:	23a8      	movs	r3, #168	@ 0xa8
 80065d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80065da:	d00b      	beq.n	80065f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61bb      	str	r3, [r7, #24]
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01e      	beq.n	800663a <xTaskCreateStatic+0xb2>
 80065fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01b      	beq.n	800663a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	2202      	movs	r2, #2
 8006610:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006614:	2300      	movs	r3, #0
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	9302      	str	r3, [sp, #8]
 800661c:	f107 0314 	add.w	r3, r7, #20
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f851 	bl	80066d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006634:	f000 f8f6 	bl	8006824 <prvAddNewTaskToReadyList>
 8006638:	e001      	b.n	800663e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800663e:	697b      	ldr	r3, [r7, #20]
	}
 8006640:	4618      	mov	r0, r3
 8006642:	3728      	adds	r7, #40	@ 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08c      	sub	sp, #48	@ 0x30
 800664c:	af04      	add	r7, sp, #16
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fc27 	bl	8007eb0 <pvPortMalloc>
 8006662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800666a:	20a8      	movs	r0, #168	@ 0xa8
 800666c:	f001 fc20 	bl	8007eb0 <pvPortMalloc>
 8006670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	631a      	str	r2, [r3, #48]	@ 0x30
 800667e:	e005      	b.n	800668c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006680:	6978      	ldr	r0, [r7, #20]
 8006682:	f001 fc5b 	bl	8007f3c <vPortFree>
 8006686:	e001      	b.n	800668c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d017      	beq.n	80066c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800669a:	88fa      	ldrh	r2, [r7, #6]
 800669c:	2300      	movs	r3, #0
 800669e:	9303      	str	r3, [sp, #12]
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	9302      	str	r3, [sp, #8]
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f80f 	bl	80066d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066b6:	69f8      	ldr	r0, [r7, #28]
 80066b8:	f000 f8b4 	bl	8006824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066bc:	2301      	movs	r3, #1
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e002      	b.n	80066c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066c2:	f04f 33ff 	mov.w	r3, #4294967295
 80066c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066c8:	69bb      	ldr	r3, [r7, #24]
	}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	461a      	mov	r2, r3
 80066ec:	21a5      	movs	r1, #165	@ 0xa5
 80066ee:	f005 facb 	bl	800bc88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066fc:	3b01      	subs	r3, #1
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f023 0307 	bic.w	r3, r3, #7
 800670a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	617b      	str	r3, [r7, #20]
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e012      	b.n	8006760 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	4413      	add	r3, r2
 8006740:	7819      	ldrb	r1, [r3, #0]
 8006742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	3334      	adds	r3, #52	@ 0x34
 800674a:	460a      	mov	r2, r1
 800674c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d006      	beq.n	8006768 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b0f      	cmp	r3, #15
 8006764:	d9e9      	bls.n	800673a <prvInitialiseNewTask+0x66>
 8006766:	e000      	b.n	800676a <prvInitialiseNewTask+0x96>
			{
				break;
 8006768:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006772:	e003      	b.n	800677c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677e:	2b37      	cmp	r3, #55	@ 0x37
 8006780:	d901      	bls.n	8006786 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006782:	2337      	movs	r3, #55	@ 0x37
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800678a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006790:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	2200      	movs	r2, #0
 8006796:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff f8a8 	bl	80058f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	3318      	adds	r3, #24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff f8a3 	bl	80058f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	3354      	adds	r3, #84	@ 0x54
 80067d6:	224c      	movs	r2, #76	@ 0x4c
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f005 fa54 	bl	800bc88 <memset>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006818 <prvInitialiseNewTask+0x144>)
 80067e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	4a0c      	ldr	r2, [pc, #48]	@ (800681c <prvInitialiseNewTask+0x148>)
 80067ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006820 <prvInitialiseNewTask+0x14c>)
 80067f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	68f9      	ldr	r1, [r7, #12]
 80067f6:	69b8      	ldr	r0, [r7, #24]
 80067f8:	f001 f964 	bl	8007ac4 <pxPortInitialiseStack>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800680e:	bf00      	nop
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20004128 	.word	0x20004128
 800681c:	20004190 	.word	0x20004190
 8006820:	200041f8 	.word	0x200041f8

08006824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800682c:	f001 fa3e 	bl	8007cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006830:	4b2d      	ldr	r3, [pc, #180]	@ (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	4a2c      	ldr	r2, [pc, #176]	@ (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 8006838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683a:	4b2c      	ldr	r3, [pc, #176]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006842:	4a2a      	ldr	r2, [pc, #168]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006848:	4b27      	ldr	r3, [pc, #156]	@ (80068e8 <prvAddNewTaskToReadyList+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d110      	bne.n	8006872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006850:	f000 fc3a 	bl	80070c8 <prvInitialiseTaskLists>
 8006854:	e00d      	b.n	8006872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006856:	4b26      	ldr	r3, [pc, #152]	@ (80068f0 <prvAddNewTaskToReadyList+0xcc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800685e:	4b23      	ldr	r3, [pc, #140]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	429a      	cmp	r2, r3
 800686a:	d802      	bhi.n	8006872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800686c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006872:	4b20      	ldr	r3, [pc, #128]	@ (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 800687a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800687c:	4b1d      	ldr	r3, [pc, #116]	@ (80068f4 <prvAddNewTaskToReadyList+0xd0>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006888:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <prvAddNewTaskToReadyList+0xd4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <prvAddNewTaskToReadyList+0x74>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <prvAddNewTaskToReadyList+0xd4>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a15      	ldr	r2, [pc, #84]	@ (80068fc <prvAddNewTaskToReadyList+0xd8>)
 80068a6:	441a      	add	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7ff f82b 	bl	800590a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b4:	f001 fa2a 	bl	8007d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068b8:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <prvAddNewTaskToReadyList+0xcc>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00e      	beq.n	80068de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c0:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvAddNewTaskToReadyList+0xc8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d207      	bcs.n	80068de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <prvAddNewTaskToReadyList+0xdc>)
 80068d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000df8 	.word	0x20000df8
 80068ec:	20000924 	.word	0x20000924
 80068f0:	20000e04 	.word	0x20000e04
 80068f4:	20000e14 	.word	0x20000e14
 80068f8:	20000e00 	.word	0x20000e00
 80068fc:	20000928 	.word	0x20000928
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006916:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <vTaskDelay+0x64>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <vTaskDelay+0x32>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60bb      	str	r3, [r7, #8]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006936:	f000 f88b 	bl	8006a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fd15 	bl	800736c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006942:	f000 f893 	bl	8006a6c <xTaskResumeAll>
 8006946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800694e:	4b07      	ldr	r3, [pc, #28]	@ (800696c <vTaskDelay+0x68>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000e20 	.word	0x20000e20
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	@ 0x28
 8006974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800697e:	463a      	mov	r2, r7
 8006980:	1d39      	adds	r1, r7, #4
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe ff62 	bl	8005850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	460a      	mov	r2, r1
 800699e:	4924      	ldr	r1, [pc, #144]	@ (8006a30 <vTaskStartScheduler+0xc0>)
 80069a0:	4824      	ldr	r0, [pc, #144]	@ (8006a34 <vTaskStartScheduler+0xc4>)
 80069a2:	f7ff fdf1 	bl	8006588 <xTaskCreateStatic>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4a23      	ldr	r2, [pc, #140]	@ (8006a38 <vTaskStartScheduler+0xc8>)
 80069aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069ac:	4b22      	ldr	r3, [pc, #136]	@ (8006a38 <vTaskStartScheduler+0xc8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e001      	b.n	80069be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d102      	bne.n	80069ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069c4:	f000 fd26 	bl	8007414 <xTimerCreateTimerTask>
 80069c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d11b      	bne.n	8006a08 <vTaskStartScheduler+0x98>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069e4:	4b15      	ldr	r3, [pc, #84]	@ (8006a3c <vTaskStartScheduler+0xcc>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3354      	adds	r3, #84	@ 0x54
 80069ea:	4a15      	ldr	r2, [pc, #84]	@ (8006a40 <vTaskStartScheduler+0xd0>)
 80069ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069ee:	4b15      	ldr	r3, [pc, #84]	@ (8006a44 <vTaskStartScheduler+0xd4>)
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069f6:	4b14      	ldr	r3, [pc, #80]	@ (8006a48 <vTaskStartScheduler+0xd8>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069fc:	4b13      	ldr	r3, [pc, #76]	@ (8006a4c <vTaskStartScheduler+0xdc>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a02:	f001 f8e1 	bl	8007bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a06:	e00f      	b.n	8006a28 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d10b      	bne.n	8006a28 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60fb      	str	r3, [r7, #12]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <vTaskStartScheduler+0xb4>
}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	0800d29c 	.word	0x0800d29c
 8006a34:	08007099 	.word	0x08007099
 8006a38:	20000e1c 	.word	0x20000e1c
 8006a3c:	20000924 	.word	0x20000924
 8006a40:	20000014 	.word	0x20000014
 8006a44:	20000e18 	.word	0x20000e18
 8006a48:	20000e04 	.word	0x20000e04
 8006a4c:	20000dfc 	.word	0x20000dfc

08006a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a54:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <vTaskSuspendAll+0x18>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a03      	ldr	r2, [pc, #12]	@ (8006a68 <vTaskSuspendAll+0x18>)
 8006a5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000e20 	.word	0x20000e20

08006a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a7a:	4b42      	ldr	r3, [pc, #264]	@ (8006b84 <xTaskResumeAll+0x118>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <xTaskResumeAll+0x2e>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	603b      	str	r3, [r7, #0]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a9a:	f001 f907 	bl	8007cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a9e:	4b39      	ldr	r3, [pc, #228]	@ (8006b84 <xTaskResumeAll+0x118>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4a37      	ldr	r2, [pc, #220]	@ (8006b84 <xTaskResumeAll+0x118>)
 8006aa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa8:	4b36      	ldr	r3, [pc, #216]	@ (8006b84 <xTaskResumeAll+0x118>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d162      	bne.n	8006b76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ab0:	4b35      	ldr	r3, [pc, #212]	@ (8006b88 <xTaskResumeAll+0x11c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05e      	beq.n	8006b76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ab8:	e02f      	b.n	8006b1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aba:	4b34      	ldr	r3, [pc, #208]	@ (8006b8c <xTaskResumeAll+0x120>)
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3318      	adds	r3, #24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe ff7a 	bl	80059c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe ff75 	bl	80059c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ada:	4b2d      	ldr	r3, [pc, #180]	@ (8006b90 <xTaskResumeAll+0x124>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d903      	bls.n	8006aea <xTaskResumeAll+0x7e>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b90 <xTaskResumeAll+0x124>)
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4a27      	ldr	r2, [pc, #156]	@ (8006b94 <xTaskResumeAll+0x128>)
 8006af8:	441a      	add	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f7fe ff02 	bl	800590a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	4b23      	ldr	r3, [pc, #140]	@ (8006b98 <xTaskResumeAll+0x12c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d302      	bcc.n	8006b1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b14:	4b21      	ldr	r3, [pc, #132]	@ (8006b9c <xTaskResumeAll+0x130>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006b8c <xTaskResumeAll+0x120>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1cb      	bne.n	8006aba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b28:	f000 fb72 	bl	8007210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ba0 <xTaskResumeAll+0x134>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d010      	beq.n	8006b5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b38:	f000 f844 	bl	8006bc4 <xTaskIncrementTick>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b42:	4b16      	ldr	r3, [pc, #88]	@ (8006b9c <xTaskResumeAll+0x130>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f1      	bne.n	8006b38 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006b54:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <xTaskResumeAll+0x134>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b5a:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <xTaskResumeAll+0x130>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <xTaskResumeAll+0x138>)
 8006b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b76:	f001 f8c9 	bl	8007d0c <vPortExitCritical>

	return xAlreadyYielded;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20000e20 	.word	0x20000e20
 8006b88:	20000df8 	.word	0x20000df8
 8006b8c:	20000db8 	.word	0x20000db8
 8006b90:	20000e00 	.word	0x20000e00
 8006b94:	20000928 	.word	0x20000928
 8006b98:	20000924 	.word	0x20000924
 8006b9c:	20000e0c 	.word	0x20000e0c
 8006ba0:	20000e08 	.word	0x20000e08
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bae:	4b04      	ldr	r3, [pc, #16]	@ (8006bc0 <xTaskGetTickCount+0x18>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bb4:	687b      	ldr	r3, [r7, #4]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr
 8006bc0:	20000dfc 	.word	0x20000dfc

08006bc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bce:	4b4f      	ldr	r3, [pc, #316]	@ (8006d0c <xTaskIncrementTick+0x148>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 808a 	bne.w	8006cec <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d10 <xTaskIncrementTick+0x14c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006be0:	4a4b      	ldr	r2, [pc, #300]	@ (8006d10 <xTaskIncrementTick+0x14c>)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d121      	bne.n	8006c30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bec:	4b49      	ldr	r3, [pc, #292]	@ (8006d14 <xTaskIncrementTick+0x150>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	603b      	str	r3, [r7, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <xTaskIncrementTick+0x46>
 8006c0e:	4b41      	ldr	r3, [pc, #260]	@ (8006d14 <xTaskIncrementTick+0x150>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	4b40      	ldr	r3, [pc, #256]	@ (8006d18 <xTaskIncrementTick+0x154>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a3e      	ldr	r2, [pc, #248]	@ (8006d14 <xTaskIncrementTick+0x150>)
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d18 <xTaskIncrementTick+0x154>)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b3e      	ldr	r3, [pc, #248]	@ (8006d1c <xTaskIncrementTick+0x158>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a3c      	ldr	r2, [pc, #240]	@ (8006d1c <xTaskIncrementTick+0x158>)
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	f000 faf0 	bl	8007210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c30:	4b3b      	ldr	r3, [pc, #236]	@ (8006d20 <xTaskIncrementTick+0x15c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d349      	bcc.n	8006cce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c3a:	4b36      	ldr	r3, [pc, #216]	@ (8006d14 <xTaskIncrementTick+0x150>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c44:	4b36      	ldr	r3, [pc, #216]	@ (8006d20 <xTaskIncrementTick+0x15c>)
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4a:	601a      	str	r2, [r3, #0]
					break;
 8006c4c:	e03f      	b.n	8006cce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4e:	4b31      	ldr	r3, [pc, #196]	@ (8006d14 <xTaskIncrementTick+0x150>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d203      	bcs.n	8006c6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c66:	4a2e      	ldr	r2, [pc, #184]	@ (8006d20 <xTaskIncrementTick+0x15c>)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c6c:	e02f      	b.n	8006cce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fea4 	bl	80059c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3318      	adds	r3, #24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fe9b 	bl	80059c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	4b25      	ldr	r3, [pc, #148]	@ (8006d24 <xTaskIncrementTick+0x160>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d903      	bls.n	8006c9e <xTaskIncrementTick+0xda>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	4a22      	ldr	r2, [pc, #136]	@ (8006d24 <xTaskIncrementTick+0x160>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <xTaskIncrementTick+0x164>)
 8006cac:	441a      	add	r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7fe fe28 	bl	800590a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8006d2c <xTaskIncrementTick+0x168>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d3b8      	bcc.n	8006c3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ccc:	e7b5      	b.n	8006c3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cce:	4b17      	ldr	r3, [pc, #92]	@ (8006d2c <xTaskIncrementTick+0x168>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd4:	4914      	ldr	r1, [pc, #80]	@ (8006d28 <xTaskIncrementTick+0x164>)
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d907      	bls.n	8006cf6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	e004      	b.n	8006cf6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006cec:	4b10      	ldr	r3, [pc, #64]	@ (8006d30 <xTaskIncrementTick+0x16c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8006d30 <xTaskIncrementTick+0x16c>)
 8006cf4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d34 <xTaskIncrementTick+0x170>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d02:	697b      	ldr	r3, [r7, #20]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20000e20 	.word	0x20000e20
 8006d10:	20000dfc 	.word	0x20000dfc
 8006d14:	20000db0 	.word	0x20000db0
 8006d18:	20000db4 	.word	0x20000db4
 8006d1c:	20000e10 	.word	0x20000e10
 8006d20:	20000e18 	.word	0x20000e18
 8006d24:	20000e00 	.word	0x20000e00
 8006d28:	20000928 	.word	0x20000928
 8006d2c:	20000924 	.word	0x20000924
 8006d30:	20000e08 	.word	0x20000e08
 8006d34:	20000e0c 	.word	0x20000e0c

08006d38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d3e:	4b32      	ldr	r3, [pc, #200]	@ (8006e08 <vTaskSwitchContext+0xd0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d46:	4b31      	ldr	r3, [pc, #196]	@ (8006e0c <vTaskSwitchContext+0xd4>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d4c:	e058      	b.n	8006e00 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8006d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e0c <vTaskSwitchContext+0xd4>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006d54:	4b2e      	ldr	r3, [pc, #184]	@ (8006e10 <vTaskSwitchContext+0xd8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e10 <vTaskSwitchContext+0xd8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d808      	bhi.n	8006d76 <vTaskSwitchContext+0x3e>
 8006d64:	4b2a      	ldr	r3, [pc, #168]	@ (8006e10 <vTaskSwitchContext+0xd8>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b29      	ldr	r3, [pc, #164]	@ (8006e10 <vTaskSwitchContext+0xd8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3334      	adds	r3, #52	@ 0x34
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7f9 fbd5 	bl	8000520 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d76:	4b27      	ldr	r3, [pc, #156]	@ (8006e14 <vTaskSwitchContext+0xdc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e011      	b.n	8006da2 <vTaskSwitchContext+0x6a>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <vTaskSwitchContext+0x64>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	607b      	str	r3, [r7, #4]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <vTaskSwitchContext+0x60>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	491d      	ldr	r1, [pc, #116]	@ (8006e18 <vTaskSwitchContext+0xe0>)
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0e3      	beq.n	8006d7e <vTaskSwitchContext+0x46>
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <vTaskSwitchContext+0xe0>)
 8006dc2:	4413      	add	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	605a      	str	r2, [r3, #4]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d104      	bne.n	8006de6 <vTaskSwitchContext+0xae>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <vTaskSwitchContext+0xd8>)
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	4a08      	ldr	r2, [pc, #32]	@ (8006e14 <vTaskSwitchContext+0xdc>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006df6:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <vTaskSwitchContext+0xd8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3354      	adds	r3, #84	@ 0x54
 8006dfc:	4a07      	ldr	r2, [pc, #28]	@ (8006e1c <vTaskSwitchContext+0xe4>)
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000e20 	.word	0x20000e20
 8006e0c:	20000e0c 	.word	0x20000e0c
 8006e10:	20000924 	.word	0x20000924
 8006e14:	20000e00 	.word	0x20000e00
 8006e18:	20000928 	.word	0x20000928
 8006e1c:	20000014 	.word	0x20000014

08006e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e48:	4b07      	ldr	r3, [pc, #28]	@ (8006e68 <vTaskPlaceOnEventList+0x48>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fe fd7d 	bl	8005950 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e56:	2101      	movs	r1, #1
 8006e58:	6838      	ldr	r0, [r7, #0]
 8006e5a:	f000 fa87 	bl	800736c <prvAddCurrentTaskToDelayedList>
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000924 	.word	0x20000924

08006e6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	617b      	str	r3, [r7, #20]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3318      	adds	r3, #24
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7fe fd33 	bl	800590a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006eae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f000 fa5a 	bl	800736c <prvAddCurrentTaskToDelayedList>
	}
 8006eb8:	bf00      	nop
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000924 	.word	0x20000924

08006ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60fb      	str	r3, [r7, #12]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3318      	adds	r3, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fd62 	bl	80059c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f74 <xTaskRemoveFromEventList+0xb0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d11d      	bne.n	8006f40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fd59 	bl	80059c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f12:	4b19      	ldr	r3, [pc, #100]	@ (8006f78 <xTaskRemoveFromEventList+0xb4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d903      	bls.n	8006f22 <xTaskRemoveFromEventList+0x5e>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <xTaskRemoveFromEventList+0xb4>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a13      	ldr	r2, [pc, #76]	@ (8006f7c <xTaskRemoveFromEventList+0xb8>)
 8006f30:	441a      	add	r2, r3
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7fe fce6 	bl	800590a <vListInsertEnd>
 8006f3e:	e005      	b.n	8006f4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	3318      	adds	r3, #24
 8006f44:	4619      	mov	r1, r3
 8006f46:	480e      	ldr	r0, [pc, #56]	@ (8006f80 <xTaskRemoveFromEventList+0xbc>)
 8006f48:	f7fe fcdf 	bl	800590a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f50:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <xTaskRemoveFromEventList+0xc0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d905      	bls.n	8006f66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <xTaskRemoveFromEventList+0xc4>)
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e001      	b.n	8006f6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000e20 	.word	0x20000e20
 8006f78:	20000e00 	.word	0x20000e00
 8006f7c:	20000928 	.word	0x20000928
 8006f80:	20000db8 	.word	0x20000db8
 8006f84:	20000924 	.word	0x20000924
 8006f88:	20000e0c 	.word	0x20000e0c

08006f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f94:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <vTaskInternalSetTimeOutState+0x24>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f9c:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <vTaskInternalSetTimeOutState+0x28>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000e10 	.word	0x20000e10
 8006fb4:	20000dfc 	.word	0x20000dfc

08006fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	613b      	str	r3, [r7, #16]
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	e7fd      	b.n	8006fdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	60fb      	str	r3, [r7, #12]
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	e7fd      	b.n	8006ffa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ffe:	f000 fe55 	bl	8007cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007002:	4b1d      	ldr	r3, [pc, #116]	@ (8007078 <xTaskCheckForTimeOut+0xc0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d102      	bne.n	8007022 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e023      	b.n	800706a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b15      	ldr	r3, [pc, #84]	@ (800707c <xTaskCheckForTimeOut+0xc4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d007      	beq.n	800703e <xTaskCheckForTimeOut+0x86>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e015      	b.n	800706a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	429a      	cmp	r2, r3
 8007046:	d20b      	bcs.n	8007060 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ff99 	bl	8006f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	e004      	b.n	800706a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007066:	2301      	movs	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800706a:	f000 fe4f 	bl	8007d0c <vPortExitCritical>

	return xReturn;
 800706e:	69fb      	ldr	r3, [r7, #28]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000dfc 	.word	0x20000dfc
 800707c:	20000e10 	.word	0x20000e10

08007080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007084:	4b03      	ldr	r3, [pc, #12]	@ (8007094 <vTaskMissedYield+0x14>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	bf00      	nop
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000e0c 	.word	0x20000e0c

08007098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070a0:	f000 f852 	bl	8007148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070a4:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <prvIdleTask+0x28>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d9f9      	bls.n	80070a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070ac:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <prvIdleTask+0x2c>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070bc:	e7f0      	b.n	80070a0 <prvIdleTask+0x8>
 80070be:	bf00      	nop
 80070c0:	20000928 	.word	0x20000928
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ce:	2300      	movs	r3, #0
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	e00c      	b.n	80070ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4a12      	ldr	r2, [pc, #72]	@ (8007128 <prvInitialiseTaskLists+0x60>)
 80070e0:	4413      	add	r3, r2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fbe6 	bl	80058b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3301      	adds	r3, #1
 80070ec:	607b      	str	r3, [r7, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b37      	cmp	r3, #55	@ 0x37
 80070f2:	d9ef      	bls.n	80070d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070f4:	480d      	ldr	r0, [pc, #52]	@ (800712c <prvInitialiseTaskLists+0x64>)
 80070f6:	f7fe fbdd 	bl	80058b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070fa:	480d      	ldr	r0, [pc, #52]	@ (8007130 <prvInitialiseTaskLists+0x68>)
 80070fc:	f7fe fbda 	bl	80058b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007100:	480c      	ldr	r0, [pc, #48]	@ (8007134 <prvInitialiseTaskLists+0x6c>)
 8007102:	f7fe fbd7 	bl	80058b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007106:	480c      	ldr	r0, [pc, #48]	@ (8007138 <prvInitialiseTaskLists+0x70>)
 8007108:	f7fe fbd4 	bl	80058b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800710c:	480b      	ldr	r0, [pc, #44]	@ (800713c <prvInitialiseTaskLists+0x74>)
 800710e:	f7fe fbd1 	bl	80058b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007112:	4b0b      	ldr	r3, [pc, #44]	@ (8007140 <prvInitialiseTaskLists+0x78>)
 8007114:	4a05      	ldr	r2, [pc, #20]	@ (800712c <prvInitialiseTaskLists+0x64>)
 8007116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007118:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <prvInitialiseTaskLists+0x7c>)
 800711a:	4a05      	ldr	r2, [pc, #20]	@ (8007130 <prvInitialiseTaskLists+0x68>)
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000928 	.word	0x20000928
 800712c:	20000d88 	.word	0x20000d88
 8007130:	20000d9c 	.word	0x20000d9c
 8007134:	20000db8 	.word	0x20000db8
 8007138:	20000dcc 	.word	0x20000dcc
 800713c:	20000de4 	.word	0x20000de4
 8007140:	20000db0 	.word	0x20000db0
 8007144:	20000db4 	.word	0x20000db4

08007148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800714e:	e019      	b.n	8007184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007150:	f000 fdac 	bl	8007cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007154:	4b10      	ldr	r3, [pc, #64]	@ (8007198 <prvCheckTasksWaitingTermination+0x50>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fc2d 	bl	80059c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007166:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <prvCheckTasksWaitingTermination+0x54>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	4a0b      	ldr	r2, [pc, #44]	@ (800719c <prvCheckTasksWaitingTermination+0x54>)
 800716e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007170:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <prvCheckTasksWaitingTermination+0x58>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3b01      	subs	r3, #1
 8007176:	4a0a      	ldr	r2, [pc, #40]	@ (80071a0 <prvCheckTasksWaitingTermination+0x58>)
 8007178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800717a:	f000 fdc7 	bl	8007d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f810 	bl	80071a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007184:	4b06      	ldr	r3, [pc, #24]	@ (80071a0 <prvCheckTasksWaitingTermination+0x58>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e1      	bne.n	8007150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000dcc 	.word	0x20000dcc
 800719c:	20000df8 	.word	0x20000df8
 80071a0:	20000de0 	.word	0x20000de0

080071a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3354      	adds	r3, #84	@ 0x54
 80071b0:	4618      	mov	r0, r3
 80071b2:	f004 fd97 	bl	800bce4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d108      	bne.n	80071d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 feb9 	bl	8007f3c <vPortFree>
				vPortFree( pxTCB );
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 feb6 	bl	8007f3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071d0:	e019      	b.n	8007206 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d103      	bne.n	80071e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fead 	bl	8007f3c <vPortFree>
	}
 80071e2:	e010      	b.n	8007206 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d00b      	beq.n	8007206 <prvDeleteTCB+0x62>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	60fb      	str	r3, [r7, #12]
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	e7fd      	b.n	8007202 <prvDeleteTCB+0x5e>
	}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007216:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <prvResetNextTaskUnblockTime+0x38>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <prvResetNextTaskUnblockTime+0x3c>)
 8007222:	f04f 32ff 	mov.w	r2, #4294967295
 8007226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007228:	e008      	b.n	800723c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722a:	4b07      	ldr	r3, [pc, #28]	@ (8007248 <prvResetNextTaskUnblockTime+0x38>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a04      	ldr	r2, [pc, #16]	@ (800724c <prvResetNextTaskUnblockTime+0x3c>)
 800723a:	6013      	str	r3, [r2, #0]
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000db0 	.word	0x20000db0
 800724c:	20000e18 	.word	0x20000e18

08007250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007256:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <xTaskGetSchedulerState+0x34>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d102      	bne.n	8007264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800725e:	2301      	movs	r3, #1
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	e008      	b.n	8007276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007264:	4b08      	ldr	r3, [pc, #32]	@ (8007288 <xTaskGetSchedulerState+0x38>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800726c:	2302      	movs	r3, #2
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	e001      	b.n	8007276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007276:	687b      	ldr	r3, [r7, #4]
	}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000e04 	.word	0x20000e04
 8007288:	20000e20 	.word	0x20000e20

0800728c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d058      	beq.n	8007354 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <xTaskPriorityDisinherit+0xd4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d00b      	beq.n	80072c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	60fb      	str	r3, [r7, #12]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60bb      	str	r3, [r7, #8]
}
 80072de:	bf00      	nop
 80072e0:	bf00      	nop
 80072e2:	e7fd      	b.n	80072e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d02c      	beq.n	8007354 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d128      	bne.n	8007354 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3304      	adds	r3, #4
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fb5a 	bl	80059c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007318:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007324:	4b0f      	ldr	r3, [pc, #60]	@ (8007364 <xTaskPriorityDisinherit+0xd8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d903      	bls.n	8007334 <xTaskPriorityDisinherit+0xa8>
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007330:	4a0c      	ldr	r2, [pc, #48]	@ (8007364 <xTaskPriorityDisinherit+0xd8>)
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4a09      	ldr	r2, [pc, #36]	@ (8007368 <xTaskPriorityDisinherit+0xdc>)
 8007342:	441a      	add	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	3304      	adds	r3, #4
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7fe fadd 	bl	800590a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007354:	697b      	ldr	r3, [r7, #20]
	}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000924 	.word	0x20000924
 8007364:	20000e00 	.word	0x20000e00
 8007368:	20000928 	.word	0x20000928

0800736c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007376:	4b21      	ldr	r3, [pc, #132]	@ (80073fc <prvAddCurrentTaskToDelayedList+0x90>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800737c:	4b20      	ldr	r3, [pc, #128]	@ (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3304      	adds	r3, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fb1c 	bl	80059c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d10a      	bne.n	80073a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007396:	4b1a      	ldr	r3, [pc, #104]	@ (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4819      	ldr	r0, [pc, #100]	@ (8007404 <prvAddCurrentTaskToDelayedList+0x98>)
 80073a0:	f7fe fab3 	bl	800590a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073a4:	e026      	b.n	80073f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073ae:	4b14      	ldr	r3, [pc, #80]	@ (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d209      	bcs.n	80073d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073be:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f7fe fac0 	bl	8005950 <vListInsert>
}
 80073d0:	e010      	b.n	80073f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d2:	4b0e      	ldr	r3, [pc, #56]	@ (800740c <prvAddCurrentTaskToDelayedList+0xa0>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007400 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fe fab6 	bl	8005950 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d202      	bcs.n	80073f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073ee:	4a08      	ldr	r2, [pc, #32]	@ (8007410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000dfc 	.word	0x20000dfc
 8007400:	20000924 	.word	0x20000924
 8007404:	20000de4 	.word	0x20000de4
 8007408:	20000db4 	.word	0x20000db4
 800740c:	20000db0 	.word	0x20000db0
 8007410:	20000e18 	.word	0x20000e18

08007414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	@ 0x28
 8007418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800741e:	f000 fb11 	bl	8007a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007422:	4b1d      	ldr	r3, [pc, #116]	@ (8007498 <xTimerCreateTimerTask+0x84>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d021      	beq.n	800746e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007432:	1d3a      	adds	r2, r7, #4
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	f107 030c 	add.w	r3, r7, #12
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fa1f 	bl	8005880 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	9202      	str	r2, [sp, #8]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	2302      	movs	r3, #2
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	2300      	movs	r3, #0
 8007452:	460a      	mov	r2, r1
 8007454:	4911      	ldr	r1, [pc, #68]	@ (800749c <xTimerCreateTimerTask+0x88>)
 8007456:	4812      	ldr	r0, [pc, #72]	@ (80074a0 <xTimerCreateTimerTask+0x8c>)
 8007458:	f7ff f896 	bl	8006588 <xTaskCreateStatic>
 800745c:	4603      	mov	r3, r0
 800745e:	4a11      	ldr	r2, [pc, #68]	@ (80074a4 <xTimerCreateTimerTask+0x90>)
 8007460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <xTimerCreateTimerTask+0x90>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800746a:	2301      	movs	r3, #1
 800746c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	613b      	str	r3, [r7, #16]
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800748c:	697b      	ldr	r3, [r7, #20]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000e54 	.word	0x20000e54
 800749c:	0800d2a4 	.word	0x0800d2a4
 80074a0:	080075e1 	.word	0x080075e1
 80074a4:	20000e58 	.word	0x20000e58

080074a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	@ 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074d8:	4b19      	ldr	r3, [pc, #100]	@ (8007540 <xTimerGenericCommand+0x98>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02a      	beq.n	8007536 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	dc18      	bgt.n	8007524 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074f2:	f7ff fead 	bl	8007250 <xTaskGetSchedulerState>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d109      	bne.n	8007510 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074fc:	4b10      	ldr	r3, [pc, #64]	@ (8007540 <xTimerGenericCommand+0x98>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	f107 0110 	add.w	r1, r7, #16
 8007504:	2300      	movs	r3, #0
 8007506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007508:	f7fe fbd0 	bl	8005cac <xQueueGenericSend>
 800750c:	6278      	str	r0, [r7, #36]	@ 0x24
 800750e:	e012      	b.n	8007536 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007510:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <xTimerGenericCommand+0x98>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	f107 0110 	add.w	r1, r7, #16
 8007518:	2300      	movs	r3, #0
 800751a:	2200      	movs	r2, #0
 800751c:	f7fe fbc6 	bl	8005cac <xQueueGenericSend>
 8007520:	6278      	str	r0, [r7, #36]	@ 0x24
 8007522:	e008      	b.n	8007536 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007524:	4b06      	ldr	r3, [pc, #24]	@ (8007540 <xTimerGenericCommand+0x98>)
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	f107 0110 	add.w	r1, r7, #16
 800752c:	2300      	movs	r3, #0
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	f7fe fcbe 	bl	8005eb0 <xQueueGenericSendFromISR>
 8007534:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007538:	4618      	mov	r0, r3
 800753a:	3728      	adds	r7, #40	@ 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20000e54 	.word	0x20000e54

08007544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754e:	4b23      	ldr	r3, [pc, #140]	@ (80075dc <prvProcessExpiredTimer+0x98>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3304      	adds	r3, #4
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fa2f 	bl	80059c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d023      	beq.n	80075b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	18d1      	adds	r1, r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	6978      	ldr	r0, [r7, #20]
 800757e:	f000 f8d3 	bl	8007728 <prvInsertTimerInActiveList>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d020      	beq.n	80075ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007588:	2300      	movs	r3, #0
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2300      	movs	r3, #0
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	2100      	movs	r1, #0
 8007592:	6978      	ldr	r0, [r7, #20]
 8007594:	f7ff ff88 	bl	80074a8 <xTimerGenericCommand>
 8007598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d114      	bne.n	80075ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	60fb      	str	r3, [r7, #12]
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	6978      	ldr	r0, [r7, #20]
 80075d0:	4798      	blx	r3
}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000e4c 	.word	0x20000e4c

080075e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075e8:	f107 0308 	add.w	r3, r7, #8
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 f859 	bl	80076a4 <prvGetNextExpireTime>
 80075f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4619      	mov	r1, r3
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f805 	bl	8007608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075fe:	f000 f8d5 	bl	80077ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007602:	bf00      	nop
 8007604:	e7f0      	b.n	80075e8 <prvTimerTask+0x8>
	...

08007608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007612:	f7ff fa1d 	bl	8006a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007616:	f107 0308 	add.w	r3, r7, #8
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f864 	bl	80076e8 <prvSampleTimeNow>
 8007620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d130      	bne.n	800768a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <prvProcessTimerOrBlockTask+0x3c>
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	d806      	bhi.n	8007644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007636:	f7ff fa19 	bl	8006a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff ff81 	bl	8007544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007642:	e024      	b.n	800768e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d008      	beq.n	800765c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800764a:	4b13      	ldr	r3, [pc, #76]	@ (8007698 <prvProcessTimerOrBlockTask+0x90>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <prvProcessTimerOrBlockTask+0x50>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <prvProcessTimerOrBlockTask+0x52>
 8007658:	2300      	movs	r3, #0
 800765a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800765c:	4b0f      	ldr	r3, [pc, #60]	@ (800769c <prvProcessTimerOrBlockTask+0x94>)
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	f7fe ff59 	bl	8006520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800766e:	f7ff f9fd 	bl	8006a6c <xTaskResumeAll>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007678:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <prvProcessTimerOrBlockTask+0x98>)
 800767a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	f3bf 8f6f 	isb	sy
}
 8007688:	e001      	b.n	800768e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800768a:	f7ff f9ef 	bl	8006a6c <xTaskResumeAll>
}
 800768e:	bf00      	nop
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000e50 	.word	0x20000e50
 800769c:	20000e54 	.word	0x20000e54
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076ac:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <prvGetNextExpireTime+0x40>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <prvGetNextExpireTime+0x16>
 80076b6:	2201      	movs	r2, #1
 80076b8:	e000      	b.n	80076bc <prvGetNextExpireTime+0x18>
 80076ba:	2200      	movs	r2, #0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <prvGetNextExpireTime+0x40>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	e001      	b.n	80076d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	20000e4c 	.word	0x20000e4c

080076e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076f0:	f7ff fa5a 	bl	8006ba8 <xTaskGetTickCount>
 80076f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007724 <prvSampleTimeNow+0x3c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d205      	bcs.n	800770c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007700:	f000 f93a 	bl	8007978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e002      	b.n	8007712 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007712:	4a04      	ldr	r2, [pc, #16]	@ (8007724 <prvSampleTimeNow+0x3c>)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007718:	68fb      	ldr	r3, [r7, #12]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000e5c 	.word	0x20000e5c

08007728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d812      	bhi.n	8007774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	429a      	cmp	r2, r3
 800775a:	d302      	bcc.n	8007762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800775c:	2301      	movs	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e01b      	b.n	800779a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <prvInsertTimerInActiveList+0x7c>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f7fe f8ef 	bl	8005950 <vListInsert>
 8007772:	e012      	b.n	800779a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d206      	bcs.n	800778a <prvInsertTimerInActiveList+0x62>
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e007      	b.n	800779a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800778a:	4b07      	ldr	r3, [pc, #28]	@ (80077a8 <prvInsertTimerInActiveList+0x80>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f7fe f8db 	bl	8005950 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800779a:	697b      	ldr	r3, [r7, #20]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000e50 	.word	0x20000e50
 80077a8:	20000e4c 	.word	0x20000e4c

080077ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	@ 0x38
 80077b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077b2:	e0ce      	b.n	8007952 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da19      	bge.n	80077ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077ba:	1d3b      	adds	r3, r7, #4
 80077bc:	3304      	adds	r3, #4
 80077be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	61fb      	str	r3, [r7, #28]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e4:	6850      	ldr	r0, [r2, #4]
 80077e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e8:	6892      	ldr	r2, [r2, #8]
 80077ea:	4611      	mov	r1, r2
 80077ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f2c0 80ae 	blt.w	8007952 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f8da 	bl	80059c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800780c:	463b      	mov	r3, r7
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff ff6a 	bl	80076e8 <prvSampleTimeNow>
 8007814:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b09      	cmp	r3, #9
 800781a:	f200 8097 	bhi.w	800794c <prvProcessReceivedCommands+0x1a0>
 800781e:	a201      	add	r2, pc, #4	@ (adr r2, 8007824 <prvProcessReceivedCommands+0x78>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	0800784d 	.word	0x0800784d
 8007828:	0800784d 	.word	0x0800784d
 800782c:	0800784d 	.word	0x0800784d
 8007830:	080078c3 	.word	0x080078c3
 8007834:	080078d7 	.word	0x080078d7
 8007838:	08007923 	.word	0x08007923
 800783c:	0800784d 	.word	0x0800784d
 8007840:	0800784d 	.word	0x0800784d
 8007844:	080078c3 	.word	0x080078c3
 8007848:	080078d7 	.word	0x080078d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	18d1      	adds	r1, r2, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800786a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800786c:	f7ff ff5c 	bl	8007728 <prvInsertTimerInActiveList>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d06c      	beq.n	8007950 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800787c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d061      	beq.n	8007950 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	441a      	add	r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	2100      	movs	r1, #0
 800789c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800789e:	f7ff fe03 	bl	80074a8 <xTimerGenericCommand>
 80078a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d152      	bne.n	8007950 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	61bb      	str	r3, [r7, #24]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078d4:	e03d      	b.n	8007952 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078dc:	f043 0301 	orr.w	r3, r3, #1
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	617b      	str	r3, [r7, #20]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	18d1      	adds	r1, r2, r3
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800791a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800791c:	f7ff ff04 	bl	8007728 <prvInsertTimerInActiveList>
					break;
 8007920:	e017      	b.n	8007952 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007932:	f000 fb03 	bl	8007f3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007936:	e00c      	b.n	8007952 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800793e:	f023 0301 	bic.w	r3, r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800794a:	e002      	b.n	8007952 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800794c:	bf00      	nop
 800794e:	e000      	b.n	8007952 <prvProcessReceivedCommands+0x1a6>
					break;
 8007950:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007952:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <prvProcessReceivedCommands+0x1c8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1d39      	adds	r1, r7, #4
 8007958:	2200      	movs	r2, #0
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fb44 	bl	8005fe8 <xQueueReceive>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f47f af26 	bne.w	80077b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	3730      	adds	r7, #48	@ 0x30
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000e54 	.word	0x20000e54

08007978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800797e:	e049      	b.n	8007a14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007980:	4b2e      	ldr	r3, [pc, #184]	@ (8007a3c <prvSwitchTimerLists+0xc4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a3c <prvSwitchTimerLists+0xc4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe f811 	bl	80059c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d02f      	beq.n	8007a14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4413      	add	r3, r2
 80079bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d90e      	bls.n	80079e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079d2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a3c <prvSwitchTimerLists+0xc4>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fd ffb7 	bl	8005950 <vListInsert>
 80079e2:	e017      	b.n	8007a14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079e4:	2300      	movs	r3, #0
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	2300      	movs	r3, #0
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	2100      	movs	r1, #0
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff fd5a 	bl	80074a8 <xTimerGenericCommand>
 80079f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10b      	bne.n	8007a14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	603b      	str	r3, [r7, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a14:	4b09      	ldr	r3, [pc, #36]	@ (8007a3c <prvSwitchTimerLists+0xc4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1b0      	bne.n	8007980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a1e:	4b07      	ldr	r3, [pc, #28]	@ (8007a3c <prvSwitchTimerLists+0xc4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <prvSwitchTimerLists+0xc8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a04      	ldr	r2, [pc, #16]	@ (8007a3c <prvSwitchTimerLists+0xc4>)
 8007a2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a2c:	4a04      	ldr	r2, [pc, #16]	@ (8007a40 <prvSwitchTimerLists+0xc8>)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6013      	str	r3, [r2, #0]
}
 8007a32:	bf00      	nop
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000e4c 	.word	0x20000e4c
 8007a40:	20000e50 	.word	0x20000e50

08007a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a4a:	f000 f92f 	bl	8007cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a4e:	4b15      	ldr	r3, [pc, #84]	@ (8007aa4 <prvCheckForValidListAndQueue+0x60>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d120      	bne.n	8007a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a56:	4814      	ldr	r0, [pc, #80]	@ (8007aa8 <prvCheckForValidListAndQueue+0x64>)
 8007a58:	f7fd ff2c 	bl	80058b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a5c:	4813      	ldr	r0, [pc, #76]	@ (8007aac <prvCheckForValidListAndQueue+0x68>)
 8007a5e:	f7fd ff29 	bl	80058b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a62:	4b13      	ldr	r3, [pc, #76]	@ (8007ab0 <prvCheckForValidListAndQueue+0x6c>)
 8007a64:	4a10      	ldr	r2, [pc, #64]	@ (8007aa8 <prvCheckForValidListAndQueue+0x64>)
 8007a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a68:	4b12      	ldr	r3, [pc, #72]	@ (8007ab4 <prvCheckForValidListAndQueue+0x70>)
 8007a6a:	4a10      	ldr	r2, [pc, #64]	@ (8007aac <prvCheckForValidListAndQueue+0x68>)
 8007a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4b11      	ldr	r3, [pc, #68]	@ (8007ab8 <prvCheckForValidListAndQueue+0x74>)
 8007a74:	4a11      	ldr	r2, [pc, #68]	@ (8007abc <prvCheckForValidListAndQueue+0x78>)
 8007a76:	2110      	movs	r1, #16
 8007a78:	200a      	movs	r0, #10
 8007a7a:	f7fe f835 	bl	8005ae8 <xQueueGenericCreateStatic>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4a08      	ldr	r2, [pc, #32]	@ (8007aa4 <prvCheckForValidListAndQueue+0x60>)
 8007a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a84:	4b07      	ldr	r3, [pc, #28]	@ (8007aa4 <prvCheckForValidListAndQueue+0x60>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a8c:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <prvCheckForValidListAndQueue+0x60>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	490b      	ldr	r1, [pc, #44]	@ (8007ac0 <prvCheckForValidListAndQueue+0x7c>)
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe fd1c 	bl	80064d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a98:	f000 f938 	bl	8007d0c <vPortExitCritical>
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000e54 	.word	0x20000e54
 8007aa8:	20000e24 	.word	0x20000e24
 8007aac:	20000e38 	.word	0x20000e38
 8007ab0:	20000e4c 	.word	0x20000e4c
 8007ab4:	20000e50 	.word	0x20000e50
 8007ab8:	20000f00 	.word	0x20000f00
 8007abc:	20000e60 	.word	0x20000e60
 8007ac0:	0800d2ac 	.word	0x0800d2ac

08007ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3b04      	subs	r3, #4
 8007ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007af4:	4a08      	ldr	r2, [pc, #32]	@ (8007b18 <pxPortInitialiseStack+0x54>)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3b14      	subs	r3, #20
 8007afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3b20      	subs	r3, #32
 8007b0a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr
 8007b18:	08007b1d 	.word	0x08007b1d

08007b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b26:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <prvTaskExitError+0x54>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d00b      	beq.n	8007b48 <prvTaskExitError+0x2c>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <prvTaskExitError+0x28>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60bb      	str	r3, [r7, #8]
}
 8007b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b5c:	bf00      	nop
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0fc      	beq.n	8007b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr
 8007b70:	2000000c 	.word	0x2000000c
	...

08007b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	@ (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b9e:	4770      	bx	lr

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007ba8:	4806      	ldr	r0, [pc, #24]	@ (8007bc4 <prvPortStartFirstTask+0x1c>)
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f380 8808 	msr	MSP, r0
 8007bb2:	b662      	cpsie	i
 8007bb4:	b661      	cpsie	f
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	df00      	svc	0
 8007bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bc2:	bf00      	nop
 8007bc4:	e000ed08 	.word	0xe000ed08

08007bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bce:	4b32      	ldr	r3, [pc, #200]	@ (8007c98 <xPortStartScheduler+0xd0>)
 8007bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	22ff      	movs	r2, #255	@ 0xff
 8007bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c9c <xPortStartScheduler+0xd4>)
 8007bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007bf8:	2207      	movs	r2, #7
 8007bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bfc:	e009      	b.n	8007c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bfe:	4b28      	ldr	r3, [pc, #160]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	4a26      	ldr	r2, [pc, #152]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b80      	cmp	r3, #128	@ 0x80
 8007c1c:	d0ef      	beq.n	8007bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f1c3 0307 	rsb	r3, r3, #7
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d00b      	beq.n	8007c42 <xPortStartScheduler+0x7a>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	60bb      	str	r3, [r7, #8]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c42:	4b17      	ldr	r3, [pc, #92]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c4c:	4b14      	ldr	r3, [pc, #80]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c54:	4a12      	ldr	r2, [pc, #72]	@ (8007ca0 <xPortStartScheduler+0xd8>)
 8007c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c60:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <xPortStartScheduler+0xdc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca4 <xPortStartScheduler+0xdc>)
 8007c66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca4 <xPortStartScheduler+0xdc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <xPortStartScheduler+0xdc>)
 8007c72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c78:	f000 f8b8 	bl	8007dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca8 <xPortStartScheduler+0xe0>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c82:	f7ff ff91 	bl	8007ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c86:	f7ff f857 	bl	8006d38 <vTaskSwitchContext>
	prvTaskExitError();
 8007c8a:	f7ff ff47 	bl	8007b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	e000e400 	.word	0xe000e400
 8007c9c:	20000f50 	.word	0x20000f50
 8007ca0:	20000f54 	.word	0x20000f54
 8007ca4:	e000ed20 	.word	0xe000ed20
 8007ca8:	2000000c 	.word	0x2000000c

08007cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	607b      	str	r3, [r7, #4]
}
 8007cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d04 <vPortEnterCritical+0x58>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8007d04 <vPortEnterCritical+0x58>)
 8007cce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d04 <vPortEnterCritical+0x58>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d110      	bne.n	8007cfa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <vPortEnterCritical+0x5c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <vPortEnterCritical+0x4e>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	603b      	str	r3, [r7, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <vPortEnterCritical+0x4a>
	}
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr
 8007d04:	2000000c 	.word	0x2000000c
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d12:	4b12      	ldr	r3, [pc, #72]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <vPortExitCritical+0x26>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	607b      	str	r3, [r7, #4]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d32:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4a08      	ldr	r2, [pc, #32]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <vPortExitCritical+0x50>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <vPortExitCritical+0x44>
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	2000000c 	.word	0x2000000c

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d70:	6010      	str	r0, [r2, #0]
 8007d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d76:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d7a:	f380 8811 	msr	BASEPRI, r0
 8007d7e:	f7fe ffdb 	bl	8006d38 <vTaskSwitchContext>
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f380 8811 	msr	BASEPRI, r0
 8007d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	6808      	ldr	r0, [r1, #0]
 8007d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d96:	f380 8809 	msr	PSP, r0
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	4770      	bx	lr

08007da0 <pxCurrentTCBConst>:
 8007da0:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop

08007da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	607b      	str	r3, [r7, #4]
}
 8007dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dc2:	f7fe feff 	bl	8006bc4 <xTaskIncrementTick>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dcc:	4b06      	ldr	r3, [pc, #24]	@ (8007de8 <SysTick_Handler+0x40>)
 8007dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f383 8811 	msr	BASEPRI, r3
}
 8007dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007df0:	4b0a      	ldr	r3, [pc, #40]	@ (8007e1c <vPortSetupTimerInterrupt+0x30>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007df6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <vPortSetupTimerInterrupt+0x34>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dfc:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <vPortSetupTimerInterrupt+0x38>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a09      	ldr	r2, [pc, #36]	@ (8007e28 <vPortSetupTimerInterrupt+0x3c>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	4a08      	ldr	r2, [pc, #32]	@ (8007e2c <vPortSetupTimerInterrupt+0x40>)
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e0e:	4b03      	ldr	r3, [pc, #12]	@ (8007e1c <vPortSetupTimerInterrupt+0x30>)
 8007e10:	2207      	movs	r2, #7
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr
 8007e1c:	e000e010 	.word	0xe000e010
 8007e20:	e000e018 	.word	0xe000e018
 8007e24:	20000000 	.word	0x20000000
 8007e28:	10624dd3 	.word	0x10624dd3
 8007e2c:	e000e014 	.word	0xe000e014

08007e30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e36:	f3ef 8305 	mrs	r3, IPSR
 8007e3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b0f      	cmp	r3, #15
 8007e40:	d915      	bls.n	8007e6e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e42:	4a17      	ldr	r2, [pc, #92]	@ (8007ea0 <vPortValidateInterruptPriority+0x70>)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e4c:	4b15      	ldr	r3, [pc, #84]	@ (8007ea4 <vPortValidateInterruptPriority+0x74>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	7afa      	ldrb	r2, [r7, #11]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d20b      	bcs.n	8007e6e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	607b      	str	r3, [r7, #4]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea8 <vPortValidateInterruptPriority+0x78>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <vPortValidateInterruptPriority+0x7c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d90b      	bls.n	8007e96 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	603b      	str	r3, [r7, #0]
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	e7fd      	b.n	8007e92 <vPortValidateInterruptPriority+0x62>
	}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr
 8007ea0:	e000e3f0 	.word	0xe000e3f0
 8007ea4:	20000f50 	.word	0x20000f50
 8007ea8:	e000ed0c 	.word	0xe000ed0c
 8007eac:	20000f54 	.word	0x20000f54

08007eb0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f023 0307 	bic.w	r3, r3, #7
 8007ecc:	3308      	adds	r3, #8
 8007ece:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8007ed0:	f7fe fdbe 	bl	8006a50 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8007ed4:	4b16      	ldr	r3, [pc, #88]	@ (8007f30 <pvPortMalloc+0x80>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8007edc:	4b15      	ldr	r3, [pc, #84]	@ (8007f34 <pvPortMalloc+0x84>)
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	4b12      	ldr	r3, [pc, #72]	@ (8007f30 <pvPortMalloc+0x80>)
 8007ee6:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007ee8:	4b13      	ldr	r3, [pc, #76]	@ (8007f38 <pvPortMalloc+0x88>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f642 72f7 	movw	r2, #12279	@ 0x2ff7
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d813      	bhi.n	8007f20 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <pvPortMalloc+0x88>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	441a      	add	r2, r3
 8007f00:	4b0d      	ldr	r3, [pc, #52]	@ (8007f38 <pvPortMalloc+0x88>)
 8007f02:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d90b      	bls.n	8007f20 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007f08:	4b09      	ldr	r3, [pc, #36]	@ (8007f30 <pvPortMalloc+0x80>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <pvPortMalloc+0x88>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4413      	add	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8007f14:	4b08      	ldr	r3, [pc, #32]	@ (8007f38 <pvPortMalloc+0x88>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	4a06      	ldr	r2, [pc, #24]	@ (8007f38 <pvPortMalloc+0x88>)
 8007f1e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f20:	f7fe fda4 	bl	8006a6c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007f24:	68fb      	ldr	r3, [r7, #12]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20003f5c 	.word	0x20003f5c
 8007f34:	20000f60 	.word	0x20000f60
 8007f38:	20003f58 	.word	0x20003f58

08007f3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <vPortFree+0x26>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	60fb      	str	r3, [r7, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <vPortFree+0x22>
}
 8007f62:	bf00      	nop
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007f74:	4a24      	ldr	r2, [pc, #144]	@ (8008008 <RadioInit+0x9c>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007f7a:	4b24      	ldr	r3, [pc, #144]	@ (800800c <RadioInit+0xa0>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007f80:	4b22      	ldr	r3, [pc, #136]	@ (800800c <RadioInit+0xa0>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007f86:	4b21      	ldr	r3, [pc, #132]	@ (800800c <RadioInit+0xa0>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800800c <RadioInit+0xa0>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007f92:	481f      	ldr	r0, [pc, #124]	@ (8008010 <RadioInit+0xa4>)
 8007f94:	f001 ff86 	bl	8009ea4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007f98:	4b1c      	ldr	r3, [pc, #112]	@ (800800c <RadioInit+0xa0>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800800c <RadioInit+0xa0>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007fa4:	f002 fa1a 	bl	800a3dc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007fa8:	2100      	movs	r1, #0
 8007faa:	2000      	movs	r0, #0
 8007fac:	f002 fdf0 	bl	800ab90 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f002 fba7 	bl	800a708 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007fc2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007fc6:	f002 fad3 	bl	800a570 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007fca:	f000 fe91 	bl	8008cf0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	4b10      	ldr	r3, [pc, #64]	@ (8008014 <RadioInit+0xa8>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8007fda:	480f      	ldr	r0, [pc, #60]	@ (8008018 <RadioInit+0xac>)
 8007fdc:	f003 fb76 	bl	800b6cc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <RadioInit+0xb0>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8007fec:	480c      	ldr	r0, [pc, #48]	@ (8008020 <RadioInit+0xb4>)
 8007fee:	f003 fb6d 	bl	800b6cc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007ff2:	4809      	ldr	r0, [pc, #36]	@ (8008018 <RadioInit+0xac>)
 8007ff4:	f003 fc0e 	bl	800b814 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007ff8:	4809      	ldr	r0, [pc, #36]	@ (8008020 <RadioInit+0xb4>)
 8007ffa:	f003 fc0b 	bl	800b814 <UTIL_TIMER_Stop>
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20004060 	.word	0x20004060
 800800c:	20004064 	.word	0x20004064
 8008010:	080090e5 	.word	0x080090e5
 8008014:	0800906d 	.word	0x0800906d
 8008018:	200040c0 	.word	0x200040c0
 800801c:	08009081 	.word	0x08009081
 8008020:	200040d8 	.word	0x200040d8

08008024 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008028:	f001 ff84 	bl	8009f34 <SUBGRF_GetOperatingMode>
 800802c:	4603      	mov	r3, r0
 800802e:	2b07      	cmp	r3, #7
 8008030:	d00a      	beq.n	8008048 <RadioGetStatus+0x24>
 8008032:	2b07      	cmp	r3, #7
 8008034:	dc0a      	bgt.n	800804c <RadioGetStatus+0x28>
 8008036:	2b04      	cmp	r3, #4
 8008038:	d002      	beq.n	8008040 <RadioGetStatus+0x1c>
 800803a:	2b05      	cmp	r3, #5
 800803c:	d002      	beq.n	8008044 <RadioGetStatus+0x20>
 800803e:	e005      	b.n	800804c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008040:	2302      	movs	r3, #2
 8008042:	e004      	b.n	800804e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008044:	2301      	movs	r3, #1
 8008046:	e002      	b.n	800804e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008048:	2303      	movs	r3, #3
 800804a:	e000      	b.n	800804e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800804c:	2300      	movs	r3, #0
    }
}
 800804e:	4618      	mov	r0, r3
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800805e:	4a2a      	ldr	r2, [pc, #168]	@ (8008108 <RadioSetModem+0xb4>)
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	4618      	mov	r0, r3
 8008068:	f003 f965 	bl	800b336 <RFW_SetRadioModem>
    switch( modem )
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b05      	cmp	r3, #5
 8008070:	d80e      	bhi.n	8008090 <RadioSetModem+0x3c>
 8008072:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <RadioSetModem+0x24>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	0800809f 	.word	0x0800809f
 800807c:	080080ad 	.word	0x080080ad
 8008080:	08008091 	.word	0x08008091
 8008084:	080080d3 	.word	0x080080d3
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080ef 	.word	0x080080ef
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008090:	2003      	movs	r0, #3
 8008092:	f002 fb13 	bl	800a6bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008096:	4b1c      	ldr	r3, [pc, #112]	@ (8008108 <RadioSetModem+0xb4>)
 8008098:	2200      	movs	r2, #0
 800809a:	735a      	strb	r2, [r3, #13]
        break;
 800809c:	e02f      	b.n	80080fe <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800809e:	2000      	movs	r0, #0
 80080a0:	f002 fb0c 	bl	800a6bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080a4:	4b18      	ldr	r3, [pc, #96]	@ (8008108 <RadioSetModem+0xb4>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	735a      	strb	r2, [r3, #13]
        break;
 80080aa:	e028      	b.n	80080fe <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80080ac:	2001      	movs	r0, #1
 80080ae:	f002 fb05 	bl	800a6bc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80080b2:	4b15      	ldr	r3, [pc, #84]	@ (8008108 <RadioSetModem+0xb4>)
 80080b4:	7b5a      	ldrb	r2, [r3, #13]
 80080b6:	4b14      	ldr	r3, [pc, #80]	@ (8008108 <RadioSetModem+0xb4>)
 80080b8:	7b1b      	ldrb	r3, [r3, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d01e      	beq.n	80080fc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80080be:	4b12      	ldr	r3, [pc, #72]	@ (8008108 <RadioSetModem+0xb4>)
 80080c0:	7b1a      	ldrb	r2, [r3, #12]
 80080c2:	4b11      	ldr	r3, [pc, #68]	@ (8008108 <RadioSetModem+0xb4>)
 80080c4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80080c6:	4b10      	ldr	r3, [pc, #64]	@ (8008108 <RadioSetModem+0xb4>)
 80080c8:	7b5b      	ldrb	r3, [r3, #13]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 ff98 	bl	8009000 <RadioSetPublicNetwork>
        }
        break;
 80080d0:	e014      	b.n	80080fc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80080d2:	2002      	movs	r0, #2
 80080d4:	f002 faf2 	bl	800a6bc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008108 <RadioSetModem+0xb4>)
 80080da:	2200      	movs	r2, #0
 80080dc:	735a      	strb	r2, [r3, #13]
        break;
 80080de:	e00e      	b.n	80080fe <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80080e0:	2002      	movs	r0, #2
 80080e2:	f002 faeb 	bl	800a6bc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080e6:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <RadioSetModem+0xb4>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	735a      	strb	r2, [r3, #13]
        break;
 80080ec:	e007      	b.n	80080fe <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80080ee:	2000      	movs	r0, #0
 80080f0:	f002 fae4 	bl	800a6bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080f4:	4b04      	ldr	r3, [pc, #16]	@ (8008108 <RadioSetModem+0xb4>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	735a      	strb	r2, [r3, #13]
        break;
 80080fa:	e000      	b.n	80080fe <RadioSetModem+0xaa>
        break;
 80080fc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20004064 	.word	0x20004064

0800810c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f002 fa87 	bl	800a628 <SUBGRF_SetRfFrequency>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b090      	sub	sp, #64	@ 0x40
 8008126:	af0a      	add	r7, sp, #40	@ 0x28
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008132:	2301      	movs	r3, #1
 8008134:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800813e:	f000 fdea 	bl	8008d16 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008142:	2000      	movs	r0, #0
 8008144:	f7ff ff86 	bl	8008054 <RadioSetModem>

    RadioSetChannel( freq );
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff ffdf 	bl	800810c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800814e:	2301      	movs	r3, #1
 8008150:	9309      	str	r3, [sp, #36]	@ 0x24
 8008152:	2300      	movs	r3, #0
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	2300      	movs	r3, #0
 8008158:	9307      	str	r3, [sp, #28]
 800815a:	2300      	movs	r3, #0
 800815c:	9306      	str	r3, [sp, #24]
 800815e:	2300      	movs	r3, #0
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	2300      	movs	r3, #0
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	2300      	movs	r3, #0
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	2300      	movs	r3, #0
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	2303      	movs	r3, #3
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	2000      	movs	r0, #0
 8008180:	f000 f83c 	bl	80081fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8008184:	2000      	movs	r0, #0
 8008186:	f000 fdcd 	bl	8008d24 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800818a:	f000 ff67 	bl	800905c <RadioGetWakeupTime>
 800818e:	4603      	mov	r3, r0
 8008190:	4618      	mov	r0, r3
 8008192:	f7f8 fe57 	bl	8000e44 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8008196:	f003 fbd7 	bl	800b948 <UTIL_TIMER_GetCurrentTime>
 800819a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800819c:	e00d      	b.n	80081ba <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800819e:	2000      	movs	r0, #0
 80081a0:	f000 feae 	bl	8008f00 <RadioRssi>
 80081a4:	4603      	mov	r3, r0
 80081a6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80081a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80081ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	dd02      	ble.n	80081ba <RadioIsChannelFree+0x98>
        {
            status = false;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
            break;
 80081b8:	e006      	b.n	80081c8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f003 fbd6 	bl	800b96c <UTIL_TIMER_GetElapsedTime>
 80081c0:	4602      	mov	r2, r0
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d8ea      	bhi.n	800819e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80081c8:	f000 fda5 	bl	8008d16 <RadioStandby>

    return status;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	2000      	movs	r0, #0
 80081e8:	f002 f9c2 	bl	800a570 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80081ec:	f001 ff73 	bl	800a0d6 <SUBGRF_GetRandom>
 80081f0:	6078      	str	r0, [r7, #4]

    return rnd;
 80081f2:	687b      	ldr	r3, [r7, #4]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	@ 0x28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	461a      	mov	r2, r3
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	4613      	mov	r3, r2
 800820e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008210:	4ab9      	ldr	r2, [pc, #740]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008212:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008216:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008218:	f003 f84b 	bl	800b2b2 <RFW_DeInit>
    if( rxContinuous == true )
 800821c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008228:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008230:	4ab2      	ldr	r2, [pc, #712]	@ (80084fc <RadioSetRxConfig+0x300>)
 8008232:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008236:	7013      	strb	r3, [r2, #0]
 8008238:	e002      	b.n	8008240 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800823a:	4bb0      	ldr	r3, [pc, #704]	@ (80084fc <RadioSetRxConfig+0x300>)
 800823c:	22ff      	movs	r2, #255	@ 0xff
 800823e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d009      	beq.n	800825a <RadioSetRxConfig+0x5e>
 8008246:	2b05      	cmp	r3, #5
 8008248:	f300 81d7 	bgt.w	80085fa <RadioSetRxConfig+0x3fe>
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80bf 	beq.w	80083d0 <RadioSetRxConfig+0x1d4>
 8008252:	2b01      	cmp	r3, #1
 8008254:	f000 8124 	beq.w	80084a0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008258:	e1cf      	b.n	80085fa <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800825a:	2001      	movs	r0, #1
 800825c:	f002 f880 	bl	800a360 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008260:	4ba5      	ldr	r3, [pc, #660]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008268:	4aa3      	ldr	r2, [pc, #652]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800826e:	4ba2      	ldr	r3, [pc, #648]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008270:	2209      	movs	r2, #9
 8008272:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8008276:	4ba0      	ldr	r3, [pc, #640]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008278:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800827c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800827e:	68b8      	ldr	r0, [r7, #8]
 8008280:	f002 ff4a 	bl	800b118 <SUBGRF_GetFskBandwidthRegValue>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	4b9b      	ldr	r3, [pc, #620]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800828a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800828e:	4b9a      	ldr	r3, [pc, #616]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008290:	2200      	movs	r2, #0
 8008292:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008294:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	b29a      	uxth	r2, r3
 800829a:	4b97      	ldr	r3, [pc, #604]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800829c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800829e:	4b96      	ldr	r3, [pc, #600]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80082a4:	4b94      	ldr	r3, [pc, #592]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082a6:	2210      	movs	r2, #16
 80082a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80082aa:	4b93      	ldr	r3, [pc, #588]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80082b0:	4b91      	ldr	r3, [pc, #580]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80082b6:	4b91      	ldr	r3, [pc, #580]	@ (80084fc <RadioSetRxConfig+0x300>)
 80082b8:	781a      	ldrb	r2, [r3, #0]
 80082ba:	4b8f      	ldr	r3, [pc, #572]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80082be:	4b8e      	ldr	r3, [pc, #568]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80082c4:	4b8c      	ldr	r3, [pc, #560]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80082ca:	2005      	movs	r0, #5
 80082cc:	f7ff fec2 	bl	8008054 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80082d0:	488b      	ldr	r0, [pc, #556]	@ (8008500 <RadioSetRxConfig+0x304>)
 80082d2:	f002 fae9 	bl	800a8a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082d6:	488b      	ldr	r0, [pc, #556]	@ (8008504 <RadioSetRxConfig+0x308>)
 80082d8:	f002 fbbc 	bl	800aa54 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80082dc:	4a8a      	ldr	r2, [pc, #552]	@ (8008508 <RadioSetRxConfig+0x30c>)
 80082de:	f107 031c 	add.w	r3, r7, #28
 80082e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80082ea:	f107 031c 	add.w	r3, r7, #28
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fe6f 	bl	8009fd2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80082f4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80082f8:	f001 feba 	bl	800a070 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80082fc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008300:	f000 fe1c 	bl	8008f3c <RadioRead>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800830a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800830e:	f023 0310 	bic.w	r3, r3, #16
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800831a:	4619      	mov	r1, r3
 800831c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008320:	f000 fdfa 	bl	8008f18 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008324:	2104      	movs	r1, #4
 8008326:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800832a:	f000 fdf5 	bl	8008f18 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800832e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008332:	f000 fe03 	bl	8008f3c <RadioRead>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800833c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008340:	f023 031c 	bic.w	r3, r3, #28
 8008344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800834c:	f043 0308 	orr.w	r3, r3, #8
 8008350:	b2db      	uxtb	r3, r3
 8008352:	4619      	mov	r1, r3
 8008354:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008358:	f000 fdde 	bl	8008f18 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800835c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008360:	f000 fdec 	bl	8008f3c <RadioRead>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800836a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800836e:	f023 0318 	bic.w	r3, r3, #24
 8008372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8008376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800837a:	f043 0318 	orr.w	r3, r3, #24
 800837e:	b2db      	uxtb	r3, r3
 8008380:	4619      	mov	r1, r3
 8008382:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008386:	f000 fdc7 	bl	8008f18 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800838a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800838e:	f000 fdd5 	bl	8008f3c <RadioRead>
 8008392:	4603      	mov	r3, r0
 8008394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800839c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80083a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083a8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	4619      	mov	r1, r3
 80083b0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80083b4:	f000 fdb0 	bl	8008f18 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80083b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80083ba:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	461a      	mov	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ca:	4a4b      	ldr	r2, [pc, #300]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80083cc:	6093      	str	r3, [r2, #8]
            break;
 80083ce:	e115      	b.n	80085fc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80083d0:	2000      	movs	r0, #0
 80083d2:	f001 ffc5 	bl	800a360 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80083d6:	4b48      	ldr	r3, [pc, #288]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80083de:	4a46      	ldr	r2, [pc, #280]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80083e4:	4b44      	ldr	r3, [pc, #272]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80083e6:	220b      	movs	r2, #11
 80083e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80083ec:	68b8      	ldr	r0, [r7, #8]
 80083ee:	f002 fe93 	bl	800b118 <SUBGRF_GetFskBandwidthRegValue>
 80083f2:	4603      	mov	r3, r0
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b40      	ldr	r3, [pc, #256]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80083f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083fc:	4b3e      	ldr	r3, [pc, #248]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80083fe:	2200      	movs	r2, #0
 8008400:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008402:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	b29a      	uxth	r2, r3
 8008408:	4b3b      	ldr	r3, [pc, #236]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800840a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800840c:	4b3a      	ldr	r3, [pc, #232]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800840e:	2204      	movs	r2, #4
 8008410:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008412:	4b39      	ldr	r3, [pc, #228]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008414:	2218      	movs	r2, #24
 8008416:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008418:	4b37      	ldr	r3, [pc, #220]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800841a:	2200      	movs	r2, #0
 800841c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800841e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008422:	f083 0301 	eor.w	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	4b33      	ldr	r3, [pc, #204]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800842c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800842e:	4b33      	ldr	r3, [pc, #204]	@ (80084fc <RadioSetRxConfig+0x300>)
 8008430:	781a      	ldrb	r2, [r3, #0]
 8008432:	4b31      	ldr	r3, [pc, #196]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008434:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008436:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800843e:	4b2e      	ldr	r3, [pc, #184]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008440:	22f2      	movs	r2, #242	@ 0xf2
 8008442:	75da      	strb	r2, [r3, #23]
 8008444:	e002      	b.n	800844c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008446:	4b2c      	ldr	r3, [pc, #176]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 8008448:	2201      	movs	r2, #1
 800844a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800844c:	4b2a      	ldr	r3, [pc, #168]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800844e:	2201      	movs	r2, #1
 8008450:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008452:	f000 fc60 	bl	8008d16 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008456:	2000      	movs	r0, #0
 8008458:	f7ff fdfc 	bl	8008054 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800845c:	4828      	ldr	r0, [pc, #160]	@ (8008500 <RadioSetRxConfig+0x304>)
 800845e:	f002 fa23 	bl	800a8a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008462:	4828      	ldr	r0, [pc, #160]	@ (8008504 <RadioSetRxConfig+0x308>)
 8008464:	f002 faf6 	bl	800aa54 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008468:	4a28      	ldr	r2, [pc, #160]	@ (800850c <RadioSetRxConfig+0x310>)
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008472:	e883 0003 	stmia.w	r3, {r0, r1}
 8008476:	f107 0314 	add.w	r3, r7, #20
 800847a:	4618      	mov	r0, r3
 800847c:	f001 fda9 	bl	8009fd2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008480:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008484:	f001 fdf4 	bl	800a070 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008488:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800848a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	fbb2 f3f3 	udiv	r3, r2, r3
 800849a:	4a17      	ldr	r2, [pc, #92]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 800849c:	6093      	str	r3, [r2, #8]
            break;
 800849e:	e0ad      	b.n	80085fc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80084a0:	2000      	movs	r0, #0
 80084a2:	f001 ff5d 	bl	800a360 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80084a6:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	4b11      	ldr	r3, [pc, #68]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80084b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80084b8:	4a15      	ldr	r2, [pc, #84]	@ (8008510 <RadioSetRxConfig+0x314>)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4413      	add	r3, r2
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80084c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80084c6:	4a0c      	ldr	r2, [pc, #48]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d105      	bne.n	80084e0 <RadioSetRxConfig+0x2e4>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b0b      	cmp	r3, #11
 80084d8:	d008      	beq.n	80084ec <RadioSetRxConfig+0x2f0>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b0c      	cmp	r3, #12
 80084de:	d005      	beq.n	80084ec <RadioSetRxConfig+0x2f0>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d116      	bne.n	8008514 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b0c      	cmp	r3, #12
 80084ea:	d113      	bne.n	8008514 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80084ec:	4b02      	ldr	r3, [pc, #8]	@ (80084f8 <RadioSetRxConfig+0x2fc>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80084f4:	e012      	b.n	800851c <RadioSetRxConfig+0x320>
 80084f6:	bf00      	nop
 80084f8:	20004064 	.word	0x20004064
 80084fc:	20000010 	.word	0x20000010
 8008500:	2000409c 	.word	0x2000409c
 8008504:	20004072 	.word	0x20004072
 8008508:	0800d2b4 	.word	0x0800d2b4
 800850c:	0800d2bc 	.word	0x0800d2bc
 8008510:	0800d558 	.word	0x0800d558
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008514:	4b3b      	ldr	r3, [pc, #236]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800851c:	4b39      	ldr	r3, [pc, #228]	@ (8008604 <RadioSetRxConfig+0x408>)
 800851e:	2201      	movs	r2, #1
 8008520:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008522:	4b38      	ldr	r3, [pc, #224]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008524:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008528:	2b05      	cmp	r3, #5
 800852a:	d004      	beq.n	8008536 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800852c:	4b35      	ldr	r3, [pc, #212]	@ (8008604 <RadioSetRxConfig+0x408>)
 800852e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008532:	2b06      	cmp	r3, #6
 8008534:	d10a      	bne.n	800854c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008536:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008538:	2b0b      	cmp	r3, #11
 800853a:	d803      	bhi.n	8008544 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800853c:	4b31      	ldr	r3, [pc, #196]	@ (8008604 <RadioSetRxConfig+0x408>)
 800853e:	220c      	movs	r2, #12
 8008540:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008542:	e006      	b.n	8008552 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008544:	4a2f      	ldr	r2, [pc, #188]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008546:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008548:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800854a:	e002      	b.n	8008552 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800854c:	4a2d      	ldr	r2, [pc, #180]	@ (8008604 <RadioSetRxConfig+0x408>)
 800854e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008550:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008552:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008556:	4b2b      	ldr	r3, [pc, #172]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008558:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800855a:	4b2b      	ldr	r3, [pc, #172]	@ (8008608 <RadioSetRxConfig+0x40c>)
 800855c:	781a      	ldrb	r2, [r3, #0]
 800855e:	4b29      	ldr	r3, [pc, #164]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008560:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008562:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8008566:	4b27      	ldr	r3, [pc, #156]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008568:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800856c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008570:	4b24      	ldr	r3, [pc, #144]	@ (8008604 <RadioSetRxConfig+0x408>)
 8008572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008576:	f000 fbce 	bl	8008d16 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800857a:	2001      	movs	r0, #1
 800857c:	f7ff fd6a 	bl	8008054 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008580:	4822      	ldr	r0, [pc, #136]	@ (800860c <RadioSetRxConfig+0x410>)
 8008582:	f002 f991 	bl	800a8a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008586:	4822      	ldr	r0, [pc, #136]	@ (8008610 <RadioSetRxConfig+0x414>)
 8008588:	f002 fa64 	bl	800aa54 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800858c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800858e:	b2db      	uxtb	r3, r3
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fef4 	bl	800a37e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8008596:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800859a:	f002 fbb7 	bl	800ad0c <SUBGRF_ReadRegister>
 800859e:	4603      	mov	r3, r0
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80085ac:	f002 fb9a 	bl	800ace4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80085b0:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <RadioSetRxConfig+0x408>)
 80085b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d10d      	bne.n	80085d6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80085ba:	f240 7036 	movw	r0, #1846	@ 0x736
 80085be:	f002 fba5 	bl	800ad0c <SUBGRF_ReadRegister>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f023 0304 	bic.w	r3, r3, #4
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	f240 7036 	movw	r0, #1846	@ 0x736
 80085d0:	f002 fb88 	bl	800ace4 <SUBGRF_WriteRegister>
 80085d4:	e00c      	b.n	80085f0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80085d6:	f240 7036 	movw	r0, #1846	@ 0x736
 80085da:	f002 fb97 	bl	800ad0c <SUBGRF_ReadRegister>
 80085de:	4603      	mov	r3, r0
 80085e0:	f043 0304 	orr.w	r3, r3, #4
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	f240 7036 	movw	r0, #1846	@ 0x736
 80085ec:	f002 fb7a 	bl	800ace4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80085f0:	4b04      	ldr	r3, [pc, #16]	@ (8008604 <RadioSetRxConfig+0x408>)
 80085f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085f6:	609a      	str	r2, [r3, #8]
            break;
 80085f8:	e000      	b.n	80085fc <RadioSetRxConfig+0x400>
            break;
 80085fa:	bf00      	nop
    }
}
 80085fc:	bf00      	nop
 80085fe:	3728      	adds	r7, #40	@ 0x28
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20004064 	.word	0x20004064
 8008608:	20000010 	.word	0x20000010
 800860c:	2000409c 	.word	0x2000409c
 8008610:	20004072 	.word	0x20004072

08008614 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60ba      	str	r2, [r7, #8]
 800861c:	607b      	str	r3, [r7, #4]
 800861e:	4603      	mov	r3, r0
 8008620:	73fb      	strb	r3, [r7, #15]
 8008622:	460b      	mov	r3, r1
 8008624:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008626:	f002 fe44 	bl	800b2b2 <RFW_DeInit>
    switch( modem )
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	2b04      	cmp	r3, #4
 800862e:	f000 80c7 	beq.w	80087c0 <RadioSetTxConfig+0x1ac>
 8008632:	2b04      	cmp	r3, #4
 8008634:	f300 80d6 	bgt.w	80087e4 <RadioSetTxConfig+0x1d0>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <RadioSetTxConfig+0x2e>
 800863c:	2b01      	cmp	r3, #1
 800863e:	d059      	beq.n	80086f4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008640:	e0d0      	b.n	80087e4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008642:	4b77      	ldr	r3, [pc, #476]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800864a:	4a75      	ldr	r2, [pc, #468]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008650:	4b73      	ldr	r3, [pc, #460]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008652:	220b      	movs	r2, #11
 8008654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f002 fd5d 	bl	800b118 <SUBGRF_GetFskBandwidthRegValue>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	4b6f      	ldr	r3, [pc, #444]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008668:	4a6d      	ldr	r2, [pc, #436]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800866e:	4b6c      	ldr	r3, [pc, #432]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008670:	2200      	movs	r2, #0
 8008672:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008674:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	b29a      	uxth	r2, r3
 800867a:	4b69      	ldr	r3, [pc, #420]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800867c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800867e:	4b68      	ldr	r3, [pc, #416]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008680:	2204      	movs	r2, #4
 8008682:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008684:	4b66      	ldr	r3, [pc, #408]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008686:	2218      	movs	r2, #24
 8008688:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800868a:	4b65      	ldr	r3, [pc, #404]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800868c:	2200      	movs	r2, #0
 800868e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008690:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008694:	f083 0301 	eor.w	r3, r3, #1
 8008698:	b2db      	uxtb	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	4b60      	ldr	r3, [pc, #384]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800869e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80086a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80086a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80086aa:	22f2      	movs	r2, #242	@ 0xf2
 80086ac:	75da      	strb	r2, [r3, #23]
 80086ae:	e002      	b.n	80086b6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80086b0:	4b5b      	ldr	r3, [pc, #364]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80086b6:	4b5a      	ldr	r3, [pc, #360]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80086bc:	f000 fb2b 	bl	8008d16 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80086c0:	2000      	movs	r0, #0
 80086c2:	f7ff fcc7 	bl	8008054 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80086c6:	4857      	ldr	r0, [pc, #348]	@ (8008824 <RadioSetTxConfig+0x210>)
 80086c8:	f002 f8ee 	bl	800a8a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086cc:	4856      	ldr	r0, [pc, #344]	@ (8008828 <RadioSetTxConfig+0x214>)
 80086ce:	f002 f9c1 	bl	800aa54 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80086d2:	4a56      	ldr	r2, [pc, #344]	@ (800882c <RadioSetTxConfig+0x218>)
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 fc74 	bl	8009fd2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80086ea:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80086ee:	f001 fcbf 	bl	800a070 <SUBGRF_SetWhiteningSeed>
            break;
 80086f2:	e078      	b.n	80087e6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80086f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	4b47      	ldr	r3, [pc, #284]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008706:	4a4a      	ldr	r2, [pc, #296]	@ (8008830 <RadioSetTxConfig+0x21c>)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	4b44      	ldr	r3, [pc, #272]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008714:	4a42      	ldr	r2, [pc, #264]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008716:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800871a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d105      	bne.n	8008730 <RadioSetTxConfig+0x11c>
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b0b      	cmp	r3, #11
 8008728:	d008      	beq.n	800873c <RadioSetTxConfig+0x128>
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	2b0c      	cmp	r3, #12
 800872e:	d005      	beq.n	800873c <RadioSetTxConfig+0x128>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d107      	bne.n	8008746 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	2b0c      	cmp	r3, #12
 800873a:	d104      	bne.n	8008746 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800873c:	4b38      	ldr	r3, [pc, #224]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008744:	e003      	b.n	800874e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008746:	4b36      	ldr	r3, [pc, #216]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800874e:	4b34      	ldr	r3, [pc, #208]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008750:	2201      	movs	r2, #1
 8008752:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008754:	4b32      	ldr	r3, [pc, #200]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008756:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800875a:	2b05      	cmp	r3, #5
 800875c:	d004      	beq.n	8008768 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800875e:	4b30      	ldr	r3, [pc, #192]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008760:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008764:	2b06      	cmp	r3, #6
 8008766:	d10a      	bne.n	800877e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8008768:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800876a:	2b0b      	cmp	r3, #11
 800876c:	d803      	bhi.n	8008776 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800876e:	4b2c      	ldr	r3, [pc, #176]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008770:	220c      	movs	r2, #12
 8008772:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008774:	e006      	b.n	8008784 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008776:	4a2a      	ldr	r2, [pc, #168]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008778:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800877a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800877c:	e002      	b.n	8008784 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800877e:	4a28      	ldr	r2, [pc, #160]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008780:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008782:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008784:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008788:	4b25      	ldr	r3, [pc, #148]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800878a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800878c:	4b29      	ldr	r3, [pc, #164]	@ (8008834 <RadioSetTxConfig+0x220>)
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	4b23      	ldr	r3, [pc, #140]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008792:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008794:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008798:	4b21      	ldr	r3, [pc, #132]	@ (8008820 <RadioSetTxConfig+0x20c>)
 800879a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800879e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80087a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80087a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80087a8:	f000 fab5 	bl	8008d16 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80087ac:	2001      	movs	r0, #1
 80087ae:	f7ff fc51 	bl	8008054 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087b2:	481c      	ldr	r0, [pc, #112]	@ (8008824 <RadioSetTxConfig+0x210>)
 80087b4:	f002 f878 	bl	800a8a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087b8:	481b      	ldr	r0, [pc, #108]	@ (8008828 <RadioSetTxConfig+0x214>)
 80087ba:	f002 f94b 	bl	800aa54 <SUBGRF_SetPacketParams>
            break;
 80087be:	e012      	b.n	80087e6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80087c0:	2004      	movs	r0, #4
 80087c2:	f7ff fc47 	bl	8008054 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80087c6:	4b16      	ldr	r3, [pc, #88]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80087c8:	2202      	movs	r2, #2
 80087ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80087ce:	4a14      	ldr	r2, [pc, #80]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80087d4:	4b12      	ldr	r3, [pc, #72]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80087d6:	2216      	movs	r2, #22
 80087d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087dc:	4811      	ldr	r0, [pc, #68]	@ (8008824 <RadioSetTxConfig+0x210>)
 80087de:	f002 f863 	bl	800a8a8 <SUBGRF_SetModulationParams>
            break;
 80087e2:	e000      	b.n	80087e6 <RadioSetTxConfig+0x1d2>
            break;
 80087e4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80087e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f002 fb96 	bl	800af1c <SUBGRF_SetRfTxPower>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008820 <RadioSetTxConfig+0x20c>)
 80087f6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80087fa:	210e      	movs	r1, #14
 80087fc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008800:	f002 fa70 	bl	800ace4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008804:	4b06      	ldr	r3, [pc, #24]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008806:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800880a:	4618      	mov	r0, r3
 800880c:	f002 fd65 	bl	800b2da <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008810:	4a03      	ldr	r2, [pc, #12]	@ (8008820 <RadioSetTxConfig+0x20c>)
 8008812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008814:	6053      	str	r3, [r2, #4]
}
 8008816:	bf00      	nop
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20004064 	.word	0x20004064
 8008824:	2000409c 	.word	0x2000409c
 8008828:	20004072 	.word	0x20004072
 800882c:	0800d2bc 	.word	0x0800d2bc
 8008830:	0800d558 	.word	0x0800d558
 8008834:	20000010 	.word	0x20000010

08008838 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
    return true;
 8008840:	2301      	movs	r3, #1
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr

0800884c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	2b0a      	cmp	r3, #10
 800885e:	d83e      	bhi.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
 8008860:	a201      	add	r2, pc, #4	@ (adr r2, 8008868 <RadioGetLoRaBandwidthInHz+0x1c>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008895 	.word	0x08008895
 800886c:	080088a5 	.word	0x080088a5
 8008870:	080088b5 	.word	0x080088b5
 8008874:	080088c5 	.word	0x080088c5
 8008878:	080088cd 	.word	0x080088cd
 800887c:	080088d3 	.word	0x080088d3
 8008880:	080088d9 	.word	0x080088d9
 8008884:	080088df 	.word	0x080088df
 8008888:	0800889d 	.word	0x0800889d
 800888c:	080088ad 	.word	0x080088ad
 8008890:	080088bd 	.word	0x080088bd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008894:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8008898:	60fb      	str	r3, [r7, #12]
        break;
 800889a:	e020      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800889c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80088a0:	60fb      	str	r3, [r7, #12]
        break;
 80088a2:	e01c      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80088a4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80088a8:	60fb      	str	r3, [r7, #12]
        break;
 80088aa:	e018      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80088ac:	f245 1361 	movw	r3, #20833	@ 0x5161
 80088b0:	60fb      	str	r3, [r7, #12]
        break;
 80088b2:	e014      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80088b4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80088b8:	60fb      	str	r3, [r7, #12]
        break;
 80088ba:	e010      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80088bc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80088c0:	60fb      	str	r3, [r7, #12]
        break;
 80088c2:	e00c      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80088c4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80088c8:	60fb      	str	r3, [r7, #12]
        break;
 80088ca:	e008      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <RadioGetLoRaBandwidthInHz+0xa0>)
 80088ce:	60fb      	str	r3, [r7, #12]
        break;
 80088d0:	e005      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80088d2:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80088d4:	60fb      	str	r3, [r7, #12]
        break;
 80088d6:	e002      	b.n	80088de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80088da:	60fb      	str	r3, [r7, #12]
        break;
 80088dc:	bf00      	nop
    }

    return bandwidthInHz;
 80088de:	68fb      	ldr	r3, [r7, #12]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	0001e848 	.word	0x0001e848
 80088f0:	0003d090 	.word	0x0003d090
 80088f4:	0007a120 	.word	0x0007a120

080088f8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	4603      	mov	r3, r0
 8008908:	70fb      	strb	r3, [r7, #3]
 800890a:	460b      	mov	r3, r1
 800890c:	803b      	strh	r3, [r7, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008912:	883b      	ldrh	r3, [r7, #0]
 8008914:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008916:	78ba      	ldrb	r2, [r7, #2]
 8008918:	f082 0201 	eor.w	r2, r2, #1
 800891c:	b2d2      	uxtb	r2, r2
 800891e:	2a00      	cmp	r2, #0
 8008920:	d001      	beq.n	8008926 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008922:	2208      	movs	r2, #8
 8008924:	e000      	b.n	8008928 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008926:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008928:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800892a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800892e:	7c3b      	ldrb	r3, [r7, #16]
 8008930:	7d39      	ldrb	r1, [r7, #20]
 8008932:	2900      	cmp	r1, #0
 8008934:	d001      	beq.n	800893a <RadioGetGfskTimeOnAirNumerator+0x42>
 8008936:	2102      	movs	r1, #2
 8008938:	e000      	b.n	800893c <RadioGetGfskTimeOnAirNumerator+0x44>
 800893a:	2100      	movs	r1, #0
 800893c:	440b      	add	r3, r1
 800893e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008940:	4413      	add	r3, r2
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr

0800894c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800894c:	b480      	push	{r7}
 800894e:	b08b      	sub	sp, #44	@ 0x2c
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4611      	mov	r1, r2
 8008958:	461a      	mov	r2, r3
 800895a:	460b      	mov	r3, r1
 800895c:	71fb      	strb	r3, [r7, #7]
 800895e:	4613      	mov	r3, r2
 8008960:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	3304      	adds	r3, #4
 8008966:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008968:	2300      	movs	r3, #0
 800896a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b05      	cmp	r3, #5
 8008972:	d002      	beq.n	800897a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b06      	cmp	r3, #6
 8008978:	d104      	bne.n	8008984 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800897a:	88bb      	ldrh	r3, [r7, #4]
 800897c:	2b0b      	cmp	r3, #11
 800897e:	d801      	bhi.n	8008984 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008980:	230c      	movs	r3, #12
 8008982:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d105      	bne.n	8008996 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b0b      	cmp	r3, #11
 800898e:	d008      	beq.n	80089a2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b0c      	cmp	r3, #12
 8008994:	d005      	beq.n	80089a2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d105      	bne.n	80089a8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b0c      	cmp	r3, #12
 80089a0:	d102      	bne.n	80089a8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80089a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80089ac:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80089ae:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	d001      	beq.n	80089ba <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80089b6:	2210      	movs	r2, #16
 80089b8:	e000      	b.n	80089bc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80089ba:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80089bc:	4413      	add	r3, r2
 80089be:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80089c4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80089c6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	d001      	beq.n	80089d2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80089ce:	2200      	movs	r2, #0
 80089d0:	e000      	b.n	80089d4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80089d2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80089d4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80089d6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b06      	cmp	r3, #6
 80089dc:	d803      	bhi.n	80089e6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	623b      	str	r3, [r7, #32]
 80089e4:	e00e      	b.n	8008a04 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	3308      	adds	r3, #8
 80089ea:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80089ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3b02      	subs	r3, #2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	623b      	str	r3, [r7, #32]
 80089fc:	e002      	b.n	8008a04 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da01      	bge.n	8008a0e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	4413      	add	r3, r2
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	fb03 f202 	mul.w	r2, r3, r2
 8008a22:	88bb      	ldrh	r3, [r7, #4]
 8008a24:	4413      	add	r3, r2
    int32_t intermediate =
 8008a26:	330c      	adds	r3, #12
 8008a28:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b06      	cmp	r3, #6
 8008a2e:	d802      	bhi.n	8008a36 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	3302      	adds	r3, #2
 8008a34:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3b02      	subs	r3, #2
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	372c      	adds	r7, #44	@ 0x2c
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr
	...

08008a50 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	@ 0x28
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	4613      	mov	r3, r2
 8008a62:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <RadioTimeOnAir+0x28>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d017      	beq.n	8008aa6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008a76:	e035      	b.n	8008ae4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008a78:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8008a7c:	8c3a      	ldrh	r2, [r7, #32]
 8008a7e:	7bb9      	ldrb	r1, [r7, #14]
 8008a80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff ff32 	bl	80088f8 <RadioGetGfskTimeOnAirNumerator>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	613b      	str	r3, [r7, #16]
        break;
 8008aa4:	e01e      	b.n	8008ae4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008aa6:	8c39      	ldrh	r1, [r7, #32]
 8008aa8:	7bba      	ldrb	r2, [r7, #14]
 8008aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008aae:	9302      	str	r3, [sp, #8]
 8008ab0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	460b      	mov	r3, r1
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	68b8      	ldr	r0, [r7, #8]
 8008ac2:	f7ff ff43 	bl	800894c <RadioGetLoRaTimeOnAirNumerator>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008acc:	fb02 f303 	mul.w	r3, r2, r3
 8008ad0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8008afc <RadioTimeOnAir+0xac>)
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff feb6 	bl	800884c <RadioGetLoRaBandwidthInHz>
 8008ae0:	6138      	str	r0, [r7, #16]
        break;
 8008ae2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4413      	add	r3, r2
 8008aea:	1e5a      	subs	r2, r3, #1
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	0800d558 	.word	0x0800d558

08008b00 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f240 2101 	movw	r1, #513	@ 0x201
 8008b14:	f240 2001 	movw	r0, #513	@ 0x201
 8008b18:	f001 fd2a 	bl	800a570 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008b1c:	4b70      	ldr	r3, [pc, #448]	@ (8008ce0 <RadioSend+0x1e0>)
 8008b1e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008b22:	2101      	movs	r1, #1
 8008b24:	4618      	mov	r0, r3
 8008b26:	f002 f9d1 	bl	800aecc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8008ce0 <RadioSend+0x1e0>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d112      	bne.n	8008b58 <RadioSend+0x58>
 8008b32:	4b6b      	ldr	r3, [pc, #428]	@ (8008ce0 <RadioSend+0x1e0>)
 8008b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b38:	2b06      	cmp	r3, #6
 8008b3a:	d10d      	bne.n	8008b58 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008b3c:	f640 0089 	movw	r0, #2185	@ 0x889
 8008b40:	f002 f8e4 	bl	800ad0c <SUBGRF_ReadRegister>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f023 0304 	bic.w	r3, r3, #4
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	f640 0089 	movw	r0, #2185	@ 0x889
 8008b52:	f002 f8c7 	bl	800ace4 <SUBGRF_WriteRegister>
 8008b56:	e00c      	b.n	8008b72 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008b58:	f640 0089 	movw	r0, #2185	@ 0x889
 8008b5c:	f002 f8d6 	bl	800ad0c <SUBGRF_ReadRegister>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f043 0304 	orr.w	r3, r3, #4
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f640 0089 	movw	r0, #2185	@ 0x889
 8008b6e:	f002 f8b9 	bl	800ace4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008b72:	4b5b      	ldr	r3, [pc, #364]	@ (8008ce0 <RadioSend+0x1e0>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	f200 80a2 	bhi.w	8008cc0 <RadioSend+0x1c0>
 8008b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <RadioSend+0x84>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008bb3 	.word	0x08008bb3
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008bb3 	.word	0x08008bb3
 8008b90:	08008c09 	.word	0x08008c09
 8008b94:	08008c29 	.word	0x08008c29
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008b98:	4a51      	ldr	r2, [pc, #324]	@ (8008ce0 <RadioSend+0x1e0>)
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b9e:	4851      	ldr	r0, [pc, #324]	@ (8008ce4 <RadioSend+0x1e4>)
 8008ba0:	f001 ff58 	bl	800aa54 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f9fe 	bl	8009fac <SUBGRF_SendPayload>
            break;
 8008bb0:	e087      	b.n	8008cc2 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008bb2:	f002 fb84 	bl	800b2be <RFW_Is_Init>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d118      	bne.n	8008bee <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008bbc:	f107 020d 	add.w	r2, r7, #13
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f002 fb92 	bl	800b2ee <RFW_TransmitInit>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10c      	bne.n	8008bea <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008bd0:	7b7a      	ldrb	r2, [r7, #13]
 8008bd2:	4b43      	ldr	r3, [pc, #268]	@ (8008ce0 <RadioSend+0x1e0>)
 8008bd4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bd6:	4843      	ldr	r0, [pc, #268]	@ (8008ce4 <RadioSend+0x1e4>)
 8008bd8:	f001 ff3c 	bl	800aa54 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008bdc:	7b7b      	ldrb	r3, [r7, #13]
 8008bde:	2200      	movs	r2, #0
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f001 f9e2 	bl	8009fac <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008be8:	e06b      	b.n	8008cc2 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e073      	b.n	8008cd6 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008bee:	4a3c      	ldr	r2, [pc, #240]	@ (8008ce0 <RadioSend+0x1e0>)
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bf4:	483b      	ldr	r0, [pc, #236]	@ (8008ce4 <RadioSend+0x1e4>)
 8008bf6:	f001 ff2d 	bl	800aa54 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f9d3 	bl	8009fac <SUBGRF_SendPayload>
            break;
 8008c06:	e05c      	b.n	8008cc2 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008c08:	4b35      	ldr	r3, [pc, #212]	@ (8008ce0 <RadioSend+0x1e0>)
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008c0e:	4a34      	ldr	r2, [pc, #208]	@ (8008ce0 <RadioSend+0x1e0>)
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c14:	4833      	ldr	r0, [pc, #204]	@ (8008ce4 <RadioSend+0x1e4>)
 8008c16:	f001 ff1d 	bl	800aa54 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f9c3 	bl	8009fac <SUBGRF_SendPayload>
            break;
 8008c26:	e04c      	b.n	8008cc2 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	482e      	ldr	r0, [pc, #184]	@ (8008ce8 <RadioSend+0x1e8>)
 8008c30:	f000 fc96 	bl	8009560 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008c34:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce0 <RadioSend+0x1e0>)
 8008c36:	2202      	movs	r2, #2
 8008c38:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <RadioSend+0x1e0>)
 8008c42:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c44:	4827      	ldr	r0, [pc, #156]	@ (8008ce4 <RadioSend+0x1e4>)
 8008c46:	f001 ff05 	bl	800aa54 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	20f1      	movs	r0, #241	@ 0xf1
 8008c4e:	f000 f963 	bl	8008f18 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008c52:	2100      	movs	r1, #0
 8008c54:	20f0      	movs	r0, #240	@ 0xf0
 8008c56:	f000 f95f 	bl	8008f18 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008c5a:	4b21      	ldr	r3, [pc, #132]	@ (8008ce0 <RadioSend+0x1e0>)
 8008c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c5e:	2b64      	cmp	r3, #100	@ 0x64
 8008c60:	d108      	bne.n	8008c74 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008c62:	2170      	movs	r1, #112	@ 0x70
 8008c64:	20f3      	movs	r0, #243	@ 0xf3
 8008c66:	f000 f957 	bl	8008f18 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008c6a:	211d      	movs	r1, #29
 8008c6c:	20f2      	movs	r0, #242	@ 0xf2
 8008c6e:	f000 f953 	bl	8008f18 <RadioWrite>
 8008c72:	e007      	b.n	8008c84 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008c74:	21e1      	movs	r1, #225	@ 0xe1
 8008c76:	20f3      	movs	r0, #243	@ 0xf3
 8008c78:	f000 f94e 	bl	8008f18 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008c7c:	2104      	movs	r1, #4
 8008c7e:	20f2      	movs	r0, #242	@ 0xf2
 8008c80:	f000 f94a 	bl	8008f18 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	20f4      	movs	r0, #244	@ 0xf4
 8008c9c:	f000 f93c 	bl	8008f18 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008ca0:	89fb      	ldrh	r3, [r7, #14]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	20f5      	movs	r0, #245	@ 0xf5
 8008ca8:	f000 f936 	bl	8008f18 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	480b      	ldr	r0, [pc, #44]	@ (8008ce8 <RadioSend+0x1e8>)
 8008cba:	f001 f977 	bl	8009fac <SUBGRF_SendPayload>
            break;
 8008cbe:	e000      	b.n	8008cc2 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008cc0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008cc2:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <RadioSend+0x1e0>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4808      	ldr	r0, [pc, #32]	@ (8008cec <RadioSend+0x1ec>)
 8008cca:	f002 fe13 	bl	800b8f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008cce:	4807      	ldr	r0, [pc, #28]	@ (8008cec <RadioSend+0x1ec>)
 8008cd0:	f002 fd32 	bl	800b738 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20004064 	.word	0x20004064
 8008ce4:	20004072 	.word	0x20004072
 8008ce8:	20003f60 	.word	0x20003f60
 8008cec:	200040c0 	.word	0x200040c0

08008cf0 <RadioSleep>:

static void RadioSleep( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008cfa:	793b      	ldrb	r3, [r7, #4]
 8008cfc:	f043 0304 	orr.w	r3, r3, #4
 8008d00:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008d02:	7938      	ldrb	r0, [r7, #4]
 8008d04:	f001 fa2e 	bl	800a164 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008d08:	2002      	movs	r0, #2
 8008d0a:	f7f8 f89b 	bl	8000e44 <HAL_Delay>
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <RadioStandby>:

static void RadioStandby( void )
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	f001 fa54 	bl	800a1c8 <SUBGRF_SetStandby>
}
 8008d20:	bf00      	nop
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008d2c:	f002 fac7 	bl	800b2be <RFW_Is_Init>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d102      	bne.n	8008d3c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008d36:	f002 faea 	bl	800b30e <RFW_ReceiveInit>
 8008d3a:	e007      	b.n	8008d4c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f240 2162 	movw	r1, #610	@ 0x262
 8008d44:	f240 2062 	movw	r0, #610	@ 0x262
 8008d48:	f001 fc12 	bl	800a570 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d006      	beq.n	8008d60 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4811      	ldr	r0, [pc, #68]	@ (8008d9c <RadioRx+0x78>)
 8008d56:	f002 fdcd 	bl	800b8f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008d5a:	4810      	ldr	r0, [pc, #64]	@ (8008d9c <RadioRx+0x78>)
 8008d5c:	f002 fcec 	bl	800b738 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008d60:	4b0f      	ldr	r3, [pc, #60]	@ (8008da0 <RadioRx+0x7c>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008d66:	4b0e      	ldr	r3, [pc, #56]	@ (8008da0 <RadioRx+0x7c>)
 8008d68:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 f8ac 	bl	800aecc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008d74:	4b0a      	ldr	r3, [pc, #40]	@ (8008da0 <RadioRx+0x7c>)
 8008d76:	785b      	ldrb	r3, [r3, #1]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d004      	beq.n	8008d86 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008d7c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008d80:	f001 fa5e 	bl	800a240 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008d84:	e005      	b.n	8008d92 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008d86:	4b06      	ldr	r3, [pc, #24]	@ (8008da0 <RadioRx+0x7c>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	019b      	lsls	r3, r3, #6
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 fa57 	bl	800a240 <SUBGRF_SetRx>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200040d8 	.word	0x200040d8
 8008da0:	20004064 	.word	0x20004064

08008da4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008dac:	f002 fa87 	bl	800b2be <RFW_Is_Init>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d102      	bne.n	8008dbc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008db6:	f002 faaa 	bl	800b30e <RFW_ReceiveInit>
 8008dba:	e007      	b.n	8008dcc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f240 2162 	movw	r1, #610	@ 0x262
 8008dc4:	f240 2062 	movw	r0, #610	@ 0x262
 8008dc8:	f001 fbd2 	bl	800a570 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d006      	beq.n	8008de0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4811      	ldr	r0, [pc, #68]	@ (8008e1c <RadioRxBoosted+0x78>)
 8008dd6:	f002 fd8d 	bl	800b8f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008dda:	4810      	ldr	r0, [pc, #64]	@ (8008e1c <RadioRxBoosted+0x78>)
 8008ddc:	f002 fcac 	bl	800b738 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008de0:	4b0f      	ldr	r3, [pc, #60]	@ (8008e20 <RadioRxBoosted+0x7c>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008de6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e20 <RadioRxBoosted+0x7c>)
 8008de8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f002 f86c 	bl	800aecc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008df4:	4b0a      	ldr	r3, [pc, #40]	@ (8008e20 <RadioRxBoosted+0x7c>)
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008dfc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008e00:	f001 fa3e 	bl	800a280 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008e04:	e005      	b.n	8008e12 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008e06:	4b06      	ldr	r3, [pc, #24]	@ (8008e20 <RadioRxBoosted+0x7c>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	019b      	lsls	r3, r3, #6
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f001 fa37 	bl	800a280 <SUBGRF_SetRxBoosted>
}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200040d8 	.word	0x200040d8
 8008e20:	20004064 	.word	0x20004064

08008e24 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	005a      	lsls	r2, r3, #1
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	4a0c      	ldr	r2, [pc, #48]	@ (8008e68 <RadioSetRxDutyCycle+0x44>)
 8008e38:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008e42:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008e46:	f001 fb93 	bl	800a570 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e4a:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <RadioSetRxDutyCycle+0x44>)
 8008e4c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 f83a 	bl	800aecc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fa34 	bl	800a2c8 <SUBGRF_SetRxDutyCycle>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20004064 	.word	0x20004064

08008e6c <RadioStartCad>:

static void RadioStartCad( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e70:	4b09      	ldr	r3, [pc, #36]	@ (8008e98 <RadioStartCad+0x2c>)
 8008e72:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 f827 	bl	800aecc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2200      	movs	r2, #0
 8008e82:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008e86:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8008e8a:	f001 fb71 	bl	800a570 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008e8e:	f001 fa47 	bl	800a320 <SUBGRF_SetCad>
}
 8008e92:	bf00      	nop
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20004064 	.word	0x20004064

08008e9c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008eac:	883b      	ldrh	r3, [r7, #0]
 8008eae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
 8008eb6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fbb5 	bl	800a628 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f002 f82a 	bl	800af1c <SUBGRF_SetRfTxPower>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008ecc:	210e      	movs	r1, #14
 8008ece:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008ed2:	f001 ff07 	bl	800ace4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2101      	movs	r1, #1
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 fff6 	bl	800aecc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008ee0:	f001 fa2c 	bl	800a33c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	4805      	ldr	r0, [pc, #20]	@ (8008efc <RadioSetTxContinuousWave+0x60>)
 8008ee8:	f002 fd04 	bl	800b8f4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008eec:	4803      	ldr	r0, [pc, #12]	@ (8008efc <RadioSetTxContinuousWave+0x60>)
 8008eee:	f002 fc23 	bl	800b738 <UTIL_TIMER_Start>
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	200040c0 	.word	0x200040c0

08008f00 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008f0a:	f001 fe58 	bl	800abbe <SUBGRF_GetRssiInst>
 8008f0e:	4603      	mov	r3, r0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	460a      	mov	r2, r1
 8008f22:	80fb      	strh	r3, [r7, #6]
 8008f24:	4613      	mov	r3, r2
 8008f26:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008f28:	797a      	ldrb	r2, [r7, #5]
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 fed8 	bl	800ace4 <SUBGRF_WriteRegister>
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 fedf 	bl	800ad0c <SUBGRF_ReadRegister>
 8008f4e:	4603      	mov	r3, r0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	6039      	str	r1, [r7, #0]
 8008f62:	80fb      	strh	r3, [r7, #6]
 8008f64:	4613      	mov	r3, r2
 8008f66:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008f68:	797b      	ldrb	r3, [r7, #5]
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 fedf 	bl	800ad34 <SUBGRF_WriteRegisters>
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	4603      	mov	r3, r0
 8008f86:	6039      	str	r1, [r7, #0]
 8008f88:	80fb      	strh	r3, [r7, #6]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008f8e:	797b      	ldrb	r3, [r7, #5]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 feee 	bl	800ad78 <SUBGRF_ReadRegisters>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	460a      	mov	r2, r1
 8008fae:	71fb      	strb	r3, [r7, #7]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d10a      	bne.n	8008fd0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008fba:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff4 <RadioSetMaxPayloadLength+0x50>)
 8008fbc:	79bb      	ldrb	r3, [r7, #6]
 8008fbe:	7013      	strb	r3, [r2, #0]
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff4 <RadioSetMaxPayloadLength+0x50>)
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <RadioSetMaxPayloadLength+0x54>)
 8008fc6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008fc8:	480c      	ldr	r0, [pc, #48]	@ (8008ffc <RadioSetMaxPayloadLength+0x58>)
 8008fca:	f001 fd43 	bl	800aa54 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008fce:	e00d      	b.n	8008fec <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <RadioSetMaxPayloadLength+0x54>)
 8008fd2:	7d5b      	ldrb	r3, [r3, #21]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d109      	bne.n	8008fec <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008fd8:	4a06      	ldr	r2, [pc, #24]	@ (8008ff4 <RadioSetMaxPayloadLength+0x50>)
 8008fda:	79bb      	ldrb	r3, [r7, #6]
 8008fdc:	7013      	strb	r3, [r2, #0]
 8008fde:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <RadioSetMaxPayloadLength+0x50>)
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <RadioSetMaxPayloadLength+0x54>)
 8008fe4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008fe6:	4805      	ldr	r0, [pc, #20]	@ (8008ffc <RadioSetMaxPayloadLength+0x58>)
 8008fe8:	f001 fd34 	bl	800aa54 <SUBGRF_SetPacketParams>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000010 	.word	0x20000010
 8008ff8:	20004064 	.word	0x20004064
 8008ffc:	20004072 	.word	0x20004072

08009000 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800900a:	4a13      	ldr	r2, [pc, #76]	@ (8009058 <RadioSetPublicNetwork+0x58>)
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	7313      	strb	r3, [r2, #12]
 8009010:	4b11      	ldr	r3, [pc, #68]	@ (8009058 <RadioSetPublicNetwork+0x58>)
 8009012:	7b1a      	ldrb	r2, [r3, #12]
 8009014:	4b10      	ldr	r3, [pc, #64]	@ (8009058 <RadioSetPublicNetwork+0x58>)
 8009016:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009018:	2001      	movs	r0, #1
 800901a:	f7ff f81b 	bl	8008054 <RadioSetModem>
    if( enable == true )
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00a      	beq.n	800903a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009024:	2134      	movs	r1, #52	@ 0x34
 8009026:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800902a:	f001 fe5b 	bl	800ace4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800902e:	2144      	movs	r1, #68	@ 0x44
 8009030:	f240 7041 	movw	r0, #1857	@ 0x741
 8009034:	f001 fe56 	bl	800ace4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009038:	e009      	b.n	800904e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800903a:	2114      	movs	r1, #20
 800903c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009040:	f001 fe50 	bl	800ace4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009044:	2124      	movs	r1, #36	@ 0x24
 8009046:	f240 7041 	movw	r0, #1857	@ 0x741
 800904a:	f001 fe4b 	bl	800ace4 <SUBGRF_WriteRegister>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20004064 	.word	0x20004064

0800905c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009060:	f001 ff90 	bl	800af84 <SUBGRF_GetRadioWakeUpTime>
 8009064:	4603      	mov	r3, r0
 8009066:	3303      	adds	r3, #3
}
 8009068:	4618      	mov	r0, r3
 800906a:	bd80      	pop	{r7, pc}

0800906c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8009074:	f000 f80e 	bl	8009094 <RadioOnTxTimeoutProcess>
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009088:	f000 f818 	bl	80090bc <RadioOnRxTimeoutProcess>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009098:	4b07      	ldr	r3, [pc, #28]	@ (80090b8 <RadioOnTxTimeoutProcess+0x24>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d008      	beq.n	80090b2 <RadioOnTxTimeoutProcess+0x1e>
 80090a0:	4b05      	ldr	r3, [pc, #20]	@ (80090b8 <RadioOnTxTimeoutProcess+0x24>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80090aa:	4b03      	ldr	r3, [pc, #12]	@ (80090b8 <RadioOnTxTimeoutProcess+0x24>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	4798      	blx	r3
    }
}
 80090b2:	bf00      	nop
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20004060 	.word	0x20004060

080090bc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80090c0:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <RadioOnRxTimeoutProcess+0x24>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <RadioOnRxTimeoutProcess+0x1e>
 80090c8:	4b05      	ldr	r3, [pc, #20]	@ (80090e0 <RadioOnRxTimeoutProcess+0x24>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80090d2:	4b03      	ldr	r3, [pc, #12]	@ (80090e0 <RadioOnRxTimeoutProcess+0x24>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	4798      	blx	r3
    }
}
 80090da:	bf00      	nop
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20004060 	.word	0x20004060

080090e4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80090ee:	4a05      	ldr	r2, [pc, #20]	@ (8009104 <RadioOnDioIrq+0x20>)
 80090f0:	88fb      	ldrh	r3, [r7, #6]
 80090f2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80090f6:	f000 f807 	bl	8009108 <RadioIrqProcess>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20004064 	.word	0x20004064

08009108 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009108:	b5b0      	push	{r4, r5, r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009116:	4ba5      	ldr	r3, [pc, #660]	@ (80093ac <RadioIrqProcess+0x2a4>)
 8009118:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800911c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009120:	f000 810d 	beq.w	800933e <RadioIrqProcess+0x236>
 8009124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009128:	f300 81c0 	bgt.w	80094ac <RadioIrqProcess+0x3a4>
 800912c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009130:	f000 80f1 	beq.w	8009316 <RadioIrqProcess+0x20e>
 8009134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009138:	f300 81b8 	bgt.w	80094ac <RadioIrqProcess+0x3a4>
 800913c:	2b80      	cmp	r3, #128	@ 0x80
 800913e:	f000 80d6 	beq.w	80092ee <RadioIrqProcess+0x1e6>
 8009142:	2b80      	cmp	r3, #128	@ 0x80
 8009144:	f300 81b2 	bgt.w	80094ac <RadioIrqProcess+0x3a4>
 8009148:	2b20      	cmp	r3, #32
 800914a:	dc49      	bgt.n	80091e0 <RadioIrqProcess+0xd8>
 800914c:	2b00      	cmp	r3, #0
 800914e:	f340 81ad 	ble.w	80094ac <RadioIrqProcess+0x3a4>
 8009152:	3b01      	subs	r3, #1
 8009154:	2b1f      	cmp	r3, #31
 8009156:	f200 81a9 	bhi.w	80094ac <RadioIrqProcess+0x3a4>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <RadioIrqProcess+0x58>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	080091e9 	.word	0x080091e9
 8009164:	08009223 	.word	0x08009223
 8009168:	080094ad 	.word	0x080094ad
 800916c:	080093c9 	.word	0x080093c9
 8009170:	080094ad 	.word	0x080094ad
 8009174:	080094ad 	.word	0x080094ad
 8009178:	080094ad 	.word	0x080094ad
 800917c:	08009437 	.word	0x08009437
 8009180:	080094ad 	.word	0x080094ad
 8009184:	080094ad 	.word	0x080094ad
 8009188:	080094ad 	.word	0x080094ad
 800918c:	080094ad 	.word	0x080094ad
 8009190:	080094ad 	.word	0x080094ad
 8009194:	080094ad 	.word	0x080094ad
 8009198:	080094ad 	.word	0x080094ad
 800919c:	080094ad 	.word	0x080094ad
 80091a0:	080094ad 	.word	0x080094ad
 80091a4:	080094ad 	.word	0x080094ad
 80091a8:	080094ad 	.word	0x080094ad
 80091ac:	080094ad 	.word	0x080094ad
 80091b0:	080094ad 	.word	0x080094ad
 80091b4:	080094ad 	.word	0x080094ad
 80091b8:	080094ad 	.word	0x080094ad
 80091bc:	080094ad 	.word	0x080094ad
 80091c0:	080094ad 	.word	0x080094ad
 80091c4:	080094ad 	.word	0x080094ad
 80091c8:	080094ad 	.word	0x080094ad
 80091cc:	080094ad 	.word	0x080094ad
 80091d0:	080094ad 	.word	0x080094ad
 80091d4:	080094ad 	.word	0x080094ad
 80091d8:	080094ad 	.word	0x080094ad
 80091dc:	08009447 	.word	0x08009447
 80091e0:	2b40      	cmp	r3, #64	@ 0x40
 80091e2:	f000 814b 	beq.w	800947c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80091e6:	e161      	b.n	80094ac <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80091e8:	4871      	ldr	r0, [pc, #452]	@ (80093b0 <RadioIrqProcess+0x2a8>)
 80091ea:	f002 fb13 	bl	800b814 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80091ee:	2000      	movs	r0, #0
 80091f0:	f000 ffea 	bl	800a1c8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80091f4:	f002 f86a 	bl	800b2cc <RFW_Is_LongPacketModeEnabled>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d101      	bne.n	8009202 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80091fe:	f002 f88e 	bl	800b31e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009202:	4b6c      	ldr	r3, [pc, #432]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 8152 	beq.w	80094b0 <RadioIrqProcess+0x3a8>
 800920c:	4b69      	ldr	r3, [pc, #420]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 814c 	beq.w	80094b0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009218:	4b66      	ldr	r3, [pc, #408]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4798      	blx	r3
        break;
 8009220:	e146      	b.n	80094b0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8009222:	4865      	ldr	r0, [pc, #404]	@ (80093b8 <RadioIrqProcess+0x2b0>)
 8009224:	f002 faf6 	bl	800b814 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009228:	4b60      	ldr	r3, [pc, #384]	@ (80093ac <RadioIrqProcess+0x2a4>)
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	f083 0301 	eor.w	r3, r3, #1
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d014      	beq.n	8009260 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009236:	2000      	movs	r0, #0
 8009238:	f000 ffc6 	bl	800a1c8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800923c:	2100      	movs	r1, #0
 800923e:	f640 1002 	movw	r0, #2306	@ 0x902
 8009242:	f001 fd4f 	bl	800ace4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009246:	f640 1044 	movw	r0, #2372	@ 0x944
 800924a:	f001 fd5f 	bl	800ad0c <SUBGRF_ReadRegister>
 800924e:	4603      	mov	r3, r0
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	f640 1044 	movw	r0, #2372	@ 0x944
 800925c:	f001 fd42 	bl	800ace4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009260:	1dfb      	adds	r3, r7, #7
 8009262:	22ff      	movs	r2, #255	@ 0xff
 8009264:	4619      	mov	r1, r3
 8009266:	4855      	ldr	r0, [pc, #340]	@ (80093bc <RadioIrqProcess+0x2b4>)
 8009268:	f000 fe7e 	bl	8009f68 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800926c:	4854      	ldr	r0, [pc, #336]	@ (80093c0 <RadioIrqProcess+0x2b8>)
 800926e:	f001 fce7 	bl	800ac40 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009272:	4b50      	ldr	r3, [pc, #320]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 811c 	beq.w	80094b4 <RadioIrqProcess+0x3ac>
 800927c:	4b4d      	ldr	r3, [pc, #308]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 8116 	beq.w	80094b4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8009288:	4b48      	ldr	r3, [pc, #288]	@ (80093ac <RadioIrqProcess+0x2a4>)
 800928a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10e      	bne.n	80092b0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8009292:	4b48      	ldr	r3, [pc, #288]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689c      	ldr	r4, [r3, #8]
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	4619      	mov	r1, r3
 800929c:	4b43      	ldr	r3, [pc, #268]	@ (80093ac <RadioIrqProcess+0x2a4>)
 800929e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80092a2:	461a      	mov	r2, r3
 80092a4:	4b41      	ldr	r3, [pc, #260]	@ (80093ac <RadioIrqProcess+0x2a4>)
 80092a6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80092aa:	4844      	ldr	r0, [pc, #272]	@ (80093bc <RadioIrqProcess+0x2b4>)
 80092ac:	47a0      	blx	r4
                break;
 80092ae:	e01d      	b.n	80092ec <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80092b0:	4b3e      	ldr	r3, [pc, #248]	@ (80093ac <RadioIrqProcess+0x2a4>)
 80092b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b4:	463a      	mov	r2, r7
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 ff55 	bl	800b168 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80092be:	4b3d      	ldr	r3, [pc, #244]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689c      	ldr	r4, [r3, #8]
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	4619      	mov	r1, r3
 80092c8:	4b38      	ldr	r3, [pc, #224]	@ (80093ac <RadioIrqProcess+0x2a4>)
 80092ca:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80092ce:	4618      	mov	r0, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80092d6:	4a3b      	ldr	r2, [pc, #236]	@ (80093c4 <RadioIrqProcess+0x2bc>)
 80092d8:	fb82 5203 	smull	r5, r2, r2, r3
 80092dc:	1192      	asrs	r2, r2, #6
 80092de:	17db      	asrs	r3, r3, #31
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	4602      	mov	r2, r0
 80092e6:	4835      	ldr	r0, [pc, #212]	@ (80093bc <RadioIrqProcess+0x2b4>)
 80092e8:	47a0      	blx	r4
                break;
 80092ea:	bf00      	nop
        break;
 80092ec:	e0e2      	b.n	80094b4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80092ee:	2000      	movs	r0, #0
 80092f0:	f000 ff6a 	bl	800a1c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80092f4:	4b2f      	ldr	r3, [pc, #188]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80dd 	beq.w	80094b8 <RadioIrqProcess+0x3b0>
 80092fe:	4b2d      	ldr	r3, [pc, #180]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 80d7 	beq.w	80094b8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800930a:	4b2a      	ldr	r3, [pc, #168]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	2000      	movs	r0, #0
 8009312:	4798      	blx	r3
        break;
 8009314:	e0d0      	b.n	80094b8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009316:	2000      	movs	r0, #0
 8009318:	f000 ff56 	bl	800a1c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800931c:	4b25      	ldr	r3, [pc, #148]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 80cb 	beq.w	80094bc <RadioIrqProcess+0x3b4>
 8009326:	4b23      	ldr	r3, [pc, #140]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80c5 	beq.w	80094bc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8009332:	4b20      	ldr	r3, [pc, #128]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	2001      	movs	r0, #1
 800933a:	4798      	blx	r3
        break;
 800933c:	e0be      	b.n	80094bc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800933e:	f000 fdf9 	bl	8009f34 <SUBGRF_GetOperatingMode>
 8009342:	4603      	mov	r3, r0
 8009344:	2b04      	cmp	r3, #4
 8009346:	d115      	bne.n	8009374 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009348:	4819      	ldr	r0, [pc, #100]	@ (80093b0 <RadioIrqProcess+0x2a8>)
 800934a:	f002 fa63 	bl	800b814 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800934e:	2000      	movs	r0, #0
 8009350:	f000 ff3a 	bl	800a1c8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009354:	4b17      	ldr	r3, [pc, #92]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 80b1 	beq.w	80094c0 <RadioIrqProcess+0x3b8>
 800935e:	4b15      	ldr	r3, [pc, #84]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80ab 	beq.w	80094c0 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800936a:	4b12      	ldr	r3, [pc, #72]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4798      	blx	r3
        break;
 8009372:	e0a5      	b.n	80094c0 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009374:	f000 fdde 	bl	8009f34 <SUBGRF_GetOperatingMode>
 8009378:	4603      	mov	r3, r0
 800937a:	2b05      	cmp	r3, #5
 800937c:	f040 80a0 	bne.w	80094c0 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8009380:	480d      	ldr	r0, [pc, #52]	@ (80093b8 <RadioIrqProcess+0x2b0>)
 8009382:	f002 fa47 	bl	800b814 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009386:	2000      	movs	r0, #0
 8009388:	f000 ff1e 	bl	800a1c8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800938c:	4b09      	ldr	r3, [pc, #36]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8095 	beq.w	80094c0 <RadioIrqProcess+0x3b8>
 8009396:	4b07      	ldr	r3, [pc, #28]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 808f 	beq.w	80094c0 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80093a2:	4b04      	ldr	r3, [pc, #16]	@ (80093b4 <RadioIrqProcess+0x2ac>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4798      	blx	r3
        break;
 80093aa:	e089      	b.n	80094c0 <RadioIrqProcess+0x3b8>
 80093ac:	20004064 	.word	0x20004064
 80093b0:	200040c0 	.word	0x200040c0
 80093b4:	20004060 	.word	0x20004060
 80093b8:	200040d8 	.word	0x200040d8
 80093bc:	20003f60 	.word	0x20003f60
 80093c0:	20004088 	.word	0x20004088
 80093c4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80093c8:	4b44      	ldr	r3, [pc, #272]	@ (80094dc <RadioIrqProcess+0x3d4>)
 80093ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d079      	beq.n	80094c4 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80093d0:	4a43      	ldr	r2, [pc, #268]	@ (80094e0 <RadioIrqProcess+0x3d8>)
 80093d2:	4b42      	ldr	r3, [pc, #264]	@ (80094dc <RadioIrqProcess+0x3d4>)
 80093d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d6:	0c1b      	lsrs	r3, r3, #16
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	4619      	mov	r1, r3
 80093dc:	f640 1003 	movw	r0, #2307	@ 0x903
 80093e0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80093e2:	4a3f      	ldr	r2, [pc, #252]	@ (80094e0 <RadioIrqProcess+0x3d8>)
 80093e4:	4b3d      	ldr	r3, [pc, #244]	@ (80094dc <RadioIrqProcess+0x3d4>)
 80093e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	4619      	mov	r1, r3
 80093ee:	f640 1004 	movw	r0, #2308	@ 0x904
 80093f2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80093f4:	4a3a      	ldr	r2, [pc, #232]	@ (80094e0 <RadioIrqProcess+0x3d8>)
 80093f6:	4b39      	ldr	r3, [pc, #228]	@ (80094dc <RadioIrqProcess+0x3d4>)
 80093f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	4619      	mov	r1, r3
 80093fe:	f640 1005 	movw	r0, #2309	@ 0x905
 8009402:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009404:	4c36      	ldr	r4, [pc, #216]	@ (80094e0 <RadioIrqProcess+0x3d8>)
 8009406:	4b37      	ldr	r3, [pc, #220]	@ (80094e4 <RadioIrqProcess+0x3dc>)
 8009408:	f640 1002 	movw	r0, #2306	@ 0x902
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	b2db      	uxtb	r3, r3
 8009416:	4619      	mov	r1, r3
 8009418:	f640 1002 	movw	r0, #2306	@ 0x902
 800941c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800941e:	4b2f      	ldr	r3, [pc, #188]	@ (80094dc <RadioIrqProcess+0x3d4>)
 8009420:	2200      	movs	r2, #0
 8009422:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009424:	2300      	movs	r3, #0
 8009426:	2200      	movs	r2, #0
 8009428:	f240 2162 	movw	r1, #610	@ 0x262
 800942c:	f240 2062 	movw	r0, #610	@ 0x262
 8009430:	f001 f89e 	bl	800a570 <SUBGRF_SetDioIrqParams>
        break;
 8009434:	e046      	b.n	80094c4 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009436:	f001 ff42 	bl	800b2be <RFW_Is_Init>
 800943a:	4603      	mov	r3, r0
 800943c:	2b01      	cmp	r3, #1
 800943e:	d143      	bne.n	80094c8 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009440:	f001 ff73 	bl	800b32a <RFW_ReceivePayload>
        break;
 8009444:	e040      	b.n	80094c8 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8009446:	4828      	ldr	r0, [pc, #160]	@ (80094e8 <RadioIrqProcess+0x3e0>)
 8009448:	f002 f9e4 	bl	800b814 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800944c:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <RadioIrqProcess+0x3d4>)
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	f083 0301 	eor.w	r3, r3, #1
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800945a:	2000      	movs	r0, #0
 800945c:	f000 feb4 	bl	800a1c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009460:	4b22      	ldr	r3, [pc, #136]	@ (80094ec <RadioIrqProcess+0x3e4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d031      	beq.n	80094cc <RadioIrqProcess+0x3c4>
 8009468:	4b20      	ldr	r3, [pc, #128]	@ (80094ec <RadioIrqProcess+0x3e4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d02c      	beq.n	80094cc <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8009472:	4b1e      	ldr	r3, [pc, #120]	@ (80094ec <RadioIrqProcess+0x3e4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	4798      	blx	r3
        break;
 800947a:	e027      	b.n	80094cc <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800947c:	4b17      	ldr	r3, [pc, #92]	@ (80094dc <RadioIrqProcess+0x3d4>)
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	f083 0301 	eor.w	r3, r3, #1
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800948a:	2000      	movs	r0, #0
 800948c:	f000 fe9c 	bl	800a1c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009490:	4b16      	ldr	r3, [pc, #88]	@ (80094ec <RadioIrqProcess+0x3e4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01b      	beq.n	80094d0 <RadioIrqProcess+0x3c8>
 8009498:	4b14      	ldr	r3, [pc, #80]	@ (80094ec <RadioIrqProcess+0x3e4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d016      	beq.n	80094d0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80094a2:	4b12      	ldr	r3, [pc, #72]	@ (80094ec <RadioIrqProcess+0x3e4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	4798      	blx	r3
        break;
 80094aa:	e011      	b.n	80094d0 <RadioIrqProcess+0x3c8>
        break;
 80094ac:	bf00      	nop
 80094ae:	e010      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094b0:	bf00      	nop
 80094b2:	e00e      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094b4:	bf00      	nop
 80094b6:	e00c      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094b8:	bf00      	nop
 80094ba:	e00a      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094bc:	bf00      	nop
 80094be:	e008      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094c0:	bf00      	nop
 80094c2:	e006      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094c4:	bf00      	nop
 80094c6:	e004      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094c8:	bf00      	nop
 80094ca:	e002      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094cc:	bf00      	nop
 80094ce:	e000      	b.n	80094d2 <RadioIrqProcess+0x3ca>
        break;
 80094d0:	bf00      	nop
    }
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bdb0      	pop	{r4, r5, r7, pc}
 80094da:	bf00      	nop
 80094dc:	20004064 	.word	0x20004064
 80094e0:	08008f19 	.word	0x08008f19
 80094e4:	08008f3d 	.word	0x08008f3d
 80094e8:	200040d8 	.word	0x200040d8
 80094ec:	20004060 	.word	0x20004060

080094f0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80094f4:	4b09      	ldr	r3, [pc, #36]	@ (800951c <RadioTxPrbs+0x2c>)
 80094f6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80094fa:	2101      	movs	r1, #1
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 fce5 	bl	800aecc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009502:	4b07      	ldr	r3, [pc, #28]	@ (8009520 <RadioTxPrbs+0x30>)
 8009504:	212d      	movs	r1, #45	@ 0x2d
 8009506:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800950a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800950c:	f000 ff1f 	bl	800a34e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009510:	4804      	ldr	r0, [pc, #16]	@ (8009524 <RadioTxPrbs+0x34>)
 8009512:	f000 fe75 	bl	800a200 <SUBGRF_SetTx>
}
 8009516:	bf00      	nop
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20004064 	.word	0x20004064
 8009520:	08008f19 	.word	0x08008f19
 8009524:	000fffff 	.word	0x000fffff

08009528 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fcf0 	bl	800af1c <SUBGRF_SetRfTxPower>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009540:	210e      	movs	r1, #14
 8009542:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009546:	f001 fbcd 	bl	800ace4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	2101      	movs	r1, #1
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fcbc 	bl	800aecc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009554:	f000 fef2 	bl	800a33c <SUBGRF_SetTxContinuousWave>
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	@ 0x24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8009576:	2300      	movs	r3, #0
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	e011      	b.n	80095a0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	440b      	add	r3, r1
 800958a:	43d2      	mvns	r2, r2
 800958c:	b2d2      	uxtb	r2, r2
 800958e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	3301      	adds	r3, #1
 800959e:	61bb      	str	r3, [r7, #24]
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	dbe9      	blt.n	800957c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80095a8:	2300      	movs	r3, #0
 80095aa:	61bb      	str	r3, [r7, #24]
 80095ac:	e049      	b.n	8009642 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	425a      	negs	r2, r3
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	f002 0207 	and.w	r2, r2, #7
 80095ba:	bf58      	it	pl
 80095bc:	4253      	negpl	r3, r2
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f1c3 0307 	rsb	r3, r3, #7
 80095c4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da00      	bge.n	80095ce <payload_integration+0x6e>
 80095cc:	3307      	adds	r3, #7
 80095ce:	10db      	asrs	r3, r3, #3
 80095d0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	3301      	adds	r3, #1
 80095d6:	425a      	negs	r2, r3
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	f002 0207 	and.w	r2, r2, #7
 80095e0:	bf58      	it	pl
 80095e2:	4253      	negpl	r3, r2
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f1c3 0307 	rsb	r3, r3, #7
 80095ea:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	3301      	adds	r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da00      	bge.n	80095f6 <payload_integration+0x96>
 80095f4:	3307      	adds	r3, #7
 80095f6:	10db      	asrs	r3, r3, #3
 80095f8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	4413      	add	r3, r2
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	fa42 f303 	asr.w	r3, r2, r3
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009612:	7ffa      	ldrb	r2, [r7, #31]
 8009614:	7cfb      	ldrb	r3, [r7, #19]
 8009616:	4053      	eors	r3, r2
 8009618:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800961a:	7d3b      	ldrb	r3, [r7, #20]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	b25a      	sxtb	r2, r3
 8009624:	7ff9      	ldrb	r1, [r7, #31]
 8009626:	7d7b      	ldrb	r3, [r7, #21]
 8009628:	fa01 f303 	lsl.w	r3, r1, r3
 800962c:	b25b      	sxtb	r3, r3
 800962e:	4313      	orrs	r3, r2
 8009630:	b259      	sxtb	r1, r3
 8009632:	7d3b      	ldrb	r3, [r7, #20]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	b2ca      	uxtb	r2, r1
 800963a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	3301      	adds	r3, #1
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	429a      	cmp	r2, r3
 800964a:	dbb0      	blt.n	80095ae <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800964c:	7ffb      	ldrb	r3, [r7, #31]
 800964e:	01db      	lsls	r3, r3, #7
 8009650:	b25a      	sxtb	r2, r3
 8009652:	7ffb      	ldrb	r3, [r7, #31]
 8009654:	019b      	lsls	r3, r3, #6
 8009656:	b25b      	sxtb	r3, r3
 8009658:	4313      	orrs	r3, r2
 800965a:	b25b      	sxtb	r3, r3
 800965c:	7ffa      	ldrb	r2, [r7, #31]
 800965e:	2a00      	cmp	r2, #0
 8009660:	d101      	bne.n	8009666 <payload_integration+0x106>
 8009662:	2220      	movs	r2, #32
 8009664:	e000      	b.n	8009668 <payload_integration+0x108>
 8009666:	2200      	movs	r2, #0
 8009668:	4313      	orrs	r3, r2
 800966a:	b259      	sxtb	r1, r3
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	b2ca      	uxtb	r2, r1
 8009674:	701a      	strb	r2, [r3, #0]
}
 8009676:	bf00      	nop
 8009678:	3724      	adds	r7, #36	@ 0x24
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr

08009680 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	@ 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	607a      	str	r2, [r7, #4]
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8009694:	2300      	movs	r3, #0
 8009696:	623b      	str	r3, [r7, #32]
 8009698:	2300      	movs	r3, #0
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800969c:	f001 fe09 	bl	800b2b2 <RFW_DeInit>

    if( rxContinuous != 0 )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	bf14      	ite	ne
 80096b0:	2301      	movne	r3, #1
 80096b2:	2300      	moveq	r3, #0
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	4ba3      	ldr	r3, [pc, #652]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 80096b8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <RadioSetRxGenericConfig+0x48>
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	f000 80dc 	beq.w	800987e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80096c6:	e194      	b.n	80099f2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <RadioSetRxGenericConfig+0x58>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <RadioSetRxGenericConfig+0x5e>
            return -1;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	e18a      	b.n	80099f4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	7f9b      	ldrb	r3, [r3, #30]
 80096e2:	2b08      	cmp	r3, #8
 80096e4:	d902      	bls.n	80096ec <RadioSetRxGenericConfig+0x6c>
            return -1;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	e183      	b.n	80099f4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6919      	ldr	r1, [r3, #16]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	7f9b      	ldrb	r3, [r3, #30]
 80096f4:	461a      	mov	r2, r3
 80096f6:	f107 0320 	add.w	r3, r7, #32
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 ffac 	bl	800b658 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf14      	ite	ne
 8009708:	2301      	movne	r3, #1
 800970a:	2300      	moveq	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fe26 	bl	800a360 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009714:	4b8b      	ldr	r3, [pc, #556]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	4a88      	ldr	r2, [pc, #544]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009722:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f893 2020 	ldrb.w	r2, [r3, #32]
 800972a:	4b86      	ldr	r3, [pc, #536]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800972c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fcef 	bl	800b118 <SUBGRF_GetFskBandwidthRegValue>
 800973a:	4603      	mov	r3, r0
 800973c:	461a      	mov	r2, r3
 800973e:	4b81      	ldr	r3, [pc, #516]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009744:	4b7f      	ldr	r3, [pc, #508]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009746:	2200      	movs	r2, #0
 8009748:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	b29b      	uxth	r3, r3
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	b29a      	uxth	r2, r3
 8009754:	4b7b      	ldr	r3, [pc, #492]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009756:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	7fda      	ldrb	r2, [r3, #31]
 800975c:	4b79      	ldr	r3, [pc, #484]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800975e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	7f9b      	ldrb	r3, [r3, #30]
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	b2da      	uxtb	r2, r3
 8009768:	4b76      	ldr	r3, [pc, #472]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800976a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8009772:	4b74      	ldr	r3, [pc, #464]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009774:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	b2da      	uxtb	r2, r3
 8009786:	4b6f      	ldr	r3, [pc, #444]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009788:	759a      	strb	r2, [r3, #22]
 800978a:	e00b      	b.n	80097a4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009792:	2b02      	cmp	r3, #2
 8009794:	d103      	bne.n	800979e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009796:	4b6b      	ldr	r3, [pc, #428]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009798:	22ff      	movs	r2, #255	@ 0xff
 800979a:	759a      	strb	r2, [r3, #22]
 800979c:	e002      	b.n	80097a4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800979e:	4b69      	ldr	r3, [pc, #420]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 80097a0:	22ff      	movs	r2, #255	@ 0xff
 80097a2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d004      	beq.n	80097b8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d12d      	bne.n	8009814 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80097be:	2bf1      	cmp	r3, #241	@ 0xf1
 80097c0:	d00c      	beq.n	80097dc <RadioSetRxGenericConfig+0x15c>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80097c8:	2bf2      	cmp	r3, #242	@ 0xf2
 80097ca:	d007      	beq.n	80097dc <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d002      	beq.n	80097dc <RadioSetRxGenericConfig+0x15c>
                return -1;
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295
 80097da:	e10b      	b.n	80099f4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80097dc:	2300      	movs	r3, #0
 80097de:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80097e4:	4b58      	ldr	r3, [pc, #352]	@ (8009948 <RadioSetRxGenericConfig+0x2c8>)
 80097e6:	6819      	ldr	r1, [r3, #0]
 80097e8:	f107 0314 	add.w	r3, r7, #20
 80097ec:	4a57      	ldr	r2, [pc, #348]	@ (800994c <RadioSetRxGenericConfig+0x2cc>)
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 fd52 	bl	800b298 <RFW_Init>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <RadioSetRxGenericConfig+0x180>
                return -1;
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295
 80097fe:	e0f9      	b.n	80099f4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009800:	4b50      	ldr	r3, [pc, #320]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009802:	2200      	movs	r2, #0
 8009804:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009806:	4b4f      	ldr	r3, [pc, #316]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009808:	2201      	movs	r2, #1
 800980a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800980c:	4b4d      	ldr	r3, [pc, #308]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800980e:	2200      	movs	r2, #0
 8009810:	755a      	strb	r2, [r3, #21]
        {
 8009812:	e00e      	b.n	8009832 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800981a:	4b4a      	ldr	r3, [pc, #296]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800981c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009824:	4b47      	ldr	r3, [pc, #284]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009826:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800982e:	4b45      	ldr	r3, [pc, #276]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009830:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009832:	f7ff fa70 	bl	8008d16 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009836:	2000      	movs	r0, #0
 8009838:	f7fe fc0c 	bl	8008054 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800983c:	4844      	ldr	r0, [pc, #272]	@ (8009950 <RadioSetRxGenericConfig+0x2d0>)
 800983e:	f001 f833 	bl	800a8a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009842:	4844      	ldr	r0, [pc, #272]	@ (8009954 <RadioSetRxGenericConfig+0x2d4>)
 8009844:	f001 f906 	bl	800aa54 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009848:	f107 0320 	add.w	r3, r7, #32
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fbc0 	bl	8009fd2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	8b9b      	ldrh	r3, [r3, #28]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fc0a 	bl	800a070 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	8b1b      	ldrh	r3, [r3, #24]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 fbe5 	bl	800a030 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800986c:	fb03 f202 	mul.w	r2, r3, r2
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	fbb2 f3f3 	udiv	r3, r2, r3
 8009878:	4a32      	ldr	r2, [pc, #200]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800987a:	6093      	str	r3, [r2, #8]
        break;
 800987c:	e0b9      	b.n	80099f2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009882:	2b00      	cmp	r3, #0
 8009884:	d102      	bne.n	800988c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8009886:	f04f 33ff 	mov.w	r3, #4294967295
 800988a:	e0b3      	b.n	80099f4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009892:	2b01      	cmp	r3, #1
 8009894:	d104      	bne.n	80098a0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800989e:	e002      	b.n	80098a6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80098a0:	23ff      	movs	r3, #255	@ 0xff
 80098a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bf14      	ite	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	2300      	moveq	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fd53 	bl	800a360 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fd5d 	bl	800a37e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80098c4:	4b1f      	ldr	r3, [pc, #124]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80098d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 80098d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80098de:	4b19      	ldr	r3, [pc, #100]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 80098e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80098ea:	4b16      	ldr	r3, [pc, #88]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 80098ec:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d010      	beq.n	800991c <RadioSetRxGenericConfig+0x29c>
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	dc2c      	bgt.n	8009958 <RadioSetRxGenericConfig+0x2d8>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <RadioSetRxGenericConfig+0x288>
 8009902:	2b01      	cmp	r3, #1
 8009904:	d005      	beq.n	8009912 <RadioSetRxGenericConfig+0x292>
            break;
 8009906:	e027      	b.n	8009958 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009908:	4b0e      	ldr	r3, [pc, #56]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009910:	e023      	b.n	800995a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009912:	4b0c      	ldr	r3, [pc, #48]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800991a:	e01e      	b.n	800995a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009922:	2b0b      	cmp	r3, #11
 8009924:	d004      	beq.n	8009930 <RadioSetRxGenericConfig+0x2b0>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800992c:	2b0c      	cmp	r3, #12
 800992e:	d104      	bne.n	800993a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009930:	4b04      	ldr	r3, [pc, #16]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009938:	e00f      	b.n	800995a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800993a:	4b02      	ldr	r3, [pc, #8]	@ (8009944 <RadioSetRxGenericConfig+0x2c4>)
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009942:	e00a      	b.n	800995a <RadioSetRxGenericConfig+0x2da>
 8009944:	20004064 	.word	0x20004064
 8009948:	20004060 	.word	0x20004060
 800994c:	200040d8 	.word	0x200040d8
 8009950:	2000409c 	.word	0x2000409c
 8009954:	20004072 	.word	0x20004072
            break;
 8009958:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800995a:	4b28      	ldr	r3, [pc, #160]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 800995c:	2201      	movs	r2, #1
 800995e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8009964:	4b25      	ldr	r3, [pc, #148]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 8009966:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800996e:	4b23      	ldr	r3, [pc, #140]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 8009970:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009972:	4a22      	ldr	r2, [pc, #136]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 8009974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009978:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8009980:	4b1e      	ldr	r3, [pc, #120]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 8009982:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800998c:	4b1b      	ldr	r3, [pc, #108]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 800998e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8009992:	f7ff f9c0 	bl	8008d16 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009996:	2001      	movs	r0, #1
 8009998:	f7fe fb5c 	bl	8008054 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800999c:	4818      	ldr	r0, [pc, #96]	@ (8009a00 <RadioSetRxGenericConfig+0x380>)
 800999e:	f000 ff83 	bl	800a8a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099a2:	4818      	ldr	r0, [pc, #96]	@ (8009a04 <RadioSetRxGenericConfig+0x384>)
 80099a4:	f001 f856 	bl	800aa54 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80099a8:	4b14      	ldr	r3, [pc, #80]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 80099aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d10d      	bne.n	80099ce <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80099b2:	f240 7036 	movw	r0, #1846	@ 0x736
 80099b6:	f001 f9a9 	bl	800ad0c <SUBGRF_ReadRegister>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f023 0304 	bic.w	r3, r3, #4
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	4619      	mov	r1, r3
 80099c4:	f240 7036 	movw	r0, #1846	@ 0x736
 80099c8:	f001 f98c 	bl	800ace4 <SUBGRF_WriteRegister>
 80099cc:	e00c      	b.n	80099e8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80099ce:	f240 7036 	movw	r0, #1846	@ 0x736
 80099d2:	f001 f99b 	bl	800ad0c <SUBGRF_ReadRegister>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f043 0304 	orr.w	r3, r3, #4
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	4619      	mov	r1, r3
 80099e0:	f240 7036 	movw	r0, #1846	@ 0x736
 80099e4:	f001 f97e 	bl	800ace4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80099e8:	4b04      	ldr	r3, [pc, #16]	@ (80099fc <RadioSetRxGenericConfig+0x37c>)
 80099ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099ee:	609a      	str	r2, [r3, #8]
        break;
 80099f0:	bf00      	nop
    }
    return status;
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3730      	adds	r7, #48	@ 0x30
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	20004064 	.word	0x20004064
 8009a00:	2000409c 	.word	0x2000409c
 8009a04:	20004072 	.word	0x20004072

08009a08 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08e      	sub	sp, #56	@ 0x38
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
 8009a16:	4613      	mov	r3, r2
 8009a18:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a1e:	2300      	movs	r3, #0
 8009a20:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009a22:	f001 fc46 	bl	800b2b2 <RFW_DeInit>
    switch( modem )
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	f200 8204 	bhi.w	8009e36 <RadioSetTxGenericConfig+0x42e>
 8009a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <RadioSetTxGenericConfig+0x2c>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009bb9 	.word	0x08009bb9
 8009a38:	08009d01 	.word	0x08009d01
 8009a3c:	08009df9 	.word	0x08009df9
 8009a40:	08009a45 	.word	0x08009a45
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	7c9b      	ldrb	r3, [r3, #18]
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d902      	bls.n	8009a52 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	e206      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6899      	ldr	r1, [r3, #8]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	7c9b      	ldrb	r3, [r3, #18]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 fdf9 	bl	800b658 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a72:	e1f5      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d813      	bhi.n	8009aa8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009a80:	2302      	movs	r3, #2
 8009a82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009a86:	4b99      	ldr	r3, [pc, #612]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009a88:	2203      	movs	r2, #3
 8009a8a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009a8c:	4b97      	ldr	r3, [pc, #604]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009a8e:	2203      	movs	r2, #3
 8009a90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a94      	ldr	r2, [pc, #592]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009a9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	7cda      	ldrb	r2, [r3, #19]
 8009aa0:	4b92      	ldr	r3, [pc, #584]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009aa6:	e017      	b.n	8009ad8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009aae:	4b8f      	ldr	r3, [pc, #572]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009ab4:	4b8d      	ldr	r3, [pc, #564]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a8a      	ldr	r2, [pc, #552]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ac2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	7cda      	ldrb	r2, [r3, #19]
 8009ac8:	4b88      	ldr	r3, [pc, #544]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	089b      	lsrs	r3, r3, #2
 8009ad4:	4a85      	ldr	r2, [pc, #532]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ad6:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	4b82      	ldr	r3, [pc, #520]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ae4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009ae6:	4b81      	ldr	r3, [pc, #516]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ae8:	2204      	movs	r2, #4
 8009aea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	7c9b      	ldrb	r3, [r3, #18]
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	4b7d      	ldr	r3, [pc, #500]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009af6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009af8:	4b7c      	ldr	r3, [pc, #496]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	7d9b      	ldrb	r3, [r3, #22]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d003      	beq.n	8009b0e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	7d1b      	ldrb	r3, [r3, #20]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d12b      	bne.n	8009b66 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	7d5b      	ldrb	r3, [r3, #21]
 8009b12:	2bf1      	cmp	r3, #241	@ 0xf1
 8009b14:	d00a      	beq.n	8009b2c <RadioSetTxGenericConfig+0x124>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	7d5b      	ldrb	r3, [r3, #21]
 8009b1a:	2bf2      	cmp	r3, #242	@ 0xf2
 8009b1c:	d006      	beq.n	8009b2c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	7d5b      	ldrb	r3, [r3, #21]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d002      	beq.n	8009b2c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009b26:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2a:	e199      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009b36:	4b6e      	ldr	r3, [pc, #440]	@ (8009cf0 <RadioSetTxGenericConfig+0x2e8>)
 8009b38:	6819      	ldr	r1, [r3, #0]
 8009b3a:	f107 0320 	add.w	r3, r7, #32
 8009b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8009cf4 <RadioSetTxGenericConfig+0x2ec>)
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 fba9 	bl	800b298 <RFW_Init>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b50:	e186      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009b52:	4b66      	ldr	r3, [pc, #408]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009b58:	4b64      	ldr	r3, [pc, #400]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009b5e:	4b63      	ldr	r3, [pc, #396]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	755a      	strb	r2, [r3, #21]
        {
 8009b64:	e00b      	b.n	8009b7e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	7d5a      	ldrb	r2, [r3, #21]
 8009b6a:	4b60      	ldr	r3, [pc, #384]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009b6c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	7d9a      	ldrb	r2, [r3, #22]
 8009b72:	4b5e      	ldr	r3, [pc, #376]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009b74:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	7d1a      	ldrb	r2, [r3, #20]
 8009b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009b7c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009b7e:	f7ff f8ca 	bl	8008d16 <RadioStandby>
        RadioSetModem( radio_modem );
 8009b82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fa64 	bl	8008054 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b8c:	485a      	ldr	r0, [pc, #360]	@ (8009cf8 <RadioSetTxGenericConfig+0x2f0>)
 8009b8e:	f000 fe8b 	bl	800a8a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b92:	485a      	ldr	r0, [pc, #360]	@ (8009cfc <RadioSetTxGenericConfig+0x2f4>)
 8009b94:	f000 ff5e 	bl	800aa54 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009b98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fa18 	bl	8009fd2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	8a1b      	ldrh	r3, [r3, #16]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fa62 	bl	800a070 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	899b      	ldrh	r3, [r3, #12]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fa3d 	bl	800a030 <SUBGRF_SetCrcPolynomial>
        break;
 8009bb6:	e13f      	b.n	8009e38 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc4:	e14c      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	7c9b      	ldrb	r3, [r3, #18]
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	d902      	bls.n	8009bd4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009bce:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd2:	e145      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	6899      	ldr	r1, [r3, #8]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	7c9b      	ldrb	r3, [r3, #18]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fd38 	bl	800b658 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009be8:	4b40      	ldr	r3, [pc, #256]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009bf6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	7cda      	ldrb	r2, [r3, #19]
 8009bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	4a39      	ldr	r2, [pc, #228]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c08:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c0a:	4b38      	ldr	r3, [pc, #224]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	4b34      	ldr	r3, [pc, #208]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c1c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009c1e:	4b33      	ldr	r3, [pc, #204]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c20:	2204      	movs	r2, #4
 8009c22:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	7c9b      	ldrb	r3, [r3, #18]
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c2e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009c30:	4b2e      	ldr	r3, [pc, #184]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	7d9b      	ldrb	r3, [r3, #22]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d003      	beq.n	8009c46 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	7d1b      	ldrb	r3, [r3, #20]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d12a      	bne.n	8009c9c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	7d5b      	ldrb	r3, [r3, #21]
 8009c4a:	2bf1      	cmp	r3, #241	@ 0xf1
 8009c4c:	d00a      	beq.n	8009c64 <RadioSetTxGenericConfig+0x25c>
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	7d5b      	ldrb	r3, [r3, #21]
 8009c52:	2bf2      	cmp	r3, #242	@ 0xf2
 8009c54:	d006      	beq.n	8009c64 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	7d5b      	ldrb	r3, [r3, #21]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d002      	beq.n	8009c64 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c62:	e0fd      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009c64:	2301      	movs	r3, #1
 8009c66:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009c6c:	4b20      	ldr	r3, [pc, #128]	@ (8009cf0 <RadioSetTxGenericConfig+0x2e8>)
 8009c6e:	6819      	ldr	r1, [r3, #0]
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf4 <RadioSetTxGenericConfig+0x2ec>)
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 fb0e 	bl	800b298 <RFW_Init>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009c82:	f04f 33ff 	mov.w	r3, #4294967295
 8009c86:	e0eb      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009c88:	4b18      	ldr	r3, [pc, #96]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009c8e:	4b17      	ldr	r3, [pc, #92]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009c94:	4b15      	ldr	r3, [pc, #84]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	755a      	strb	r2, [r3, #21]
        {
 8009c9a:	e00b      	b.n	8009cb4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	7d5a      	ldrb	r2, [r3, #21]
 8009ca0:	4b12      	ldr	r3, [pc, #72]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009ca2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	7d9a      	ldrb	r2, [r3, #22]
 8009ca8:	4b10      	ldr	r3, [pc, #64]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009caa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	7d1a      	ldrb	r2, [r3, #20]
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009cec <RadioSetTxGenericConfig+0x2e4>)
 8009cb2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009cb4:	f7ff f82f 	bl	8008d16 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009cb8:	2000      	movs	r0, #0
 8009cba:	f7fe f9cb 	bl	8008054 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009cbe:	480e      	ldr	r0, [pc, #56]	@ (8009cf8 <RadioSetTxGenericConfig+0x2f0>)
 8009cc0:	f000 fdf2 	bl	800a8a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009cc4:	480d      	ldr	r0, [pc, #52]	@ (8009cfc <RadioSetTxGenericConfig+0x2f4>)
 8009cc6:	f000 fec5 	bl	800aa54 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009cca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f97f 	bl	8009fd2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	8a1b      	ldrh	r3, [r3, #16]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f9c9 	bl	800a070 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	899b      	ldrh	r3, [r3, #12]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 f9a4 	bl	800a030 <SUBGRF_SetCrcPolynomial>
        break;
 8009ce8:	e0a6      	b.n	8009e38 <RadioSetTxGenericConfig+0x430>
 8009cea:	bf00      	nop
 8009cec:	20004064 	.word	0x20004064
 8009cf0:	20004060 	.word	0x20004060
 8009cf4:	200040c0 	.word	0x200040c0
 8009cf8:	2000409c 	.word	0x2000409c
 8009cfc:	20004072 	.word	0x20004072
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009d00:	4b59      	ldr	r3, [pc, #356]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	781a      	ldrb	r2, [r3, #0]
 8009d0c:	4b56      	ldr	r3, [pc, #344]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	785a      	ldrb	r2, [r3, #1]
 8009d16:	4b54      	ldr	r3, [pc, #336]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	789a      	ldrb	r2, [r3, #2]
 8009d20:	4b51      	ldr	r3, [pc, #324]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d22:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	78db      	ldrb	r3, [r3, #3]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d010      	beq.n	8009d50 <RadioSetTxGenericConfig+0x348>
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	dc20      	bgt.n	8009d74 <RadioSetTxGenericConfig+0x36c>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <RadioSetTxGenericConfig+0x334>
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d005      	beq.n	8009d46 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009d3a:	e01b      	b.n	8009d74 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009d44:	e017      	b.n	8009d76 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009d46:	4b48      	ldr	r3, [pc, #288]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009d4e:	e012      	b.n	8009d76 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b0b      	cmp	r3, #11
 8009d56:	d003      	beq.n	8009d60 <RadioSetTxGenericConfig+0x358>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b0c      	cmp	r3, #12
 8009d5e:	d104      	bne.n	8009d6a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009d60:	4b41      	ldr	r3, [pc, #260]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009d68:	e005      	b.n	8009d76 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009d72:	e000      	b.n	8009d76 <RadioSetTxGenericConfig+0x36e>
            break;
 8009d74:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009d76:	4b3c      	ldr	r3, [pc, #240]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	889a      	ldrh	r2, [r3, #4]
 8009d80:	4b39      	ldr	r3, [pc, #228]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d82:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	799a      	ldrb	r2, [r3, #6]
 8009d88:	4b37      	ldr	r3, [pc, #220]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d8a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	79da      	ldrb	r2, [r3, #7]
 8009d90:	4b35      	ldr	r3, [pc, #212]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d92:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7a1a      	ldrb	r2, [r3, #8]
 8009d9a:	4b33      	ldr	r3, [pc, #204]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8009da0:	f7fe ffb9 	bl	8008d16 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009da4:	2001      	movs	r0, #1
 8009da6:	f7fe f955 	bl	8008054 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009daa:	4830      	ldr	r0, [pc, #192]	@ (8009e6c <RadioSetTxGenericConfig+0x464>)
 8009dac:	f000 fd7c 	bl	800a8a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009db0:	482f      	ldr	r0, [pc, #188]	@ (8009e70 <RadioSetTxGenericConfig+0x468>)
 8009db2:	f000 fe4f 	bl	800aa54 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009db6:	4b2c      	ldr	r3, [pc, #176]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009dbc:	2b06      	cmp	r3, #6
 8009dbe:	d10d      	bne.n	8009ddc <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009dc0:	f640 0089 	movw	r0, #2185	@ 0x889
 8009dc4:	f000 ffa2 	bl	800ad0c <SUBGRF_ReadRegister>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	f023 0304 	bic.w	r3, r3, #4
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f640 0089 	movw	r0, #2185	@ 0x889
 8009dd6:	f000 ff85 	bl	800ace4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009dda:	e02d      	b.n	8009e38 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009ddc:	f640 0089 	movw	r0, #2185	@ 0x889
 8009de0:	f000 ff94 	bl	800ad0c <SUBGRF_ReadRegister>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f043 0304 	orr.w	r3, r3, #4
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4619      	mov	r1, r3
 8009dee:	f640 0089 	movw	r0, #2185	@ 0x889
 8009df2:	f000 ff77 	bl	800ace4 <SUBGRF_WriteRegister>
        break;
 8009df6:	e01f      	b.n	8009e38 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <RadioSetTxGenericConfig+0x402>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e08:	d902      	bls.n	8009e10 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	e027      	b.n	8009e60 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009e10:	2003      	movs	r0, #3
 8009e12:	f7fe f91f 	bl	8008054 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009e16:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a11      	ldr	r2, [pc, #68]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009e24:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009e26:	4b10      	ldr	r3, [pc, #64]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009e28:	2216      	movs	r2, #22
 8009e2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e2e:	480f      	ldr	r0, [pc, #60]	@ (8009e6c <RadioSetTxGenericConfig+0x464>)
 8009e30:	f000 fd3a 	bl	800a8a8 <SUBGRF_SetModulationParams>
        break;
 8009e34:	e000      	b.n	8009e38 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009e36:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f86d 	bl	800af1c <SUBGRF_SetRfTxPower>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b08      	ldr	r3, [pc, #32]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009e48:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009e4c:	4b06      	ldr	r3, [pc, #24]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009e4e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fa41 	bl	800b2da <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009e58:	4a03      	ldr	r2, [pc, #12]	@ (8009e68 <RadioSetTxGenericConfig+0x460>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6053      	str	r3, [r2, #4]
    return 0;
 8009e5e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3738      	adds	r7, #56	@ 0x38
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20004064 	.word	0x20004064
 8009e6c:	2000409c 	.word	0x2000409c
 8009e70:	20004072 	.word	0x20004072

08009e74 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr

08009e8c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009e96:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr
	...

08009ea4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8009f28 <SUBGRF_Init+0x84>)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009eb8:	f7f6 ff84 	bl	8000dc4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009ebc:	2002      	movs	r0, #2
 8009ebe:	f001 f909 	bl	800b0d4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8009f2c <SUBGRF_Init+0x88>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f000 f97d 	bl	800a1c8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009ece:	f001 fb98 	bl	800b602 <RBI_IsTCXO>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d10e      	bne.n	8009ef6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009ed8:	2140      	movs	r1, #64	@ 0x40
 8009eda:	2001      	movs	r0, #1
 8009edc:	f000 fb82 	bl	800a5e4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	f640 1011 	movw	r0, #2321	@ 0x911
 8009ee6:	f000 fefd 	bl	800ace4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009eea:	237f      	movs	r3, #127	@ 0x7f
 8009eec:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009eee:	7b38      	ldrb	r0, [r7, #12]
 8009ef0:	f000 fa8b 	bl	800a40a <SUBGRF_Calibrate>
 8009ef4:	e009      	b.n	8009f0a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009ef6:	2120      	movs	r1, #32
 8009ef8:	f640 1011 	movw	r0, #2321	@ 0x911
 8009efc:	f000 fef2 	bl	800ace4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009f00:	2120      	movs	r1, #32
 8009f02:	f640 1012 	movw	r0, #2322	@ 0x912
 8009f06:	f000 feed 	bl	800ace4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009f0a:	210e      	movs	r1, #14
 8009f0c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009f10:	f000 fee8 	bl	800ace4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009f14:	f001 fb34 	bl	800b580 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009f18:	4b05      	ldr	r3, [pc, #20]	@ (8009f30 <SUBGRF_Init+0x8c>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	701a      	strb	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200040fc 	.word	0x200040fc
 8009f2c:	200040f8 	.word	0x200040f8
 8009f30:	200040f0 	.word	0x200040f0

08009f34 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009f38:	4b02      	ldr	r3, [pc, #8]	@ (8009f44 <SUBGRF_GetOperatingMode+0x10>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bc80      	pop	{r7}
 8009f42:	4770      	bx	lr
 8009f44:	200040f0 	.word	0x200040f0

08009f48 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	461a      	mov	r2, r3
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f000 ff2e 	bl	800adbc <SUBGRF_WriteBuffer>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009f7a:	f107 0317 	add.w	r3, r7, #23
 8009f7e:	4619      	mov	r1, r3
 8009f80:	68b8      	ldr	r0, [r7, #8]
 8009f82:	f000 fe31 	bl	800abe8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	79fa      	ldrb	r2, [r7, #7]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d201      	bcs.n	8009f94 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e007      	b.n	8009fa4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009f94:	7df8      	ldrb	r0, [r7, #23]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68f9      	ldr	r1, [r7, #12]
 8009f9e:	f000 ff2f 	bl	800ae00 <SUBGRF_ReadBuffer>

    return 0;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f7ff ffc2 	bl	8009f48 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f91b 	bl	800a200 <SUBGRF_SetTx>
}
 8009fca:	bf00      	nop
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009fda:	2208      	movs	r2, #8
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8009fe2:	f000 fea7 	bl	800ad34 <SUBGRF_WriteRegisters>
    return 0;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	0a1b      	lsrs	r3, r3, #8
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	b2db      	uxtb	r3, r3
 800a002:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	b2db      	uxtb	r3, r3
 800a008:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a00a:	f000 fb73 	bl	800a6f4 <SUBGRF_GetPacketType>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d108      	bne.n	800a026 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a014:	f107 030c 	add.w	r3, r7, #12
 800a018:	2202      	movs	r2, #2
 800a01a:	4619      	mov	r1, r3
 800a01c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800a020:	f000 fe88 	bl	800ad34 <SUBGRF_WriteRegisters>
            break;
 800a024:	e000      	b.n	800a028 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a026:	bf00      	nop
    }
}
 800a028:	bf00      	nop
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	0a1b      	lsrs	r3, r3, #8
 800a03e:	b29b      	uxth	r3, r3
 800a040:	b2db      	uxtb	r3, r3
 800a042:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a04a:	f000 fb53 	bl	800a6f4 <SUBGRF_GetPacketType>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d108      	bne.n	800a066 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a054:	f107 030c 	add.w	r3, r7, #12
 800a058:	2202      	movs	r2, #2
 800a05a:	4619      	mov	r1, r3
 800a05c:	f240 60be 	movw	r0, #1726	@ 0x6be
 800a060:	f000 fe68 	bl	800ad34 <SUBGRF_WriteRegisters>
            break;
 800a064:	e000      	b.n	800a068 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a066:	bf00      	nop
    }
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a07e:	f000 fb39 	bl	800a6f4 <SUBGRF_GetPacketType>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d121      	bne.n	800a0cc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a088:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a08c:	f000 fe3e 	bl	800ad0c <SUBGRF_ReadRegister>
 800a090:	4603      	mov	r3, r0
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	0a1b      	lsrs	r3, r3, #8
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	b25b      	sxtb	r3, r3
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	b25a      	sxtb	r2, r3
 800a0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	b25b      	sxtb	r3, r3
 800a0ae:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a0b8:	f000 fe14 	bl	800ace4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a0bc:	88fb      	ldrh	r3, [r7, #6]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800a0c6:	f000 fe0d 	bl	800ace4 <SUBGRF_WriteRegister>
            break;
 800a0ca:	e000      	b.n	800a0ce <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a0cc:	bf00      	nop
    }
}
 800a0ce:	bf00      	nop
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a0e8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a0ec:	f000 fe0e 	bl	800ad0c <SUBGRF_ReadRegister>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f023 0301 	bic.w	r3, r3, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a102:	f000 fdef 	bl	800ace4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a106:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a10a:	f000 fdff 	bl	800ad0c <SUBGRF_ReadRegister>
 800a10e:	4603      	mov	r3, r0
 800a110:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a112:	79bb      	ldrb	r3, [r7, #6]
 800a114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	4619      	mov	r1, r3
 800a11c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a120:	f000 fde0 	bl	800ace4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a124:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a128:	f000 f88a 	bl	800a240 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a12c:	463b      	mov	r3, r7
 800a12e:	2204      	movs	r2, #4
 800a130:	4619      	mov	r1, r3
 800a132:	f640 0019 	movw	r0, #2073	@ 0x819
 800a136:	f000 fe1f 	bl	800ad78 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a13a:	2000      	movs	r0, #0
 800a13c:	f000 f844 	bl	800a1c8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	4619      	mov	r1, r3
 800a144:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a148:	f000 fdcc 	bl	800ace4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a14c:	79bb      	ldrb	r3, [r7, #6]
 800a14e:	4619      	mov	r1, r3
 800a150:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a154:	f000 fdc6 	bl	800ace4 <SUBGRF_WriteRegister>

    return number;
 800a158:	683b      	ldr	r3, [r7, #0]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
	...

0800a164 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a16c:	2000      	movs	r0, #0
 800a16e:	f001 fa12 	bl	800b596 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a172:	2002      	movs	r0, #2
 800a174:	f000 ffae 	bl	800b0d4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a178:	793b      	ldrb	r3, [r7, #4]
 800a17a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a184:	793b      	ldrb	r3, [r7, #4]
 800a186:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a18e:	b25b      	sxtb	r3, r3
 800a190:	4313      	orrs	r3, r2
 800a192:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a194:	793b      	ldrb	r3, [r7, #4]
 800a196:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a1a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a1a6:	f107 030f 	add.w	r3, r7, #15
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	2084      	movs	r0, #132	@ 0x84
 800a1b0:	f000 fe48 	bl	800ae44 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a1b4:	4b03      	ldr	r3, [pc, #12]	@ (800a1c4 <SUBGRF_SetSleep+0x60>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200040f0 	.word	0x200040f0

0800a1c8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a1d2:	1dfb      	adds	r3, r7, #7
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	2080      	movs	r0, #128	@ 0x80
 800a1da:	f000 fe33 	bl	800ae44 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a1e4:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <SUBGRF_SetStandby+0x34>)
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a1ea:	e002      	b.n	800a1f2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	@ (800a1fc <SUBGRF_SetStandby+0x34>)
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	701a      	strb	r2, [r3, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	200040f0 	.word	0x200040f0

0800a200 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a208:	4b0c      	ldr	r3, [pc, #48]	@ (800a23c <SUBGRF_SetTx+0x3c>)
 800a20a:	2204      	movs	r2, #4
 800a20c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	b2db      	uxtb	r3, r3
 800a214:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	0a1b      	lsrs	r3, r3, #8
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	2203      	movs	r2, #3
 800a22a:	4619      	mov	r1, r3
 800a22c:	2083      	movs	r0, #131	@ 0x83
 800a22e:	f000 fe09 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	200040f0 	.word	0x200040f0

0800a240 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a248:	4b0c      	ldr	r3, [pc, #48]	@ (800a27c <SUBGRF_SetRx+0x3c>)
 800a24a:	2205      	movs	r2, #5
 800a24c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	0c1b      	lsrs	r3, r3, #16
 800a252:	b2db      	uxtb	r3, r3
 800a254:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	2203      	movs	r2, #3
 800a26a:	4619      	mov	r1, r3
 800a26c:	2082      	movs	r0, #130	@ 0x82
 800a26e:	f000 fde9 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200040f0 	.word	0x200040f0

0800a280 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a288:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c4 <SUBGRF_SetRxBoosted+0x44>)
 800a28a:	2205      	movs	r2, #5
 800a28c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a28e:	2197      	movs	r1, #151	@ 0x97
 800a290:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800a294:	f000 fd26 	bl	800ace4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	0c1b      	lsrs	r3, r3, #16
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	0a1b      	lsrs	r3, r3, #8
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a2ae:	f107 030c 	add.w	r3, r7, #12
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	2082      	movs	r0, #130	@ 0x82
 800a2b8:	f000 fdc4 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a2bc:	bf00      	nop
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	200040f0 	.word	0x200040f0

0800a2c8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0c1b      	lsrs	r3, r3, #16
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	0a1b      	lsrs	r3, r3, #8
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	0c1b      	lsrs	r3, r3, #16
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	0a1b      	lsrs	r3, r3, #8
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a2fe:	f107 0308 	add.w	r3, r7, #8
 800a302:	2206      	movs	r2, #6
 800a304:	4619      	mov	r1, r3
 800a306:	2094      	movs	r0, #148	@ 0x94
 800a308:	f000 fd9c 	bl	800ae44 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a30c:	4b03      	ldr	r3, [pc, #12]	@ (800a31c <SUBGRF_SetRxDutyCycle+0x54>)
 800a30e:	2206      	movs	r2, #6
 800a310:	701a      	strb	r2, [r3, #0]
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	200040f0 	.word	0x200040f0

0800a320 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a324:	2200      	movs	r2, #0
 800a326:	2100      	movs	r1, #0
 800a328:	20c5      	movs	r0, #197	@ 0xc5
 800a32a:	f000 fd8b 	bl	800ae44 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a32e:	4b02      	ldr	r3, [pc, #8]	@ (800a338 <SUBGRF_SetCad+0x18>)
 800a330:	2207      	movs	r2, #7
 800a332:	701a      	strb	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	bd80      	pop	{r7, pc}
 800a338:	200040f0 	.word	0x200040f0

0800a33c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a340:	2200      	movs	r2, #0
 800a342:	2100      	movs	r1, #0
 800a344:	20d1      	movs	r0, #209	@ 0xd1
 800a346:	f000 fd7d 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a34a:	bf00      	nop
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a352:	2200      	movs	r2, #0
 800a354:	2100      	movs	r1, #0
 800a356:	20d2      	movs	r0, #210	@ 0xd2
 800a358:	f000 fd74 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a35c:	bf00      	nop
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a36a:	1dfb      	adds	r3, r7, #7
 800a36c:	2201      	movs	r2, #1
 800a36e:	4619      	mov	r1, r3
 800a370:	209f      	movs	r0, #159	@ 0x9f
 800a372:	f000 fd67 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	4603      	mov	r3, r0
 800a386:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a388:	1dfb      	adds	r3, r7, #7
 800a38a:	2201      	movs	r2, #1
 800a38c:	4619      	mov	r1, r3
 800a38e:	20a0      	movs	r0, #160	@ 0xa0
 800a390:	f000 fd58 	bl	800ae44 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	2b3f      	cmp	r3, #63	@ 0x3f
 800a398:	d91c      	bls.n	800a3d4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	085b      	lsrs	r3, r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a3a8:	e005      	b.n	800a3b6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	089b      	lsrs	r3, r3, #2
 800a3ae:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	2b1f      	cmp	r3, #31
 800a3ba:	d8f6      	bhi.n	800a3aa <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a3c8:	7b7b      	ldrb	r3, [r7, #13]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	f240 7006 	movw	r0, #1798	@ 0x706
 800a3d0:	f000 fc88 	bl	800ace4 <SUBGRF_WriteRegister>
    }
}
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a3e2:	f001 f919 	bl	800b618 <RBI_IsDCDC>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d102      	bne.n	800a3f2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	71fb      	strb	r3, [r7, #7]
 800a3f0:	e001      	b.n	800a3f6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a3f6:	1dfb      	adds	r3, r7, #7
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	2096      	movs	r0, #150	@ 0x96
 800a3fe:	f000 fd21 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a412:	793b      	ldrb	r3, [r7, #4]
 800a414:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	019b      	lsls	r3, r3, #6
 800a41c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a41e:	793b      	ldrb	r3, [r7, #4]
 800a420:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a424:	b2db      	uxtb	r3, r3
 800a426:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a428:	b25b      	sxtb	r3, r3
 800a42a:	4313      	orrs	r3, r2
 800a42c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a42e:	793b      	ldrb	r3, [r7, #4]
 800a430:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a434:	b2db      	uxtb	r3, r3
 800a436:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a43e:	793b      	ldrb	r3, [r7, #4]
 800a440:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a444:	b2db      	uxtb	r3, r3
 800a446:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a44e:	793b      	ldrb	r3, [r7, #4]
 800a450:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a454:	b2db      	uxtb	r3, r3
 800a456:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a458:	b25b      	sxtb	r3, r3
 800a45a:	4313      	orrs	r3, r2
 800a45c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a45e:	793b      	ldrb	r3, [r7, #4]
 800a460:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a464:	b2db      	uxtb	r3, r3
 800a466:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a468:	b25b      	sxtb	r3, r3
 800a46a:	4313      	orrs	r3, r2
 800a46c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a46e:	793b      	ldrb	r3, [r7, #4]
 800a470:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a474:	b2db      	uxtb	r3, r3
 800a476:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a478:	4313      	orrs	r3, r2
 800a47a:	b25b      	sxtb	r3, r3
 800a47c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a47e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a480:	f107 030f 	add.w	r3, r7, #15
 800a484:	2201      	movs	r2, #1
 800a486:	4619      	mov	r1, r3
 800a488:	2089      	movs	r0, #137	@ 0x89
 800a48a:	f000 fcdb 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a518 <SUBGRF_CalibrateImage+0x80>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d904      	bls.n	800a4b2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a4a8:	23e1      	movs	r3, #225	@ 0xe1
 800a4aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a4ac:	23e9      	movs	r3, #233	@ 0xe9
 800a4ae:	737b      	strb	r3, [r7, #13]
 800a4b0:	e027      	b.n	800a502 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a19      	ldr	r2, [pc, #100]	@ (800a51c <SUBGRF_CalibrateImage+0x84>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d904      	bls.n	800a4c4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a4ba:	23d7      	movs	r3, #215	@ 0xd7
 800a4bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a4be:	23db      	movs	r3, #219	@ 0xdb
 800a4c0:	737b      	strb	r3, [r7, #13]
 800a4c2:	e01e      	b.n	800a502 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a16      	ldr	r2, [pc, #88]	@ (800a520 <SUBGRF_CalibrateImage+0x88>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d904      	bls.n	800a4d6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a4cc:	23c1      	movs	r3, #193	@ 0xc1
 800a4ce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a4d0:	23c5      	movs	r3, #197	@ 0xc5
 800a4d2:	737b      	strb	r3, [r7, #13]
 800a4d4:	e015      	b.n	800a502 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a12      	ldr	r2, [pc, #72]	@ (800a524 <SUBGRF_CalibrateImage+0x8c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d904      	bls.n	800a4e8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a4de:	2375      	movs	r3, #117	@ 0x75
 800a4e0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a4e2:	2381      	movs	r3, #129	@ 0x81
 800a4e4:	737b      	strb	r3, [r7, #13]
 800a4e6:	e00c      	b.n	800a502 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a0f      	ldr	r2, [pc, #60]	@ (800a528 <SUBGRF_CalibrateImage+0x90>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d904      	bls.n	800a4fa <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a4f0:	236b      	movs	r3, #107	@ 0x6b
 800a4f2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a4f4:	236f      	movs	r3, #111	@ 0x6f
 800a4f6:	737b      	strb	r3, [r7, #13]
 800a4f8:	e003      	b.n	800a502 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a4fa:	2329      	movs	r3, #41	@ 0x29
 800a4fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a4fe:	232b      	movs	r3, #43	@ 0x2b
 800a500:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a502:	f107 030c 	add.w	r3, r7, #12
 800a506:	2202      	movs	r2, #2
 800a508:	4619      	mov	r1, r3
 800a50a:	2098      	movs	r0, #152	@ 0x98
 800a50c:	f000 fc9a 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	35a4e900 	.word	0x35a4e900
 800a51c:	32a9f880 	.word	0x32a9f880
 800a520:	2de54480 	.word	0x2de54480
 800a524:	1b6b0b00 	.word	0x1b6b0b00
 800a528:	1954fc40 	.word	0x1954fc40

0800a52c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a52c:	b590      	push	{r4, r7, lr}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	461a      	mov	r2, r3
 800a53a:	4623      	mov	r3, r4
 800a53c:	71fb      	strb	r3, [r7, #7]
 800a53e:	4603      	mov	r3, r0
 800a540:	71bb      	strb	r3, [r7, #6]
 800a542:	460b      	mov	r3, r1
 800a544:	717b      	strb	r3, [r7, #5]
 800a546:	4613      	mov	r3, r2
 800a548:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a54e:	79bb      	ldrb	r3, [r7, #6]
 800a550:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a552:	797b      	ldrb	r3, [r7, #5]
 800a554:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a556:	793b      	ldrb	r3, [r7, #4]
 800a558:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a55a:	f107 030c 	add.w	r3, r7, #12
 800a55e:	2204      	movs	r2, #4
 800a560:	4619      	mov	r1, r3
 800a562:	2095      	movs	r0, #149	@ 0x95
 800a564:	f000 fc6e 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a568:	bf00      	nop
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd90      	pop	{r4, r7, pc}

0800a570 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a570:	b590      	push	{r4, r7, lr}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	4611      	mov	r1, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	4623      	mov	r3, r4
 800a580:	80fb      	strh	r3, [r7, #6]
 800a582:	4603      	mov	r3, r0
 800a584:	80bb      	strh	r3, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	807b      	strh	r3, [r7, #2]
 800a58a:	4613      	mov	r3, r2
 800a58c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a58e:	88fb      	ldrh	r3, [r7, #6]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	b29b      	uxth	r3, r3
 800a594:	b2db      	uxtb	r3, r3
 800a596:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a59e:	88bb      	ldrh	r3, [r7, #4]
 800a5a0:	0a1b      	lsrs	r3, r3, #8
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a5a8:	88bb      	ldrh	r3, [r7, #4]
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a5ae:	887b      	ldrh	r3, [r7, #2]
 800a5b0:	0a1b      	lsrs	r3, r3, #8
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a5b8:	887b      	ldrh	r3, [r7, #2]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a5be:	883b      	ldrh	r3, [r7, #0]
 800a5c0:	0a1b      	lsrs	r3, r3, #8
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a5c8:	883b      	ldrh	r3, [r7, #0]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a5ce:	f107 0308 	add.w	r3, r7, #8
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	2008      	movs	r0, #8
 800a5d8:	f000 fc34 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a5dc:	bf00      	nop
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd90      	pop	{r4, r7, pc}

0800a5e4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	6039      	str	r1, [r7, #0]
 800a5ee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	0c1b      	lsrs	r3, r3, #16
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	0a1b      	lsrs	r3, r3, #8
 800a606:	b2db      	uxtb	r3, r3
 800a608:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	2204      	movs	r2, #4
 800a616:	4619      	mov	r1, r3
 800a618:	2097      	movs	r0, #151	@ 0x97
 800a61a:	f000 fc13 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a61e:	bf00      	nop
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a636:	4b20      	ldr	r3, [pc, #128]	@ (800a6b8 <SUBGRF_SetRfFrequency+0x90>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f083 0301 	eor.w	r3, r3, #1
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d005      	beq.n	800a650 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff27 	bl	800a498 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a64a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b8 <SUBGRF_SetRfFrequency+0x90>)
 800a64c:	2201      	movs	r2, #1
 800a64e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	461c      	mov	r4, r3
 800a656:	4615      	mov	r5, r2
 800a658:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a65c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a660:	a313      	add	r3, pc, #76	@ (adr r3, 800a6b0 <SUBGRF_SetRfFrequency+0x88>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	f7f5 fde1 	bl	8000230 <__aeabi_uldivmod>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4613      	mov	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	0e1b      	lsrs	r3, r3, #24
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	b2db      	uxtb	r3, r3
 800a684:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	0a1b      	lsrs	r3, r3, #8
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	2204      	movs	r2, #4
 800a69a:	4619      	mov	r1, r3
 800a69c:	2086      	movs	r0, #134	@ 0x86
 800a69e:	f000 fbd1 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a6ac:	f3af 8000 	nop.w
 800a6b0:	01e82fb5 	.word	0x01e82fb5
 800a6b4:	00000000 	.word	0x00000000
 800a6b8:	200040f8 	.word	0x200040f8

0800a6bc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a6c6:	79fa      	ldrb	r2, [r7, #7]
 800a6c8:	4b09      	ldr	r3, [pc, #36]	@ (800a6f0 <SUBGRF_SetPacketType+0x34>)
 800a6ca:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d104      	bne.n	800a6dc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800a6d8:	f000 fb04 	bl	800ace4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a6dc:	1dfb      	adds	r3, r7, #7
 800a6de:	2201      	movs	r2, #1
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	208a      	movs	r0, #138	@ 0x8a
 800a6e4:	f000 fbae 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	200040f1 	.word	0x200040f1

0800a6f4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
    return PacketType;
 800a6f8:	4b02      	ldr	r3, [pc, #8]	@ (800a704 <SUBGRF_GetPacketType+0x10>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bc80      	pop	{r7}
 800a702:	4770      	bx	lr
 800a704:	200040f1 	.word	0x200040f1

0800a708 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	71fb      	strb	r3, [r7, #7]
 800a712:	460b      	mov	r3, r1
 800a714:	71bb      	strb	r3, [r7, #6]
 800a716:	4613      	mov	r3, r2
 800a718:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d149      	bne.n	800a7b4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a720:	2000      	movs	r0, #0
 800a722:	f000 ff84 	bl	800b62e <RBI_GetRFOMaxPowerConfig>
 800a726:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a728:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	429a      	cmp	r2, r3
 800a730:	da01      	bge.n	800a736 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b0e      	cmp	r3, #14
 800a73a:	d10e      	bne.n	800a75a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a73c:	2301      	movs	r3, #1
 800a73e:	2201      	movs	r2, #1
 800a740:	2100      	movs	r1, #0
 800a742:	2004      	movs	r0, #4
 800a744:	f7ff fef2 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a748:	79ba      	ldrb	r2, [r7, #6]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	b2db      	uxtb	r3, r3
 800a752:	330e      	adds	r3, #14
 800a754:	b2db      	uxtb	r3, r3
 800a756:	71bb      	strb	r3, [r7, #6]
 800a758:	e01f      	b.n	800a79a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b0a      	cmp	r3, #10
 800a75e:	d10e      	bne.n	800a77e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a760:	2301      	movs	r3, #1
 800a762:	2201      	movs	r2, #1
 800a764:	2100      	movs	r1, #0
 800a766:	2001      	movs	r0, #1
 800a768:	f7ff fee0 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a76c:	79ba      	ldrb	r2, [r7, #6]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	b2db      	uxtb	r3, r3
 800a776:	330d      	adds	r3, #13
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	71bb      	strb	r3, [r7, #6]
 800a77c:	e00d      	b.n	800a79a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a77e:	2301      	movs	r3, #1
 800a780:	2201      	movs	r2, #1
 800a782:	2100      	movs	r1, #0
 800a784:	2007      	movs	r0, #7
 800a786:	f7ff fed1 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a78a:	79ba      	ldrb	r2, [r7, #6]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	b2db      	uxtb	r3, r3
 800a794:	330e      	adds	r3, #14
 800a796:	b2db      	uxtb	r3, r3
 800a798:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a79a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a79e:	f113 0f11 	cmn.w	r3, #17
 800a7a2:	da01      	bge.n	800a7a8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a7a4:	23ef      	movs	r3, #239	@ 0xef
 800a7a6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a7a8:	2118      	movs	r1, #24
 800a7aa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a7ae:	f000 fa99 	bl	800ace4 <SUBGRF_WriteRegister>
 800a7b2:	e067      	b.n	800a884 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a7b4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a7b8:	f000 faa8 	bl	800ad0c <SUBGRF_ReadRegister>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f043 031e 	orr.w	r3, r3, #30
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a7ca:	f000 fa8b 	bl	800ace4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f000 ff2d 	bl	800b62e <RBI_GetRFOMaxPowerConfig>
 800a7d4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a7d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	da01      	bge.n	800a7e4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b14      	cmp	r3, #20
 800a7e8:	d10e      	bne.n	800a808 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2105      	movs	r1, #5
 800a7f0:	2003      	movs	r0, #3
 800a7f2:	f7ff fe9b 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a7f6:	79ba      	ldrb	r2, [r7, #6]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	3316      	adds	r3, #22
 800a802:	b2db      	uxtb	r3, r3
 800a804:	71bb      	strb	r3, [r7, #6]
 800a806:	e031      	b.n	800a86c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2b11      	cmp	r3, #17
 800a80c:	d10e      	bne.n	800a82c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a80e:	2301      	movs	r3, #1
 800a810:	2200      	movs	r2, #0
 800a812:	2103      	movs	r1, #3
 800a814:	2002      	movs	r0, #2
 800a816:	f7ff fe89 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a81a:	79ba      	ldrb	r2, [r7, #6]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	b2db      	uxtb	r3, r3
 800a824:	3316      	adds	r3, #22
 800a826:	b2db      	uxtb	r3, r3
 800a828:	71bb      	strb	r3, [r7, #6]
 800a82a:	e01f      	b.n	800a86c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b0e      	cmp	r3, #14
 800a830:	d10e      	bne.n	800a850 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a832:	2301      	movs	r3, #1
 800a834:	2200      	movs	r2, #0
 800a836:	2102      	movs	r1, #2
 800a838:	2002      	movs	r0, #2
 800a83a:	f7ff fe77 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a83e:	79ba      	ldrb	r2, [r7, #6]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	b2db      	uxtb	r3, r3
 800a848:	330e      	adds	r3, #14
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	71bb      	strb	r3, [r7, #6]
 800a84e:	e00d      	b.n	800a86c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a850:	2301      	movs	r3, #1
 800a852:	2200      	movs	r2, #0
 800a854:	2107      	movs	r1, #7
 800a856:	2004      	movs	r0, #4
 800a858:	f7ff fe68 	bl	800a52c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a85c:	79ba      	ldrb	r2, [r7, #6]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	b2db      	uxtb	r3, r3
 800a866:	3316      	adds	r3, #22
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a86c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a870:	f113 0f09 	cmn.w	r3, #9
 800a874:	da01      	bge.n	800a87a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a876:	23f7      	movs	r3, #247	@ 0xf7
 800a878:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a87a:	2138      	movs	r1, #56	@ 0x38
 800a87c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a880:	f000 fa30 	bl	800ace4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a884:	79bb      	ldrb	r3, [r7, #6]
 800a886:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a888:	797b      	ldrb	r3, [r7, #5]
 800a88a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a88c:	f107 0308 	add.w	r3, r7, #8
 800a890:	2202      	movs	r2, #2
 800a892:	4619      	mov	r1, r3
 800a894:	208e      	movs	r0, #142	@ 0x8e
 800a896:	f000 fad5 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	0000      	movs	r0, r0
 800a8a4:	0000      	movs	r0, r0
	...

0800a8a8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a8a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a8b6:	4a64      	ldr	r2, [pc, #400]	@ (800aa48 <SUBGRF_SetModulationParams+0x1a0>)
 800a8b8:	f107 0308 	add.w	r3, r7, #8
 800a8bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8c0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	781a      	ldrb	r2, [r3, #0]
 800a8c8:	4b60      	ldr	r3, [pc, #384]	@ (800aa4c <SUBGRF_SetModulationParams+0x1a4>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d004      	beq.n	800a8da <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fef1 	bl	800a6bc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	f200 80a5 	bhi.w	800aa2e <SUBGRF_SetModulationParams+0x186>
 800a8e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ec <SUBGRF_SetModulationParams+0x44>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a8fd 	.word	0x0800a8fd
 800a8f0:	0800a9bd 	.word	0x0800a9bd
 800a8f4:	0800a97f 	.word	0x0800a97f
 800a8f8:	0800a9eb 	.word	0x0800a9eb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a52      	ldr	r2, [pc, #328]	@ (800aa50 <SUBGRF_SetModulationParams+0x1a8>)
 800a906:	fbb2 f3f3 	udiv	r3, r2, r3
 800a90a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	0c1b      	lsrs	r3, r3, #16
 800a910:	b2db      	uxtb	r3, r3
 800a912:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	0a1b      	lsrs	r3, r3, #8
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	7b1b      	ldrb	r3, [r3, #12]
 800a926:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7b5b      	ldrb	r3, [r3, #13]
 800a92c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	2200      	movs	r2, #0
 800a934:	461c      	mov	r4, r3
 800a936:	4615      	mov	r5, r2
 800a938:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a93c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a940:	a33f      	add	r3, pc, #252	@ (adr r3, 800aa40 <SUBGRF_SetModulationParams+0x198>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	4640      	mov	r0, r8
 800a948:	4649      	mov	r1, r9
 800a94a:	f7f5 fc71 	bl	8000230 <__aeabi_uldivmod>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4613      	mov	r3, r2
 800a954:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	0c1b      	lsrs	r3, r3, #16
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	0a1b      	lsrs	r3, r3, #8
 800a962:	b2db      	uxtb	r3, r3
 800a964:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a96c:	7cfb      	ldrb	r3, [r7, #19]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f107 0308 	add.w	r3, r7, #8
 800a974:	4619      	mov	r1, r3
 800a976:	208b      	movs	r0, #139	@ 0x8b
 800a978:	f000 fa64 	bl	800ae44 <SUBGRF_WriteCommand>
        break;
 800a97c:	e058      	b.n	800aa30 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a97e:	2304      	movs	r3, #4
 800a980:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	4a32      	ldr	r2, [pc, #200]	@ (800aa50 <SUBGRF_SetModulationParams+0x1a8>)
 800a988:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	0c1b      	lsrs	r3, r3, #16
 800a992:	b2db      	uxtb	r3, r3
 800a994:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	0a1b      	lsrs	r3, r3, #8
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	7d1b      	ldrb	r3, [r3, #20]
 800a9a8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a9aa:	7cfb      	ldrb	r3, [r7, #19]
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	f107 0308 	add.w	r3, r7, #8
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	208b      	movs	r0, #139	@ 0x8b
 800a9b6:	f000 fa45 	bl	800ae44 <SUBGRF_WriteCommand>
        break;
 800a9ba:	e039      	b.n	800aa30 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a9bc:	2304      	movs	r3, #4
 800a9be:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	7e1b      	ldrb	r3, [r3, #24]
 800a9c4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7e5b      	ldrb	r3, [r3, #25]
 800a9ca:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7e9b      	ldrb	r3, [r3, #26]
 800a9d0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7edb      	ldrb	r3, [r3, #27]
 800a9d6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a9d8:	7cfb      	ldrb	r3, [r7, #19]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	208b      	movs	r0, #139	@ 0x8b
 800a9e4:	f000 fa2e 	bl	800ae44 <SUBGRF_WriteCommand>

        break;
 800a9e8:	e022      	b.n	800aa30 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a9ea:	2305      	movs	r3, #5
 800a9ec:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <SUBGRF_SetModulationParams+0x1a8>)
 800a9f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	0c1b      	lsrs	r3, r3, #16
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	0a1b      	lsrs	r3, r3, #8
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	7b1b      	ldrb	r3, [r3, #12]
 800aa14:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	7b5b      	ldrb	r3, [r3, #13]
 800aa1a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa1c:	7cfb      	ldrb	r3, [r7, #19]
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	f107 0308 	add.w	r3, r7, #8
 800aa24:	4619      	mov	r1, r3
 800aa26:	208b      	movs	r0, #139	@ 0x8b
 800aa28:	f000 fa0c 	bl	800ae44 <SUBGRF_WriteCommand>
        break;
 800aa2c:	e000      	b.n	800aa30 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800aa2e:	bf00      	nop
    }
}
 800aa30:	bf00      	nop
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	01e82fb5 	.word	0x01e82fb5
 800aa44:	00000000 	.word	0x00000000
 800aa48:	0800d2c4 	.word	0x0800d2c4
 800aa4c:	200040f1 	.word	0x200040f1
 800aa50:	3d05f6a0 	.word	0x3d05f6a0

0800aa54 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800aa60:	4a48      	ldr	r2, [pc, #288]	@ (800ab84 <SUBGRF_SetPacketParams+0x130>)
 800aa62:	f107 030c 	add.w	r3, r7, #12
 800aa66:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa68:	c303      	stmia	r3!, {r0, r1}
 800aa6a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	781a      	ldrb	r2, [r3, #0]
 800aa70:	4b45      	ldr	r3, [pc, #276]	@ (800ab88 <SUBGRF_SetPacketParams+0x134>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d004      	beq.n	800aa82 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff fe1d 	bl	800a6bc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d878      	bhi.n	800ab7c <SUBGRF_SetPacketParams+0x128>
 800aa8a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa90 <SUBGRF_SetPacketParams+0x3c>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800ab31 	.word	0x0800ab31
 800aa98:	0800ab25 	.word	0x0800ab25
 800aa9c:	0800aaa1 	.word	0x0800aaa1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7a5b      	ldrb	r3, [r3, #9]
 800aaa4:	2bf1      	cmp	r3, #241	@ 0xf1
 800aaa6:	d10a      	bne.n	800aabe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800aaa8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800aaac:	f7ff faa0 	bl	8009ff0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800aab0:	f248 0005 	movw	r0, #32773	@ 0x8005
 800aab4:	f7ff fabc 	bl	800a030 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800aab8:	2302      	movs	r3, #2
 800aaba:	75bb      	strb	r3, [r7, #22]
 800aabc:	e011      	b.n	800aae2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7a5b      	ldrb	r3, [r3, #9]
 800aac2:	2bf2      	cmp	r3, #242	@ 0xf2
 800aac4:	d10a      	bne.n	800aadc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800aac6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800aaca:	f7ff fa91 	bl	8009ff0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800aace:	f241 0021 	movw	r0, #4129	@ 0x1021
 800aad2:	f7ff faad 	bl	800a030 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800aad6:	2306      	movs	r3, #6
 800aad8:	75bb      	strb	r3, [r7, #22]
 800aada:	e002      	b.n	800aae2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7a5b      	ldrb	r3, [r3, #9]
 800aae0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800aae2:	2309      	movs	r3, #9
 800aae4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	885b      	ldrh	r3, [r3, #2]
 800aaea:	0a1b      	lsrs	r3, r3, #8
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	885b      	ldrh	r3, [r3, #2]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	791b      	ldrb	r3, [r3, #4]
 800aafe:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	795b      	ldrb	r3, [r3, #5]
 800ab04:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	799b      	ldrb	r3, [r3, #6]
 800ab0a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	79db      	ldrb	r3, [r3, #7]
 800ab10:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7a1b      	ldrb	r3, [r3, #8]
 800ab16:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ab18:	7dbb      	ldrb	r3, [r7, #22]
 800ab1a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7a9b      	ldrb	r3, [r3, #10]
 800ab20:	753b      	strb	r3, [r7, #20]
        break;
 800ab22:	e022      	b.n	800ab6a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	7b1b      	ldrb	r3, [r3, #12]
 800ab2c:	733b      	strb	r3, [r7, #12]
        break;
 800ab2e:	e01c      	b.n	800ab6a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ab30:	2306      	movs	r3, #6
 800ab32:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	89db      	ldrh	r3, [r3, #14]
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	89db      	ldrh	r3, [r3, #14]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7c1a      	ldrb	r2, [r3, #16]
 800ab4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab8c <SUBGRF_SetPacketParams+0x138>)
 800ab4e:	4611      	mov	r1, r2
 800ab50:	7019      	strb	r1, [r3, #0]
 800ab52:	4613      	mov	r3, r2
 800ab54:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	7c5b      	ldrb	r3, [r3, #17]
 800ab5a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7c9b      	ldrb	r3, [r3, #18]
 800ab60:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	7cdb      	ldrb	r3, [r3, #19]
 800ab66:	747b      	strb	r3, [r7, #17]
        break;
 800ab68:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	f107 030c 	add.w	r3, r7, #12
 800ab72:	4619      	mov	r1, r3
 800ab74:	208c      	movs	r0, #140	@ 0x8c
 800ab76:	f000 f965 	bl	800ae44 <SUBGRF_WriteCommand>
 800ab7a:	e000      	b.n	800ab7e <SUBGRF_SetPacketParams+0x12a>
        return;
 800ab7c:	bf00      	nop
}
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	0800d2cc 	.word	0x0800d2cc
 800ab88:	200040f1 	.word	0x200040f1
 800ab8c:	200040f2 	.word	0x200040f2

0800ab90 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	460a      	mov	r2, r1
 800ab9a:	71fb      	strb	r3, [r7, #7]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800aba4:	79bb      	ldrb	r3, [r7, #6]
 800aba6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800aba8:	f107 030c 	add.w	r3, r7, #12
 800abac:	2202      	movs	r2, #2
 800abae:	4619      	mov	r1, r3
 800abb0:	208f      	movs	r0, #143	@ 0x8f
 800abb2:	f000 f947 	bl	800ae44 <SUBGRF_WriteCommand>
}
 800abb6:	bf00      	nop
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800abc8:	1d3b      	adds	r3, r7, #4
 800abca:	2201      	movs	r2, #1
 800abcc:	4619      	mov	r1, r3
 800abce:	2015      	movs	r0, #21
 800abd0:	f000 f95a 	bl	800ae88 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800abd4:	793b      	ldrb	r3, [r7, #4]
 800abd6:	425b      	negs	r3, r3
 800abd8:	105b      	asrs	r3, r3, #1
 800abda:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800abdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800abf2:	f107 030c 	add.w	r3, r7, #12
 800abf6:	2202      	movs	r2, #2
 800abf8:	4619      	mov	r1, r3
 800abfa:	2013      	movs	r0, #19
 800abfc:	f000 f944 	bl	800ae88 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ac00:	f7ff fd78 	bl	800a6f4 <SUBGRF_GetPacketType>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d10d      	bne.n	800ac26 <SUBGRF_GetRxBufferStatus+0x3e>
 800ac0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac3c <SUBGRF_GetRxBufferStatus+0x54>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d108      	bne.n	800ac26 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ac14:	f240 7002 	movw	r0, #1794	@ 0x702
 800ac18:	f000 f878 	bl	800ad0c <SUBGRF_ReadRegister>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	461a      	mov	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	701a      	strb	r2, [r3, #0]
 800ac24:	e002      	b.n	800ac2c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ac26:	7b3a      	ldrb	r2, [r7, #12]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ac2c:	7b7a      	ldrb	r2, [r7, #13]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	701a      	strb	r2, [r3, #0]
}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200040f2 	.word	0x200040f2

0800ac40 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ac48:	f107 030c 	add.w	r3, r7, #12
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	4619      	mov	r1, r3
 800ac50:	2014      	movs	r0, #20
 800ac52:	f000 f919 	bl	800ae88 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ac56:	f7ff fd4d 	bl	800a6f4 <SUBGRF_GetPacketType>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <SUBGRF_GetPacketStatus+0x30>
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d013      	beq.n	800ac96 <SUBGRF_GetPacketStatus+0x56>
 800ac6e:	e02a      	b.n	800acc6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ac70:	7b3a      	ldrb	r2, [r7, #12]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ac76:	7b7b      	ldrb	r3, [r7, #13]
 800ac78:	425b      	negs	r3, r3
 800ac7a:	105b      	asrs	r3, r3, #1
 800ac7c:	b25a      	sxtb	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	425b      	negs	r3, r3
 800ac86:	105b      	asrs	r3, r3, #1
 800ac88:	b25a      	sxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	609a      	str	r2, [r3, #8]
            break;
 800ac94:	e020      	b.n	800acd8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ac96:	7b3b      	ldrb	r3, [r7, #12]
 800ac98:	425b      	negs	r3, r3
 800ac9a:	105b      	asrs	r3, r3, #1
 800ac9c:	b25a      	sxtb	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800aca2:	7b7b      	ldrb	r3, [r7, #13]
 800aca4:	b25b      	sxtb	r3, r3
 800aca6:	3302      	adds	r3, #2
 800aca8:	109b      	asrs	r3, r3, #2
 800acaa:	b25a      	sxtb	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	425b      	negs	r3, r3
 800acb4:	105b      	asrs	r3, r3, #1
 800acb6:	b25a      	sxtb	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800acbc:	4b08      	ldr	r3, [pc, #32]	@ (800ace0 <SUBGRF_GetPacketStatus+0xa0>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	611a      	str	r2, [r3, #16]
            break;
 800acc4:	e008      	b.n	800acd8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800acc6:	2214      	movs	r2, #20
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fce3 	bl	800b696 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	220f      	movs	r2, #15
 800acd4:	701a      	strb	r2, [r3, #0]
            break;
 800acd6:	bf00      	nop
    }
}
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	200040f4 	.word	0x200040f4

0800ace4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	460a      	mov	r2, r1
 800acee:	80fb      	strh	r3, [r7, #6]
 800acf0:	4613      	mov	r3, r2
 800acf2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800acf4:	1d7a      	adds	r2, r7, #5
 800acf6:	88f9      	ldrh	r1, [r7, #6]
 800acf8:	2301      	movs	r3, #1
 800acfa:	4803      	ldr	r0, [pc, #12]	@ (800ad08 <SUBGRF_WriteRegister+0x24>)
 800acfc:	f7f8 f9e4 	bl	80030c8 <HAL_SUBGHZ_WriteRegisters>
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200000e0 	.word	0x200000e0

0800ad0c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	4603      	mov	r3, r0
 800ad14:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ad16:	f107 020f 	add.w	r2, r7, #15
 800ad1a:	88f9      	ldrh	r1, [r7, #6]
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4804      	ldr	r0, [pc, #16]	@ (800ad30 <SUBGRF_ReadRegister+0x24>)
 800ad20:	f7f8 fa31 	bl	8003186 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	200000e0 	.word	0x200000e0

0800ad34 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	80fb      	strh	r3, [r7, #6]
 800ad40:	4613      	mov	r3, r2
 800ad42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad44:	f3ef 8310 	mrs	r3, PRIMASK
 800ad48:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad4e:	b672      	cpsid	i
}
 800ad50:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ad52:	88bb      	ldrh	r3, [r7, #4]
 800ad54:	88f9      	ldrh	r1, [r7, #6]
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	4806      	ldr	r0, [pc, #24]	@ (800ad74 <SUBGRF_WriteRegisters+0x40>)
 800ad5a:	f7f8 f9b5 	bl	80030c8 <HAL_SUBGHZ_WriteRegisters>
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f383 8810 	msr	PRIMASK, r3
}
 800ad68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ad6a:	bf00      	nop
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	200000e0 	.word	0x200000e0

0800ad78 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	80fb      	strh	r3, [r7, #6]
 800ad84:	4613      	mov	r3, r2
 800ad86:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad88:	f3ef 8310 	mrs	r3, PRIMASK
 800ad8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad92:	b672      	cpsid	i
}
 800ad94:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ad96:	88bb      	ldrh	r3, [r7, #4]
 800ad98:	88f9      	ldrh	r1, [r7, #6]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	4806      	ldr	r0, [pc, #24]	@ (800adb8 <SUBGRF_ReadRegisters+0x40>)
 800ad9e:	f7f8 f9f2 	bl	8003186 <HAL_SUBGHZ_ReadRegisters>
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f383 8810 	msr	PRIMASK, r3
}
 800adac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800adae:	bf00      	nop
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	200000e0 	.word	0x200000e0

0800adbc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	6039      	str	r1, [r7, #0]
 800adc6:	71fb      	strb	r3, [r7, #7]
 800adc8:	4613      	mov	r3, r2
 800adca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adcc:	f3ef 8310 	mrs	r3, PRIMASK
 800add0:	60fb      	str	r3, [r7, #12]
  return(result);
 800add2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800add4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800add6:	b672      	cpsid	i
}
 800add8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800adda:	79bb      	ldrb	r3, [r7, #6]
 800addc:	b29b      	uxth	r3, r3
 800adde:	79f9      	ldrb	r1, [r7, #7]
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	4806      	ldr	r0, [pc, #24]	@ (800adfc <SUBGRF_WriteBuffer+0x40>)
 800ade4:	f7f8 fae3 	bl	80033ae <HAL_SUBGHZ_WriteBuffer>
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f383 8810 	msr	PRIMASK, r3
}
 800adf2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800adf4:	bf00      	nop
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	200000e0 	.word	0x200000e0

0800ae00 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	6039      	str	r1, [r7, #0]
 800ae0a:	71fb      	strb	r3, [r7, #7]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae10:	f3ef 8310 	mrs	r3, PRIMASK
 800ae14:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae16:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae1a:	b672      	cpsid	i
}
 800ae1c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ae1e:	79bb      	ldrb	r3, [r7, #6]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	79f9      	ldrb	r1, [r7, #7]
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	4806      	ldr	r0, [pc, #24]	@ (800ae40 <SUBGRF_ReadBuffer+0x40>)
 800ae28:	f7f8 fb14 	bl	8003454 <HAL_SUBGHZ_ReadBuffer>
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f383 8810 	msr	PRIMASK, r3
}
 800ae36:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae38:	bf00      	nop
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200000e0 	.word	0x200000e0

0800ae44 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	6039      	str	r1, [r7, #0]
 800ae4e:	71fb      	strb	r3, [r7, #7]
 800ae50:	4613      	mov	r3, r2
 800ae52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae54:	f3ef 8310 	mrs	r3, PRIMASK
 800ae58:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae5e:	b672      	cpsid	i
}
 800ae60:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ae62:	88bb      	ldrh	r3, [r7, #4]
 800ae64:	79f9      	ldrb	r1, [r7, #7]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	4806      	ldr	r0, [pc, #24]	@ (800ae84 <SUBGRF_WriteCommand+0x40>)
 800ae6a:	f7f8 f9ed 	bl	8003248 <HAL_SUBGHZ_ExecSetCmd>
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f383 8810 	msr	PRIMASK, r3
}
 800ae78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae7a:	bf00      	nop
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	200000e0 	.word	0x200000e0

0800ae88 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	71fb      	strb	r3, [r7, #7]
 800ae94:	4613      	mov	r3, r2
 800ae96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae98:	f3ef 8310 	mrs	r3, PRIMASK
 800ae9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aea2:	b672      	cpsid	i
}
 800aea4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800aea6:	88bb      	ldrh	r3, [r7, #4]
 800aea8:	79f9      	ldrb	r1, [r7, #7]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4806      	ldr	r0, [pc, #24]	@ (800aec8 <SUBGRF_ReadCommand+0x40>)
 800aeae:	f7f8 fa2a 	bl	8003306 <HAL_SUBGHZ_ExecGetCmd>
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f383 8810 	msr	PRIMASK, r3
}
 800aebc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aebe:	bf00      	nop
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200000e0 	.word	0x200000e0

0800aecc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	460a      	mov	r2, r1
 800aed6:	71fb      	strb	r3, [r7, #7]
 800aed8:	4613      	mov	r3, r2
 800aeda:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800aedc:	2301      	movs	r3, #1
 800aede:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800aee0:	79bb      	ldrb	r3, [r7, #6]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d10d      	bne.n	800af02 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d104      	bne.n	800aef6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800aeec:	2302      	movs	r3, #2
 800aeee:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800aef0:	2004      	movs	r0, #4
 800aef2:	f000 f8ef 	bl	800b0d4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d107      	bne.n	800af0c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800aefc:	2303      	movs	r3, #3
 800aefe:	73fb      	strb	r3, [r7, #15]
 800af00:	e004      	b.n	800af0c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800af02:	79bb      	ldrb	r3, [r7, #6]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800af08:	2301      	movs	r3, #1
 800af0a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 fb41 	bl	800b596 <RBI_ConfigRFSwitch>
}
 800af14:	bf00      	nop
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800af26:	2301      	movs	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800af2a:	f000 fb5f 	bl	800b5ec <RBI_GetTxConfig>
 800af2e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d016      	beq.n	800af64 <SUBGRF_SetRfTxPower+0x48>
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	dc16      	bgt.n	800af6a <SUBGRF_SetRfTxPower+0x4e>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <SUBGRF_SetRfTxPower+0x2e>
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d00a      	beq.n	800af5e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800af48:	e00f      	b.n	800af6a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800af4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af4e:	2b0f      	cmp	r3, #15
 800af50:	dd02      	ble.n	800af58 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800af52:	2302      	movs	r3, #2
 800af54:	73fb      	strb	r3, [r7, #15]
            break;
 800af56:	e009      	b.n	800af6c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800af58:	2301      	movs	r3, #1
 800af5a:	73fb      	strb	r3, [r7, #15]
            break;
 800af5c:	e006      	b.n	800af6c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]
            break;
 800af62:	e003      	b.n	800af6c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800af64:	2302      	movs	r3, #2
 800af66:	73fb      	strb	r3, [r7, #15]
            break;
 800af68:	e000      	b.n	800af6c <SUBGRF_SetRfTxPower+0x50>
            break;
 800af6a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800af6c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	2202      	movs	r2, #2
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fbc7 	bl	800a708 <SUBGRF_SetTxParams>

    return paSelect;
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800af84:	b480      	push	{r7}
 800af86:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800af88:	2301      	movs	r3, #1
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc80      	pop	{r7}
 800af90:	4770      	bx	lr
	...

0800af94 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800af9c:	4b03      	ldr	r3, [pc, #12]	@ (800afac <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2001      	movs	r0, #1
 800afa2:	4798      	blx	r3
}
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	200040fc 	.word	0x200040fc

0800afb0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800afb8:	4b03      	ldr	r3, [pc, #12]	@ (800afc8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2002      	movs	r0, #2
 800afbe:	4798      	blx	r3
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200040fc 	.word	0x200040fc

0800afcc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800afd4:	4b03      	ldr	r3, [pc, #12]	@ (800afe4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2040      	movs	r0, #64	@ 0x40
 800afda:	4798      	blx	r3
}
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	200040fc 	.word	0x200040fc

0800afe8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800affa:	2b01      	cmp	r3, #1
 800affc:	d005      	beq.n	800b00a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800affe:	e00a      	b.n	800b016 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b000:	4b07      	ldr	r3, [pc, #28]	@ (800b020 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2080      	movs	r0, #128	@ 0x80
 800b006:	4798      	blx	r3
            break;
 800b008:	e005      	b.n	800b016 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b00a:	4b05      	ldr	r3, [pc, #20]	@ (800b020 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b012:	4798      	blx	r3
            break;
 800b014:	bf00      	nop
    }
}
 800b016:	bf00      	nop
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200040fc 	.word	0x200040fc

0800b024 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b02c:	4b04      	ldr	r3, [pc, #16]	@ (800b040 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b034:	4798      	blx	r3
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200040fc 	.word	0x200040fc

0800b044 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b04c:	4b03      	ldr	r3, [pc, #12]	@ (800b05c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2020      	movs	r0, #32
 800b052:	4798      	blx	r3
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	200040fc 	.word	0x200040fc

0800b060 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b068:	4b03      	ldr	r3, [pc, #12]	@ (800b078 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2004      	movs	r0, #4
 800b06e:	4798      	blx	r3
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	200040fc 	.word	0x200040fc

0800b07c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b084:	4b03      	ldr	r3, [pc, #12]	@ (800b094 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2008      	movs	r0, #8
 800b08a:	4798      	blx	r3
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	200040fc 	.word	0x200040fc

0800b098 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b0a0:	4b03      	ldr	r3, [pc, #12]	@ (800b0b0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2010      	movs	r0, #16
 800b0a6:	4798      	blx	r3
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	200040fc 	.word	0x200040fc

0800b0b4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b0bc:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b0c4:	4798      	blx	r3
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200040fc 	.word	0x200040fc

0800b0d4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	4603      	mov	r3, r0
 800b0dc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b0de:	f000 fa9b 	bl	800b618 <RBI_IsDCDC>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d112      	bne.n	800b10e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b0e8:	f640 1023 	movw	r0, #2339	@ 0x923
 800b0ec:	f7ff fe0e 	bl	800ad0c <SUBGRF_ReadRegister>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	f023 0306 	bic.w	r3, r3, #6
 800b0fa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b0fc:	7bfa      	ldrb	r2, [r7, #15]
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	4313      	orrs	r3, r2
 800b102:	b2db      	uxtb	r3, r3
 800b104:	4619      	mov	r1, r3
 800b106:	f640 1023 	movw	r0, #2339	@ 0x923
 800b10a:	f7ff fdeb 	bl	800ace4 <SUBGRF_WriteRegister>
  }
}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b126:	231f      	movs	r3, #31
 800b128:	e017      	b.n	800b15a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]
 800b12e:	e00f      	b.n	800b150 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	4a0c      	ldr	r2, [pc, #48]	@ (800b164 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d205      	bcs.n	800b14a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	4a08      	ldr	r2, [pc, #32]	@ (800b164 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	4413      	add	r3, r2
 800b146:	791b      	ldrb	r3, [r3, #4]
 800b148:	e007      	b.n	800b15a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	3301      	adds	r3, #1
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	2b15      	cmp	r3, #21
 800b154:	d9ec      	bls.n	800b130 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b156:	bf00      	nop
 800b158:	e7fd      	b.n	800b156 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	bc80      	pop	{r7}
 800b162:	4770      	bx	lr
 800b164:	0800d55c 	.word	0x0800d55c

0800b168 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08a      	sub	sp, #40	@ 0x28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b172:	4b35      	ldr	r3, [pc, #212]	@ (800b248 <SUBGRF_GetCFO+0xe0>)
 800b174:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b176:	f640 0007 	movw	r0, #2055	@ 0x807
 800b17a:	f7ff fdc7 	bl	800ad0c <SUBGRF_ReadRegister>
 800b17e:	4603      	mov	r3, r0
 800b180:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b182:	7ffb      	ldrb	r3, [r7, #31]
 800b184:	08db      	lsrs	r3, r3, #3
 800b186:	b2db      	uxtb	r3, r3
 800b188:	f003 0303 	and.w	r3, r3, #3
 800b18c:	3328      	adds	r3, #40	@ 0x28
 800b18e:	443b      	add	r3, r7
 800b190:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b194:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b196:	7ffb      	ldrb	r3, [r7, #31]
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b19e:	7fba      	ldrb	r2, [r7, #30]
 800b1a0:	7f7b      	ldrb	r3, [r7, #29]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b28      	ldr	r3, [pc, #160]	@ (800b24c <SUBGRF_GetCFO+0xe4>)
 800b1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ba:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	2b07      	cmp	r3, #7
 800b1ce:	d802      	bhi.n	800b1d6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800b1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	fb02 f303 	mul.w	r3, r2, r3
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d802      	bhi.n	800b1ea <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b1e4:	2304      	movs	r3, #4
 800b1e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b1ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	fb02 f303 	mul.w	r3, r2, r3
 800b1f4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b1f6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800b1fa:	f7ff fd87 	bl	800ad0c <SUBGRF_ReadRegister>
 800b1fe:	4603      	mov	r3, r0
 800b200:	021b      	lsls	r3, r3, #8
 800b202:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b206:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b208:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800b20c:	f7ff fd7e 	bl	800ad0c <SUBGRF_ReadRegister>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	4313      	orrs	r3, r2
 800b218:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b22a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b22e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	095b      	lsrs	r3, r3, #5
 800b234:	6a3a      	ldr	r2, [r7, #32]
 800b236:	fb02 f303 	mul.w	r3, r2, r3
 800b23a:	11da      	asrs	r2, r3, #7
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	601a      	str	r2, [r3, #0]
}
 800b240:	bf00      	nop
 800b242:	3728      	adds	r7, #40	@ 0x28
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	0c0a0804 	.word	0x0c0a0804
 800b24c:	01e82fb5 	.word	0x01e82fb5

0800b250 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b262:	f04f 33ff 	mov.w	r3, #4294967295
 800b266:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b268:	697b      	ldr	r3, [r7, #20]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	bc80      	pop	{r7}
 800b272:	4770      	bx	lr

0800b274 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b286:	f04f 33ff 	mov.w	r3, #4294967295
 800b28a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b28c:	697b      	ldr	r3, [r7, #20]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr

0800b298 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b2a4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr

0800b2b2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b2b6:	bf00      	nop
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bc80      	pop	{r7}
 800b2bc:	4770      	bx	lr

0800b2be <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b2be:	b480      	push	{r7}
 800b2c0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b2c2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bc80      	pop	{r7}
 800b2ca:	4770      	bx	lr

0800b2cc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b2d0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr

0800b2da <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b083      	sub	sp, #12
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bc80      	pop	{r7}
 800b2ec:	4770      	bx	lr

0800b2ee <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b087      	sub	sp, #28
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b300:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b302:	697b      	ldr	r3, [r7, #20]
}
 800b304:	4618      	mov	r0, r3
 800b306:	371c      	adds	r7, #28
 800b308:	46bd      	mov	sp, r7
 800b30a:	bc80      	pop	{r7}
 800b30c:	4770      	bx	lr

0800b30e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b30e:	b480      	push	{r7}
 800b310:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b312:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b316:	4618      	mov	r0, r3
 800b318:	46bd      	mov	sp, r7
 800b31a:	bc80      	pop	{r7}
 800b31c:	4770      	bx	lr

0800b31e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b31e:	b480      	push	{r7}
 800b320:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b322:	bf00      	nop
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr

0800b32a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b32a:	b480      	push	{r7}
 800b32c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b32e:	bf00      	nop
 800b330:	46bd      	mov	sp, r7
 800b332:	bc80      	pop	{r7}
 800b334:	4770      	bx	lr

0800b336 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	4603      	mov	r3, r0
 800b33e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	bc80      	pop	{r7}
 800b348:	4770      	bx	lr

0800b34a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b34e:	f7f5 fd5e 	bl	8000e0e <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b352:	f000 f803 	bl	800b35c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b356:	bf00      	nop
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b08b      	sub	sp, #44	@ 0x2c
 800b360:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b362:	4b2b      	ldr	r3, [pc, #172]	@ (800b410 <SubghzApp_Init+0xb4>)
 800b364:	4a2b      	ldr	r2, [pc, #172]	@ (800b414 <SubghzApp_Init+0xb8>)
 800b366:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b368:	4b29      	ldr	r3, [pc, #164]	@ (800b410 <SubghzApp_Init+0xb4>)
 800b36a:	4a2b      	ldr	r2, [pc, #172]	@ (800b418 <SubghzApp_Init+0xbc>)
 800b36c:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b36e:	4b28      	ldr	r3, [pc, #160]	@ (800b410 <SubghzApp_Init+0xb4>)
 800b370:	4a2a      	ldr	r2, [pc, #168]	@ (800b41c <SubghzApp_Init+0xc0>)
 800b372:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b374:	4b26      	ldr	r3, [pc, #152]	@ (800b410 <SubghzApp_Init+0xb4>)
 800b376:	4a2a      	ldr	r2, [pc, #168]	@ (800b420 <SubghzApp_Init+0xc4>)
 800b378:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b37a:	4b25      	ldr	r3, [pc, #148]	@ (800b410 <SubghzApp_Init+0xb4>)
 800b37c:	4a29      	ldr	r2, [pc, #164]	@ (800b424 <SubghzApp_Init+0xc8>)
 800b37e:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b380:	4b29      	ldr	r3, [pc, #164]	@ (800b428 <SubghzApp_Init+0xcc>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4822      	ldr	r0, [pc, #136]	@ (800b410 <SubghzApp_Init+0xb4>)
 800b386:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  	Radio.SetModem(MODEM_LORA);
 800b388:	4b27      	ldr	r3, [pc, #156]	@ (800b428 <SubghzApp_Init+0xcc>)
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	2001      	movs	r0, #1
 800b38e:	4798      	blx	r3
    Radio.SetChannel(868000000);
 800b390:	4b25      	ldr	r3, [pc, #148]	@ (800b428 <SubghzApp_Init+0xcc>)
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	4825      	ldr	r0, [pc, #148]	@ (800b42c <SubghzApp_Init+0xd0>)
 800b396:	4798      	blx	r3
    Radio.SetRxConfig(
 800b398:	4b23      	ldr	r3, [pc, #140]	@ (800b428 <SubghzApp_Init+0xcc>)
 800b39a:	699c      	ldr	r4, [r3, #24]
 800b39c:	2301      	movs	r3, #1
 800b39e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9308      	str	r3, [sp, #32]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	9307      	str	r3, [sp, #28]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9306      	str	r3, [sp, #24]
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	9305      	str	r3, [sp, #20]
 800b3b0:	230c      	movs	r3, #12
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9303      	str	r3, [sp, #12]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9302      	str	r3, [sp, #8]
 800b3bc:	2308      	movs	r3, #8
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	220a      	movs	r2, #10
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	47a0      	blx	r4
  		  1,
  		  0,
  		  0,
  		  0,
  		  true);
    Radio.SetTxConfig(
 800b3ce:	4b16      	ldr	r3, [pc, #88]	@ (800b428 <SubghzApp_Init+0xcc>)
 800b3d0:	69dc      	ldr	r4, [r3, #28]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	9308      	str	r3, [sp, #32]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9307      	str	r3, [sp, #28]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9306      	str	r3, [sp, #24]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9305      	str	r3, [sp, #20]
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	2320      	movs	r3, #32
 800b3ec:	9302      	str	r3, [sp, #8]
 800b3ee:	2304      	movs	r3, #4
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	230a      	movs	r3, #10
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	210f      	movs	r1, #15
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	47a0      	blx	r4
  		  0,
  		  0,
  		  0);
    //Radio.SetMaxPayloadLength(MODEM_LORA, 256);
    //Radio.SetPublicNetwork(true);
    Radio.Rx(0);
 800b400:	4b09      	ldr	r3, [pc, #36]	@ (800b428 <SubghzApp_Init+0xcc>)
 800b402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b404:	2000      	movs	r0, #0
 800b406:	4798      	blx	r3
  /* USER CODE END SubghzApp_Init_2 */
}
 800b408:	bf00      	nop
 800b40a:	3704      	adds	r7, #4
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	20004100 	.word	0x20004100
 800b414:	0800b431 	.word	0x0800b431
 800b418:	0800b45d 	.word	0x0800b45d
 800b41c:	0800b515 	.word	0x0800b515
 800b420:	0800b541 	.word	0x0800b541
 800b424:	0800b555 	.word	0x0800b555
 800b428:	0800d4cc 	.word	0x0800d4cc
 800b42c:	33bca100 	.word	0x33bca100

0800b430 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
    HAL_UART_Transmit(&huart1, "!Successfully sent\n\r@", sizeof("!Successfully sent\n\r@"), HAL_MAX_DELAY);
 800b434:	f04f 33ff 	mov.w	r3, #4294967295
 800b438:	2216      	movs	r2, #22
 800b43a:	4905      	ldr	r1, [pc, #20]	@ (800b450 <OnTxDone+0x20>)
 800b43c:	4805      	ldr	r0, [pc, #20]	@ (800b454 <OnTxDone+0x24>)
 800b43e:	f7f8 fcdd 	bl	8003dfc <HAL_UART_Transmit>
    Radio.Rx(0);
 800b442:	4b05      	ldr	r3, [pc, #20]	@ (800b458 <OnTxDone+0x28>)
 800b444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b446:	2000      	movs	r0, #0
 800b448:	4798      	blx	r3
  /* USER CODE END OnTxDone */
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	0800d2d8 	.word	0x0800d2d8
 800b454:	200000f8 	.word	0x200000f8
 800b458:	0800d4cc 	.word	0x0800d4cc

0800b45c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b0a6      	sub	sp, #152	@ 0x98
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	4608      	mov	r0, r1
 800b466:	4611      	mov	r1, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	4603      	mov	r3, r0
 800b46c:	817b      	strh	r3, [r7, #10]
 800b46e:	460b      	mov	r3, r1
 800b470:	813b      	strh	r3, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	char formatter[128];
    for (int i = 0; i < size; ++i) {
 800b476:	2300      	movs	r3, #0
 800b478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b47c:	e01e      	b.n	800b4bc <OnRxDone+0x60>
    	sprintf(formatter, "0x%X ", payload[i]);
 800b47e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	4413      	add	r3, r2
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	491d      	ldr	r1, [pc, #116]	@ (800b504 <OnRxDone+0xa8>)
 800b490:	4618      	mov	r0, r3
 800b492:	f000 fbd9 	bl	800bc48 <siprintf>
        HAL_UART_Transmit(&huart1, formatter, strlen(formatter), HAL_MAX_DELAY);
 800b496:	f107 0314 	add.w	r3, r7, #20
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f4 fe70 	bl	8000180 <strlen>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	f107 0114 	add.w	r1, r7, #20
 800b4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ac:	4816      	ldr	r0, [pc, #88]	@ (800b508 <OnRxDone+0xac>)
 800b4ae:	f7f8 fca5 	bl	8003dfc <HAL_UART_Transmit>
    for (int i = 0; i < size; ++i) {
 800b4b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4bc:	897b      	ldrh	r3, [r7, #10]
 800b4be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	dbdb      	blt.n	800b47e <OnRxDone+0x22>
    }
	sprintf(formatter, "\n\r!size: %d; rssi: %d\n\r@", size, rssi);
 800b4c6:	897a      	ldrh	r2, [r7, #10]
 800b4c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b4cc:	f107 0014 	add.w	r0, r7, #20
 800b4d0:	490e      	ldr	r1, [pc, #56]	@ (800b50c <OnRxDone+0xb0>)
 800b4d2:	f000 fbb9 	bl	800bc48 <siprintf>
    HAL_UART_Transmit(&huart1, formatter, strlen(formatter), HAL_MAX_DELAY);
 800b4d6:	f107 0314 	add.w	r3, r7, #20
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f4 fe50 	bl	8000180 <strlen>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	f107 0114 	add.w	r1, r7, #20
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ec:	4806      	ldr	r0, [pc, #24]	@ (800b508 <OnRxDone+0xac>)
 800b4ee:	f7f8 fc85 	bl	8003dfc <HAL_UART_Transmit>
    Radio.Rx(0);
 800b4f2:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <OnRxDone+0xb4>)
 800b4f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	4798      	blx	r3
  /* USER CODE END OnRxDone */
}
 800b4fa:	bf00      	nop
 800b4fc:	3798      	adds	r7, #152	@ 0x98
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	0800d2f0 	.word	0x0800d2f0
 800b508:	200000f8 	.word	0x200000f8
 800b50c:	0800d2f8 	.word	0x0800d2f8
 800b510:	0800d4cc 	.word	0x0800d4cc

0800b514 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
    HAL_UART_Transmit(&huart1, "!Sending timeout\n\r@", sizeof("!Sending timeout\n\r@"), HAL_MAX_DELAY);
 800b518:	f04f 33ff 	mov.w	r3, #4294967295
 800b51c:	2214      	movs	r2, #20
 800b51e:	4905      	ldr	r1, [pc, #20]	@ (800b534 <OnTxTimeout+0x20>)
 800b520:	4805      	ldr	r0, [pc, #20]	@ (800b538 <OnTxTimeout+0x24>)
 800b522:	f7f8 fc6b 	bl	8003dfc <HAL_UART_Transmit>
    Radio.Rx(0);
 800b526:	4b05      	ldr	r3, [pc, #20]	@ (800b53c <OnTxTimeout+0x28>)
 800b528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b52a:	2000      	movs	r0, #0
 800b52c:	4798      	blx	r3
  /* USER CODE END OnTxTimeout */
}
 800b52e:	bf00      	nop
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	0800d314 	.word	0x0800d314
 800b538:	200000f8 	.word	0x200000f8
 800b53c:	0800d4cc 	.word	0x0800d4cc

0800b540 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
    //HAL_UART_Transmit(&huart1, "!Receiving timeout\n\r@", sizeof("!Receiving timeout\n\r@"), HAL_MAX_DELAY);
    Radio.Rx(0);
 800b544:	4b02      	ldr	r3, [pc, #8]	@ (800b550 <OnRxTimeout+0x10>)
 800b546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b548:	2000      	movs	r0, #0
 800b54a:	4798      	blx	r3
  /* USER CODE END OnRxTimeout */
}
 800b54c:	bf00      	nop
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	0800d4cc 	.word	0x0800d4cc

0800b554 <OnRxError>:

static void OnRxError(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
    HAL_UART_Transmit(&huart1, "!Receiving error\n\r@", sizeof("!Receiving error\n\r@"), HAL_MAX_DELAY);
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	2214      	movs	r2, #20
 800b55e:	4905      	ldr	r1, [pc, #20]	@ (800b574 <OnRxError+0x20>)
 800b560:	4805      	ldr	r0, [pc, #20]	@ (800b578 <OnRxError+0x24>)
 800b562:	f7f8 fc4b 	bl	8003dfc <HAL_UART_Transmit>
    Radio.Rx(0);
 800b566:	4b05      	ldr	r3, [pc, #20]	@ (800b57c <OnRxError+0x28>)
 800b568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b56a:	2000      	movs	r0, #0
 800b56c:	4798      	blx	r3
  /* USER CODE END OnRxError */
}
 800b56e:	bf00      	nop
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	0800d328 	.word	0x0800d328
 800b578:	200000f8 	.word	0x200000f8
 800b57c:	0800d4cc 	.word	0x0800d4cc

0800b580 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b58a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	bc80      	pop	{r7}
 800b594:	4770      	bx	lr

0800b596 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	4603      	mov	r3, r0
 800b59e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
  if (Config == RBI_SWITCH_RFO_HP || Config == RBI_SWITCH_RFO_LP) {
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d002      	beq.n	800b5b0 <RBI_ConfigRFSwitch+0x1a>
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d10c      	bne.n	800b5ca <RBI_ConfigRFSwitch+0x34>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2120      	movs	r1, #32
 800b5b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b5b8:	f7f6 f926 	bl	8001808 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800b5bc:	2201      	movs	r2, #1
 800b5be:	2140      	movs	r1, #64	@ 0x40
 800b5c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b5c4:	f7f6 f920 	bl	8001808 <HAL_GPIO_WritePin>
 800b5c8:	e00b      	b.n	800b5e2 <RBI_ConfigRFSwitch+0x4c>
  } else {
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	2120      	movs	r1, #32
 800b5ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b5d2:	f7f6 f919 	bl	8001808 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2140      	movs	r1, #64	@ 0x40
 800b5da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b5de:	f7f6 f913 	bl	8001808 <HAL_GPIO_WritePin>
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800b5f6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bc80      	pop	{r7}
 800b600:	4770      	bx	lr

0800b602 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b602:	b480      	push	{r7}
 800b604:	b083      	sub	sp, #12
 800b606:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b608:	2300      	movs	r3, #0
 800b60a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800b60c:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b60e:	4618      	mov	r0, r3
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	bc80      	pop	{r7}
 800b616:	4770      	bx	lr

0800b618 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800b622:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	bc80      	pop	{r7}
 800b62c:	4770      	bx	lr

0800b62e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b62e:	b480      	push	{r7}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	4603      	mov	r3, r0
 800b636:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 15;
 800b638:	230f      	movs	r3, #15
 800b63a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800b63c:	79fb      	ldrb	r3, [r7, #7]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800b642:	230f      	movs	r3, #15
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e001      	b.n	800b64c <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800b648:	2316      	movs	r3, #22
 800b64a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b64c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	bc80      	pop	{r7}
 800b656:	4770      	bx	lr

0800b658 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	4613      	mov	r3, r2
 800b664:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b66e:	e007      	b.n	800b680 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	1c53      	adds	r3, r2, #1
 800b674:	613b      	str	r3, [r7, #16]
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	1c59      	adds	r1, r3, #1
 800b67a:	6179      	str	r1, [r7, #20]
 800b67c:	7812      	ldrb	r2, [r2, #0]
 800b67e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b680:	88fb      	ldrh	r3, [r7, #6]
 800b682:	1e5a      	subs	r2, r3, #1
 800b684:	80fa      	strh	r2, [r7, #6]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1f2      	bne.n	800b670 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b68a:	bf00      	nop
 800b68c:	bf00      	nop
 800b68e:	371c      	adds	r7, #28
 800b690:	46bd      	mov	sp, r7
 800b692:	bc80      	pop	{r7}
 800b694:	4770      	bx	lr

0800b696 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70fb      	strb	r3, [r7, #3]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b6aa:	e004      	b.n	800b6b6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	60fa      	str	r2, [r7, #12]
 800b6b2:	78fa      	ldrb	r2, [r7, #3]
 800b6b4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b6b6:	883b      	ldrh	r3, [r7, #0]
 800b6b8:	1e5a      	subs	r2, r3, #1
 800b6ba:	803a      	strh	r2, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1f5      	bne.n	800b6ac <UTIL_MEM_set_8+0x16>
  }
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bc80      	pop	{r7}
 800b6ca:	4770      	bx	lr

0800b6cc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d023      	beq.n	800b72a <UTIL_TIMER_Create+0x5e>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d020      	beq.n	800b72a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b6ee:	4b11      	ldr	r3, [pc, #68]	@ (800b734 <UTIL_TIMER_Create+0x68>)
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f2:	68b8      	ldr	r0, [r7, #8]
 800b6f4:	4798      	blx	r3
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	79fa      	ldrb	r2, [r7, #7]
 800b71e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e000      	b.n	800b72c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b72a:	2301      	movs	r3, #1
  }
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	0800d478 	.word	0x0800d478

0800b738 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	@ 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d056      	beq.n	800b7fa <UTIL_TIMER_Start+0xc2>
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f929 	bl	800b9a4 <TimerExists>
 800b752:	4603      	mov	r3, r0
 800b754:	f083 0301 	eor.w	r3, r3, #1
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d04d      	beq.n	800b7fa <UTIL_TIMER_Start+0xc2>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	7a5b      	ldrb	r3, [r3, #9]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d149      	bne.n	800b7fa <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b766:	f3ef 8310 	mrs	r3, PRIMASK
 800b76a:	613b      	str	r3, [r7, #16]
  return(result);
 800b76c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b76e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b770:	b672      	cpsid	i
}
 800b772:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b77a:	4b24      	ldr	r3, [pc, #144]	@ (800b80c <UTIL_TIMER_Start+0xd4>)
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	4798      	blx	r3
 800b780:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b782:	6a3a      	ldr	r2, [r7, #32]
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	429a      	cmp	r2, r3
 800b788:	d201      	bcs.n	800b78e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a3a      	ldr	r2, [r7, #32]
 800b792:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b810 <UTIL_TIMER_Start+0xd8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b7ae:	4b17      	ldr	r3, [pc, #92]	@ (800b80c <UTIL_TIMER_Start+0xd4>)
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f96b 	bl	800ba90 <TimerInsertNewHeadTimer>
 800b7ba:	e017      	b.n	800b7ec <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b7bc:	4b13      	ldr	r3, [pc, #76]	@ (800b80c <UTIL_TIMER_Start+0xd4>)
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	4798      	blx	r3
 800b7c2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b810 <UTIL_TIMER_Start+0xd8>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d203      	bcs.n	800b7e6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f956 	bl	800ba90 <TimerInsertNewHeadTimer>
 800b7e4:	e002      	b.n	800b7ec <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f922 	bl	800ba30 <TimerInsertTimer>
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f383 8810 	msr	PRIMASK, r3
}
 800b7f6:	bf00      	nop
  {
 800b7f8:	e002      	b.n	800b800 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800b800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b804:	4618      	mov	r0, r3
 800b806:	3728      	adds	r7, #40	@ 0x28
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	0800d478 	.word	0x0800d478
 800b810:	2000411c 	.word	0x2000411c

0800b814 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d05b      	beq.n	800b8de <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b826:	f3ef 8310 	mrs	r3, PRIMASK
 800b82a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b82c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b82e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b830:	b672      	cpsid	i
}
 800b832:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b834:	4b2d      	ldr	r3, [pc, #180]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b83a:	4b2c      	ldr	r3, [pc, #176]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b846:	4b29      	ldr	r3, [pc, #164]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d041      	beq.n	800b8d2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b854:	4b25      	ldr	r3, [pc, #148]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d134      	bne.n	800b8c8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b85e:	4b23      	ldr	r3, [pc, #140]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2200      	movs	r2, #0
 800b864:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b866:	4b21      	ldr	r3, [pc, #132]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00a      	beq.n	800b886 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b870:	4b1e      	ldr	r3, [pc, #120]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
 800b876:	4a1d      	ldr	r2, [pc, #116]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b878:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b87a:	4b1c      	ldr	r3, [pc, #112]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 f8ac 	bl	800b9dc <TimerSetTimeout>
 800b884:	e023      	b.n	800b8ce <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b886:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f0 <UTIL_TIMER_Stop+0xdc>)
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	4798      	blx	r3
            TimerListHead = NULL;
 800b88c:	4b17      	ldr	r3, [pc, #92]	@ (800b8ec <UTIL_TIMER_Stop+0xd8>)
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	e01c      	b.n	800b8ce <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d110      	bne.n	800b8be <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	695b      	ldr	r3, [r3, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d006      	beq.n	800b8b2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b8b0:	e00d      	b.n	800b8ce <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	615a      	str	r2, [r3, #20]
            break;
 800b8bc:	e007      	b.n	800b8ce <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e2      	bne.n	800b894 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	77fb      	strb	r3, [r7, #31]
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f383 8810 	msr	PRIMASK, r3
}
 800b8dc:	e001      	b.n	800b8e2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b8e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3720      	adds	r7, #32
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2000411c 	.word	0x2000411c
 800b8f0:	0800d478 	.word	0x0800d478

0800b8f4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b908:	2301      	movs	r3, #1
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	e014      	b.n	800b938 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b90e:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <UTIL_TIMER_SetPeriod+0x50>)
 800b910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b912:	6838      	ldr	r0, [r7, #0]
 800b914:	4798      	blx	r3
 800b916:	4602      	mov	r2, r0
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f841 	bl	800b9a4 <TimerExists>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff ff73 	bl	800b814 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff ff02 	bl	800b738 <UTIL_TIMER_Start>
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	0800d478 	.word	0x0800d478

0800b948 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b94e:	4b06      	ldr	r3, [pc, #24]	@ (800b968 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	4798      	blx	r3
 800b954:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b956:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
 800b95e:	4603      	mov	r3, r0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	0800d478 	.word	0x0800d478

0800b96c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b974:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a0 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	4798      	blx	r3
 800b97a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b97c:	4b08      	ldr	r3, [pc, #32]	@ (800b9a0 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	4798      	blx	r3
 800b984:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b986:	4b06      	ldr	r3, [pc, #24]	@ (800b9a0 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b98a:	68f9      	ldr	r1, [r7, #12]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	1a8a      	subs	r2, r1, r2
 800b990:	4610      	mov	r0, r2
 800b992:	4798      	blx	r3
 800b994:	4603      	mov	r3, r0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	0800d478 	.word	0x0800d478

0800b9a4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d8 <TimerExists+0x34>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b9b2:	e008      	b.n	800b9c6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d101      	bne.n	800b9c0 <TimerExists+0x1c>
    {
      return true;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e006      	b.n	800b9ce <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f3      	bne.n	800b9b4 <TimerExists+0x10>
  }
  return false;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bc80      	pop	{r7}
 800b9d6:	4770      	bx	lr
 800b9d8:	2000411c 	.word	0x2000411c

0800b9dc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b9dc:	b590      	push	{r4, r7, lr}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b9e4:	4b11      	ldr	r3, [pc, #68]	@ (800ba2c <TimerSetTimeout+0x50>)
 800b9e6:	6a1b      	ldr	r3, [r3, #32]
 800b9e8:	4798      	blx	r3
 800b9ea:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681c      	ldr	r4, [r3, #0]
 800b9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba2c <TimerSetTimeout+0x50>)
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	4798      	blx	r3
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	429c      	cmp	r4, r3
 800ba04:	d207      	bcs.n	800ba16 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ba06:	4b09      	ldr	r3, [pc, #36]	@ (800ba2c <TimerSetTimeout+0x50>)
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	4798      	blx	r3
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	441a      	add	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800ba16:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <TimerSetTimeout+0x50>)
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	6812      	ldr	r2, [r2, #0]
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4798      	blx	r3
}
 800ba22:	bf00      	nop
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd90      	pop	{r4, r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800d478 	.word	0x0800d478

0800ba30 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba38:	4b14      	ldr	r3, [pc, #80]	@ (800ba8c <TimerInsertTimer+0x5c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ba3e:	4b13      	ldr	r3, [pc, #76]	@ (800ba8c <TimerInsertTimer+0x5c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800ba46:	e012      	b.n	800ba6e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d905      	bls.n	800ba60 <TimerInsertTimer+0x30>
    {
        cur = next;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	60bb      	str	r3, [r7, #8]
 800ba5e:	e006      	b.n	800ba6e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	615a      	str	r2, [r3, #20]
        return;
 800ba6c:	e009      	b.n	800ba82 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1e8      	bne.n	800ba48 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	615a      	str	r2, [r3, #20]
}
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bc80      	pop	{r7}
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	2000411c 	.word	0x2000411c

0800ba90 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba98:	4b0b      	ldr	r3, [pc, #44]	@ (800bac8 <TimerInsertNewHeadTimer+0x38>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bab0:	4a05      	ldr	r2, [pc, #20]	@ (800bac8 <TimerInsertNewHeadTimer+0x38>)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bab6:	4b04      	ldr	r3, [pc, #16]	@ (800bac8 <TimerInsertNewHeadTimer+0x38>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff ff8e 	bl	800b9dc <TimerSetTimeout>
}
 800bac0:	bf00      	nop
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	2000411c 	.word	0x2000411c

0800bacc <malloc>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	@ (800bad8 <malloc+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f000 b82d 	b.w	800bb30 <_malloc_r>
 800bad6:	bf00      	nop
 800bad8:	20000014 	.word	0x20000014

0800badc <free>:
 800badc:	4b02      	ldr	r3, [pc, #8]	@ (800bae8 <free+0xc>)
 800bade:	4601      	mov	r1, r0
 800bae0:	6818      	ldr	r0, [r3, #0]
 800bae2:	f000 b99f 	b.w	800be24 <_free_r>
 800bae6:	bf00      	nop
 800bae8:	20000014 	.word	0x20000014

0800baec <sbrk_aligned>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	4e0f      	ldr	r6, [pc, #60]	@ (800bb2c <sbrk_aligned+0x40>)
 800baf0:	460c      	mov	r4, r1
 800baf2:	6831      	ldr	r1, [r6, #0]
 800baf4:	4605      	mov	r5, r0
 800baf6:	b911      	cbnz	r1, 800bafe <sbrk_aligned+0x12>
 800baf8:	f000 f94a 	bl	800bd90 <_sbrk_r>
 800bafc:	6030      	str	r0, [r6, #0]
 800bafe:	4621      	mov	r1, r4
 800bb00:	4628      	mov	r0, r5
 800bb02:	f000 f945 	bl	800bd90 <_sbrk_r>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	d103      	bne.n	800bb12 <sbrk_aligned+0x26>
 800bb0a:	f04f 34ff 	mov.w	r4, #4294967295
 800bb0e:	4620      	mov	r0, r4
 800bb10:	bd70      	pop	{r4, r5, r6, pc}
 800bb12:	1cc4      	adds	r4, r0, #3
 800bb14:	f024 0403 	bic.w	r4, r4, #3
 800bb18:	42a0      	cmp	r0, r4
 800bb1a:	d0f8      	beq.n	800bb0e <sbrk_aligned+0x22>
 800bb1c:	1a21      	subs	r1, r4, r0
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f936 	bl	800bd90 <_sbrk_r>
 800bb24:	3001      	adds	r0, #1
 800bb26:	d1f2      	bne.n	800bb0e <sbrk_aligned+0x22>
 800bb28:	e7ef      	b.n	800bb0a <sbrk_aligned+0x1e>
 800bb2a:	bf00      	nop
 800bb2c:	20004120 	.word	0x20004120

0800bb30 <_malloc_r>:
 800bb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb34:	1ccd      	adds	r5, r1, #3
 800bb36:	f025 0503 	bic.w	r5, r5, #3
 800bb3a:	3508      	adds	r5, #8
 800bb3c:	2d0c      	cmp	r5, #12
 800bb3e:	bf38      	it	cc
 800bb40:	250c      	movcc	r5, #12
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	4606      	mov	r6, r0
 800bb46:	db01      	blt.n	800bb4c <_malloc_r+0x1c>
 800bb48:	42a9      	cmp	r1, r5
 800bb4a:	d904      	bls.n	800bb56 <_malloc_r+0x26>
 800bb4c:	230c      	movs	r3, #12
 800bb4e:	6033      	str	r3, [r6, #0]
 800bb50:	2000      	movs	r0, #0
 800bb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc2c <_malloc_r+0xfc>
 800bb5a:	f000 f869 	bl	800bc30 <__malloc_lock>
 800bb5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb62:	461c      	mov	r4, r3
 800bb64:	bb44      	cbnz	r4, 800bbb8 <_malloc_r+0x88>
 800bb66:	4629      	mov	r1, r5
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff ffbf 	bl	800baec <sbrk_aligned>
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	4604      	mov	r4, r0
 800bb72:	d158      	bne.n	800bc26 <_malloc_r+0xf6>
 800bb74:	f8d8 4000 	ldr.w	r4, [r8]
 800bb78:	4627      	mov	r7, r4
 800bb7a:	2f00      	cmp	r7, #0
 800bb7c:	d143      	bne.n	800bc06 <_malloc_r+0xd6>
 800bb7e:	2c00      	cmp	r4, #0
 800bb80:	d04b      	beq.n	800bc1a <_malloc_r+0xea>
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	4639      	mov	r1, r7
 800bb86:	4630      	mov	r0, r6
 800bb88:	eb04 0903 	add.w	r9, r4, r3
 800bb8c:	f000 f900 	bl	800bd90 <_sbrk_r>
 800bb90:	4581      	cmp	r9, r0
 800bb92:	d142      	bne.n	800bc1a <_malloc_r+0xea>
 800bb94:	6821      	ldr	r1, [r4, #0]
 800bb96:	1a6d      	subs	r5, r5, r1
 800bb98:	4629      	mov	r1, r5
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ffa6 	bl	800baec <sbrk_aligned>
 800bba0:	3001      	adds	r0, #1
 800bba2:	d03a      	beq.n	800bc1a <_malloc_r+0xea>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	442b      	add	r3, r5
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	bb62      	cbnz	r2, 800bc0c <_malloc_r+0xdc>
 800bbb2:	f8c8 7000 	str.w	r7, [r8]
 800bbb6:	e00f      	b.n	800bbd8 <_malloc_r+0xa8>
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	1b52      	subs	r2, r2, r5
 800bbbc:	d420      	bmi.n	800bc00 <_malloc_r+0xd0>
 800bbbe:	2a0b      	cmp	r2, #11
 800bbc0:	d917      	bls.n	800bbf2 <_malloc_r+0xc2>
 800bbc2:	1961      	adds	r1, r4, r5
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	6025      	str	r5, [r4, #0]
 800bbc8:	bf18      	it	ne
 800bbca:	6059      	strne	r1, [r3, #4]
 800bbcc:	6863      	ldr	r3, [r4, #4]
 800bbce:	bf08      	it	eq
 800bbd0:	f8c8 1000 	streq.w	r1, [r8]
 800bbd4:	5162      	str	r2, [r4, r5]
 800bbd6:	604b      	str	r3, [r1, #4]
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f000 f82f 	bl	800bc3c <__malloc_unlock>
 800bbde:	f104 000b 	add.w	r0, r4, #11
 800bbe2:	1d23      	adds	r3, r4, #4
 800bbe4:	f020 0007 	bic.w	r0, r0, #7
 800bbe8:	1ac2      	subs	r2, r0, r3
 800bbea:	bf1c      	itt	ne
 800bbec:	1a1b      	subne	r3, r3, r0
 800bbee:	50a3      	strne	r3, [r4, r2]
 800bbf0:	e7af      	b.n	800bb52 <_malloc_r+0x22>
 800bbf2:	6862      	ldr	r2, [r4, #4]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	bf0c      	ite	eq
 800bbf8:	f8c8 2000 	streq.w	r2, [r8]
 800bbfc:	605a      	strne	r2, [r3, #4]
 800bbfe:	e7eb      	b.n	800bbd8 <_malloc_r+0xa8>
 800bc00:	4623      	mov	r3, r4
 800bc02:	6864      	ldr	r4, [r4, #4]
 800bc04:	e7ae      	b.n	800bb64 <_malloc_r+0x34>
 800bc06:	463c      	mov	r4, r7
 800bc08:	687f      	ldr	r7, [r7, #4]
 800bc0a:	e7b6      	b.n	800bb7a <_malloc_r+0x4a>
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	d1fb      	bne.n	800bc0c <_malloc_r+0xdc>
 800bc14:	2300      	movs	r3, #0
 800bc16:	6053      	str	r3, [r2, #4]
 800bc18:	e7de      	b.n	800bbd8 <_malloc_r+0xa8>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	6033      	str	r3, [r6, #0]
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f000 f80c 	bl	800bc3c <__malloc_unlock>
 800bc24:	e794      	b.n	800bb50 <_malloc_r+0x20>
 800bc26:	6005      	str	r5, [r0, #0]
 800bc28:	e7d6      	b.n	800bbd8 <_malloc_r+0xa8>
 800bc2a:	bf00      	nop
 800bc2c:	20004124 	.word	0x20004124

0800bc30 <__malloc_lock>:
 800bc30:	4801      	ldr	r0, [pc, #4]	@ (800bc38 <__malloc_lock+0x8>)
 800bc32:	f000 b8e7 	b.w	800be04 <__retarget_lock_acquire_recursive>
 800bc36:	bf00      	nop
 800bc38:	20004264 	.word	0x20004264

0800bc3c <__malloc_unlock>:
 800bc3c:	4801      	ldr	r0, [pc, #4]	@ (800bc44 <__malloc_unlock+0x8>)
 800bc3e:	f000 b8e2 	b.w	800be06 <__retarget_lock_release_recursive>
 800bc42:	bf00      	nop
 800bc44:	20004264 	.word	0x20004264

0800bc48 <siprintf>:
 800bc48:	b40e      	push	{r1, r2, r3}
 800bc4a:	b500      	push	{lr}
 800bc4c:	b09c      	sub	sp, #112	@ 0x70
 800bc4e:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc50:	9002      	str	r0, [sp, #8]
 800bc52:	9006      	str	r0, [sp, #24]
 800bc54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc58:	4809      	ldr	r0, [pc, #36]	@ (800bc80 <siprintf+0x38>)
 800bc5a:	9107      	str	r1, [sp, #28]
 800bc5c:	9104      	str	r1, [sp, #16]
 800bc5e:	4909      	ldr	r1, [pc, #36]	@ (800bc84 <siprintf+0x3c>)
 800bc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc64:	9105      	str	r1, [sp, #20]
 800bc66:	6800      	ldr	r0, [r0, #0]
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	a902      	add	r1, sp, #8
 800bc6c:	f000 f980 	bl	800bf70 <_svfiprintf_r>
 800bc70:	9b02      	ldr	r3, [sp, #8]
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	b01c      	add	sp, #112	@ 0x70
 800bc78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc7c:	b003      	add	sp, #12
 800bc7e:	4770      	bx	lr
 800bc80:	20000014 	.word	0x20000014
 800bc84:	ffff0208 	.word	0xffff0208

0800bc88 <memset>:
 800bc88:	4402      	add	r2, r0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d100      	bne.n	800bc92 <memset+0xa>
 800bc90:	4770      	bx	lr
 800bc92:	f803 1b01 	strb.w	r1, [r3], #1
 800bc96:	e7f9      	b.n	800bc8c <memset+0x4>

0800bc98 <strncmp>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	b16a      	cbz	r2, 800bcb8 <strncmp+0x20>
 800bc9c:	3901      	subs	r1, #1
 800bc9e:	1884      	adds	r4, r0, r2
 800bca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bca4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d103      	bne.n	800bcb4 <strncmp+0x1c>
 800bcac:	42a0      	cmp	r0, r4
 800bcae:	d001      	beq.n	800bcb4 <strncmp+0x1c>
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d1f5      	bne.n	800bca0 <strncmp+0x8>
 800bcb4:	1ad0      	subs	r0, r2, r3
 800bcb6:	bd10      	pop	{r4, pc}
 800bcb8:	4610      	mov	r0, r2
 800bcba:	e7fc      	b.n	800bcb6 <strncmp+0x1e>

0800bcbc <strncpy>:
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	3901      	subs	r1, #1
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	b132      	cbz	r2, 800bcd2 <strncpy+0x16>
 800bcc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bcc8:	f803 4b01 	strb.w	r4, [r3], #1
 800bccc:	3a01      	subs	r2, #1
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	d1f7      	bne.n	800bcc2 <strncpy+0x6>
 800bcd2:	441a      	add	r2, r3
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d100      	bne.n	800bcdc <strncpy+0x20>
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	f803 1b01 	strb.w	r1, [r3], #1
 800bce0:	e7f9      	b.n	800bcd6 <strncpy+0x1a>
	...

0800bce4 <_reclaim_reent>:
 800bce4:	4b29      	ldr	r3, [pc, #164]	@ (800bd8c <_reclaim_reent+0xa8>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4283      	cmp	r3, r0
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	4604      	mov	r4, r0
 800bcee:	d04b      	beq.n	800bd88 <_reclaim_reent+0xa4>
 800bcf0:	69c3      	ldr	r3, [r0, #28]
 800bcf2:	b1ab      	cbz	r3, 800bd20 <_reclaim_reent+0x3c>
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	b16b      	cbz	r3, 800bd14 <_reclaim_reent+0x30>
 800bcf8:	2500      	movs	r5, #0
 800bcfa:	69e3      	ldr	r3, [r4, #28]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	5959      	ldr	r1, [r3, r5]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	d13b      	bne.n	800bd7c <_reclaim_reent+0x98>
 800bd04:	3504      	adds	r5, #4
 800bd06:	2d80      	cmp	r5, #128	@ 0x80
 800bd08:	d1f7      	bne.n	800bcfa <_reclaim_reent+0x16>
 800bd0a:	69e3      	ldr	r3, [r4, #28]
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	68d9      	ldr	r1, [r3, #12]
 800bd10:	f000 f888 	bl	800be24 <_free_r>
 800bd14:	69e3      	ldr	r3, [r4, #28]
 800bd16:	6819      	ldr	r1, [r3, #0]
 800bd18:	b111      	cbz	r1, 800bd20 <_reclaim_reent+0x3c>
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 f882 	bl	800be24 <_free_r>
 800bd20:	6961      	ldr	r1, [r4, #20]
 800bd22:	b111      	cbz	r1, 800bd2a <_reclaim_reent+0x46>
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 f87d 	bl	800be24 <_free_r>
 800bd2a:	69e1      	ldr	r1, [r4, #28]
 800bd2c:	b111      	cbz	r1, 800bd34 <_reclaim_reent+0x50>
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 f878 	bl	800be24 <_free_r>
 800bd34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd36:	b111      	cbz	r1, 800bd3e <_reclaim_reent+0x5a>
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 f873 	bl	800be24 <_free_r>
 800bd3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd40:	b111      	cbz	r1, 800bd48 <_reclaim_reent+0x64>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 f86e 	bl	800be24 <_free_r>
 800bd48:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd4a:	b111      	cbz	r1, 800bd52 <_reclaim_reent+0x6e>
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 f869 	bl	800be24 <_free_r>
 800bd52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd54:	b111      	cbz	r1, 800bd5c <_reclaim_reent+0x78>
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 f864 	bl	800be24 <_free_r>
 800bd5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd5e:	b111      	cbz	r1, 800bd66 <_reclaim_reent+0x82>
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 f85f 	bl	800be24 <_free_r>
 800bd66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd68:	b111      	cbz	r1, 800bd70 <_reclaim_reent+0x8c>
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 f85a 	bl	800be24 <_free_r>
 800bd70:	6a23      	ldr	r3, [r4, #32]
 800bd72:	b14b      	cbz	r3, 800bd88 <_reclaim_reent+0xa4>
 800bd74:	4620      	mov	r0, r4
 800bd76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd7a:	4718      	bx	r3
 800bd7c:	680e      	ldr	r6, [r1, #0]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 f850 	bl	800be24 <_free_r>
 800bd84:	4631      	mov	r1, r6
 800bd86:	e7bb      	b.n	800bd00 <_reclaim_reent+0x1c>
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000014 	.word	0x20000014

0800bd90 <_sbrk_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	@ (800bdac <_sbrk_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f5 f85e 	bl	8000e5c <_sbrk>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_sbrk_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_sbrk_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	20004260 	.word	0x20004260

0800bdb0 <__errno>:
 800bdb0:	4b01      	ldr	r3, [pc, #4]	@ (800bdb8 <__errno+0x8>)
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20000014 	.word	0x20000014

0800bdbc <__libc_init_array>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	4d0d      	ldr	r5, [pc, #52]	@ (800bdf4 <__libc_init_array+0x38>)
 800bdc0:	4c0d      	ldr	r4, [pc, #52]	@ (800bdf8 <__libc_init_array+0x3c>)
 800bdc2:	1b64      	subs	r4, r4, r5
 800bdc4:	10a4      	asrs	r4, r4, #2
 800bdc6:	2600      	movs	r6, #0
 800bdc8:	42a6      	cmp	r6, r4
 800bdca:	d109      	bne.n	800bde0 <__libc_init_array+0x24>
 800bdcc:	4d0b      	ldr	r5, [pc, #44]	@ (800bdfc <__libc_init_array+0x40>)
 800bdce:	4c0c      	ldr	r4, [pc, #48]	@ (800be00 <__libc_init_array+0x44>)
 800bdd0:	f000 fba8 	bl	800c524 <_init>
 800bdd4:	1b64      	subs	r4, r4, r5
 800bdd6:	10a4      	asrs	r4, r4, #2
 800bdd8:	2600      	movs	r6, #0
 800bdda:	42a6      	cmp	r6, r4
 800bddc:	d105      	bne.n	800bdea <__libc_init_array+0x2e>
 800bdde:	bd70      	pop	{r4, r5, r6, pc}
 800bde0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bde4:	4798      	blx	r3
 800bde6:	3601      	adds	r6, #1
 800bde8:	e7ee      	b.n	800bdc8 <__libc_init_array+0xc>
 800bdea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdee:	4798      	blx	r3
 800bdf0:	3601      	adds	r6, #1
 800bdf2:	e7f2      	b.n	800bdda <__libc_init_array+0x1e>
 800bdf4:	0800d648 	.word	0x0800d648
 800bdf8:	0800d648 	.word	0x0800d648
 800bdfc:	0800d648 	.word	0x0800d648
 800be00:	0800d64c 	.word	0x0800d64c

0800be04 <__retarget_lock_acquire_recursive>:
 800be04:	4770      	bx	lr

0800be06 <__retarget_lock_release_recursive>:
 800be06:	4770      	bx	lr

0800be08 <memcpy>:
 800be08:	440a      	add	r2, r1
 800be0a:	4291      	cmp	r1, r2
 800be0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800be10:	d100      	bne.n	800be14 <memcpy+0xc>
 800be12:	4770      	bx	lr
 800be14:	b510      	push	{r4, lr}
 800be16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be1e:	4291      	cmp	r1, r2
 800be20:	d1f9      	bne.n	800be16 <memcpy+0xe>
 800be22:	bd10      	pop	{r4, pc}

0800be24 <_free_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4605      	mov	r5, r0
 800be28:	2900      	cmp	r1, #0
 800be2a:	d041      	beq.n	800beb0 <_free_r+0x8c>
 800be2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be30:	1f0c      	subs	r4, r1, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	bfb8      	it	lt
 800be36:	18e4      	addlt	r4, r4, r3
 800be38:	f7ff fefa 	bl	800bc30 <__malloc_lock>
 800be3c:	4a1d      	ldr	r2, [pc, #116]	@ (800beb4 <_free_r+0x90>)
 800be3e:	6813      	ldr	r3, [r2, #0]
 800be40:	b933      	cbnz	r3, 800be50 <_free_r+0x2c>
 800be42:	6063      	str	r3, [r4, #4]
 800be44:	6014      	str	r4, [r2, #0]
 800be46:	4628      	mov	r0, r5
 800be48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4c:	f7ff bef6 	b.w	800bc3c <__malloc_unlock>
 800be50:	42a3      	cmp	r3, r4
 800be52:	d908      	bls.n	800be66 <_free_r+0x42>
 800be54:	6820      	ldr	r0, [r4, #0]
 800be56:	1821      	adds	r1, r4, r0
 800be58:	428b      	cmp	r3, r1
 800be5a:	bf01      	itttt	eq
 800be5c:	6819      	ldreq	r1, [r3, #0]
 800be5e:	685b      	ldreq	r3, [r3, #4]
 800be60:	1809      	addeq	r1, r1, r0
 800be62:	6021      	streq	r1, [r4, #0]
 800be64:	e7ed      	b.n	800be42 <_free_r+0x1e>
 800be66:	461a      	mov	r2, r3
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	b10b      	cbz	r3, 800be70 <_free_r+0x4c>
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	d9fa      	bls.n	800be66 <_free_r+0x42>
 800be70:	6811      	ldr	r1, [r2, #0]
 800be72:	1850      	adds	r0, r2, r1
 800be74:	42a0      	cmp	r0, r4
 800be76:	d10b      	bne.n	800be90 <_free_r+0x6c>
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	4401      	add	r1, r0
 800be7c:	1850      	adds	r0, r2, r1
 800be7e:	4283      	cmp	r3, r0
 800be80:	6011      	str	r1, [r2, #0]
 800be82:	d1e0      	bne.n	800be46 <_free_r+0x22>
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	6053      	str	r3, [r2, #4]
 800be8a:	4408      	add	r0, r1
 800be8c:	6010      	str	r0, [r2, #0]
 800be8e:	e7da      	b.n	800be46 <_free_r+0x22>
 800be90:	d902      	bls.n	800be98 <_free_r+0x74>
 800be92:	230c      	movs	r3, #12
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	e7d6      	b.n	800be46 <_free_r+0x22>
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	1821      	adds	r1, r4, r0
 800be9c:	428b      	cmp	r3, r1
 800be9e:	bf04      	itt	eq
 800bea0:	6819      	ldreq	r1, [r3, #0]
 800bea2:	685b      	ldreq	r3, [r3, #4]
 800bea4:	6063      	str	r3, [r4, #4]
 800bea6:	bf04      	itt	eq
 800bea8:	1809      	addeq	r1, r1, r0
 800beaa:	6021      	streq	r1, [r4, #0]
 800beac:	6054      	str	r4, [r2, #4]
 800beae:	e7ca      	b.n	800be46 <_free_r+0x22>
 800beb0:	bd38      	pop	{r3, r4, r5, pc}
 800beb2:	bf00      	nop
 800beb4:	20004124 	.word	0x20004124

0800beb8 <__ssputs_r>:
 800beb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bebc:	688e      	ldr	r6, [r1, #8]
 800bebe:	461f      	mov	r7, r3
 800bec0:	42be      	cmp	r6, r7
 800bec2:	680b      	ldr	r3, [r1, #0]
 800bec4:	4682      	mov	sl, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	4690      	mov	r8, r2
 800beca:	d82d      	bhi.n	800bf28 <__ssputs_r+0x70>
 800becc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bed0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bed4:	d026      	beq.n	800bf24 <__ssputs_r+0x6c>
 800bed6:	6965      	ldr	r5, [r4, #20]
 800bed8:	6909      	ldr	r1, [r1, #16]
 800beda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bede:	eba3 0901 	sub.w	r9, r3, r1
 800bee2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bee6:	1c7b      	adds	r3, r7, #1
 800bee8:	444b      	add	r3, r9
 800beea:	106d      	asrs	r5, r5, #1
 800beec:	429d      	cmp	r5, r3
 800beee:	bf38      	it	cc
 800bef0:	461d      	movcc	r5, r3
 800bef2:	0553      	lsls	r3, r2, #21
 800bef4:	d527      	bpl.n	800bf46 <__ssputs_r+0x8e>
 800bef6:	4629      	mov	r1, r5
 800bef8:	f7ff fe1a 	bl	800bb30 <_malloc_r>
 800befc:	4606      	mov	r6, r0
 800befe:	b360      	cbz	r0, 800bf5a <__ssputs_r+0xa2>
 800bf00:	6921      	ldr	r1, [r4, #16]
 800bf02:	464a      	mov	r2, r9
 800bf04:	f7ff ff80 	bl	800be08 <memcpy>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf12:	81a3      	strh	r3, [r4, #12]
 800bf14:	6126      	str	r6, [r4, #16]
 800bf16:	6165      	str	r5, [r4, #20]
 800bf18:	444e      	add	r6, r9
 800bf1a:	eba5 0509 	sub.w	r5, r5, r9
 800bf1e:	6026      	str	r6, [r4, #0]
 800bf20:	60a5      	str	r5, [r4, #8]
 800bf22:	463e      	mov	r6, r7
 800bf24:	42be      	cmp	r6, r7
 800bf26:	d900      	bls.n	800bf2a <__ssputs_r+0x72>
 800bf28:	463e      	mov	r6, r7
 800bf2a:	6820      	ldr	r0, [r4, #0]
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	4641      	mov	r1, r8
 800bf30:	f000 faa8 	bl	800c484 <memmove>
 800bf34:	68a3      	ldr	r3, [r4, #8]
 800bf36:	1b9b      	subs	r3, r3, r6
 800bf38:	60a3      	str	r3, [r4, #8]
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	4433      	add	r3, r6
 800bf3e:	6023      	str	r3, [r4, #0]
 800bf40:	2000      	movs	r0, #0
 800bf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf46:	462a      	mov	r2, r5
 800bf48:	f000 fab6 	bl	800c4b8 <_realloc_r>
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d1e0      	bne.n	800bf14 <__ssputs_r+0x5c>
 800bf52:	6921      	ldr	r1, [r4, #16]
 800bf54:	4650      	mov	r0, sl
 800bf56:	f7ff ff65 	bl	800be24 <_free_r>
 800bf5a:	230c      	movs	r3, #12
 800bf5c:	f8ca 3000 	str.w	r3, [sl]
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6c:	e7e9      	b.n	800bf42 <__ssputs_r+0x8a>
	...

0800bf70 <_svfiprintf_r>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4698      	mov	r8, r3
 800bf76:	898b      	ldrh	r3, [r1, #12]
 800bf78:	061b      	lsls	r3, r3, #24
 800bf7a:	b09d      	sub	sp, #116	@ 0x74
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	460d      	mov	r5, r1
 800bf80:	4614      	mov	r4, r2
 800bf82:	d510      	bpl.n	800bfa6 <_svfiprintf_r+0x36>
 800bf84:	690b      	ldr	r3, [r1, #16]
 800bf86:	b973      	cbnz	r3, 800bfa6 <_svfiprintf_r+0x36>
 800bf88:	2140      	movs	r1, #64	@ 0x40
 800bf8a:	f7ff fdd1 	bl	800bb30 <_malloc_r>
 800bf8e:	6028      	str	r0, [r5, #0]
 800bf90:	6128      	str	r0, [r5, #16]
 800bf92:	b930      	cbnz	r0, 800bfa2 <_svfiprintf_r+0x32>
 800bf94:	230c      	movs	r3, #12
 800bf96:	603b      	str	r3, [r7, #0]
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9c:	b01d      	add	sp, #116	@ 0x74
 800bf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa2:	2340      	movs	r3, #64	@ 0x40
 800bfa4:	616b      	str	r3, [r5, #20]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfaa:	2320      	movs	r3, #32
 800bfac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfb4:	2330      	movs	r3, #48	@ 0x30
 800bfb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c154 <_svfiprintf_r+0x1e4>
 800bfba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfbe:	f04f 0901 	mov.w	r9, #1
 800bfc2:	4623      	mov	r3, r4
 800bfc4:	469a      	mov	sl, r3
 800bfc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfca:	b10a      	cbz	r2, 800bfd0 <_svfiprintf_r+0x60>
 800bfcc:	2a25      	cmp	r2, #37	@ 0x25
 800bfce:	d1f9      	bne.n	800bfc4 <_svfiprintf_r+0x54>
 800bfd0:	ebba 0b04 	subs.w	fp, sl, r4
 800bfd4:	d00b      	beq.n	800bfee <_svfiprintf_r+0x7e>
 800bfd6:	465b      	mov	r3, fp
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4629      	mov	r1, r5
 800bfdc:	4638      	mov	r0, r7
 800bfde:	f7ff ff6b 	bl	800beb8 <__ssputs_r>
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	f000 80a7 	beq.w	800c136 <_svfiprintf_r+0x1c6>
 800bfe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfea:	445a      	add	r2, fp
 800bfec:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfee:	f89a 3000 	ldrb.w	r3, [sl]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 809f 	beq.w	800c136 <_svfiprintf_r+0x1c6>
 800bff8:	2300      	movs	r3, #0
 800bffa:	f04f 32ff 	mov.w	r2, #4294967295
 800bffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c002:	f10a 0a01 	add.w	sl, sl, #1
 800c006:	9304      	str	r3, [sp, #16]
 800c008:	9307      	str	r3, [sp, #28]
 800c00a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c00e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c010:	4654      	mov	r4, sl
 800c012:	2205      	movs	r2, #5
 800c014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c018:	484e      	ldr	r0, [pc, #312]	@ (800c154 <_svfiprintf_r+0x1e4>)
 800c01a:	f7f4 f8b9 	bl	8000190 <memchr>
 800c01e:	9a04      	ldr	r2, [sp, #16]
 800c020:	b9d8      	cbnz	r0, 800c05a <_svfiprintf_r+0xea>
 800c022:	06d0      	lsls	r0, r2, #27
 800c024:	bf44      	itt	mi
 800c026:	2320      	movmi	r3, #32
 800c028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c02c:	0711      	lsls	r1, r2, #28
 800c02e:	bf44      	itt	mi
 800c030:	232b      	movmi	r3, #43	@ 0x2b
 800c032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c036:	f89a 3000 	ldrb.w	r3, [sl]
 800c03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c03c:	d015      	beq.n	800c06a <_svfiprintf_r+0xfa>
 800c03e:	9a07      	ldr	r2, [sp, #28]
 800c040:	4654      	mov	r4, sl
 800c042:	2000      	movs	r0, #0
 800c044:	f04f 0c0a 	mov.w	ip, #10
 800c048:	4621      	mov	r1, r4
 800c04a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c04e:	3b30      	subs	r3, #48	@ 0x30
 800c050:	2b09      	cmp	r3, #9
 800c052:	d94b      	bls.n	800c0ec <_svfiprintf_r+0x17c>
 800c054:	b1b0      	cbz	r0, 800c084 <_svfiprintf_r+0x114>
 800c056:	9207      	str	r2, [sp, #28]
 800c058:	e014      	b.n	800c084 <_svfiprintf_r+0x114>
 800c05a:	eba0 0308 	sub.w	r3, r0, r8
 800c05e:	fa09 f303 	lsl.w	r3, r9, r3
 800c062:	4313      	orrs	r3, r2
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	46a2      	mov	sl, r4
 800c068:	e7d2      	b.n	800c010 <_svfiprintf_r+0xa0>
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	1d19      	adds	r1, r3, #4
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	9103      	str	r1, [sp, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfbb      	ittet	lt
 800c076:	425b      	neglt	r3, r3
 800c078:	f042 0202 	orrlt.w	r2, r2, #2
 800c07c:	9307      	strge	r3, [sp, #28]
 800c07e:	9307      	strlt	r3, [sp, #28]
 800c080:	bfb8      	it	lt
 800c082:	9204      	strlt	r2, [sp, #16]
 800c084:	7823      	ldrb	r3, [r4, #0]
 800c086:	2b2e      	cmp	r3, #46	@ 0x2e
 800c088:	d10a      	bne.n	800c0a0 <_svfiprintf_r+0x130>
 800c08a:	7863      	ldrb	r3, [r4, #1]
 800c08c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c08e:	d132      	bne.n	800c0f6 <_svfiprintf_r+0x186>
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	1d1a      	adds	r2, r3, #4
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	9203      	str	r2, [sp, #12]
 800c098:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c09c:	3402      	adds	r4, #2
 800c09e:	9305      	str	r3, [sp, #20]
 800c0a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c158 <_svfiprintf_r+0x1e8>
 800c0a4:	7821      	ldrb	r1, [r4, #0]
 800c0a6:	2203      	movs	r2, #3
 800c0a8:	4650      	mov	r0, sl
 800c0aa:	f7f4 f871 	bl	8000190 <memchr>
 800c0ae:	b138      	cbz	r0, 800c0c0 <_svfiprintf_r+0x150>
 800c0b0:	9b04      	ldr	r3, [sp, #16]
 800c0b2:	eba0 000a 	sub.w	r0, r0, sl
 800c0b6:	2240      	movs	r2, #64	@ 0x40
 800c0b8:	4082      	lsls	r2, r0
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	3401      	adds	r4, #1
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c4:	4825      	ldr	r0, [pc, #148]	@ (800c15c <_svfiprintf_r+0x1ec>)
 800c0c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ca:	2206      	movs	r2, #6
 800c0cc:	f7f4 f860 	bl	8000190 <memchr>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d036      	beq.n	800c142 <_svfiprintf_r+0x1d2>
 800c0d4:	4b22      	ldr	r3, [pc, #136]	@ (800c160 <_svfiprintf_r+0x1f0>)
 800c0d6:	bb1b      	cbnz	r3, 800c120 <_svfiprintf_r+0x1b0>
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	3307      	adds	r3, #7
 800c0dc:	f023 0307 	bic.w	r3, r3, #7
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e6:	4433      	add	r3, r6
 800c0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ea:	e76a      	b.n	800bfc2 <_svfiprintf_r+0x52>
 800c0ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	e7a8      	b.n	800c048 <_svfiprintf_r+0xd8>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	3401      	adds	r4, #1
 800c0fa:	9305      	str	r3, [sp, #20]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	f04f 0c0a 	mov.w	ip, #10
 800c102:	4620      	mov	r0, r4
 800c104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c108:	3a30      	subs	r2, #48	@ 0x30
 800c10a:	2a09      	cmp	r2, #9
 800c10c:	d903      	bls.n	800c116 <_svfiprintf_r+0x1a6>
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0c6      	beq.n	800c0a0 <_svfiprintf_r+0x130>
 800c112:	9105      	str	r1, [sp, #20]
 800c114:	e7c4      	b.n	800c0a0 <_svfiprintf_r+0x130>
 800c116:	fb0c 2101 	mla	r1, ip, r1, r2
 800c11a:	4604      	mov	r4, r0
 800c11c:	2301      	movs	r3, #1
 800c11e:	e7f0      	b.n	800c102 <_svfiprintf_r+0x192>
 800c120:	ab03      	add	r3, sp, #12
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	462a      	mov	r2, r5
 800c126:	4b0f      	ldr	r3, [pc, #60]	@ (800c164 <_svfiprintf_r+0x1f4>)
 800c128:	a904      	add	r1, sp, #16
 800c12a:	4638      	mov	r0, r7
 800c12c:	f3af 8000 	nop.w
 800c130:	1c42      	adds	r2, r0, #1
 800c132:	4606      	mov	r6, r0
 800c134:	d1d6      	bne.n	800c0e4 <_svfiprintf_r+0x174>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	065b      	lsls	r3, r3, #25
 800c13a:	f53f af2d 	bmi.w	800bf98 <_svfiprintf_r+0x28>
 800c13e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c140:	e72c      	b.n	800bf9c <_svfiprintf_r+0x2c>
 800c142:	ab03      	add	r3, sp, #12
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	462a      	mov	r2, r5
 800c148:	4b06      	ldr	r3, [pc, #24]	@ (800c164 <_svfiprintf_r+0x1f4>)
 800c14a:	a904      	add	r1, sp, #16
 800c14c:	4638      	mov	r0, r7
 800c14e:	f000 f879 	bl	800c244 <_printf_i>
 800c152:	e7ed      	b.n	800c130 <_svfiprintf_r+0x1c0>
 800c154:	0800d60c 	.word	0x0800d60c
 800c158:	0800d612 	.word	0x0800d612
 800c15c:	0800d616 	.word	0x0800d616
 800c160:	00000000 	.word	0x00000000
 800c164:	0800beb9 	.word	0x0800beb9

0800c168 <_printf_common>:
 800c168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c16c:	4616      	mov	r6, r2
 800c16e:	4698      	mov	r8, r3
 800c170:	688a      	ldr	r2, [r1, #8]
 800c172:	690b      	ldr	r3, [r1, #16]
 800c174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c178:	4293      	cmp	r3, r2
 800c17a:	bfb8      	it	lt
 800c17c:	4613      	movlt	r3, r2
 800c17e:	6033      	str	r3, [r6, #0]
 800c180:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c184:	4607      	mov	r7, r0
 800c186:	460c      	mov	r4, r1
 800c188:	b10a      	cbz	r2, 800c18e <_printf_common+0x26>
 800c18a:	3301      	adds	r3, #1
 800c18c:	6033      	str	r3, [r6, #0]
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	0699      	lsls	r1, r3, #26
 800c192:	bf42      	ittt	mi
 800c194:	6833      	ldrmi	r3, [r6, #0]
 800c196:	3302      	addmi	r3, #2
 800c198:	6033      	strmi	r3, [r6, #0]
 800c19a:	6825      	ldr	r5, [r4, #0]
 800c19c:	f015 0506 	ands.w	r5, r5, #6
 800c1a0:	d106      	bne.n	800c1b0 <_printf_common+0x48>
 800c1a2:	f104 0a19 	add.w	sl, r4, #25
 800c1a6:	68e3      	ldr	r3, [r4, #12]
 800c1a8:	6832      	ldr	r2, [r6, #0]
 800c1aa:	1a9b      	subs	r3, r3, r2
 800c1ac:	42ab      	cmp	r3, r5
 800c1ae:	dc26      	bgt.n	800c1fe <_printf_common+0x96>
 800c1b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1b4:	6822      	ldr	r2, [r4, #0]
 800c1b6:	3b00      	subs	r3, #0
 800c1b8:	bf18      	it	ne
 800c1ba:	2301      	movne	r3, #1
 800c1bc:	0692      	lsls	r2, r2, #26
 800c1be:	d42b      	bmi.n	800c218 <_printf_common+0xb0>
 800c1c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1c4:	4641      	mov	r1, r8
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	47c8      	blx	r9
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	d01e      	beq.n	800c20c <_printf_common+0xa4>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	6922      	ldr	r2, [r4, #16]
 800c1d2:	f003 0306 	and.w	r3, r3, #6
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	bf02      	ittt	eq
 800c1da:	68e5      	ldreq	r5, [r4, #12]
 800c1dc:	6833      	ldreq	r3, [r6, #0]
 800c1de:	1aed      	subeq	r5, r5, r3
 800c1e0:	68a3      	ldr	r3, [r4, #8]
 800c1e2:	bf0c      	ite	eq
 800c1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1e8:	2500      	movne	r5, #0
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	bfc4      	itt	gt
 800c1ee:	1a9b      	subgt	r3, r3, r2
 800c1f0:	18ed      	addgt	r5, r5, r3
 800c1f2:	2600      	movs	r6, #0
 800c1f4:	341a      	adds	r4, #26
 800c1f6:	42b5      	cmp	r5, r6
 800c1f8:	d11a      	bne.n	800c230 <_printf_common+0xc8>
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e008      	b.n	800c210 <_printf_common+0xa8>
 800c1fe:	2301      	movs	r3, #1
 800c200:	4652      	mov	r2, sl
 800c202:	4641      	mov	r1, r8
 800c204:	4638      	mov	r0, r7
 800c206:	47c8      	blx	r9
 800c208:	3001      	adds	r0, #1
 800c20a:	d103      	bne.n	800c214 <_printf_common+0xac>
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c214:	3501      	adds	r5, #1
 800c216:	e7c6      	b.n	800c1a6 <_printf_common+0x3e>
 800c218:	18e1      	adds	r1, r4, r3
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	2030      	movs	r0, #48	@ 0x30
 800c21e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c222:	4422      	add	r2, r4
 800c224:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c22c:	3302      	adds	r3, #2
 800c22e:	e7c7      	b.n	800c1c0 <_printf_common+0x58>
 800c230:	2301      	movs	r3, #1
 800c232:	4622      	mov	r2, r4
 800c234:	4641      	mov	r1, r8
 800c236:	4638      	mov	r0, r7
 800c238:	47c8      	blx	r9
 800c23a:	3001      	adds	r0, #1
 800c23c:	d0e6      	beq.n	800c20c <_printf_common+0xa4>
 800c23e:	3601      	adds	r6, #1
 800c240:	e7d9      	b.n	800c1f6 <_printf_common+0x8e>
	...

0800c244 <_printf_i>:
 800c244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c248:	7e0f      	ldrb	r7, [r1, #24]
 800c24a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c24c:	2f78      	cmp	r7, #120	@ 0x78
 800c24e:	4691      	mov	r9, r2
 800c250:	4680      	mov	r8, r0
 800c252:	460c      	mov	r4, r1
 800c254:	469a      	mov	sl, r3
 800c256:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c25a:	d807      	bhi.n	800c26c <_printf_i+0x28>
 800c25c:	2f62      	cmp	r7, #98	@ 0x62
 800c25e:	d80a      	bhi.n	800c276 <_printf_i+0x32>
 800c260:	2f00      	cmp	r7, #0
 800c262:	f000 80d2 	beq.w	800c40a <_printf_i+0x1c6>
 800c266:	2f58      	cmp	r7, #88	@ 0x58
 800c268:	f000 80b9 	beq.w	800c3de <_printf_i+0x19a>
 800c26c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c270:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c274:	e03a      	b.n	800c2ec <_printf_i+0xa8>
 800c276:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c27a:	2b15      	cmp	r3, #21
 800c27c:	d8f6      	bhi.n	800c26c <_printf_i+0x28>
 800c27e:	a101      	add	r1, pc, #4	@ (adr r1, 800c284 <_printf_i+0x40>)
 800c280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c284:	0800c2dd 	.word	0x0800c2dd
 800c288:	0800c2f1 	.word	0x0800c2f1
 800c28c:	0800c26d 	.word	0x0800c26d
 800c290:	0800c26d 	.word	0x0800c26d
 800c294:	0800c26d 	.word	0x0800c26d
 800c298:	0800c26d 	.word	0x0800c26d
 800c29c:	0800c2f1 	.word	0x0800c2f1
 800c2a0:	0800c26d 	.word	0x0800c26d
 800c2a4:	0800c26d 	.word	0x0800c26d
 800c2a8:	0800c26d 	.word	0x0800c26d
 800c2ac:	0800c26d 	.word	0x0800c26d
 800c2b0:	0800c3f1 	.word	0x0800c3f1
 800c2b4:	0800c31b 	.word	0x0800c31b
 800c2b8:	0800c3ab 	.word	0x0800c3ab
 800c2bc:	0800c26d 	.word	0x0800c26d
 800c2c0:	0800c26d 	.word	0x0800c26d
 800c2c4:	0800c413 	.word	0x0800c413
 800c2c8:	0800c26d 	.word	0x0800c26d
 800c2cc:	0800c31b 	.word	0x0800c31b
 800c2d0:	0800c26d 	.word	0x0800c26d
 800c2d4:	0800c26d 	.word	0x0800c26d
 800c2d8:	0800c3b3 	.word	0x0800c3b3
 800c2dc:	6833      	ldr	r3, [r6, #0]
 800c2de:	1d1a      	adds	r2, r3, #4
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	6032      	str	r2, [r6, #0]
 800c2e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e09d      	b.n	800c42c <_printf_i+0x1e8>
 800c2f0:	6833      	ldr	r3, [r6, #0]
 800c2f2:	6820      	ldr	r0, [r4, #0]
 800c2f4:	1d19      	adds	r1, r3, #4
 800c2f6:	6031      	str	r1, [r6, #0]
 800c2f8:	0606      	lsls	r6, r0, #24
 800c2fa:	d501      	bpl.n	800c300 <_printf_i+0xbc>
 800c2fc:	681d      	ldr	r5, [r3, #0]
 800c2fe:	e003      	b.n	800c308 <_printf_i+0xc4>
 800c300:	0645      	lsls	r5, r0, #25
 800c302:	d5fb      	bpl.n	800c2fc <_printf_i+0xb8>
 800c304:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c308:	2d00      	cmp	r5, #0
 800c30a:	da03      	bge.n	800c314 <_printf_i+0xd0>
 800c30c:	232d      	movs	r3, #45	@ 0x2d
 800c30e:	426d      	negs	r5, r5
 800c310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c314:	4859      	ldr	r0, [pc, #356]	@ (800c47c <_printf_i+0x238>)
 800c316:	230a      	movs	r3, #10
 800c318:	e011      	b.n	800c33e <_printf_i+0xfa>
 800c31a:	6821      	ldr	r1, [r4, #0]
 800c31c:	6833      	ldr	r3, [r6, #0]
 800c31e:	0608      	lsls	r0, r1, #24
 800c320:	f853 5b04 	ldr.w	r5, [r3], #4
 800c324:	d402      	bmi.n	800c32c <_printf_i+0xe8>
 800c326:	0649      	lsls	r1, r1, #25
 800c328:	bf48      	it	mi
 800c32a:	b2ad      	uxthmi	r5, r5
 800c32c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c32e:	4853      	ldr	r0, [pc, #332]	@ (800c47c <_printf_i+0x238>)
 800c330:	6033      	str	r3, [r6, #0]
 800c332:	bf14      	ite	ne
 800c334:	230a      	movne	r3, #10
 800c336:	2308      	moveq	r3, #8
 800c338:	2100      	movs	r1, #0
 800c33a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c33e:	6866      	ldr	r6, [r4, #4]
 800c340:	60a6      	str	r6, [r4, #8]
 800c342:	2e00      	cmp	r6, #0
 800c344:	bfa2      	ittt	ge
 800c346:	6821      	ldrge	r1, [r4, #0]
 800c348:	f021 0104 	bicge.w	r1, r1, #4
 800c34c:	6021      	strge	r1, [r4, #0]
 800c34e:	b90d      	cbnz	r5, 800c354 <_printf_i+0x110>
 800c350:	2e00      	cmp	r6, #0
 800c352:	d04b      	beq.n	800c3ec <_printf_i+0x1a8>
 800c354:	4616      	mov	r6, r2
 800c356:	fbb5 f1f3 	udiv	r1, r5, r3
 800c35a:	fb03 5711 	mls	r7, r3, r1, r5
 800c35e:	5dc7      	ldrb	r7, [r0, r7]
 800c360:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c364:	462f      	mov	r7, r5
 800c366:	42bb      	cmp	r3, r7
 800c368:	460d      	mov	r5, r1
 800c36a:	d9f4      	bls.n	800c356 <_printf_i+0x112>
 800c36c:	2b08      	cmp	r3, #8
 800c36e:	d10b      	bne.n	800c388 <_printf_i+0x144>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	07df      	lsls	r7, r3, #31
 800c374:	d508      	bpl.n	800c388 <_printf_i+0x144>
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	6861      	ldr	r1, [r4, #4]
 800c37a:	4299      	cmp	r1, r3
 800c37c:	bfde      	ittt	le
 800c37e:	2330      	movle	r3, #48	@ 0x30
 800c380:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c384:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c388:	1b92      	subs	r2, r2, r6
 800c38a:	6122      	str	r2, [r4, #16]
 800c38c:	f8cd a000 	str.w	sl, [sp]
 800c390:	464b      	mov	r3, r9
 800c392:	aa03      	add	r2, sp, #12
 800c394:	4621      	mov	r1, r4
 800c396:	4640      	mov	r0, r8
 800c398:	f7ff fee6 	bl	800c168 <_printf_common>
 800c39c:	3001      	adds	r0, #1
 800c39e:	d14a      	bne.n	800c436 <_printf_i+0x1f2>
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	b004      	add	sp, #16
 800c3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	f043 0320 	orr.w	r3, r3, #32
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	4833      	ldr	r0, [pc, #204]	@ (800c480 <_printf_i+0x23c>)
 800c3b4:	2778      	movs	r7, #120	@ 0x78
 800c3b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	6831      	ldr	r1, [r6, #0]
 800c3be:	061f      	lsls	r7, r3, #24
 800c3c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3c4:	d402      	bmi.n	800c3cc <_printf_i+0x188>
 800c3c6:	065f      	lsls	r7, r3, #25
 800c3c8:	bf48      	it	mi
 800c3ca:	b2ad      	uxthmi	r5, r5
 800c3cc:	6031      	str	r1, [r6, #0]
 800c3ce:	07d9      	lsls	r1, r3, #31
 800c3d0:	bf44      	itt	mi
 800c3d2:	f043 0320 	orrmi.w	r3, r3, #32
 800c3d6:	6023      	strmi	r3, [r4, #0]
 800c3d8:	b11d      	cbz	r5, 800c3e2 <_printf_i+0x19e>
 800c3da:	2310      	movs	r3, #16
 800c3dc:	e7ac      	b.n	800c338 <_printf_i+0xf4>
 800c3de:	4827      	ldr	r0, [pc, #156]	@ (800c47c <_printf_i+0x238>)
 800c3e0:	e7e9      	b.n	800c3b6 <_printf_i+0x172>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	f023 0320 	bic.w	r3, r3, #32
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	e7f6      	b.n	800c3da <_printf_i+0x196>
 800c3ec:	4616      	mov	r6, r2
 800c3ee:	e7bd      	b.n	800c36c <_printf_i+0x128>
 800c3f0:	6833      	ldr	r3, [r6, #0]
 800c3f2:	6825      	ldr	r5, [r4, #0]
 800c3f4:	6961      	ldr	r1, [r4, #20]
 800c3f6:	1d18      	adds	r0, r3, #4
 800c3f8:	6030      	str	r0, [r6, #0]
 800c3fa:	062e      	lsls	r6, r5, #24
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	d501      	bpl.n	800c404 <_printf_i+0x1c0>
 800c400:	6019      	str	r1, [r3, #0]
 800c402:	e002      	b.n	800c40a <_printf_i+0x1c6>
 800c404:	0668      	lsls	r0, r5, #25
 800c406:	d5fb      	bpl.n	800c400 <_printf_i+0x1bc>
 800c408:	8019      	strh	r1, [r3, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	6123      	str	r3, [r4, #16]
 800c40e:	4616      	mov	r6, r2
 800c410:	e7bc      	b.n	800c38c <_printf_i+0x148>
 800c412:	6833      	ldr	r3, [r6, #0]
 800c414:	1d1a      	adds	r2, r3, #4
 800c416:	6032      	str	r2, [r6, #0]
 800c418:	681e      	ldr	r6, [r3, #0]
 800c41a:	6862      	ldr	r2, [r4, #4]
 800c41c:	2100      	movs	r1, #0
 800c41e:	4630      	mov	r0, r6
 800c420:	f7f3 feb6 	bl	8000190 <memchr>
 800c424:	b108      	cbz	r0, 800c42a <_printf_i+0x1e6>
 800c426:	1b80      	subs	r0, r0, r6
 800c428:	6060      	str	r0, [r4, #4]
 800c42a:	6863      	ldr	r3, [r4, #4]
 800c42c:	6123      	str	r3, [r4, #16]
 800c42e:	2300      	movs	r3, #0
 800c430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c434:	e7aa      	b.n	800c38c <_printf_i+0x148>
 800c436:	6923      	ldr	r3, [r4, #16]
 800c438:	4632      	mov	r2, r6
 800c43a:	4649      	mov	r1, r9
 800c43c:	4640      	mov	r0, r8
 800c43e:	47d0      	blx	sl
 800c440:	3001      	adds	r0, #1
 800c442:	d0ad      	beq.n	800c3a0 <_printf_i+0x15c>
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	079b      	lsls	r3, r3, #30
 800c448:	d413      	bmi.n	800c472 <_printf_i+0x22e>
 800c44a:	68e0      	ldr	r0, [r4, #12]
 800c44c:	9b03      	ldr	r3, [sp, #12]
 800c44e:	4298      	cmp	r0, r3
 800c450:	bfb8      	it	lt
 800c452:	4618      	movlt	r0, r3
 800c454:	e7a6      	b.n	800c3a4 <_printf_i+0x160>
 800c456:	2301      	movs	r3, #1
 800c458:	4632      	mov	r2, r6
 800c45a:	4649      	mov	r1, r9
 800c45c:	4640      	mov	r0, r8
 800c45e:	47d0      	blx	sl
 800c460:	3001      	adds	r0, #1
 800c462:	d09d      	beq.n	800c3a0 <_printf_i+0x15c>
 800c464:	3501      	adds	r5, #1
 800c466:	68e3      	ldr	r3, [r4, #12]
 800c468:	9903      	ldr	r1, [sp, #12]
 800c46a:	1a5b      	subs	r3, r3, r1
 800c46c:	42ab      	cmp	r3, r5
 800c46e:	dcf2      	bgt.n	800c456 <_printf_i+0x212>
 800c470:	e7eb      	b.n	800c44a <_printf_i+0x206>
 800c472:	2500      	movs	r5, #0
 800c474:	f104 0619 	add.w	r6, r4, #25
 800c478:	e7f5      	b.n	800c466 <_printf_i+0x222>
 800c47a:	bf00      	nop
 800c47c:	0800d61d 	.word	0x0800d61d
 800c480:	0800d62e 	.word	0x0800d62e

0800c484 <memmove>:
 800c484:	4288      	cmp	r0, r1
 800c486:	b510      	push	{r4, lr}
 800c488:	eb01 0402 	add.w	r4, r1, r2
 800c48c:	d902      	bls.n	800c494 <memmove+0x10>
 800c48e:	4284      	cmp	r4, r0
 800c490:	4623      	mov	r3, r4
 800c492:	d807      	bhi.n	800c4a4 <memmove+0x20>
 800c494:	1e43      	subs	r3, r0, #1
 800c496:	42a1      	cmp	r1, r4
 800c498:	d008      	beq.n	800c4ac <memmove+0x28>
 800c49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4a2:	e7f8      	b.n	800c496 <memmove+0x12>
 800c4a4:	4402      	add	r2, r0
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	428a      	cmp	r2, r1
 800c4aa:	d100      	bne.n	800c4ae <memmove+0x2a>
 800c4ac:	bd10      	pop	{r4, pc}
 800c4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4b6:	e7f7      	b.n	800c4a8 <memmove+0x24>

0800c4b8 <_realloc_r>:
 800c4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4615      	mov	r5, r2
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	b921      	cbnz	r1, 800c4ce <_realloc_r+0x16>
 800c4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	f7ff bb31 	b.w	800bb30 <_malloc_r>
 800c4ce:	b92a      	cbnz	r2, 800c4dc <_realloc_r+0x24>
 800c4d0:	f7ff fca8 	bl	800be24 <_free_r>
 800c4d4:	2400      	movs	r4, #0
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4dc:	f000 f81a 	bl	800c514 <_malloc_usable_size_r>
 800c4e0:	4285      	cmp	r5, r0
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	d802      	bhi.n	800c4ec <_realloc_r+0x34>
 800c4e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4ea:	d8f4      	bhi.n	800c4d6 <_realloc_r+0x1e>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7ff fb1e 	bl	800bb30 <_malloc_r>
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d0ec      	beq.n	800c4d4 <_realloc_r+0x1c>
 800c4fa:	42b5      	cmp	r5, r6
 800c4fc:	462a      	mov	r2, r5
 800c4fe:	4621      	mov	r1, r4
 800c500:	bf28      	it	cs
 800c502:	4632      	movcs	r2, r6
 800c504:	f7ff fc80 	bl	800be08 <memcpy>
 800c508:	4621      	mov	r1, r4
 800c50a:	4640      	mov	r0, r8
 800c50c:	f7ff fc8a 	bl	800be24 <_free_r>
 800c510:	463c      	mov	r4, r7
 800c512:	e7e0      	b.n	800c4d6 <_realloc_r+0x1e>

0800c514 <_malloc_usable_size_r>:
 800c514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c518:	1f18      	subs	r0, r3, #4
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	bfbc      	itt	lt
 800c51e:	580b      	ldrlt	r3, [r1, r0]
 800c520:	18c0      	addlt	r0, r0, r3
 800c522:	4770      	bx	lr

0800c524 <_init>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	bf00      	nop
 800c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52a:	bc08      	pop	{r3}
 800c52c:	469e      	mov	lr, r3
 800c52e:	4770      	bx	lr

0800c530 <_fini>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr
