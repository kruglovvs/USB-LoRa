
usblora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c72c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800c86c  0800c86c  0000d86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca4  0800cca4  0000eb7c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cca4  0800cca4  0000dca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccac  0800ccac  0000eb7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccac  0800ccac  0000dcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccb0  0800ccb0  0000dcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b7c  20000000  0800ccb4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005218  20000b7c  0800d830  0000eb7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d94  0800d830  0000ed94  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000eb7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b422  00000000  00000000  0000eba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006296  00000000  00000000  00039fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025c8  00000000  00000000  00040260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cf2  00000000  00000000  00042828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212d5  00000000  00000000  0004451a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a551  00000000  00000000  000657ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc4d0  00000000  00000000  0008fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0c8  00000000  00000000  0014c254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015631c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000b7c 	.word	0x20000b7c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c854 	.word	0x0800c854

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000b80 	.word	0x20000b80
 800017c:	0800c854 	.word	0x0800c854

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b96a 	b.w	800047c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9d08      	ldr	r5, [sp, #32]
 80001c6:	460c      	mov	r4, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14e      	bne.n	800026a <__udivmoddi4+0xaa>
 80001cc:	4694      	mov	ip, r2
 80001ce:	458c      	cmp	ip, r1
 80001d0:	4686      	mov	lr, r0
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	d962      	bls.n	800029e <__udivmoddi4+0xde>
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0320 	rsb	r3, r2, #32
 80001de:	4091      	lsls	r1, r2
 80001e0:	fa20 f303 	lsr.w	r3, r0, r3
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	4319      	orrs	r1, r3
 80001ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f2:	fa1f f68c 	uxth.w	r6, ip
 80001f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80001fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000206:	fb04 f106 	mul.w	r1, r4, r6
 800020a:	4299      	cmp	r1, r3
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x64>
 800020e:	eb1c 0303 	adds.w	r3, ip, r3
 8000212:	f104 30ff 	add.w	r0, r4, #4294967295
 8000216:	f080 8112 	bcs.w	800043e <__udivmoddi4+0x27e>
 800021a:	4299      	cmp	r1, r3
 800021c:	f240 810f 	bls.w	800043e <__udivmoddi4+0x27e>
 8000220:	3c02      	subs	r4, #2
 8000222:	4463      	add	r3, ip
 8000224:	1a59      	subs	r1, r3, r1
 8000226:	fa1f f38e 	uxth.w	r3, lr
 800022a:	fbb1 f0f7 	udiv	r0, r1, r7
 800022e:	fb07 1110 	mls	r1, r7, r0, r1
 8000232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000236:	fb00 f606 	mul.w	r6, r0, r6
 800023a:	429e      	cmp	r6, r3
 800023c:	d90a      	bls.n	8000254 <__udivmoddi4+0x94>
 800023e:	eb1c 0303 	adds.w	r3, ip, r3
 8000242:	f100 31ff 	add.w	r1, r0, #4294967295
 8000246:	f080 80fc 	bcs.w	8000442 <__udivmoddi4+0x282>
 800024a:	429e      	cmp	r6, r3
 800024c:	f240 80f9 	bls.w	8000442 <__udivmoddi4+0x282>
 8000250:	4463      	add	r3, ip
 8000252:	3802      	subs	r0, #2
 8000254:	1b9b      	subs	r3, r3, r6
 8000256:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800025a:	2100      	movs	r1, #0
 800025c:	b11d      	cbz	r5, 8000266 <__udivmoddi4+0xa6>
 800025e:	40d3      	lsrs	r3, r2
 8000260:	2200      	movs	r2, #0
 8000262:	e9c5 3200 	strd	r3, r2, [r5]
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d905      	bls.n	800027a <__udivmoddi4+0xba>
 800026e:	b10d      	cbz	r5, 8000274 <__udivmoddi4+0xb4>
 8000270:	e9c5 0100 	strd	r0, r1, [r5]
 8000274:	2100      	movs	r1, #0
 8000276:	4608      	mov	r0, r1
 8000278:	e7f5      	b.n	8000266 <__udivmoddi4+0xa6>
 800027a:	fab3 f183 	clz	r1, r3
 800027e:	2900      	cmp	r1, #0
 8000280:	d146      	bne.n	8000310 <__udivmoddi4+0x150>
 8000282:	42a3      	cmp	r3, r4
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xcc>
 8000286:	4290      	cmp	r0, r2
 8000288:	f0c0 80f0 	bcc.w	800046c <__udivmoddi4+0x2ac>
 800028c:	1a86      	subs	r6, r0, r2
 800028e:	eb64 0303 	sbc.w	r3, r4, r3
 8000292:	2001      	movs	r0, #1
 8000294:	2d00      	cmp	r5, #0
 8000296:	d0e6      	beq.n	8000266 <__udivmoddi4+0xa6>
 8000298:	e9c5 6300 	strd	r6, r3, [r5]
 800029c:	e7e3      	b.n	8000266 <__udivmoddi4+0xa6>
 800029e:	2a00      	cmp	r2, #0
 80002a0:	f040 8090 	bne.w	80003c4 <__udivmoddi4+0x204>
 80002a4:	eba1 040c 	sub.w	r4, r1, ip
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	fa1f f78c 	uxth.w	r7, ip
 80002b0:	2101      	movs	r1, #1
 80002b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ba:	fb08 4416 	mls	r4, r8, r6, r4
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	fb07 f006 	mul.w	r0, r7, r6
 80002c6:	4298      	cmp	r0, r3
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x11c>
 80002ca:	eb1c 0303 	adds.w	r3, ip, r3
 80002ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x11a>
 80002d4:	4298      	cmp	r0, r3
 80002d6:	f200 80cd 	bhi.w	8000474 <__udivmoddi4+0x2b4>
 80002da:	4626      	mov	r6, r4
 80002dc:	1a1c      	subs	r4, r3, r0
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e6:	fb08 4410 	mls	r4, r8, r0, r4
 80002ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ee:	fb00 f707 	mul.w	r7, r0, r7
 80002f2:	429f      	cmp	r7, r3
 80002f4:	d908      	bls.n	8000308 <__udivmoddi4+0x148>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x146>
 8000300:	429f      	cmp	r7, r3
 8000302:	f200 80b0 	bhi.w	8000466 <__udivmoddi4+0x2a6>
 8000306:	4620      	mov	r0, r4
 8000308:	1bdb      	subs	r3, r3, r7
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0x9c>
 8000310:	f1c1 0620 	rsb	r6, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 f706 	lsr.w	r7, r2, r6
 800031a:	431f      	orrs	r7, r3
 800031c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000320:	fa04 f301 	lsl.w	r3, r4, r1
 8000324:	ea43 030c 	orr.w	r3, r3, ip
 8000328:	40f4      	lsrs	r4, r6
 800032a:	fa00 f801 	lsl.w	r8, r0, r1
 800032e:	0c38      	lsrs	r0, r7, #16
 8000330:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000334:	fbb4 fef0 	udiv	lr, r4, r0
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	fb00 441e 	mls	r4, r0, lr, r4
 8000340:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000344:	fb0e f90c 	mul.w	r9, lr, ip
 8000348:	45a1      	cmp	r9, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x1a6>
 8000350:	193c      	adds	r4, r7, r4
 8000352:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000356:	f080 8084 	bcs.w	8000462 <__udivmoddi4+0x2a2>
 800035a:	45a1      	cmp	r9, r4
 800035c:	f240 8081 	bls.w	8000462 <__udivmoddi4+0x2a2>
 8000360:	f1ae 0e02 	sub.w	lr, lr, #2
 8000364:	443c      	add	r4, r7
 8000366:	eba4 0409 	sub.w	r4, r4, r9
 800036a:	fa1f f983 	uxth.w	r9, r3
 800036e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000372:	fb00 4413 	mls	r4, r0, r3, r4
 8000376:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037a:	fb03 fc0c 	mul.w	ip, r3, ip
 800037e:	45a4      	cmp	ip, r4
 8000380:	d907      	bls.n	8000392 <__udivmoddi4+0x1d2>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d267      	bcs.n	800045a <__udivmoddi4+0x29a>
 800038a:	45a4      	cmp	ip, r4
 800038c:	d965      	bls.n	800045a <__udivmoddi4+0x29a>
 800038e:	3b02      	subs	r3, #2
 8000390:	443c      	add	r4, r7
 8000392:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000396:	fba0 9302 	umull	r9, r3, r0, r2
 800039a:	eba4 040c 	sub.w	r4, r4, ip
 800039e:	429c      	cmp	r4, r3
 80003a0:	46ce      	mov	lr, r9
 80003a2:	469c      	mov	ip, r3
 80003a4:	d351      	bcc.n	800044a <__udivmoddi4+0x28a>
 80003a6:	d04e      	beq.n	8000446 <__udivmoddi4+0x286>
 80003a8:	b155      	cbz	r5, 80003c0 <__udivmoddi4+0x200>
 80003aa:	ebb8 030e 	subs.w	r3, r8, lr
 80003ae:	eb64 040c 	sbc.w	r4, r4, ip
 80003b2:	fa04 f606 	lsl.w	r6, r4, r6
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	431e      	orrs	r6, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c5 6400 	strd	r6, r4, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e750      	b.n	8000266 <__udivmoddi4+0xa6>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f103 	lsr.w	r1, r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa24 f303 	lsr.w	r3, r4, r3
 80003d4:	4094      	lsls	r4, r2
 80003d6:	430c      	orrs	r4, r1
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80003e0:	fa1f f78c 	uxth.w	r7, ip
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3110 	mls	r1, r8, r0, r3
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f2:	fb00 f107 	mul.w	r1, r0, r7
 80003f6:	4299      	cmp	r1, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x24c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000402:	d22c      	bcs.n	800045e <__udivmoddi4+0x29e>
 8000404:	4299      	cmp	r1, r3
 8000406:	d92a      	bls.n	800045e <__udivmoddi4+0x29e>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb3 f1f8 	udiv	r1, r3, r8
 8000414:	fb08 3311 	mls	r3, r8, r1, r3
 8000418:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800041c:	fb01 f307 	mul.w	r3, r1, r7
 8000420:	42a3      	cmp	r3, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x276>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f101 36ff 	add.w	r6, r1, #4294967295
 800042c:	d213      	bcs.n	8000456 <__udivmoddi4+0x296>
 800042e:	42a3      	cmp	r3, r4
 8000430:	d911      	bls.n	8000456 <__udivmoddi4+0x296>
 8000432:	3902      	subs	r1, #2
 8000434:	4464      	add	r4, ip
 8000436:	1ae4      	subs	r4, r4, r3
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	e739      	b.n	80002b2 <__udivmoddi4+0xf2>
 800043e:	4604      	mov	r4, r0
 8000440:	e6f0      	b.n	8000224 <__udivmoddi4+0x64>
 8000442:	4608      	mov	r0, r1
 8000444:	e706      	b.n	8000254 <__udivmoddi4+0x94>
 8000446:	45c8      	cmp	r8, r9
 8000448:	d2ae      	bcs.n	80003a8 <__udivmoddi4+0x1e8>
 800044a:	ebb9 0e02 	subs.w	lr, r9, r2
 800044e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000452:	3801      	subs	r0, #1
 8000454:	e7a8      	b.n	80003a8 <__udivmoddi4+0x1e8>
 8000456:	4631      	mov	r1, r6
 8000458:	e7ed      	b.n	8000436 <__udivmoddi4+0x276>
 800045a:	4603      	mov	r3, r0
 800045c:	e799      	b.n	8000392 <__udivmoddi4+0x1d2>
 800045e:	4630      	mov	r0, r6
 8000460:	e7d4      	b.n	800040c <__udivmoddi4+0x24c>
 8000462:	46d6      	mov	lr, sl
 8000464:	e77f      	b.n	8000366 <__udivmoddi4+0x1a6>
 8000466:	4463      	add	r3, ip
 8000468:	3802      	subs	r0, #2
 800046a:	e74d      	b.n	8000308 <__udivmoddi4+0x148>
 800046c:	4606      	mov	r6, r0
 800046e:	4623      	mov	r3, r4
 8000470:	4608      	mov	r0, r1
 8000472:	e70f      	b.n	8000294 <__udivmoddi4+0xd4>
 8000474:	3e02      	subs	r6, #2
 8000476:	4463      	add	r3, ip
 8000478:	e730      	b.n	80002dc <__udivmoddi4+0x11c>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  /* Run time stack overflow checking is performed if
  configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  called if a stack overflow is detected. */
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UsbMutex */
  UsbMutexHandle = osMutexNew(&UsbMutex_attributes);
 8000498:	4825      	ldr	r0, [pc, #148]	@ (8000530 <MX_FREERTOS_Init+0x9c>)
 800049a:	f005 f975 	bl	8005788 <osMutexNew>
 800049e:	4603      	mov	r3, r0
 80004a0:	4a24      	ldr	r2, [pc, #144]	@ (8000534 <MX_FREERTOS_Init+0xa0>)
 80004a2:	6013      	str	r3, [r2, #0]

  /* creation of LoraMutex */
  LoraMutexHandle = osMutexNew(&LoraMutex_attributes);
 80004a4:	4824      	ldr	r0, [pc, #144]	@ (8000538 <MX_FREERTOS_Init+0xa4>)
 80004a6:	f005 f96f 	bl	8005788 <osMutexNew>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a23      	ldr	r2, [pc, #140]	@ (800053c <MX_FREERTOS_Init+0xa8>)
 80004ae:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SendLoraQueue */
  SendLoraQueueHandle = osMessageQueueNew (10, sizeof(char *), &SendLoraQueue_attributes);
 80004b0:	4a23      	ldr	r2, [pc, #140]	@ (8000540 <MX_FREERTOS_Init+0xac>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	200a      	movs	r0, #10
 80004b6:	f005 faaf 	bl	8005a18 <osMessageQueueNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a21      	ldr	r2, [pc, #132]	@ (8000544 <MX_FREERTOS_Init+0xb0>)
 80004be:	6013      	str	r3, [r2, #0]

  /* creation of SendUsbQueue */
  SendUsbQueueHandle = osMessageQueueNew (10, sizeof(char *), &SendUsbQueue_attributes);
 80004c0:	4a21      	ldr	r2, [pc, #132]	@ (8000548 <MX_FREERTOS_Init+0xb4>)
 80004c2:	2104      	movs	r1, #4
 80004c4:	200a      	movs	r0, #10
 80004c6:	f005 faa7 	bl	8005a18 <osMessageQueueNew>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4a1f      	ldr	r2, [pc, #124]	@ (800054c <MX_FREERTOS_Init+0xb8>)
 80004ce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 80004d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000550 <MX_FREERTOS_Init+0xbc>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	481f      	ldr	r0, [pc, #124]	@ (8000554 <MX_FREERTOS_Init+0xc0>)
 80004d6:	f005 f831 	bl	800553c <osThreadNew>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000558 <MX_FREERTOS_Init+0xc4>)
 80004de:	6013      	str	r3, [r2, #0]

  /* creation of UsbSendTask */
  UsbSendTaskHandle = osThreadNew(StartUsbSendTask, NULL, &UsbSendTask_attributes);
 80004e0:	4a1e      	ldr	r2, [pc, #120]	@ (800055c <MX_FREERTOS_Init+0xc8>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	481e      	ldr	r0, [pc, #120]	@ (8000560 <MX_FREERTOS_Init+0xcc>)
 80004e6:	f005 f829 	bl	800553c <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000564 <MX_FREERTOS_Init+0xd0>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of LoraSendTask */
  LoraSendTaskHandle = osThreadNew(StartLoraSendTask, NULL, &LoraSendTask_attributes);
 80004f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000568 <MX_FREERTOS_Init+0xd4>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	481d      	ldr	r0, [pc, #116]	@ (800056c <MX_FREERTOS_Init+0xd8>)
 80004f6:	f005 f821 	bl	800553c <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000570 <MX_FREERTOS_Init+0xdc>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of UsbReceiveTask */
  UsbReceiveTaskHandle = osThreadNew(StartUsbReceiveTask, NULL, &UsbReceiveTask_attributes);
 8000500:	4a1c      	ldr	r2, [pc, #112]	@ (8000574 <MX_FREERTOS_Init+0xe0>)
 8000502:	2100      	movs	r1, #0
 8000504:	481c      	ldr	r0, [pc, #112]	@ (8000578 <MX_FREERTOS_Init+0xe4>)
 8000506:	f005 f819 	bl	800553c <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a1b      	ldr	r2, [pc, #108]	@ (800057c <MX_FREERTOS_Init+0xe8>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of LoRaReceiveTask */
  LoRaReceiveTaskHandle = osThreadNew(StartLoraReceiveTask, NULL, &LoRaReceiveTask_attributes);
 8000510:	4a1b      	ldr	r2, [pc, #108]	@ (8000580 <MX_FREERTOS_Init+0xec>)
 8000512:	2100      	movs	r1, #0
 8000514:	481b      	ldr	r0, [pc, #108]	@ (8000584 <MX_FREERTOS_Init+0xf0>)
 8000516:	f005 f811 	bl	800553c <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a1a      	ldr	r2, [pc, #104]	@ (8000588 <MX_FREERTOS_Init+0xf4>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of LoraSentEvent */
  LoraSentEventHandle = osEventFlagsNew(&LoraSentEvent_attributes);
 8000520:	481a      	ldr	r0, [pc, #104]	@ (800058c <MX_FREERTOS_Init+0xf8>)
 8000522:	f005 f8df 	bl	80056e4 <osEventFlagsNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a19      	ldr	r2, [pc, #100]	@ (8000590 <MX_FREERTOS_Init+0xfc>)
 800052a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	0800ca40 	.word	0x0800ca40
 8000534:	20000bb4 	.word	0x20000bb4
 8000538:	0800ca50 	.word	0x0800ca50
 800053c:	20000bb8 	.word	0x20000bb8
 8000540:	0800ca10 	.word	0x0800ca10
 8000544:	20000bac 	.word	0x20000bac
 8000548:	0800ca28 	.word	0x0800ca28
 800054c:	20000bb0 	.word	0x20000bb0
 8000550:	0800c95c 	.word	0x0800c95c
 8000554:	08000595 	.word	0x08000595
 8000558:	20000b98 	.word	0x20000b98
 800055c:	0800c980 	.word	0x0800c980
 8000560:	080005a9 	.word	0x080005a9
 8000564:	20000b9c 	.word	0x20000b9c
 8000568:	0800c9a4 	.word	0x0800c9a4
 800056c:	08000661 	.word	0x08000661
 8000570:	20000ba0 	.word	0x20000ba0
 8000574:	0800c9c8 	.word	0x0800c9c8
 8000578:	080006b1 	.word	0x080006b1
 800057c:	20000ba4 	.word	0x20000ba4
 8000580:	0800c9ec 	.word	0x0800c9ec
 8000584:	08000ae9 	.word	0x08000ae9
 8000588:	20000ba8 	.word	0x20000ba8
 800058c:	0800ca60 	.word	0x0800ca60
 8000590:	20000bbc 	.word	0x20000bbc

08000594 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* init code for SubGHz_Phy */
  MX_SubGHz_Phy_Init();
 800059c:	f00b fc5b 	bl	800be56 <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f005 f871 	bl	8005688 <osDelay>
 80005a6:	e7fb      	b.n	80005a0 <StartDefaultTask+0xc>

080005a8 <StartUsbSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsbSendTask */
void StartUsbSendTask(void *argument)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsbSendTask */
  /* Infinite loop */
  HAL_UART_Transmit(&huart1, welcome, strlen(welcome), HAL_MAX_DELAY);
 80005b0:	4826      	ldr	r0, [pc, #152]	@ (800064c <StartUsbSendTask+0xa4>)
 80005b2:	f7ff fde5 	bl	8000180 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	4923      	ldr	r1, [pc, #140]	@ (800064c <StartUsbSendTask+0xa4>)
 80005c0:	4823      	ldr	r0, [pc, #140]	@ (8000650 <StartUsbSendTask+0xa8>)
 80005c2:	f003 fcd1 	bl	8003f68 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 80005c6:	4823      	ldr	r0, [pc, #140]	@ (8000654 <StartUsbSendTask+0xac>)
 80005c8:	f7ff fdda 	bl	8000180 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	491f      	ldr	r1, [pc, #124]	@ (8000654 <StartUsbSendTask+0xac>)
 80005d6:	481e      	ldr	r0, [pc, #120]	@ (8000650 <StartUsbSendTask+0xa8>)
 80005d8:	f003 fcc6 	bl	8003f68 <HAL_UART_Transmit>

  char *input_buffer = NULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    if (!osMessageQueueGet(SendUsbQueueHandle, &input_buffer, NULL, osWaitForever))
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <StartUsbSendTask+0xb0>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	f107 010c 	add.w	r1, r7, #12
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2200      	movs	r2, #0
 80005ee:	f005 fb0d 	bl	8005c0c <osMessageQueueGet>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f3      	bne.n	80005e0 <StartUsbSendTask+0x38>
    {
      osMutexAcquire(UsbMutexHandle, osWaitForever);
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <StartUsbSendTask+0xb4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000600:	4618      	mov	r0, r3
 8000602:	f005 f95b 	bl	80058bc <osMutexAcquire>
      HAL_UART_Transmit(&huart1, input_buffer, strlen(input_buffer), HAL_MAX_DELAY);
 8000606:	68fc      	ldr	r4, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fdb8 	bl	8000180 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	4621      	mov	r1, r4
 800061a:	480d      	ldr	r0, [pc, #52]	@ (8000650 <StartUsbSendTask+0xa8>)
 800061c:	f003 fca4 	bl	8003f68 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <StartUsbSendTask+0xac>)
 8000622:	f7ff fdad 	bl	8000180 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	4909      	ldr	r1, [pc, #36]	@ (8000654 <StartUsbSendTask+0xac>)
 8000630:	4807      	ldr	r0, [pc, #28]	@ (8000650 <StartUsbSendTask+0xa8>)
 8000632:	f003 fc99 	bl	8003f68 <HAL_UART_Transmit>
      osMutexRelease(UsbMutexHandle);
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <StartUsbSendTask+0xb4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f005 f99c 	bl	8005978 <osMutexRelease>
      free(input_buffer);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4618      	mov	r0, r3
 8000644:	f00b ff0e 	bl	800c464 <free>
    if (!osMessageQueueGet(SendUsbQueueHandle, &input_buffer, NULL, osWaitForever))
 8000648:	e7ca      	b.n	80005e0 <StartUsbSendTask+0x38>
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	20000c24 	.word	0x20000c24
 8000654:	20000a7c 	.word	0x20000a7c
 8000658:	20000bb0 	.word	0x20000bb0
 800065c:	20000bb4 	.word	0x20000bb4

08000660 <StartLoraSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLoraSendTask */
void StartLoraSendTask(void *argument)
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraSendTask */
  /* Infinite loop */
  char *input_buffer = NULL;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    if (!osMessageQueueGet(SendLoraQueueHandle, &input_buffer, NULL, osWaitForever))
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <StartLoraSendTask+0x48>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	f107 010c 	add.w	r1, r7, #12
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2200      	movs	r2, #0
 800067a:	f005 fac7 	bl	8005c0c <osMessageQueueGet>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f3      	bne.n	800066c <StartLoraSendTask+0xc>
    {
      //osMutexAcquire(LoraMutexHandle, osWaitForever);
      //osEventFlagsClear(LoraSentEventHandle, 0);
      Radio.Send(input_buffer, strlen(input_buffer));
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <StartLoraSendTask+0x4c>)
 8000686:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8000688:	68fd      	ldr	r5, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fd77 	bl	8000180 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	4628      	mov	r0, r5
 800069a:	47a0      	blx	r4
      //osEventFlagsWait(LoraSentEventHandle, 0, 0, osWaitForever);
      free(input_buffer);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4618      	mov	r0, r3
 80006a0:	f00b fee0 	bl	800c464 <free>
    if (!osMessageQueueGet(SendLoraQueueHandle, &input_buffer, NULL, osWaitForever))
 80006a4:	e7e2      	b.n	800066c <StartLoraSendTask+0xc>
 80006a6:	bf00      	nop
 80006a8:	20000bac 	.word	0x20000bac
 80006ac:	0800cb64 	.word	0x0800cb64

080006b0 <StartUsbReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsbReceiveTask */
void StartUsbReceiveTask(void *argument)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b0d5      	sub	sp, #340	@ 0x154
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80006ba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80006be:	6018      	str	r0, [r3, #0]
      free(string_malloc);
      continue;
    }*/

    uint8_t input_buffer[300];
    bool echo = true;
 80006c0:	2301      	movs	r3, #1
 80006c2:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    /* Infinite loop */
    for (;;)
    {
      osMutexRelease(UsbMutexHandle);
 80006c6:	4bad      	ldr	r3, [pc, #692]	@ (800097c <StartUsbReceiveTask+0x2cc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f954 	bl	8005978 <osMutexRelease>
      HAL_UART_Receive(&huart1, input_buffer, 1, HAL_MAX_DELAY);
 80006d0:	f107 010c 	add.w	r1, r7, #12
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	48a9      	ldr	r0, [pc, #676]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 80006dc:	f003 fcca 	bl	8004074 <HAL_UART_Receive>
      osMutexAcquire(UsbMutexHandle, osWaitForever);
 80006e0:	4ba6      	ldr	r3, [pc, #664]	@ (800097c <StartUsbReceiveTask+0x2cc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 f8e7 	bl	80058bc <osMutexAcquire>
      if (echo)
 80006ee:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <StartUsbReceiveTask+0x56>
	  {
		HAL_UART_Transmit(&huart1, input_buffer, 1, HAL_MAX_DELAY);
 80006f6:	f107 010c 	add.w	r1, r7, #12
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	2201      	movs	r2, #1
 8000700:	489f      	ldr	r0, [pc, #636]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 8000702:	f003 fc31 	bl	8003f68 <HAL_UART_Transmit>
	  }
      if (input_buffer[0] == '\n' || input_buffer[0] == '\r') {
 8000706:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800070a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0a      	cmp	r3, #10
 8000712:	d006      	beq.n	8000722 <StartUsbReceiveTask+0x72>
 8000714:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000718:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b0d      	cmp	r3, #13
 8000720:	d10b      	bne.n	800073a <StartUsbReceiveTask+0x8a>
  		HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000722:	4898      	ldr	r0, [pc, #608]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 8000724:	f7ff fd2c 	bl	8000180 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	4994      	ldr	r1, [pc, #592]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 8000732:	4893      	ldr	r0, [pc, #588]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 8000734:	f003 fc18 	bl	8003f68 <HAL_UART_Transmit>
    	  continue;
 8000738:	e1ca      	b.n	8000ad0 <StartUsbReceiveTask+0x420>
      }
      for (size_t i = 1; i < sizeof(input_buffer); ++i)
 800073a:	2301      	movs	r3, #1
 800073c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000740:	e1bc      	b.n	8000abc <StartUsbReceiveTask+0x40c>
      {
        HAL_UART_Receive(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 8000742:	f107 020c 	add.w	r2, r7, #12
 8000746:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800074a:	18d1      	adds	r1, r2, r3
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2201      	movs	r2, #1
 8000752:	488b      	ldr	r0, [pc, #556]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 8000754:	f003 fc8e 	bl	8004074 <HAL_UART_Receive>
        if (echo)
 8000758:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00a      	beq.n	8000776 <StartUsbReceiveTask+0xc6>
        {
          HAL_UART_Transmit(&huart1, input_buffer + i, 1, HAL_MAX_DELAY);
 8000760:	f107 020c 	add.w	r2, r7, #12
 8000764:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000768:	18d1      	adds	r1, r2, r3
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4883      	ldr	r0, [pc, #524]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 8000772:	f003 fbf9 	bl	8003f68 <HAL_UART_Transmit>
        }
        if (input_buffer[i] == '\n' || input_buffer[i] == '\r')
 8000776:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800077a:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800077e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	d00a      	beq.n	80007a0 <StartUsbReceiveTask+0xf0>
 800078a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800078e:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8000792:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b0d      	cmp	r3, #13
 800079c:	f040 8173 	bne.w	8000a86 <StartUsbReceiveTask+0x3d6>
        {

          input_buffer[i] = '\0';
 80007a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80007a4:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80007a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80007ac:	4413      	add	r3, r2
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
          if (i == 0)
 80007b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 8187 	beq.w	8000aca <StartUsbReceiveTask+0x41a>
          {
            // do nothing
          }
          else if (!strncmp((char *)input_buffer, (char *)command_help, strlen(command_help)))
 80007bc:	4872      	ldr	r0, [pc, #456]	@ (8000988 <StartUsbReceiveTask+0x2d8>)
 80007be:	f7ff fcdf 	bl	8000180 <strlen>
 80007c2:	4602      	mov	r2, r0
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	496f      	ldr	r1, [pc, #444]	@ (8000988 <StartUsbReceiveTask+0x2d8>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00b ff08 	bl	800c5e0 <strncmp>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d116      	bne.n	8000804 <StartUsbReceiveTask+0x154>
          {
            HAL_UART_Transmit(&huart1, welcome, strlen(welcome), HAL_MAX_DELAY);
 80007d6:	486d      	ldr	r0, [pc, #436]	@ (800098c <StartUsbReceiveTask+0x2dc>)
 80007d8:	f7ff fcd2 	bl	8000180 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4969      	ldr	r1, [pc, #420]	@ (800098c <StartUsbReceiveTask+0x2dc>)
 80007e6:	4866      	ldr	r0, [pc, #408]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 80007e8:	f003 fbbe 	bl	8003f68 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 80007ec:	4865      	ldr	r0, [pc, #404]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 80007ee:	f7ff fcc7 	bl	8000180 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	4962      	ldr	r1, [pc, #392]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 80007fc:	4860      	ldr	r0, [pc, #384]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 80007fe:	f003 fbb3 	bl	8003f68 <HAL_UART_Transmit>
          else
          {
            HAL_UART_Transmit(&huart1, error_parse, strlen(error_parse), HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
          }
          break;
 8000802:	e162      	b.n	8000aca <StartUsbReceiveTask+0x41a>
          else if (i > strlen((char *)command_send) && !strncmp((char *)input_buffer, (char *)command_send, strlen(command_send)))
 8000804:	4862      	ldr	r0, [pc, #392]	@ (8000990 <StartUsbReceiveTask+0x2e0>)
 8000806:	f7ff fcbb 	bl	8000180 <strlen>
 800080a:	4602      	mov	r2, r0
 800080c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000810:	4293      	cmp	r3, r2
 8000812:	d959      	bls.n	80008c8 <StartUsbReceiveTask+0x218>
 8000814:	485e      	ldr	r0, [pc, #376]	@ (8000990 <StartUsbReceiveTask+0x2e0>)
 8000816:	f7ff fcb3 	bl	8000180 <strlen>
 800081a:	4602      	mov	r2, r0
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	495b      	ldr	r1, [pc, #364]	@ (8000990 <StartUsbReceiveTask+0x2e0>)
 8000822:	4618      	mov	r0, r3
 8000824:	f00b fedc 	bl	800c5e0 <strncmp>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d14c      	bne.n	80008c8 <StartUsbReceiveTask+0x218>
            char *malloc_buffer = malloc(strlen(input_buffer) - strlen(command_send));
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fca4 	bl	8000180 <strlen>
 8000838:	4604      	mov	r4, r0
 800083a:	4855      	ldr	r0, [pc, #340]	@ (8000990 <StartUsbReceiveTask+0x2e0>)
 800083c:	f7ff fca0 	bl	8000180 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	1ae3      	subs	r3, r4, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f00b fe05 	bl	800c454 <malloc>
 800084a:	4603      	mov	r3, r0
 800084c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            if (!malloc_buffer)
 8000850:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000854:	2b00      	cmp	r3, #0
 8000856:	f000 813a 	beq.w	8000ace <StartUsbReceiveTask+0x41e>
            strncpy(malloc_buffer, input_buffer + strlen(command_send), 256);
 800085a:	f8d7 413c 	ldr.w	r4, [r7, #316]	@ 0x13c
 800085e:	484c      	ldr	r0, [pc, #304]	@ (8000990 <StartUsbReceiveTask+0x2e0>)
 8000860:	f7ff fc8e 	bl	8000180 <strlen>
 8000864:	4602      	mov	r2, r0
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4413      	add	r3, r2
 800086c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000870:	4619      	mov	r1, r3
 8000872:	4620      	mov	r0, r4
 8000874:	f00b fec6 	bl	800c604 <strncpy>
            if (osMessageQueuePut(SendLoraQueueHandle, &malloc_buffer, NULL, osWaitForever))
 8000878:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <StartUsbReceiveTask+0x2e4>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	2200      	movs	r2, #0
 8000886:	f005 f94d 	bl	8005b24 <osMessageQueuePut>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00f      	beq.n	80008b0 <StartUsbReceiveTask+0x200>
              free(malloc_buffer);
 8000890:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000894:	4618      	mov	r0, r3
 8000896:	f00b fde5 	bl	800c464 <free>
              HAL_UART_Transmit(&huart1, error_send, strlen(error_send), HAL_MAX_DELAY);
 800089a:	483f      	ldr	r0, [pc, #252]	@ (8000998 <StartUsbReceiveTask+0x2e8>)
 800089c:	f7ff fc70 	bl	8000180 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	493b      	ldr	r1, [pc, #236]	@ (8000998 <StartUsbReceiveTask+0x2e8>)
 80008aa:	4835      	ldr	r0, [pc, #212]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 80008ac:	f003 fb5c 	bl	8003f68 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 80008b0:	4834      	ldr	r0, [pc, #208]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 80008b2:	f7ff fc65 	bl	8000180 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	4931      	ldr	r1, [pc, #196]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 80008c0:	482f      	ldr	r0, [pc, #188]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 80008c2:	f003 fb51 	bl	8003f68 <HAL_UART_Transmit>
          {
 80008c6:	e0dd      	b.n	8000a84 <StartUsbReceiveTask+0x3d4>
          else if (i > strlen((char *)config_terminal_echo) && !strncmp((char *)input_buffer, (char *)config_terminal_echo, strlen(config_terminal_echo)))
 80008c8:	4834      	ldr	r0, [pc, #208]	@ (800099c <StartUsbReceiveTask+0x2ec>)
 80008ca:	f7ff fc59 	bl	8000180 <strlen>
 80008ce:	4602      	mov	r2, r0
 80008d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d969      	bls.n	80009ac <StartUsbReceiveTask+0x2fc>
 80008d8:	4830      	ldr	r0, [pc, #192]	@ (800099c <StartUsbReceiveTask+0x2ec>)
 80008da:	f7ff fc51 	bl	8000180 <strlen>
 80008de:	4602      	mov	r2, r0
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	492d      	ldr	r1, [pc, #180]	@ (800099c <StartUsbReceiveTask+0x2ec>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00b fe7a 	bl	800c5e0 <strncmp>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d15c      	bne.n	80009ac <StartUsbReceiveTask+0x2fc>
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 80008f2:	482a      	ldr	r0, [pc, #168]	@ (800099c <StartUsbReceiveTask+0x2ec>)
 80008f4:	f7ff fc44 	bl	8000180 <strlen>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	189c      	adds	r4, r3, r2
 8000900:	4827      	ldr	r0, [pc, #156]	@ (80009a0 <StartUsbReceiveTask+0x2f0>)
 8000902:	f7ff fc3d 	bl	8000180 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	4925      	ldr	r1, [pc, #148]	@ (80009a0 <StartUsbReceiveTask+0x2f0>)
 800090c:	4620      	mov	r0, r4
 800090e:	f00b fe67 	bl	800c5e0 <strncmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <StartUsbReceiveTask+0x270>
              echo = true;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 800091e:	e0b1      	b.n	8000a84 <StartUsbReceiveTask+0x3d4>
            else if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)false_str, strlen(false_str)))
 8000920:	481e      	ldr	r0, [pc, #120]	@ (800099c <StartUsbReceiveTask+0x2ec>)
 8000922:	f7ff fc2d 	bl	8000180 <strlen>
 8000926:	4602      	mov	r2, r0
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	189c      	adds	r4, r3, r2
 800092e:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <StartUsbReceiveTask+0x2f4>)
 8000930:	f7ff fc26 	bl	8000180 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	491a      	ldr	r1, [pc, #104]	@ (80009a4 <StartUsbReceiveTask+0x2f4>)
 800093a:	4620      	mov	r0, r4
 800093c:	f00b fe50 	bl	800c5e0 <strncmp>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <StartUsbReceiveTask+0x29e>
              echo = false;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 800094c:	e09a      	b.n	8000a84 <StartUsbReceiveTask+0x3d4>
              HAL_UART_Transmit(&huart1, error_parse, strlen(error_parse), HAL_MAX_DELAY);
 800094e:	4816      	ldr	r0, [pc, #88]	@ (80009a8 <StartUsbReceiveTask+0x2f8>)
 8000950:	f7ff fc16 	bl	8000180 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	4912      	ldr	r1, [pc, #72]	@ (80009a8 <StartUsbReceiveTask+0x2f8>)
 800095e:	4808      	ldr	r0, [pc, #32]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 8000960:	f003 fb02 	bl	8003f68 <HAL_UART_Transmit>
              HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 8000966:	f7ff fc0b 	bl	8000180 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	4904      	ldr	r1, [pc, #16]	@ (8000984 <StartUsbReceiveTask+0x2d4>)
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <StartUsbReceiveTask+0x2d0>)
 8000976:	f003 faf7 	bl	8003f68 <HAL_UART_Transmit>
            if (!strncmp((char *)input_buffer + strlen(config_terminal_echo), (char *)true_str, strlen(true_str)))
 800097a:	e083      	b.n	8000a84 <StartUsbReceiveTask+0x3d4>
 800097c:	20000bb4 	.word	0x20000bb4
 8000980:	20000c24 	.word	0x20000c24
 8000984:	20000a7c 	.word	0x20000a7c
 8000988:	20000ad4 	.word	0x20000ad4
 800098c:	20000000 	.word	0x20000000
 8000990:	20000acc 	.word	0x20000acc
 8000994:	20000bac 	.word	0x20000bac
 8000998:	20000aa0 	.word	0x20000aa0
 800099c:	20000adc 	.word	0x20000adc
 80009a0:	20000b08 	.word	0x20000b08
 80009a4:	20000b10 	.word	0x20000b10
 80009a8:	20000a80 	.word	0x20000a80
          } else if (i > strlen((char *)config_modulation) && !strncmp((char *)input_buffer, (char *)config_modulation, strlen(config_modulation)))
 80009ac:	4849      	ldr	r0, [pc, #292]	@ (8000ad4 <StartUsbReceiveTask+0x424>)
 80009ae:	f7ff fbe7 	bl	8000180 <strlen>
 80009b2:	4602      	mov	r2, r0
 80009b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d94b      	bls.n	8000a54 <StartUsbReceiveTask+0x3a4>
 80009bc:	4845      	ldr	r0, [pc, #276]	@ (8000ad4 <StartUsbReceiveTask+0x424>)
 80009be:	f7ff fbdf 	bl	8000180 <strlen>
 80009c2:	4602      	mov	r2, r0
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4942      	ldr	r1, [pc, #264]	@ (8000ad4 <StartUsbReceiveTask+0x424>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f00b fe08 	bl	800c5e0 <strncmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d13e      	bne.n	8000a54 <StartUsbReceiveTask+0x3a4>
        	  char *input_parameters = input_buffer + strlen((char *)config_modulation);
 80009d6:	483f      	ldr	r0, [pc, #252]	@ (8000ad4 <StartUsbReceiveTask+0x424>)
 80009d8:	f7ff fbd2 	bl	8000180 <strlen>
 80009dc:	4602      	mov	r2, r0
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4413      	add	r3, r2
 80009e4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
        	  string = strtok_r(input_parameters, "     ", &last_string);
 80009e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80009ec:	461a      	mov	r2, r3
 80009ee:	493a      	ldr	r1, [pc, #232]	@ (8000ad8 <StartUsbReceiveTask+0x428>)
 80009f0:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80009f4:	f00b fe41 	bl	800c67a <strtok_r>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
        	  if (string) {
 80009fe:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d03d      	beq.n	8000a82 <StartUsbReceiveTask+0x3d2>
                  HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000a06:	4835      	ldr	r0, [pc, #212]	@ (8000adc <StartUsbReceiveTask+0x42c>)
 8000a08:	f7ff fbba 	bl	8000180 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	4931      	ldr	r1, [pc, #196]	@ (8000adc <StartUsbReceiveTask+0x42c>)
 8000a16:	4832      	ldr	r0, [pc, #200]	@ (8000ae0 <StartUsbReceiveTask+0x430>)
 8000a18:	f003 faa6 	bl	8003f68 <HAL_UART_Transmit>
        		  HAL_UART_Transmit(&huart1, string, strlen(string), HAL_MAX_DELAY);
 8000a1c:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8000a20:	461c      	mov	r4, r3
 8000a22:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbaa 	bl	8000180 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	4621      	mov	r1, r4
 8000a36:	482a      	ldr	r0, [pc, #168]	@ (8000ae0 <StartUsbReceiveTask+0x430>)
 8000a38:	f003 fa96 	bl	8003f68 <HAL_UART_Transmit>
                  HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000a3c:	4827      	ldr	r0, [pc, #156]	@ (8000adc <StartUsbReceiveTask+0x42c>)
 8000a3e:	f7ff fb9f 	bl	8000180 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	4924      	ldr	r1, [pc, #144]	@ (8000adc <StartUsbReceiveTask+0x42c>)
 8000a4c:	4824      	ldr	r0, [pc, #144]	@ (8000ae0 <StartUsbReceiveTask+0x430>)
 8000a4e:	f003 fa8b 	bl	8003f68 <HAL_UART_Transmit>
          {
 8000a52:	e016      	b.n	8000a82 <StartUsbReceiveTask+0x3d2>
            HAL_UART_Transmit(&huart1, error_parse, strlen(error_parse), HAL_MAX_DELAY);
 8000a54:	4823      	ldr	r0, [pc, #140]	@ (8000ae4 <StartUsbReceiveTask+0x434>)
 8000a56:	f7ff fb93 	bl	8000180 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	4920      	ldr	r1, [pc, #128]	@ (8000ae4 <StartUsbReceiveTask+0x434>)
 8000a64:	481e      	ldr	r0, [pc, #120]	@ (8000ae0 <StartUsbReceiveTask+0x430>)
 8000a66:	f003 fa7f 	bl	8003f68 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, new_line, strlen(new_line), HAL_MAX_DELAY);
 8000a6a:	481c      	ldr	r0, [pc, #112]	@ (8000adc <StartUsbReceiveTask+0x42c>)
 8000a6c:	f7ff fb88 	bl	8000180 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	4918      	ldr	r1, [pc, #96]	@ (8000adc <StartUsbReceiveTask+0x42c>)
 8000a7a:	4819      	ldr	r0, [pc, #100]	@ (8000ae0 <StartUsbReceiveTask+0x430>)
 8000a7c:	f003 fa74 	bl	8003f68 <HAL_UART_Transmit>
          break;
 8000a80:	e023      	b.n	8000aca <StartUsbReceiveTask+0x41a>
          {
 8000a82:	bf00      	nop
          break;
 8000a84:	e021      	b.n	8000aca <StartUsbReceiveTask+0x41a>
        }
        else if (input_buffer[i] == '\x03' || input_buffer[i] == '\x1A')
 8000a86:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a8a:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8000a8e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000a92:	4413      	add	r3, r2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	f43f ae15 	beq.w	80006c6 <StartUsbReceiveTask+0x16>
 8000a9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000aa0:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8000aa4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b1a      	cmp	r3, #26
 8000aae:	f43f ae0a 	beq.w	80006c6 <StartUsbReceiveTask+0x16>
      for (size_t i = 1; i < sizeof(input_buffer); ++i)
 8000ab2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000abc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000ac0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000ac4:	f4ff ae3d 	bcc.w	8000742 <StartUsbReceiveTask+0x92>
 8000ac8:	e5fd      	b.n	80006c6 <StartUsbReceiveTask+0x16>
          break;
 8000aca:	bf00      	nop
 8000acc:	e5fb      	b.n	80006c6 <StartUsbReceiveTask+0x16>
              break;
 8000ace:	bf00      	nop
      osMutexRelease(UsbMutexHandle);
 8000ad0:	e5f9      	b.n	80006c6 <StartUsbReceiveTask+0x16>
 8000ad2:	bf00      	nop
 8000ad4:	20000af4 	.word	0x20000af4
 8000ad8:	0800c8fc 	.word	0x0800c8fc
 8000adc:	20000a7c 	.word	0x20000a7c
 8000ae0:	20000c24 	.word	0x20000c24
 8000ae4:	20000a80 	.word	0x20000a80

08000ae8 <StartLoraReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLoraReceiveTask */
void StartLoraReceiveTask(void *argument)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08d      	sub	sp, #52	@ 0x34
 8000aec:	af0a      	add	r7, sp, #40	@ 0x28
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraReceiveTask */
  /* USER CODE BEGIN SubghzApp_Init_2 */
  Radio.SetModem(MODEM_LORA);
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <StartLoraReceiveTask+0xa4>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2001      	movs	r0, #1
 8000af6:	4798      	blx	r3
  Radio.SetChannel(868000000);
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <StartLoraReceiveTask+0xa4>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4824      	ldr	r0, [pc, #144]	@ (8000b90 <StartLoraReceiveTask+0xa8>)
 8000afe:	4798      	blx	r3
  Radio.SetRxConfig(
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <StartLoraReceiveTask+0xa4>)
 8000b02:	699c      	ldr	r4, [r3, #24]
 8000b04:	2301      	movs	r3, #1
 8000b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9308      	str	r3, [sp, #32]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9307      	str	r3, [sp, #28]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9306      	str	r3, [sp, #24]
 8000b14:	2301      	movs	r3, #1
 8000b16:	9305      	str	r3, [sp, #20]
 8000b18:	230c      	movs	r3, #12
 8000b1a:	9304      	str	r3, [sp, #16]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9303      	str	r3, [sp, #12]
 8000b20:	2300      	movs	r3, #0
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2308      	movs	r3, #8
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	220a      	movs	r2, #10
 8000b30:	2101      	movs	r1, #1
 8000b32:	2001      	movs	r0, #1
 8000b34:	47a0      	blx	r4
      1,
      0,
      0,
      0,
      true);
  Radio.SetTxConfig(
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <StartLoraReceiveTask+0xa4>)
 8000b38:	69dc      	ldr	r4, [r3, #28]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9308      	str	r3, [sp, #32]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9307      	str	r3, [sp, #28]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9306      	str	r3, [sp, #24]
 8000b46:	2300      	movs	r3, #0
 8000b48:	9305      	str	r3, [sp, #20]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	9303      	str	r3, [sp, #12]
 8000b52:	2320      	movs	r3, #32
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	2304      	movs	r3, #4
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2200      	movs	r2, #0
 8000b62:	210f      	movs	r1, #15
 8000b64:	2001      	movs	r0, #1
 8000b66:	47a0      	blx	r4
      1,
      0,
      0,
      0,
      0);
  Radio.SetPublicNetwork(true);
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <StartLoraReceiveTask+0xa4>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	4798      	blx	r3
  osMutexRelease(LoraMutexHandle);
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <StartLoraReceiveTask+0xac>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 feff 	bl	8005978 <osMutexRelease>

  Radio.Rx(0);
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <StartLoraReceiveTask+0xa4>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	2000      	movs	r0, #0
 8000b80:	4798      	blx	r3
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f004 fd80 	bl	8005688 <osDelay>
 8000b88:	e7fb      	b.n	8000b82 <StartLoraReceiveTask+0x9a>
 8000b8a:	bf00      	nop
 8000b8c:	0800cb64 	.word	0x0800cb64
 8000b90:	33bca100 	.word	0x33bca100
 8000b94:	20000bb8 	.word	0x20000bb8

08000b98 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff ffdb 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff ffd8 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2160      	movs	r1, #96	@ 0x60
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f000 fec0 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bf4:	2360      	movs	r3, #96	@ 0x60
 8000bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f000 fd52 	bl	80016b4 <HAL_GPIO_Init>

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fb7e 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f80c 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f7ff ffd0 	bl	8000bc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c28:	f000 fab2 	bl	8001190 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c2c:	f004 fc1e 	bl	800546c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c30:	f7ff fc30 	bl	8000494 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c34:	f004 fc4c 	bl	80054d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <main+0x20>

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b09a      	sub	sp, #104	@ 0x68
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2248      	movs	r2, #72	@ 0x48
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00b fcc0 	bl	800c5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <SystemClock_Config+0xa0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <SystemClock_Config+0xa0>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <SystemClock_Config+0xa0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000c8a:	23b0      	movs	r3, #176	@ 0xb0
 8000c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f952 	bl	8001f40 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ca2:	f000 f82f 	bl	8000d04 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000ca6:	234f      	movs	r3, #79	@ 0x4f
 8000ca8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fcbd 	bl	8002644 <HAL_RCC_ClockConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd0:	f000 f818 	bl	8000d04 <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3768      	adds	r7, #104	@ 0x68
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58000400 	.word	0x58000400

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf2:	f000 fb33 	bl	800135c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40012c00 	.word	0x40012c00

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d44:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000d48:	f7ff ffe2 	bl	8000d10 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f06f 0001 	mvn.w	r0, #1
 8000d54:	f000 fbc9 	bl	80014ea <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2105      	movs	r1, #5
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f000 fbc4 	bl	80014ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d62:	2005      	movs	r0, #5
 8000d64:	f000 fbdb 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2105      	movs	r1, #5
 8000d6c:	202f      	movs	r0, #47	@ 0x2f
 8000d6e:	f000 fbbc 	bl	80014ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000d72:	202f      	movs	r0, #47	@ 0x2f
 8000d74:	f000 fbd3 	bl	800151e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da0:	68fb      	ldr	r3, [r7, #12]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	@ 0x30
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000dc6:	f7ff ffd9 	bl	8000d7c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dca:	f107 0208 	add.w	r2, r7, #8
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fe31 	bl	8002a3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dda:	f001 fe1d 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8000dde:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <HAL_InitTick+0xbc>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	3b01      	subs	r3, #1
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000df0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e70 <HAL_InitTick+0xc4>)
 8000df2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000df6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000e0e:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000e10:	f002 fdcc 	bl	80039ac <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d11b      	bne.n	8000e5a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e22:	4812      	ldr	r0, [pc, #72]	@ (8000e6c <HAL_InitTick+0xc0>)
 8000e24:	f002 fe22 	bl	8003a6c <HAL_TIM_Base_Start_IT>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d111      	bne.n	8000e5a <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e36:	2018      	movs	r0, #24
 8000e38:	f000 fb71 	bl	800151e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d808      	bhi.n	8000e54 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e42:	2200      	movs	r2, #0
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	2018      	movs	r0, #24
 8000e48:	f000 fb4f 	bl	80014ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4c:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <HAL_InitTick+0xc8>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e002      	b.n	8000e5a <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3730      	adds	r7, #48	@ 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	20000bc0 	.word	0x20000bc0
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	20000b1c 	.word	0x20000b1c

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM1_UP_IRQHandler+0x10>)
 8000ebe:	f002 fe21 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000bc0 	.word	0x20000bc0

08000ecc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <USART1_IRQHandler+0x10>)
 8000ed2:	f003 f993 	bl	80041fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000c24 	.word	0x20000c24

08000ee0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM Interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000ee4:	f000 fd5e 	bl	80019a4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <SUBGHZ_Radio_IRQHandler+0x10>)
 8000ef2:	f002 fbbd 	bl	8003670 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000c0c 	.word	0x20000c0c

08000f00 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_SUBGHZ_Init+0x20>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_SUBGHZ_Init+0x20>)
 8000f3c:	f002 f916 	bl	800316c <HAL_SUBGHZ_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000f46:	f7ff fedd 	bl	8000d04 <Error_Handler>
  /* USER CODE BEGIN SUBGHZ_Init 2 */


  /* USER CODE END SUBGHZ_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000c0c 	.word	0x20000c0c

08000f54 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff ffcf 	bl	8000f00 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2032      	movs	r0, #50	@ 0x32
 8000f68:	f000 fabf 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000f6c:	2032      	movs	r0, #50	@ 0x32
 8000f6e:	f000 fad6 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_GetTick+0x24>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000f9a:	f000 f892 	bl	80010c2 <TIMER_IF_GetTimerValue>
 8000f9e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000c18 	.word	0x20000c18

08000fb0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f8af 	bl	800111e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f00b fba8 	bl	800c74c <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20010000 	.word	0x20010000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000c1c 	.word	0x20000c1c
 8001030:	20005d98 	.word	0x20005d98

08001034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800104a:	79fb      	ldrb	r3, [r7, #7]
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001088:	4b02      	ldr	r3, [pc, #8]	@ (8001094 <TIMER_IF_SetTimerContext+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000c20 	.word	0x20000c20

08001098 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <TIMER_IF_GetTimerContext+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000c20 	.word	0x20000c20

080010ac <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800113c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800113e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4313      	orrs	r3, r2
 8001146:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001154:	68fb      	ldr	r3, [r7, #12]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800116c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800116e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800117c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001184:	68fb      	ldr	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 8001196:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <MX_USART1_UART_Init+0x98>)
 8001198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011c0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011da:	4812      	ldr	r0, [pc, #72]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011dc:	f002 fe74 	bl	8003ec8 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80011e6:	f7ff fd8d 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 80011ee:	f004 f86e 	bl	80052ce <HAL_UARTEx_SetTxFifoThreshold>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80011f8:	f7ff fd84 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 8001200:	f004 f8a3 	bl	800534a <HAL_UARTEx_SetRxFifoThreshold>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800120a:	f7ff fd7b 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_USART1_UART_Init+0x94>)
 8001210:	f004 f822 	bl	8005258 <HAL_UARTEx_EnableFifoMode>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800121a:	f7ff fd73 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000c24 	.word	0x20000c24
 8001228:	40013800 	.word	0x40013800

0800122c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	@ 0x58
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2238      	movs	r2, #56	@ 0x38
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00b f9bf 	bl	800c5d0 <memset>
  if(uartHandle->Instance==USART1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <HAL_UART_MspInit+0x94>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d12d      	bne.n	80012b8 <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800125c:	2301      	movs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001260:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001264:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fdca 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001276:	f7ff fd45 	bl	8000d04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800127e:	f7ff ff6f 	bl	8001160 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2002      	movs	r0, #2
 8001284:	f7ff ff54 	bl	8001130 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> USART1_RTS
    PB4     ------> USART1_CTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001288:	23d8      	movs	r3, #216	@ 0xd8
 800128a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001298:	2307      	movs	r3, #7
 800129a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012a0:	4619      	mov	r1, r3
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <HAL_UART_MspInit+0x98>)
 80012a4:	f000 fa06 	bl	80016b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2105      	movs	r1, #5
 80012ac:	2024      	movs	r0, #36	@ 0x24
 80012ae:	f000 f91c 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012b2:	2024      	movs	r0, #36	@ 0x24
 80012b4:	f000 f933 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3758      	adds	r7, #88	@ 0x58
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40013800 	.word	0x40013800
 80012c4:	48000400 	.word	0x48000400

080012c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012cc:	f7ff feb2 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopForever+0xe>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopForever+0x16>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012f6:	f00b fa2f 	bl	800c758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7ff fc8d 	bl	8000c18 <main>

080012fe <LoopForever>:

LoopForever:
    b LoopForever
 80012fe:	e7fe      	b.n	80012fe <LoopForever>
  ldr   r0, =_estack
 8001300:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000b7c 	.word	0x20000b7c
  ldr r2, =_sidata
 800130c:	0800ccb4 	.word	0x0800ccb4
  ldr r2, =_sbss
 8001310:	20000b7c 	.word	0x20000b7c
  ldr r4, =_ebss
 8001314:	20005d94 	.word	0x20005d94

08001318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001326:	2003      	movs	r0, #3
 8001328:	f000 f8d4 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800132c:	f001 fb4e 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8001330:	4603      	mov	r3, r0
 8001332:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <HAL_Init+0x3c>)
 8001334:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001336:	200f      	movs	r0, #15
 8001338:	f7ff fd38 	bl	8000dac <HAL_InitTick>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	e001      	b.n	800134c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001348:	f7ff fcfa 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800134c:	79fb      	ldrb	r3, [r7, #7]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000b18 	.word	0x20000b18

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	@ (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000b20 	.word	0x20000b20
 800137c:	20000cb8 	.word	0x20000cb8

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4906      	ldr	r1, [pc, #24]	@ (8001418 <__NVIC_EnableIRQ+0x34>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	@ (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	@ (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	@ 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff4f 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff66 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ffb4 	bl	8001470 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff83 	bl	800141c <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff59 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e04f      	b.n	80015ec <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d008      	beq.n	800156a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e040      	b.n	80015ec <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f003 021c 	and.w	r2, r3, #28
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e047      	b.n	80016aa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f003 021c 	and.w	r2, r3, #28
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001666:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00c      	beq.n	800168a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800167e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001688:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
    }
  }
  return status;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e140      	b.n	8001946 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8132 	beq.w	8001940 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0201 	and.w	r2, r3, #1
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b03      	cmp	r3, #3
 8001760:	d017      	beq.n	8001792 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d123      	bne.n	80017e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	6939      	ldr	r1, [r7, #16]
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0203 	and.w	r2, r3, #3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 808c 	beq.w	8001940 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001828:	4a4e      	ldr	r2, [pc, #312]	@ (8001964 <HAL_GPIO_Init+0x2b0>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1bc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a44      	ldr	r2, [pc, #272]	@ (8001968 <HAL_GPIO_Init+0x2b4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1b8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a43      	ldr	r2, [pc, #268]	@ (800196c <HAL_GPIO_Init+0x2b8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1b4>
 8001864:	2302      	movs	r3, #2
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1be>
 8001868:	2307      	movs	r3, #7
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1be>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1be>
 8001870:	2300      	movs	r3, #0
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001882:	4938      	ldr	r1, [pc, #224]	@ (8001964 <HAL_GPIO_Init+0x2b0>)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018de:	4a24      	ldr	r2, [pc, #144]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80018e4:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 80018e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800190a:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001912:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 8001914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001918:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001938:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <HAL_GPIO_Init+0x2bc>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	f47f aeb7 	bne.w	80016c4 <HAL_GPIO_Init+0x10>
  }
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40010000 	.word	0x40010000
 8001968:	48000400 	.word	0x48000400
 800196c:	48000800 	.word	0x48000800
 8001970:	58000800 	.word	0x58000800

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e002      	b.n	8001998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_HSEM_IRQHandler+0x30>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_HSEM_IRQHandler+0x30>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4906      	ldr	r1, [pc, #24]	@ (80019d4 <HAL_HSEM_IRQHandler+0x30>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <HAL_HSEM_IRQHandler+0x30>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f807 	bl	80019d8 <HAL_HSEM_FreeCallback>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	58001500 	.word	0x58001500

080019d8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <HAL_PWR_EnableBkUpAccess+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a03      	ldr	r2, [pc, #12]	@ (8001a04 <HAL_PWR_EnableBkUpAccess+0x18>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	58000400 	.word	0x58000400

08001a08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_PWREx_GetVoltageRange+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	58000400 	.word	0x58000400

08001a20 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a30:	d101      	bne.n	8001a36 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	58000400 	.word	0x58000400

08001a44 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a8e:	d101      	bne.n	8001a94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ae8:	d101      	bne.n	8001aee <LL_RCC_HSE_IsReady+0x18>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_RCC_HSE_IsReady+0x1a>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b42:	d101      	bne.n	8001b48 <LL_RCC_HSI_IsReady+0x18>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <LL_RCC_HSI_IsReady+0x1a>
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	061b      	lsls	r3, r3, #24
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_LSE_IsReady+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_LSE_IsReady+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d101      	bne.n	8001bf4 <LL_RCC_LSI_IsReady+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_RCC_LSI_IsReady+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d101      	bne.n	8001c4c <LL_RCC_MSI_IsReady+0x16>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_RCC_MSI_IsReady+0x18>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d3e:	f023 020f 	bic.w	r2, r3, #15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e4c:	d101      	bne.n	8001e52 <LL_RCC_PLL_IsReady+0x18>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_RCC_PLL_IsReady+0x1a>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec8:	d101      	bne.n	8001ece <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eec:	d101      	bne.n	8001ef2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f0e:	d101      	bne.n	8001f14 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f30:	d101      	bne.n	8001f36 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e36f      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	f7ff fece 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 8001f56:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f58:	f7ff ffa2 	bl	8001ea0 <LL_RCC_PLL_GetMainSource>
 8001f5c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80c4 	beq.w	80020f4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3e>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d176      	bne.n	8002066 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d173      	bne.n	8002066 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e353      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x68>
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa6:	e006      	b.n	8001fb6 <HAL_RCC_OscConfig+0x76>
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d222      	bcs.n	8002000 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fd7a 	bl	8002ab8 <RCC_SetFlashLatencyFromMSIRange>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e331      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fe53 	bl	8001ca4 <LL_RCC_MSI_SetCalibTrimming>
 8001ffe:	e021      	b.n	8002044 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fe3a 	bl	8001ca4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fd3f 	bl	8002ab8 <RCC_SetFlashLatencyFromMSIRange>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e2f6      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002044:	f000 fcc2 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002048:	4603      	mov	r3, r0
 800204a:	4aa7      	ldr	r2, [pc, #668]	@ (80022e8 <HAL_RCC_OscConfig+0x3a8>)
 800204c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800204e:	4ba7      	ldr	r3, [pc, #668]	@ (80022ec <HAL_RCC_OscConfig+0x3ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe feaa 	bl	8000dac <HAL_InitTick>
 8002058:	4603      	mov	r3, r0
 800205a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d047      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	e2e5      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d02c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206e:	f7ff fdc6 	bl	8001bfe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002072:	f7fe ff89 	bl	8000f88 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800207a:	f7fe ff85 	bl	8000f88 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e2d2      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800208c:	f7ff fdd3 	bl	8001c36 <LL_RCC_MSI_IsReady>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f1      	beq.n	800207a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fdef 	bl	8001ca4 <LL_RCC_MSI_SetCalibTrimming>
 80020c6:	e015      	b.n	80020f4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c8:	f7ff fda7 	bl	8001c1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff5c 	bl	8000f88 <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d4:	f7fe ff58 	bl	8000f88 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e2a5      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020e6:	f7ff fda6 	bl	8001c36 <LL_RCC_MSI_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x194>
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020f2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d058      	beq.n	80021b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b08      	cmp	r3, #8
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x1d2>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d108      	bne.n	800211e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d14b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e289      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x204>
 800213e:	f7ff fcae 	bl	8001a9e <LL_RCC_HSE_Enable>
 8002142:	e00d      	b.n	8002160 <HAL_RCC_OscConfig+0x220>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800214c:	d104      	bne.n	8002158 <HAL_RCC_OscConfig+0x218>
 800214e:	f7ff fc79 	bl	8001a44 <LL_RCC_HSE_EnableTcxo>
 8002152:	f7ff fca4 	bl	8001a9e <LL_RCC_HSE_Enable>
 8002156:	e003      	b.n	8002160 <HAL_RCC_OscConfig+0x220>
 8002158:	f7ff fcaf 	bl	8001aba <LL_RCC_HSE_Disable>
 800215c:	f7ff fc80 	bl	8001a60 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe ff0e 	bl	8000f88 <HAL_GetTick>
 800216c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe ff0a 	bl	8000f88 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e257      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002182:	f7ff fca8 	bl	8001ad6 <LL_RCC_HSE_IsReady>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f1      	beq.n	8002170 <HAL_RCC_OscConfig+0x230>
 800218c:	e011      	b.n	80021b2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe fefb 	bl	8000f88 <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002196:	f7fe fef7 	bl	8000f88 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	@ 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e244      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021a8:	f7ff fc95 	bl	8001ad6 <LL_RCC_HSE_IsReady>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f1      	bne.n	8002196 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d046      	beq.n	800224c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x290>
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d10e      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e22a      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fcb6 	bl	8001b52 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021e6:	e031      	b.n	800224c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d019      	beq.n	8002224 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	f7ff fc82 	bl	8001af8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fec8 	bl	8000f88 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe fec4 	bl	8000f88 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e211      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800220e:	f7ff fc8f 	bl	8001b30 <LL_RCC_HSI_IsReady>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f1      	beq.n	80021fc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fc98 	bl	8001b52 <LL_RCC_HSI_SetCalibTrimming>
 8002222:	e013      	b.n	800224c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002224:	f7ff fc76 	bl	8001b14 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe feae 	bl	8000f88 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe feaa 	bl	8000f88 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1f7      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002242:	f7ff fc75 	bl	8001b30 <LL_RCC_HSI_IsReady>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f1      	bne.n	8002230 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d06e      	beq.n	8002336 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d056      	beq.n	800230e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002268:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	429a      	cmp	r2, r3
 8002276:	d031      	beq.n	80022dc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e1d0      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d013      	beq.n	80022c2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800229a:	f7ff fc8f 	bl	8001bbc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800229e:	f7fe fe73 	bl	8000f88 <HAL_GetTick>
 80022a2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a6:	f7fe fe6f 	bl	8000f88 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1bc      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80022b8:	f7ff fc90 	bl	8001bdc <LL_RCC_LSI_IsReady>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f1      	bne.n	80022a6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ca:	f023 0210 	bic.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022dc:	f7ff fc5e 	bl	8001b9c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fe52 	bl	8000f88 <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80022e6:	e00c      	b.n	8002302 <HAL_RCC_OscConfig+0x3c2>
 80022e8:	20000b18 	.word	0x20000b18
 80022ec:	20000b1c 	.word	0x20000b1c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7fe fe4a 	bl	8000f88 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b11      	cmp	r3, #17
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e197      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002302:	f7ff fc6b 	bl	8001bdc <LL_RCC_LSI_IsReady>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f1      	beq.n	80022f0 <HAL_RCC_OscConfig+0x3b0>
 800230c:	e013      	b.n	8002336 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230e:	f7ff fc55 	bl	8001bbc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7fe fe39 	bl	8000f88 <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231a:	f7fe fe35 	bl	8000f88 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b11      	cmp	r3, #17
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e182      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800232c:	f7ff fc56 	bl	8001bdc <LL_RCC_LSI_IsReady>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f1      	bne.n	800231a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80d8 	beq.w	80024f4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002344:	f7ff fb6c 	bl	8001a20 <LL_PWR_IsEnabledBkUpAccess>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d113      	bne.n	8002376 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800234e:	f7ff fb4d 	bl	80019ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fe19 	bl	8000f88 <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fe15 	bl	8000f88 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e162      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800236c:	f7ff fb58 	bl	8001a20 <LL_PWR_IsEnabledBkUpAccess>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f1      	beq.n	800235a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d07b      	beq.n	8002476 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b85      	cmp	r3, #133	@ 0x85
 8002384:	d003      	beq.n	800238e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fdf1 	bl	8000f88 <HAL_GetTick>
 80023a6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fde3 	bl	8000f88 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e12e      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023d4:	f7ff fbd1 	bl	8001b7a <LL_RCC_LSE_IsReady>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0ef      	beq.n	80023be <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b81      	cmp	r3, #129	@ 0x81
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b85      	cmp	r3, #133	@ 0x85
 80023ec:	d121      	bne.n	8002432 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fdcb 	bl	8000f88 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fdbd 	bl	8000f88 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e108      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ec      	beq.n	800240a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002430:	e060      	b.n	80024f4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fda9 	bl	8000f88 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002440:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fd9b 	bl	8000f88 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0e6      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ec      	bne.n	800244e <HAL_RCC_OscConfig+0x50e>
 8002474:	e03e      	b.n	80024f4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fd87 	bl	8000f88 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe fd79 	bl	8000f88 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0c4      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ec      	bne.n	8002492 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe fd66 	bl	8000f88 <HAL_GetTick>
 80024bc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fd58 	bl	8000f88 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0a3      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80024ea:	f7ff fb46 	bl	8001b7a <LL_RCC_LSE_IsReady>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ef      	bne.n	80024d4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8099 	beq.w	8002630 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	d06c      	beq.n	80025de <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	2b02      	cmp	r3, #2
 800250a:	d14b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	f7ff fc87 	bl	8001e1e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fd3a 	bl	8000f88 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fd36 	bl	8000f88 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b0a      	cmp	r3, #10
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e083      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800252a:	f7ff fc86 	bl	8001e3a <LL_RCC_PLL_IsReady>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f1      	bne.n	8002518 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b40      	ldr	r3, [pc, #256]	@ (800263c <HAL_RCC_OscConfig+0x6fc>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800254c:	0212      	lsls	r2, r2, #8
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002560:	430a      	orrs	r2, r1
 8002562:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002566:	4313      	orrs	r3, r2
 8002568:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256a:	f7ff fc4a 	bl	8001e02 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fd03 	bl	8000f88 <HAL_GetTick>
 8002582:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fcff 	bl	8000f88 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b0a      	cmp	r3, #10
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e04c      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002598:	f7ff fc4f 	bl	8001e3a <LL_RCC_PLL_IsReady>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f1      	beq.n	8002586 <HAL_RCC_OscConfig+0x646>
 80025a2:	e045      	b.n	8002630 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a4:	f7ff fc3b 	bl	8001e1e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fcee 	bl	8000f88 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fcea 	bl	8000f88 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b0a      	cmp	r3, #10
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e037      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80025c2:	f7ff fc3a 	bl	8001e3a <LL_RCC_PLL_IsReady>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f1      	bne.n	80025b0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <HAL_RCC_OscConfig+0x700>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
 80025dc:	e028      	b.n	8002630 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e023      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d115      	bne.n	800262c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260a:	429a      	cmp	r2, r3
 800260c:	d10e      	bne.n	800262c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	429a      	cmp	r2, r3
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	11c1808c 	.word	0x11c1808c
 8002640:	eefefffc 	.word	0xeefefffc

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e10f      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b89      	ldr	r3, [pc, #548]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d91b      	bls.n	800269e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b86      	ldr	r3, [pc, #536]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4984      	ldr	r1, [pc, #528]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002676:	f7fe fc87 	bl	8000f88 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267c:	e008      	b.n	8002690 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800267e:	f7fe fc83 	bl	8000f88 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0f3      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	4b7b      	ldr	r3, [pc, #492]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fb2a 	bl	8001d08 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026b4:	f7fe fc68 	bl	8000f88 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026bc:	f7fe fc64 	bl	8000f88 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0d4      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026ce:	f7ff fbf2 	bl	8001eb6 <LL_RCC_IsActiveFlag_HPRE>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f1      	beq.n	80026bc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fb20 	bl	8001d2e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fc4b 	bl	8000f88 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026f6:	f7fe fc47 	bl	8000f88 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0b7      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002708:	f7ff fbe6 	bl	8001ed8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f1      	beq.n	80026f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fb19 	bl	8001d5a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002728:	f7fe fc2e 	bl	8000f88 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002730:	f7fe fc2a 	bl	8000f88 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e09a      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002742:	f7ff fbdb 	bl	8001efc <LL_RCC_IsActiveFlag_PPRE1>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f1      	beq.n	8002730 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fb0e 	bl	8001d80 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002764:	f7fe fc10 	bl	8000f88 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800276c:	f7fe fc0c 	bl	8000f88 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e07c      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800277e:	f7ff fbce 	bl	8001f1e <LL_RCC_IsActiveFlag_PPRE2>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f1      	beq.n	800276c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d043      	beq.n	800281c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d106      	bne.n	80027aa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800279c:	f7ff f99b 	bl	8001ad6 <LL_RCC_HSE_IsReady>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11e      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e066      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80027b2:	f7ff fb42 	bl	8001e3a <LL_RCC_PLL_IsReady>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d113      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e05b      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80027c8:	f7ff fa35 	bl	8001c36 <LL_RCC_MSI_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e050      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80027d6:	f7ff f9ab 	bl	8001b30 <LL_RCC_HSI_IsReady>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e049      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fa6f 	bl	8001ccc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fbcb 	bl	8000f88 <HAL_GetTick>
 80027f2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f4:	e00a      	b.n	800280c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7fe fbc7 	bl	8000f88 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e035      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280c:	f7ff fa71 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1ec      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d21b      	bcs.n	8002862 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4913      	ldr	r1, [pc, #76]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283a:	f7fe fba5 	bl	8000f88 <HAL_GetTick>
 800283e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002840:	e008      	b.n	8002854 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002842:	f7fe fba1 	bl	8000f88 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e011      	b.n	8002878 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_RCC_ClockConfig+0x23c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d1ef      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002862:	f000 f8b3 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002866:	4603      	mov	r3, r0
 8002868:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <HAL_RCC_ClockConfig+0x240>)
 800286a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_ClockConfig+0x244>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fa9b 	bl	8000dac <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	58004000 	.word	0x58004000
 8002884:	20000b18 	.word	0x20000b18
 8002888:	20000b1c 	.word	0x20000b1c

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	f7ff fa2a 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 800289e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a0:	f7ff fafe 	bl	8001ea0 <LL_RCC_PLL_GetMainSource>
 80028a4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x2c>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d139      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d136      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80028b8:	f7ff f9cd 	bl	8001c56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x62>
 80028c2:	f7ff f9c8 	bl	8001c56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x4e>
 80028cc:	f7ff f9d3 	bl	8001c76 <LL_RCC_MSI_GetRange>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	e005      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80028da:	f7ff f9d7 	bl	8001c8c <LL_RCC_MSI_GetRangeAfterStandby>
 80028de:	4603      	mov	r3, r0
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4a36      	ldr	r2, [pc, #216]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x134>)
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	e014      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x8c>
 80028ee:	f7ff f9b2 	bl	8001c56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x7a>
 80028f8:	f7ff f9bd 	bl	8001c76 <LL_RCC_MSI_GetRange>
 80028fc:	4603      	mov	r3, r0
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	e005      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x86>
 8002906:	f7ff f9c1 	bl	8001c8c <LL_RCC_MSI_GetRangeAfterStandby>
 800290a:	4603      	mov	r3, r0
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a2b      	ldr	r2, [pc, #172]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d115      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002924:	e012      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d102      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e00c      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d109      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002938:	f7ff f8a0 	bl	8001a7c <LL_RCC_HSE_IsEnabledDiv2>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e001      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800294a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294c:	f7ff f9d1 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 8002950:	4603      	mov	r3, r0
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d12f      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002956:	f7ff faa3 	bl	8001ea0 <LL_RCC_PLL_GetMainSource>
 800295a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0xde>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d003      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0xe4>
 8002968:	e00d      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800296c:	60fb      	str	r3, [r7, #12]
        break;
 800296e:	e00d      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002970:	f7ff f884 	bl	8001a7c <LL_RCC_HSE_IsEnabledDiv2>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800297a:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800297c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002982:	60fb      	str	r3, [r7, #12]
        break;
 8002984:	e002      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	60fb      	str	r3, [r7, #12]
        break;
 800298a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800298c:	f7ff fa66 	bl	8001e5c <LL_RCC_PLL_GetN>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	fb03 f402 	mul.w	r4, r3, r2
 8002998:	f7ff fa77 	bl	8001e8a <LL_RCC_PLL_GetDivider>
 800299c:	4603      	mov	r3, r0
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	3301      	adds	r3, #1
 80029a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80029a6:	f7ff fa65 	bl	8001e74 <LL_RCC_PLL_GetR>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0f5b      	lsrs	r3, r3, #29
 80029ae:	3301      	adds	r3, #1
 80029b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80029b4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	0800cad0 	.word	0x0800cad0
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	01e84800 	.word	0x01e84800

080029cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b598      	push	{r3, r4, r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029d0:	f7ff ff5c 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80029d4:	4604      	mov	r4, r0
 80029d6:	f7ff f9e6 	bl	8001da6 <LL_RCC_GetAHBPrescaler>
 80029da:	4603      	mov	r3, r0
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a03      	ldr	r2, [pc, #12]	@ (80029f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd98      	pop	{r3, r4, r7, pc}
 80029f0:	0800ca70 	.word	0x0800ca70

080029f4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b598      	push	{r3, r4, r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029f8:	f7ff ffe8 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029fc:	4604      	mov	r4, r0
 80029fe:	f7ff f9ea 	bl	8001dd6 <LL_RCC_GetAPB1Prescaler>
 8002a02:	4603      	mov	r3, r0
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	4a03      	ldr	r2, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd98      	pop	{r3, r4, r7, pc}
 8002a14:	0800cab0 	.word	0x0800cab0

08002a18 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b598      	push	{r3, r4, r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a1c:	f7ff ffd6 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a20:	4604      	mov	r4, r0
 8002a22:	f7ff f9e3 	bl	8001dec <LL_RCC_GetAPB2Prescaler>
 8002a26:	4603      	mov	r3, r0
 8002a28:	0adb      	lsrs	r3, r3, #11
 8002a2a:	4a03      	ldr	r2, [pc, #12]	@ (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd98      	pop	{r3, r4, r7, pc}
 8002a38:	0800cab0 	.word	0x0800cab0

08002a3c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d02d      	beq.n	8002aa8 <HAL_RCC_GetClockConfig+0x6c>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02a      	beq.n	8002aa8 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	224f      	movs	r2, #79	@ 0x4f
 8002a56:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 5260 	and.w	r2, r3, #14336	@ 0x3800
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a90:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCC_GetClockConfig+0x78>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0207 	and.w	r2, r3, #7
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	601a      	str	r2, [r3, #0]
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	58004000 	.word	0x58004000

08002ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	4a10      	ldr	r2, [pc, #64]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002ad0:	f7ff f974 	bl	8001dbc <LL_RCC_GetAHB3Prescaler>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4a09      	ldr	r2, [pc, #36]	@ (8002b14 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9c      	lsrs	r4, r3, #18
 8002af4:	f7fe ff88 	bl	8001a08 <HAL_PWREx_GetVoltageRange>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	4620      	mov	r0, r4
 8002afe:	f000 f80b 	bl	8002b18 <RCC_SetFlashLatency>
 8002b02:	4603      	mov	r3, r0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}
 8002b0c:	0800cad0 	.word	0x0800cad0
 8002b10:	0800ca70 	.word	0x0800ca70
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	@ 0x38
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002b22:	4a3a      	ldr	r2, [pc, #232]	@ (8002c0c <RCC_SetFlashLatency+0xf4>)
 8002b24:	f107 0320 	add.w	r3, r7, #32
 8002b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b2c:	6018      	str	r0, [r3, #0]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002b32:	4a37      	ldr	r2, [pc, #220]	@ (8002c10 <RCC_SetFlashLatency+0xf8>)
 8002b34:	f107 0318 	add.w	r3, r7, #24
 8002b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3c:	6018      	str	r0, [r3, #0]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002b42:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <RCC_SetFlashLatency+0xfc>)
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b58:	d11b      	bne.n	8002b92 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b5e:	e014      	b.n	8002b8a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	3338      	adds	r3, #56	@ 0x38
 8002b66:	443b      	add	r3, r7
 8002b68:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d807      	bhi.n	8002b84 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3338      	adds	r3, #56	@ 0x38
 8002b7a:	443b      	add	r3, r7
 8002b7c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b82:	e021      	b.n	8002bc8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b86:	3301      	adds	r3, #1
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d9e7      	bls.n	8002b60 <RCC_SetFlashLatency+0x48>
 8002b90:	e01a      	b.n	8002bc8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b96:	e014      	b.n	8002bc2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	3338      	adds	r3, #56	@ 0x38
 8002b9e:	443b      	add	r3, r7
 8002ba0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d807      	bhi.n	8002bbc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3338      	adds	r3, #56	@ 0x38
 8002bb2:	443b      	add	r3, r7
 8002bb4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bba:	e005      	b.n	8002bc8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d9e7      	bls.n	8002b98 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <RCC_SetFlashLatency+0x100>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0207 	bic.w	r2, r3, #7
 8002bd0:	4911      	ldr	r1, [pc, #68]	@ (8002c18 <RCC_SetFlashLatency+0x100>)
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bd8:	f7fe f9d6 	bl	8000f88 <HAL_GetTick>
 8002bdc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bde:	e008      	b.n	8002bf2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002be0:	f7fe f9d2 	bl	8000f88 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e007      	b.n	8002c02 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <RCC_SetFlashLatency+0x100>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1ef      	bne.n	8002be0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3738      	adds	r7, #56	@ 0x38
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	0800c904 	.word	0x0800c904
 8002c10:	0800c90c 	.word	0x0800c90c
 8002c14:	0800c914 	.word	0x0800c914
 8002c18:	58004000 	.word	0x58004000

08002c1c <LL_RCC_LSE_IsReady>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d101      	bne.n	8002c34 <LL_RCC_LSE_IsReady+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_RCC_LSE_IsReady+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_SetUSARTClockSource>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	43db      	mvns	r3, r3
 8002c54:	401a      	ands	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <LL_RCC_SetI2SClockSource>:
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_SetLPUARTClockSource>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_SetI2CClockSource>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002ce6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_SetLPTIMClockSource>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_SetRNGClockSource>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <LL_RCC_SetADCClockSource>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_SetRTCClockSource>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_GetRTCClockSource>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_ForceBackupDomainReset>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002e10:	2300      	movs	r3, #0
 8002e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e14:	2300      	movs	r3, #0
 8002e16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d058      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002e24:	f7fe fde2 	bl	80019ec <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e28:	f7fe f8ae 	bl	8000f88 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e2e:	e009      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe f8aa 	bl	8000f88 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	74fb      	strb	r3, [r7, #19]
        break;
 8002e42:	e006      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e44:	4b7b      	ldr	r3, [pc, #492]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e50:	d1ee      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d13c      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002e58:	f7ff ffa7 	bl	8002daa <LL_RCC_GetRTCClockSource>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d00f      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e72:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e74:	f7ff ffa5 	bl	8002dc2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e78:	f7ff ffb3 	bl	8002de2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f87a 	bl	8000f88 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe f876 	bl	8000f88 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	74fb      	strb	r3, [r7, #19]
            break;
 8002eae:	e004      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002eb0:	f7ff feb4 	bl	8002c1c <LL_RCC_LSE_IsReady>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5b 	bl	8002d80 <LL_RCC_SetRTCClockSource>
 8002eca:	e004      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	74bb      	strb	r3, [r7, #18]
 8002ed0:	e001      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fea9 	bl	8002c3e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fe9e 	bl	8002c3e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fec0 	bl	8002c98 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fee6 	bl	8002cfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fedb 	bl	8002cfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fed0 	bl	8002cfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fea9 	bl	8002cc2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fe9e 	bl	8002cc2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe93 	bl	8002cc2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d011      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fe5e 	bl	8002c6e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fba:	d107      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d010      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fea5 	bl	8002d2c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ff4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ff8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d011      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fea3 	bl	8002d56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d107      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003028:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800302a:	7cbb      	ldrb	r3, [r7, #18]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	58000400 	.word	0x58000400

08003038 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003048:	4904      	ldr	r1, [pc, #16]	@ (800305c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	58000400 	.word	0x58000400

08003060 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	4a04      	ldr	r2, [pc, #16]	@ (800307c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800306c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	58000400 	.word	0x58000400

08003080 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308a:	4a04      	ldr	r2, [pc, #16]	@ (800309c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800308c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	58000400 	.word	0x58000400

080030a0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80030a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030aa:	619a      	str	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	58000400 	.word	0x58000400

080030b8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d101      	bne.n	80030cc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	58000400 	.word	0x58000400

080030dc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d101      	bne.n	80030f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	58000400 	.word	0x58000400

08003100 <LL_RCC_RF_DisableReset>:
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003110:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <LL_RCC_IsRFUnderReset>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003134:	d101      	bne.n	800313a <LL_RCC_IsRFUnderReset+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_RCC_IsRFUnderReset+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <LL_EXTI_EnableIT_32_63+0x24>)
 800314e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003152:	4905      	ldr	r1, [pc, #20]	@ (8003168 <LL_EXTI_EnableIT_32_63+0x24>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	58000800 	.word	0x58000800

0800316c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
    return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	e052      	b.n	8003228 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SUBGHZ_Init+0x2c>
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d109      	bne.n	80031ac <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fed8 	bl	8000f54 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80031a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80031a8:	f7ff ffcc 	bl	8003144 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d126      	bne.n	8003200 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80031b8:	f7ff ffa2 	bl	8003100 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80031bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <HAL_SUBGHZ_Init+0xc4>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	0cdb      	lsrs	r3, r3, #19
 80031ca:	2264      	movs	r2, #100	@ 0x64
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	609a      	str	r2, [r3, #8]
        break;
 80031e2:	e007      	b.n	80031f4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80031ea:	f7ff ff99 	bl	8003120 <LL_RCC_IsRFUnderReset>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ee      	bne.n	80031d2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80031f4:	f7ff ff34 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80031f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80031fc:	f7ff ff1c 	bl	8003038 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003200:	f7ff ff4e 	bl	80030a0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 faac 	bl	800376c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	719a      	strb	r2, [r3, #6]

  return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000b18 	.word	0x20000b18

08003234 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	460b      	mov	r3, r1
 8003242:	817b      	strh	r3, [r7, #10]
 8003244:	4613      	mov	r3, r2
 8003246:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	799b      	ldrb	r3, [r3, #6]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d14a      	bne.n	80032e8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	795b      	ldrb	r3, [r3, #5]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800325a:	2302      	movs	r3, #2
 800325c:	e045      	b.n	80032ea <HAL_SUBGHZ_WriteRegisters+0xb6>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2202      	movs	r2, #2
 8003268:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fb4c 	bl	8003908 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003270:	f7ff ff06 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003274:	210d      	movs	r1, #13
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa98 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	4619      	mov	r1, r3
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fa90 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800328c:	897b      	ldrh	r3, [r7, #10]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa8a 	bl	80037ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003298:	2300      	movs	r3, #0
 800329a:	82bb      	strh	r3, [r7, #20]
 800329c:	e00a      	b.n	80032b4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800329e:	8abb      	ldrh	r3, [r7, #20]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	4619      	mov	r1, r3
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fa7f 	bl	80037ac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80032ae:	8abb      	ldrh	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	82bb      	strh	r3, [r7, #20]
 80032b4:	8aba      	ldrh	r2, [r7, #20]
 80032b6:	893b      	ldrh	r3, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3f0      	bcc.n	800329e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80032bc:	f7ff fed0 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fb45 	bl	8003950 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
 80032d2:	e001      	b.n	80032d8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	715a      	strb	r2, [r3, #5]

    return status;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	e000      	b.n	80032ea <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	461a      	mov	r2, r3
 80032fe:	460b      	mov	r3, r1
 8003300:	817b      	strh	r3, [r7, #10]
 8003302:	4613      	mov	r3, r2
 8003304:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	799b      	ldrb	r3, [r3, #6]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d14a      	bne.n	80033aa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	795b      	ldrb	r3, [r3, #5]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800331c:	2302      	movs	r3, #2
 800331e:	e045      	b.n	80033ac <HAL_SUBGHZ_ReadRegisters+0xba>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 faee 	bl	8003908 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800332c:	f7ff fea8 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003330:	211d      	movs	r1, #29
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa3a 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	b29b      	uxth	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa32 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa2c 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003354:	2100      	movs	r1, #0
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fa28 	bl	80037ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800335c:	2300      	movs	r3, #0
 800335e:	82fb      	strh	r3, [r7, #22]
 8003360:	e009      	b.n	8003376 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa77 	bl	8003858 <SUBGHZSPI_Receive>
      pData++;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	3301      	adds	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003370:	8afb      	ldrh	r3, [r7, #22]
 8003372:	3301      	adds	r3, #1
 8003374:	82fb      	strh	r3, [r7, #22]
 8003376:	8afa      	ldrh	r2, [r7, #22]
 8003378:	893b      	ldrh	r3, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d3f1      	bcc.n	8003362 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800337e:	f7ff fe6f 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fae4 	bl	8003950 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e001      	b.n	800339a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	715a      	strb	r2, [r3, #5]

    return status;
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	e000      	b.n	80033ac <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	460b      	mov	r3, r1
 80033c2:	72fb      	strb	r3, [r7, #11]
 80033c4:	4613      	mov	r3, r2
 80033c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	799b      	ldrb	r3, [r3, #6]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d14a      	bne.n	8003468 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	795b      	ldrb	r3, [r3, #5]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e045      	b.n	800346a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fa8f 	bl	8003908 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80033ea:	7afb      	ldrb	r3, [r7, #11]
 80033ec:	2b84      	cmp	r3, #132	@ 0x84
 80033ee:	d002      	beq.n	80033f6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	2b94      	cmp	r3, #148	@ 0x94
 80033f4:	d103      	bne.n	80033fe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	711a      	strb	r2, [r3, #4]
 80033fc:	e002      	b.n	8003404 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003404:	f7ff fe3c 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	4619      	mov	r1, r3
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f9cd 	bl	80037ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	82bb      	strh	r3, [r7, #20]
 8003416:	e00a      	b.n	800342e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003418:	8abb      	ldrh	r3, [r7, #20]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f9c2 	bl	80037ac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003428:	8abb      	ldrh	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	82bb      	strh	r3, [r7, #20]
 800342e:	8aba      	ldrh	r2, [r7, #20]
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d3f0      	bcc.n	8003418 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003436:	f7ff fe13 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	2b84      	cmp	r3, #132	@ 0x84
 800343e:	d002      	beq.n	8003446 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fa85 	bl	8003950 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
 8003452:	e001      	b.n	8003458 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	715a      	strb	r2, [r3, #5]

    return status;
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	e000      	b.n	800346a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b088      	sub	sp, #32
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	461a      	mov	r2, r3
 800347e:	460b      	mov	r3, r1
 8003480:	72fb      	strb	r3, [r7, #11]
 8003482:	4613      	mov	r3, r2
 8003484:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	799b      	ldrb	r3, [r3, #6]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d13d      	bne.n	8003510 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	795b      	ldrb	r3, [r3, #5]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800349c:	2302      	movs	r3, #2
 800349e:	e038      	b.n	8003512 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa2e 	bl	8003908 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80034ac:	f7ff fde8 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	4619      	mov	r1, r3
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f979 	bl	80037ac <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80034ba:	2100      	movs	r1, #0
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f975 	bl	80037ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	82fb      	strh	r3, [r7, #22]
 80034c6:	e009      	b.n	80034dc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f9c4 	bl	8003858 <SUBGHZSPI_Receive>
      pData++;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	3301      	adds	r3, #1
 80034da:	82fb      	strh	r3, [r7, #22]
 80034dc:	8afa      	ldrh	r2, [r7, #22]
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3f1      	bcc.n	80034c8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034e4:	f7ff fdbc 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa31 	bl	8003950 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e001      	b.n	8003500 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	715a      	strb	r2, [r3, #5]

    return status;
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	e000      	b.n	8003512 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	461a      	mov	r2, r3
 8003526:	460b      	mov	r3, r1
 8003528:	72fb      	strb	r3, [r7, #11]
 800352a:	4613      	mov	r3, r2
 800352c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	799b      	ldrb	r3, [r3, #6]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d13e      	bne.n	80035b6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	795b      	ldrb	r3, [r3, #5]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003540:	2302      	movs	r3, #2
 8003542:	e039      	b.n	80035b8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f9dc 	bl	8003908 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003550:	f7ff fd96 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003554:	210e      	movs	r1, #14
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f928 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800355c:	7afb      	ldrb	r3, [r7, #11]
 800355e:	4619      	mov	r1, r3
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f923 	bl	80037ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003566:	2300      	movs	r3, #0
 8003568:	82bb      	strh	r3, [r7, #20]
 800356a:	e00a      	b.n	8003582 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800356c:	8abb      	ldrh	r3, [r7, #20]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4619      	mov	r1, r3
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f918 	bl	80037ac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800357c:	8abb      	ldrh	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	82bb      	strh	r3, [r7, #20]
 8003582:	8aba      	ldrh	r2, [r7, #20]
 8003584:	893b      	ldrh	r3, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d3f0      	bcc.n	800356c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800358a:	f7ff fd69 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f9de 	bl	8003950 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
 80035a0:	e001      	b.n	80035a6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	715a      	strb	r2, [r3, #5]

    return status;
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	e000      	b.n	80035b8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	72fb      	strb	r3, [r7, #11]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	799b      	ldrb	r3, [r3, #6]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d141      	bne.n	8003666 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	795b      	ldrb	r3, [r3, #5]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_SUBGHZ_ReadBuffer+0x2e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e03c      	b.n	8003668 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f987 	bl	8003908 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80035fa:	f7ff fd41 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80035fe:	211e      	movs	r1, #30
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f8d3 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	4619      	mov	r1, r3
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f8ce 	bl	80037ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003610:	2100      	movs	r1, #0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f8ca 	bl	80037ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	82fb      	strh	r3, [r7, #22]
 800361c:	e009      	b.n	8003632 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f919 	bl	8003858 <SUBGHZSPI_Receive>
      pData++;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	3301      	adds	r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800362c:	8afb      	ldrh	r3, [r7, #22]
 800362e:	3301      	adds	r3, #1
 8003630:	82fb      	strh	r3, [r7, #22]
 8003632:	8afa      	ldrh	r2, [r7, #22]
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d3f1      	bcc.n	800361e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800363a:	f7ff fd11 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f986 	bl	8003950 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e001      	b.n	8003656 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	715a      	strb	r2, [r3, #5]

    return status;
 8003662:	7ffb      	ldrb	r3, [r7, #31]
 8003664:	e000      	b.n	8003668 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003678:	2300      	movs	r3, #0
 800367a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800367c:	f107 020c 	add.w	r2, r7, #12
 8003680:	2302      	movs	r3, #2
 8003682:	2112      	movs	r1, #18
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fef4 	bl	8003472 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800368a:	7b3b      	ldrb	r3, [r7, #12]
 800368c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800368e:	89fb      	ldrh	r3, [r7, #14]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	b21a      	sxth	r2, r3
 8003694:	7b7b      	ldrb	r3, [r7, #13]
 8003696:	b21b      	sxth	r3, r3
 8003698:	4313      	orrs	r3, r2
 800369a:	b21b      	sxth	r3, r3
 800369c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800369e:	f107 020c 	add.w	r2, r7, #12
 80036a2:	2302      	movs	r3, #2
 80036a4:	2102      	movs	r1, #2
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe84 	bl	80033b4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80036ac:	89fb      	ldrh	r3, [r7, #14]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f008 f9f2 	bl	800baa0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f008 f9f8 	bl	800babc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80036cc:	89fb      	ldrh	r3, [r7, #14]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f008 fa48 	bl	800bb6c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f008 fa4e 	bl	800bb88 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f008 fa54 	bl	800bba4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80036fc:	89fb      	ldrh	r3, [r7, #14]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f008 fa22 	bl	800bb50 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800370c:	89fb      	ldrh	r3, [r7, #14]
 800370e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f008 f9de 	bl	800bad8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003730:	2101      	movs	r1, #1
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f008 f9de 	bl	800baf4 <HAL_SUBGHZ_CADStatusCallback>
 8003738:	e003      	b.n	8003742 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800373a:	2100      	movs	r1, #0
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f008 f9d9 	bl	800baf4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003742:	89fb      	ldrh	r3, [r7, #14]
 8003744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f008 f9ef 	bl	800bb30 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f008 fa2f 	bl	800bbc0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <SUBGHZSPI_Init+0x3c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <SUBGHZSPI_Init+0x3c>)
 800377a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003780:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <SUBGHZSPI_Init+0x3c>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003788:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800378a:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <SUBGHZSPI_Init+0x3c>)
 800378c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003790:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <SUBGHZSPI_Init+0x3c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <SUBGHZSPI_Init+0x3c>)
 8003798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800379c:	6013      	str	r3, [r2, #0]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	58010000 	.word	0x58010000

080037ac <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80037bc:	4b23      	ldr	r3, [pc, #140]	@ (800384c <SUBGHZSPI_Transmit+0xa0>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	0cdb      	lsrs	r3, r3, #19
 80037ca:	2264      	movs	r2, #100	@ 0x64
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	609a      	str	r2, [r3, #8]
      break;
 80037e2:	e008      	b.n	80037f6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80037ea:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <SUBGHZSPI_Transmit+0xa4>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d1ed      	bne.n	80037d2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80037f6:	4b17      	ldr	r3, [pc, #92]	@ (8003854 <SUBGHZSPI_Transmit+0xa8>)
 80037f8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003800:	4b12      	ldr	r3, [pc, #72]	@ (800384c <SUBGHZSPI_Transmit+0xa0>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	0cdb      	lsrs	r3, r3, #19
 800380e:	2264      	movs	r2, #100	@ 0x64
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	609a      	str	r2, [r3, #8]
      break;
 8003826:	e008      	b.n	800383a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3b01      	subs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800382e:	4b08      	ldr	r3, [pc, #32]	@ (8003850 <SUBGHZSPI_Transmit+0xa4>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d1ed      	bne.n	8003816 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <SUBGHZSPI_Transmit+0xa4>)
 800383c:	68db      	ldr	r3, [r3, #12]

  return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003840:	4618      	mov	r0, r3
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000b18 	.word	0x20000b18
 8003850:	58010000 	.word	0x58010000
 8003854:	5801000c 	.word	0x5801000c

08003858 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003866:	4b25      	ldr	r3, [pc, #148]	@ (80038fc <SUBGHZSPI_Receive+0xa4>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	0cdb      	lsrs	r3, r3, #19
 8003874:	2264      	movs	r2, #100	@ 0x64
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	609a      	str	r2, [r3, #8]
      break;
 800388c:	e008      	b.n	80038a0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003894:	4b1a      	ldr	r3, [pc, #104]	@ (8003900 <SUBGHZSPI_Receive+0xa8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d1ed      	bne.n	800387c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80038a0:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <SUBGHZSPI_Receive+0xac>)
 80038a2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	22ff      	movs	r2, #255	@ 0xff
 80038a8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80038aa:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <SUBGHZSPI_Receive+0xa4>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	0cdb      	lsrs	r3, r3, #19
 80038b8:	2264      	movs	r2, #100	@ 0x64
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	609a      	str	r2, [r3, #8]
      break;
 80038d0:	e008      	b.n	80038e4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <SUBGHZSPI_Receive+0xa8>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d1ed      	bne.n	80038c0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80038e4:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <SUBGHZSPI_Receive+0xa8>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	701a      	strb	r2, [r3, #0]

  return status;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000b18 	.word	0x20000b18
 8003900:	58010000 	.word	0x58010000
 8003904:	5801000c 	.word	0x5801000c

08003908 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	791b      	ldrb	r3, [r3, #4]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d111      	bne.n	800393c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <SUBGHZ_CheckDeviceReady+0x44>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003928:	f7ff fbaa 	bl	8003080 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f9      	bne.n	800392c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003938:	f7ff fb92 	bl	8003060 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f807 	bl	8003950 <SUBGHZ_WaitOnBusy>
 8003942:	4603      	mov	r3, r0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000b18 	.word	0x20000b18

08003950 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800395c:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <SUBGHZ_WaitOnBusy+0x58>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	0d1b      	lsrs	r3, r3, #20
 800396a:	2264      	movs	r2, #100	@ 0x64
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003972:	f7ff fbb3 	bl	80030dc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003976:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e009      	b.n	800399e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3b01      	subs	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003990:	f7ff fb92 	bl	80030b8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	2b01      	cmp	r3, #1
 800399c:	d0e9      	beq.n	8003972 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000b18 	.word	0x20000b18

080039ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e049      	b.n	8003a52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f841 	bl	8003a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f000 f9ce 	bl	8003d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d001      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e036      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <HAL_TIM_Base_Start_IT+0x90>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x44>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d115      	bne.n	8003adc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_TIM_Base_Start_IT+0x94>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d015      	beq.n	8003aee <HAL_TIM_Base_Start_IT+0x82>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac8:	d011      	beq.n	8003aee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ada:	e008      	b.n	8003aee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e000      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	00010007 	.word	0x00010007

08003b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f904 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8f7 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f906 	bl	8003d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0204 	mvn.w	r2, #4
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8da 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8cd 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f8dc 	bl	8003d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0208 	mvn.w	r2, #8
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8b0 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8a3 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f8b2 	bl	8003d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2208      	movs	r2, #8
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f886 	bl	8003d54 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f879 	bl	8003d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f888 	bl	8003d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0201 	mvn.w	r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f82c 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca0:	2b80      	cmp	r3, #128	@ 0x80
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8d7 	bl	8003e62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b80      	cmp	r3, #128	@ 0x80
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8c9 	bl	8003e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cec:	2b40      	cmp	r3, #64	@ 0x40
 8003cee:	d10e      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	2b40      	cmp	r3, #64	@ 0x40
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f835 	bl	8003d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d10e      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0220 	mvn.w	r2, #32
 8003d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f88b 	bl	8003e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
	...

08003d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <TIM_Base_SetConfig+0xb8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0x20>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003daa:	d108      	bne.n	8003dbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a20      	ldr	r2, [pc, #128]	@ (8003e44 <TIM_Base_SetConfig+0xb8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <TIM_Base_SetConfig+0x52>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dcc:	d007      	beq.n	8003dde <TIM_Base_SetConfig+0x52>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e48 <TIM_Base_SetConfig+0xbc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_Base_SetConfig+0x52>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e4c <TIM_Base_SetConfig+0xc0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0b      	ldr	r2, [pc, #44]	@ (8003e44 <TIM_Base_SetConfig+0xb8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0xa0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <TIM_Base_SetConfig+0xbc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0xa0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a09      	ldr	r2, [pc, #36]	@ (8003e4c <TIM_Base_SetConfig+0xc0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800

08003e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <LL_RCC_GetUSARTClockSource>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	401a      	ands	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	4313      	orrs	r3, r2
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_GetLPUARTClockSource>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4013      	ands	r3, r2
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e042      	b.n	8003f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fd f99d 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2224      	movs	r2, #36	@ 0x24
 8003ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fcb8 	bl	8004880 <UART_SetConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e022      	b.n	8003f60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 ff20 	bl	8004d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 ffa6 	bl	8004eaa <UART_CheckIdleState>
 8003f5e:	4603      	mov	r3, r0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	@ 0x28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d173      	bne.n	800406a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_UART_Transmit+0x26>
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06c      	b.n	800406c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2221      	movs	r2, #33	@ 0x21
 8003f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fc fff1 	bl	8000f88 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x6c>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fdc:	e02c      	b.n	8004038 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2180      	movs	r1, #128	@ 0x80
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 ffac 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e039      	b.n	800406c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	3302      	adds	r3, #2
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	e007      	b.n	8004026 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	3301      	adds	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1cc      	bne.n	8003fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2200      	movs	r2, #0
 800404c:	2140      	movs	r1, #64	@ 0x40
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 ff79 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e006      	b.n	800406c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800408a:	2b20      	cmp	r3, #32
 800408c:	f040 80b1 	bne.w	80041f2 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_UART_Receive+0x28>
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0a9      	b.n	80041f4 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2222      	movs	r2, #34	@ 0x22
 80040ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fc ff67 	bl	8000f88 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d4:	d10e      	bne.n	80040f4 <HAL_UART_Receive+0x80>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <HAL_UART_Receive+0x76>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80040e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040e8:	e02d      	b.n	8004146 <HAL_UART_Receive+0xd2>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	@ 0xff
 80040ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040f2:	e028      	b.n	8004146 <HAL_UART_Receive+0xd2>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_UART_Receive+0xa4>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_UART_Receive+0x9a>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	22ff      	movs	r2, #255	@ 0xff
 8004108:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800410c:	e01b      	b.n	8004146 <HAL_UART_Receive+0xd2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	227f      	movs	r2, #127	@ 0x7f
 8004112:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004116:	e016      	b.n	8004146 <HAL_UART_Receive+0xd2>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004120:	d10d      	bne.n	800413e <HAL_UART_Receive+0xca>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <HAL_UART_Receive+0xc0>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	227f      	movs	r2, #127	@ 0x7f
 800412e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004132:	e008      	b.n	8004146 <HAL_UART_Receive+0xd2>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	223f      	movs	r2, #63	@ 0x3f
 8004138:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800413c:	e003      	b.n	8004146 <HAL_UART_Receive+0xd2>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800414c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004156:	d108      	bne.n	800416a <HAL_UART_Receive+0xf6>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e003      	b.n	8004172 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004172:	e032      	b.n	80041da <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2200      	movs	r2, #0
 800417c:	2120      	movs	r1, #32
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fee1 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e032      	b.n	80041f4 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10c      	bne.n	80041ae <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	b29a      	uxth	r2, r3
 800419c:	8a7b      	ldrh	r3, [r7, #18]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3302      	adds	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e00c      	b.n	80041c8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	8a7b      	ldrh	r3, [r7, #18]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4013      	ands	r3, r2
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3301      	adds	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1c6      	bne.n	8004174 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004222:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004226:	f640 030f 	movw	r3, #2063	@ 0x80f
 800422a:	4013      	ands	r3, r2
 800422c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11b      	bne.n	8004270 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 82e3 	beq.w	800482c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
      }
      return;
 800426e:	e2dd      	b.n	800482c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8123 	beq.w	80044c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800427a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800427e:	4b8d      	ldr	r3, [pc, #564]	@ (80044b4 <HAL_UART_IRQHandler+0x2b8>)
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800428a:	4b8b      	ldr	r3, [pc, #556]	@ (80044b8 <HAL_UART_IRQHandler+0x2bc>)
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8116 	beq.w	80044c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_UART_IRQHandler+0xc8>
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d011      	beq.n	80042f4 <HAL_UART_IRQHandler+0xf8>
 80042d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2202      	movs	r2, #2
 80042e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <HAL_UART_IRQHandler+0x128>
 8004300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00b      	beq.n	8004324 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2204      	movs	r2, #4
 8004312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f043 0202 	orr.w	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d017      	beq.n	8004360 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800433c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004340:	4b5c      	ldr	r3, [pc, #368]	@ (80044b4 <HAL_UART_IRQHandler+0x2b8>)
 8004342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2208      	movs	r2, #8
 800434e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <HAL_UART_IRQHandler+0x196>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8249 	beq.w	8004830 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d013      	beq.n	80043d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	d005      	beq.n	80043f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d054      	beq.n	80044a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fe6d 	bl	80050d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b40      	cmp	r3, #64	@ 0x40
 8004408:	d146      	bne.n	8004498 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004436:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800443a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800444e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1d9      	bne.n	800440a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004466:	4a15      	ldr	r2, [pc, #84]	@ (80044bc <HAL_UART_IRQHandler+0x2c0>)
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd f8c0 	bl	80015f6 <HAL_DMA_Abort_IT>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d019      	beq.n	80044b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800448a:	4610      	mov	r0, r2
 800448c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448e:	e00f      	b.n	80044b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f9e0 	bl	8004856 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004496:	e00b      	b.n	80044b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f9dc 	bl	8004856 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449e:	e007      	b.n	80044b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9d8 	bl	8004856 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80044ae:	e1bf      	b.n	8004830 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	bf00      	nop
    return;
 80044b2:	e1bd      	b.n	8004830 <HAL_UART_IRQHandler+0x634>
 80044b4:	10000001 	.word	0x10000001
 80044b8:	04000120 	.word	0x04000120
 80044bc:	080051a1 	.word	0x080051a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f040 8153 	bne.w	8004770 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 814c 	beq.w	8004770 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8145 	beq.w	8004770 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2210      	movs	r2, #16
 80044ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	f040 80bb 	bne.w	8004674 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800450c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 818f 	beq.w	8004834 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800451c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004520:	429a      	cmp	r2, r3
 8004522:	f080 8187 	bcs.w	8004834 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 8087 	bne.w	8004652 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800455c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800456e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004572:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800457a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1da      	bne.n	8004544 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3308      	adds	r3, #8
 8004594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800459e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e1      	bne.n	800458e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e3      	bne.n	80045ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800461e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004620:	f023 0310 	bic.w	r3, r3, #16
 8004624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004632:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004634:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004638:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e4      	bne.n	8004610 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc ff74 	bl	800153a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004664:	b29b      	uxth	r3, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8fb 	bl	8004868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004672:	e0df      	b.n	8004834 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004680:	b29b      	uxth	r3, r3
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80d1 	beq.w	8004838 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80cc 	beq.w	8004838 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e4      	bne.n	80046a0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3308      	adds	r3, #8
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	623b      	str	r3, [r7, #32]
   return(result);
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e1      	bne.n	80046d6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60fb      	str	r3, [r7, #12]
   return(result);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e4      	bne.n	8004726 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f87d 	bl	8004868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800476e:	e063      	b.n	8004838 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <HAL_UART_IRQHandler+0x59e>
 800477c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004790:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fd45 	bl	8005222 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004798:	e051      	b.n	800483e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d014      	beq.n	80047d0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d105      	bne.n	80047be <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03a      	beq.n	800483c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
    }
    return;
 80047ce:	e035      	b.n	800483c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <HAL_UART_IRQHandler+0x5f4>
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fcef 	bl	80051cc <UART_EndTransmit_IT>
    return;
 80047ee:	e026      	b.n	800483e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_UART_IRQHandler+0x614>
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004800:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fd1c 	bl	8005246 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800480e:	e016      	b.n	800483e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <HAL_UART_IRQHandler+0x642>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004820:	2b00      	cmp	r3, #0
 8004822:	da0c      	bge.n	800483e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fd05 	bl	8005234 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800482a:	e008      	b.n	800483e <HAL_UART_IRQHandler+0x642>
      return;
 800482c:	bf00      	nop
 800482e:	e006      	b.n	800483e <HAL_UART_IRQHandler+0x642>
    return;
 8004830:	bf00      	nop
 8004832:	e004      	b.n	800483e <HAL_UART_IRQHandler+0x642>
      return;
 8004834:	bf00      	nop
 8004836:	e002      	b.n	800483e <HAL_UART_IRQHandler+0x642>
      return;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <HAL_UART_IRQHandler+0x642>
    return;
 800483c:	bf00      	nop
  }
}
 800483e:	37e8      	adds	r7, #232	@ 0xe8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
	...

08004880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b08c      	sub	sp, #48	@ 0x30
 8004886:	af00      	add	r7, sp, #0
 8004888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	431a      	orrs	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	431a      	orrs	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b94      	ldr	r3, [pc, #592]	@ (8004b00 <UART_SetConfig+0x280>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a89      	ldr	r2, [pc, #548]	@ (8004b04 <UART_SetConfig+0x284>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e8:	4313      	orrs	r3, r2
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80048f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004900:	430b      	orrs	r3, r1
 8004902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490a:	f023 010f 	bic.w	r1, r3, #15
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7a      	ldr	r2, [pc, #488]	@ (8004b08 <UART_SetConfig+0x288>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d127      	bne.n	8004974 <UART_SetConfig+0xf4>
 8004924:	2003      	movs	r0, #3
 8004926:	f7ff faae 	bl	8003e86 <LL_RCC_GetUSARTClockSource>
 800492a:	4603      	mov	r3, r0
 800492c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004930:	2b03      	cmp	r3, #3
 8004932:	d81b      	bhi.n	800496c <UART_SetConfig+0xec>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <UART_SetConfig+0xbc>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	0800494d 	.word	0x0800494d
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004955 	.word	0x08004955
 8004948:	08004965 	.word	0x08004965
 800494c:	2301      	movs	r3, #1
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004952:	e080      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004954:	2302      	movs	r3, #2
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495a:	e07c      	b.n	8004a56 <UART_SetConfig+0x1d6>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004962:	e078      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e074      	b.n	8004a56 <UART_SetConfig+0x1d6>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e070      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a64      	ldr	r2, [pc, #400]	@ (8004b0c <UART_SetConfig+0x28c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d138      	bne.n	80049f0 <UART_SetConfig+0x170>
 800497e:	200c      	movs	r0, #12
 8004980:	f7ff fa81 	bl	8003e86 <LL_RCC_GetUSARTClockSource>
 8004984:	4603      	mov	r3, r0
 8004986:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d82c      	bhi.n	80049e8 <UART_SetConfig+0x168>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <UART_SetConfig+0x114>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049e9 	.word	0x080049e9
 800499c:	080049e9 	.word	0x080049e9
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049e9 	.word	0x080049e9
 80049ac:	080049e9 	.word	0x080049e9
 80049b0:	080049e9 	.word	0x080049e9
 80049b4:	080049d1 	.word	0x080049d1
 80049b8:	080049e9 	.word	0x080049e9
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049e1 	.word	0x080049e1
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ce:	e042      	b.n	8004a56 <UART_SetConfig+0x1d6>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d6:	e03e      	b.n	8004a56 <UART_SetConfig+0x1d6>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049de:	e03a      	b.n	8004a56 <UART_SetConfig+0x1d6>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e6:	e036      	b.n	8004a56 <UART_SetConfig+0x1d6>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ee:	e032      	b.n	8004a56 <UART_SetConfig+0x1d6>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a43      	ldr	r2, [pc, #268]	@ (8004b04 <UART_SetConfig+0x284>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d12a      	bne.n	8004a50 <UART_SetConfig+0x1d0>
 80049fa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80049fe:	f7ff fa54 	bl	8003eaa <LL_RCC_GetLPUARTClockSource>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a08:	d01a      	beq.n	8004a40 <UART_SetConfig+0x1c0>
 8004a0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a0e:	d81b      	bhi.n	8004a48 <UART_SetConfig+0x1c8>
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a14:	d00c      	beq.n	8004a30 <UART_SetConfig+0x1b0>
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1a:	d815      	bhi.n	8004a48 <UART_SetConfig+0x1c8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <UART_SetConfig+0x1a8>
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a24:	d008      	beq.n	8004a38 <UART_SetConfig+0x1b8>
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x1c8>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2e:	e012      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a36:	e00e      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	e00a      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	e006      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4e:	e002      	b.n	8004a56 <UART_SetConfig+0x1d6>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b04 <UART_SetConfig+0x284>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	f040 80a4 	bne.w	8004baa <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d823      	bhi.n	8004ab2 <UART_SetConfig+0x232>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x1f0>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004aa3 	.word	0x08004aa3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004ab3 	.word	0x08004ab3
 8004a8c:	08004ab3 	.word	0x08004ab3
 8004a90:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a94:	f7fd ffae 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <UART_SetConfig+0x290>)
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fd fef3 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8004aa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004abc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8137 	beq.w	8004d34 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	4a12      	ldr	r2, [pc, #72]	@ (8004b14 <UART_SetConfig+0x294>)
 8004acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d305      	bcc.n	8004af6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d910      	bls.n	8004b18 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004afc:	e11a      	b.n	8004d34 <UART_SetConfig+0x4b4>
 8004afe:	bf00      	nop
 8004b00:	cfff69f3 	.word	0xcfff69f3
 8004b04:	40008000 	.word	0x40008000
 8004b08:	40013800 	.word	0x40013800
 8004b0c:	40004400 	.word	0x40004400
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	0800cb3c 	.word	0x0800cb3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	60fa      	str	r2, [r7, #12]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	4a8e      	ldr	r2, [pc, #568]	@ (8004d60 <UART_SetConfig+0x4e0>)
 8004b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b3a:	f7fb fb29 	bl	8000190 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	020b      	lsls	r3, r1, #8
 8004b50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b54:	0202      	lsls	r2, r0, #8
 8004b56:	6979      	ldr	r1, [r7, #20]
 8004b58:	6849      	ldr	r1, [r1, #4]
 8004b5a:	0849      	lsrs	r1, r1, #1
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4605      	mov	r5, r0
 8004b62:	eb12 0804 	adds.w	r8, r2, r4
 8004b66:	eb43 0905 	adc.w	r9, r3, r5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	469a      	mov	sl, r3
 8004b72:	4693      	mov	fp, r2
 8004b74:	4652      	mov	r2, sl
 8004b76:	465b      	mov	r3, fp
 8004b78:	4640      	mov	r0, r8
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	f7fb fb08 	bl	8000190 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8e:	d308      	bcc.n	8004ba2 <UART_SetConfig+0x322>
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b96:	d204      	bcs.n	8004ba2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e0c8      	b.n	8004d34 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ba8:	e0c4      	b.n	8004d34 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb2:	d167      	bne.n	8004c84 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d828      	bhi.n	8004c0e <UART_SetConfig+0x38e>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <UART_SetConfig+0x344>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fd ff04 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bee:	e014      	b.n	8004c1a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fd ff12 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bf6:	e010      	b.n	8004c1a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d64 <UART_SetConfig+0x4e4>)
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bfc:	e00d      	b.n	8004c1a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fd fe45 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8004c02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c0c:	e005      	b.n	8004c1a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8089 	beq.w	8004d34 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	4a4e      	ldr	r2, [pc, #312]	@ (8004d60 <UART_SetConfig+0x4e0>)
 8004c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d916      	bls.n	8004c7c <UART_SetConfig+0x3fc>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d212      	bcs.n	8004c7c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f023 030f 	bic.w	r3, r3, #15
 8004c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	8bfb      	ldrh	r3, [r7, #30]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	8bfa      	ldrh	r2, [r7, #30]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	e05b      	b.n	8004d34 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c82:	e057      	b.n	8004d34 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d828      	bhi.n	8004cde <UART_SetConfig+0x45e>
 8004c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c94 <UART_SetConfig+0x414>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc9 	.word	0x08004cc9
 8004ca0:	08004cdf 	.word	0x08004cdf
 8004ca4:	08004ccf 	.word	0x08004ccf
 8004ca8:	08004cdf 	.word	0x08004cdf
 8004cac:	08004cdf 	.word	0x08004cdf
 8004cb0:	08004cdf 	.word	0x08004cdf
 8004cb4:	08004cd7 	.word	0x08004cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fd fe9c 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cbe:	e014      	b.n	8004cea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7fd feaa 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cc6:	e010      	b.n	8004cea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc8:	4b26      	ldr	r3, [pc, #152]	@ (8004d64 <UART_SetConfig+0x4e4>)
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ccc:	e00d      	b.n	8004cea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cce:	f7fd fddd 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8004cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cd4:	e009      	b.n	8004cea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cdc:	e005      	b.n	8004cea <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d021      	beq.n	8004d34 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <UART_SetConfig+0x4e0>)
 8004cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d909      	bls.n	8004d2e <UART_SetConfig+0x4ae>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d20:	d205      	bcs.n	8004d2e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e002      	b.n	8004d34 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	@ 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop
 8004d60:	0800cb3c 	.word	0x0800cb3c
 8004d64:	00f42400 	.word	0x00f42400

08004d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e66:	d10a      	bne.n	8004e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af02      	add	r7, sp, #8
 8004eb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eba:	f7fc f865 	bl	8000f88 <HAL_GetTick>
 8004ebe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d10e      	bne.n	8004eec <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ece:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f832 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e028      	b.n	8004f3e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d10e      	bne.n	8004f18 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f81c 	bl	8004f46 <UART_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e012      	b.n	8004f3e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b09c      	sub	sp, #112	@ 0x70
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f56:	e0a9      	b.n	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	f000 80a5 	beq.w	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fc f811 	bl	8000f88 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d140      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f88:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f98:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004fca:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004fcc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e069      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d051      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005016:	d149      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005040:	637b      	str	r3, [r7, #52]	@ 0x34
 8005042:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005074:	623a      	str	r2, [r7, #32]
 8005076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e010      	b.n	80050ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f43f af46 	beq.w	8004f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3770      	adds	r7, #112	@ 0x70
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b095      	sub	sp, #84	@ 0x54
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80050fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3308      	adds	r3, #8
 8005116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005134:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800513a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e3      	bne.n	8005110 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d118      	bne.n	8005182 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	60bb      	str	r3, [r7, #8]
   return(result);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 0310 	bic.w	r3, r3, #16
 8005164:	647b      	str	r3, [r7, #68]	@ 0x44
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6979      	ldr	r1, [r7, #20]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	613b      	str	r3, [r7, #16]
   return(result);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005196:	bf00      	nop
 8005198:	3754      	adds	r7, #84	@ 0x54
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fb49 	bl	8004856 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e6      	bne.n	80051d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fb15 	bl	8004844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800521a:	bf00      	nop
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_UARTEx_EnableFifoMode+0x16>
 800526a:	2302      	movs	r3, #2
 800526c:	e02b      	b.n	80052c6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2224      	movs	r2, #36	@ 0x24
 800527a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800529c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80052a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f88a 	bl	80053c8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e02d      	b.n	8005342 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2224      	movs	r2, #36	@ 0x24
 80052f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f850 	bl	80053c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800535e:	2302      	movs	r3, #2
 8005360:	e02d      	b.n	80053be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2224      	movs	r2, #36	@ 0x24
 800536e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f812 	bl	80053c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053e8:	e031      	b.n	800544e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ea:	2308      	movs	r3, #8
 80053ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053ee:	2308      	movs	r3, #8
 80053f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	0e5b      	lsrs	r3, r3, #25
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	0f5b      	lsrs	r3, r3, #29
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	7b3a      	ldrb	r2, [r7, #12]
 8005416:	4910      	ldr	r1, [pc, #64]	@ (8005458 <UARTEx_SetNbDataToProcess+0x90>)
 8005418:	5c8a      	ldrb	r2, [r1, r2]
 800541a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800541e:	7b3a      	ldrb	r2, [r7, #12]
 8005420:	490e      	ldr	r1, [pc, #56]	@ (800545c <UARTEx_SetNbDataToProcess+0x94>)
 8005422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005424:	fb93 f3f2 	sdiv	r3, r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	7b7a      	ldrb	r2, [r7, #13]
 8005434:	4908      	ldr	r1, [pc, #32]	@ (8005458 <UARTEx_SetNbDataToProcess+0x90>)
 8005436:	5c8a      	ldrb	r2, [r1, r2]
 8005438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800543c:	7b7a      	ldrb	r2, [r7, #13]
 800543e:	4907      	ldr	r1, [pc, #28]	@ (800545c <UARTEx_SetNbDataToProcess+0x94>)
 8005440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005442:	fb93 f3f2 	sdiv	r3, r3, r2
 8005446:	b29a      	uxth	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	0800cb54 	.word	0x0800cb54
 800545c:	0800cb5c 	.word	0x0800cb5c

08005460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005472:	f3ef 8305 	mrs	r3, IPSR
 8005476:	60bb      	str	r3, [r7, #8]
  return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	607b      	str	r3, [r7, #4]
  return(result);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	603b      	str	r3, [r7, #0]
  return(result);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <osKernelInitialize+0x3a>
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <osKernelInitialize+0x60>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d103      	bne.n	80054a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800549e:	f06f 0305 	mvn.w	r3, #5
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e00c      	b.n	80054c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054a6:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <osKernelInitialize+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ae:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <osKernelInitialize+0x60>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e002      	b.n	80054c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295
 80054be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054c0:	68fb      	ldr	r3, [r7, #12]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr
 80054cc:	20000cbc 	.word	0x20000cbc

080054d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d6:	f3ef 8305 	mrs	r3, IPSR
 80054da:	60bb      	str	r3, [r7, #8]
  return(result);
 80054dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e2:	f3ef 8310 	mrs	r3, PRIMASK
 80054e6:	607b      	str	r3, [r7, #4]
  return(result);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d105      	bne.n	80054fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054ee:	f3ef 8311 	mrs	r3, BASEPRI
 80054f2:	603b      	str	r3, [r7, #0]
  return(result);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <osKernelStart+0x3a>
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <osKernelStart+0x68>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d103      	bne.n	800550a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005502:	f06f 0305 	mvn.w	r3, #5
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e010      	b.n	800552c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800550a:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <osKernelStart+0x68>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d109      	bne.n	8005526 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005512:	f7ff ffa5 	bl	8005460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005516:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <osKernelStart+0x68>)
 8005518:	2202      	movs	r2, #2
 800551a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800551c:	f001 feaa 	bl	8007274 <vTaskStartScheduler>
      stat = osOK;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e002      	b.n	800552c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005526:	f04f 33ff 	mov.w	r3, #4294967295
 800552a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000cbc 	.word	0x20000cbc

0800553c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b090      	sub	sp, #64	@ 0x40
 8005540:	af04      	add	r7, sp, #16
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554c:	f3ef 8305 	mrs	r3, IPSR
 8005550:	61fb      	str	r3, [r7, #28]
  return(result);
 8005552:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005554:	2b00      	cmp	r3, #0
 8005556:	f040 808f 	bne.w	8005678 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800555a:	f3ef 8310 	mrs	r3, PRIMASK
 800555e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005566:	f3ef 8311 	mrs	r3, BASEPRI
 800556a:	617b      	str	r3, [r7, #20]
  return(result);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <osThreadNew+0x3e>
 8005572:	4b44      	ldr	r3, [pc, #272]	@ (8005684 <osThreadNew+0x148>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d07e      	beq.n	8005678 <osThreadNew+0x13c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d07b      	beq.n	8005678 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005580:	2380      	movs	r3, #128	@ 0x80
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005584:	2318      	movs	r3, #24
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
 8005590:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d045      	beq.n	8005624 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <osThreadNew+0x6a>
        name = attr->name;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <osThreadNew+0x90>
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	2b38      	cmp	r3, #56	@ 0x38
 80055be:	d805      	bhi.n	80055cc <osThreadNew+0x90>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <osThreadNew+0x94>
        return (NULL);
 80055cc:	2300      	movs	r3, #0
 80055ce:	e054      	b.n	800567a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00e      	beq.n	8005606 <osThreadNew+0xca>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2ba7      	cmp	r3, #167	@ 0xa7
 80055ee:	d90a      	bls.n	8005606 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d006      	beq.n	8005606 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <osThreadNew+0xca>
        mem = 1;
 8005600:	2301      	movs	r3, #1
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	e010      	b.n	8005628 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <osThreadNew+0xec>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d108      	bne.n	8005628 <osThreadNew+0xec>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <osThreadNew+0xec>
          mem = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	e001      	b.n	8005628 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d110      	bne.n	8005650 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005636:	9202      	str	r2, [sp, #8]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f001 fc21 	bl	8006e8c <xTaskCreateStatic>
 800564a:	4603      	mov	r3, r0
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e013      	b.n	8005678 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d110      	bne.n	8005678 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	b29a      	uxth	r2, r3
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f001 fc6f 	bl	8006f4c <xTaskCreate>
 800566e:	4603      	mov	r3, r0
 8005670:	2b01      	cmp	r3, #1
 8005672:	d001      	beq.n	8005678 <osThreadNew+0x13c>
          hTask = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005678:	693b      	ldr	r3, [r7, #16]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3730      	adds	r7, #48	@ 0x30
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000cbc 	.word	0x20000cbc

08005688 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005690:	f3ef 8305 	mrs	r3, IPSR
 8005694:	613b      	str	r3, [r7, #16]
  return(result);
 8005696:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10f      	bne.n	80056bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569c:	f3ef 8310 	mrs	r3, PRIMASK
 80056a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056a8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <osDelay+0x3c>
 80056b4:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <osDelay+0x58>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d103      	bne.n	80056c4 <osDelay+0x3c>
    stat = osErrorISR;
 80056bc:	f06f 0305 	mvn.w	r3, #5
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e007      	b.n	80056d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 fd9a 	bl	8007208 <vTaskDelay>
    }
  }

  return (stat);
 80056d4:	697b      	ldr	r3, [r7, #20]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000cbc 	.word	0x20000cbc

080056e4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f0:	f3ef 8305 	mrs	r3, IPSR
 80056f4:	617b      	str	r3, [r7, #20]
  return(result);
 80056f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d13d      	bne.n	8005778 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	613b      	str	r3, [r7, #16]
  return(result);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005708:	f3ef 8311 	mrs	r3, BASEPRI
 800570c:	60fb      	str	r3, [r7, #12]
  return(result);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <osEventFlagsNew+0x38>
 8005714:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <osEventFlagsNew+0xa0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d02d      	beq.n	8005778 <osEventFlagsNew+0x94>
    mem = -1;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <osEventFlagsNew+0x5a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b1f      	cmp	r3, #31
 8005736:	d902      	bls.n	800573e <osEventFlagsNew+0x5a>
        mem = 1;
 8005738:	2301      	movs	r3, #1
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e00c      	b.n	8005758 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <osEventFlagsNew+0x74>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <osEventFlagsNew+0x74>
          mem = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e001      	b.n	8005758 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d106      	bne.n	800576c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 faf6 	bl	8005d54 <xEventGroupCreateStatic>
 8005768:	61f8      	str	r0, [r7, #28]
 800576a:	e005      	b.n	8005778 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8005772:	f000 fb28 	bl	8005dc6 <xEventGroupCreate>
 8005776:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005778:	69fb      	ldr	r3, [r7, #28]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000cbc 	.word	0x20000cbc

08005788 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	@ 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005794:	f3ef 8305 	mrs	r3, IPSR
 8005798:	613b      	str	r3, [r7, #16]
  return(result);
 800579a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8085 	bne.w	80058ac <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a2:	f3ef 8310 	mrs	r3, PRIMASK
 80057a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057ae:	f3ef 8311 	mrs	r3, BASEPRI
 80057b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <osMutexNew+0x3a>
 80057ba:	4b3f      	ldr	r3, [pc, #252]	@ (80058b8 <osMutexNew+0x130>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d074      	beq.n	80058ac <osMutexNew+0x124>
    if (attr != NULL) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	623b      	str	r3, [r7, #32]
 80057ce:	e001      	b.n	80057d4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <osMutexNew+0x5c>
      rmtx = 1U;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e001      	b.n	80057e8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d15c      	bne.n	80058ac <osMutexNew+0x124>
      mem = -1;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <osMutexNew+0x8c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b4f      	cmp	r3, #79	@ 0x4f
 800580c:	d902      	bls.n	8005814 <osMutexNew+0x8c>
          mem = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e00c      	b.n	800582e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d108      	bne.n	800582e <osMutexNew+0xa6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <osMutexNew+0xa6>
            mem = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e001      	b.n	800582e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d112      	bne.n	800585a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4619      	mov	r1, r3
 8005840:	2004      	movs	r0, #4
 8005842:	f000 fd06 	bl	8006252 <xQueueCreateMutexStatic>
 8005846:	6278      	str	r0, [r7, #36]	@ 0x24
 8005848:	e016      	b.n	8005878 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4619      	mov	r1, r3
 8005850:	2001      	movs	r0, #1
 8005852:	f000 fcfe 	bl	8006252 <xQueueCreateMutexStatic>
 8005856:	6278      	str	r0, [r7, #36]	@ 0x24
 8005858:	e00e      	b.n	8005878 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005866:	2004      	movs	r0, #4
 8005868:	f000 fcdb 	bl	8006222 <xQueueCreateMutex>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24
 800586e:	e003      	b.n	8005878 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005870:	2001      	movs	r0, #1
 8005872:	f000 fcd6 	bl	8006222 <xQueueCreateMutex>
 8005876:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00c      	beq.n	8005898 <osMutexNew+0x110>
        if (attr != NULL) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <osMutexNew+0x104>
          name = attr->name;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e001      	b.n	8005890 <osMutexNew+0x108>
        } else {
          name = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005890:	6979      	ldr	r1, [r7, #20]
 8005892:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005894:	f001 fa9e 	bl	8006dd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <osMutexNew+0x124>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3728      	adds	r7, #40	@ 0x28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000cbc 	.word	0x20000cbc

080058bc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058da:	f3ef 8305 	mrs	r3, IPSR
 80058de:	613b      	str	r3, [r7, #16]
  return(result);
 80058e0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058f2:	f3ef 8311 	mrs	r3, BASEPRI
 80058f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <osMutexAcquire+0x52>
 80058fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005974 <osMutexAcquire+0xb8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d103      	bne.n	800590e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005906:	f06f 0305 	mvn.w	r3, #5
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e02c      	b.n	8005968 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005914:	f06f 0303 	mvn.w	r3, #3
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	e025      	b.n	8005968 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	69b8      	ldr	r0, [r7, #24]
 8005926:	f000 fce4 	bl	80062f2 <xQueueTakeMutexRecursive>
 800592a:	4603      	mov	r3, r0
 800592c:	2b01      	cmp	r3, #1
 800592e:	d01b      	beq.n	8005968 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005936:	f06f 0301 	mvn.w	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e014      	b.n	8005968 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800593e:	f06f 0302 	mvn.w	r3, #2
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	e010      	b.n	8005968 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	69b8      	ldr	r0, [r7, #24]
 800594a:	f000 ff89 	bl	8006860 <xQueueSemaphoreTake>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d009      	beq.n	8005968 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800595a:	f06f 0301 	mvn.w	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e002      	b.n	8005968 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005962:	f06f 0302 	mvn.w	r3, #2
 8005966:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005968:	69fb      	ldr	r3, [r7, #28]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000cbc 	.word	0x20000cbc

08005978 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005994:	f3ef 8305 	mrs	r3, IPSR
 8005998:	613b      	str	r3, [r7, #16]
  return(result);
 800599a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10f      	bne.n	80059c0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a0:	f3ef 8310 	mrs	r3, PRIMASK
 80059a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059ac:	f3ef 8311 	mrs	r3, BASEPRI
 80059b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <osMutexRelease+0x50>
 80059b8:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <osMutexRelease+0x9c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d103      	bne.n	80059c8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80059c0:	f06f 0305 	mvn.w	r3, #5
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	e01f      	b.n	8005a08 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80059ce:	f06f 0303 	mvn.w	r3, #3
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	e018      	b.n	8005a08 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059dc:	69b8      	ldr	r0, [r7, #24]
 80059de:	f000 fc53 	bl	8006288 <xQueueGiveMutexRecursive>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d00f      	beq.n	8005a08 <osMutexRelease+0x90>
        stat = osErrorResource;
 80059e8:	f06f 0302 	mvn.w	r3, #2
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	e00b      	b.n	8005a08 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80059f0:	2300      	movs	r3, #0
 80059f2:	2200      	movs	r2, #0
 80059f4:	2100      	movs	r1, #0
 80059f6:	69b8      	ldr	r0, [r7, #24]
 80059f8:	f000 fcb2 	bl	8006360 <xQueueGenericSend>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d002      	beq.n	8005a08 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005a02:	f06f 0302 	mvn.w	r3, #2
 8005a06:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005a08:	69fb      	ldr	r3, [r7, #28]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000cbc 	.word	0x20000cbc

08005a18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a28:	f3ef 8305 	mrs	r3, IPSR
 8005a2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d16f      	bne.n	8005b14 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a34:	f3ef 8310 	mrs	r3, PRIMASK
 8005a38:	617b      	str	r3, [r7, #20]
  return(result);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a40:	f3ef 8311 	mrs	r3, BASEPRI
 8005a44:	613b      	str	r3, [r7, #16]
  return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <osMessageQueueNew+0x3c>
 8005a4c:	4b34      	ldr	r3, [pc, #208]	@ (8005b20 <osMessageQueueNew+0x108>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d05f      	beq.n	8005b14 <osMessageQueueNew+0xfc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d05c      	beq.n	8005b14 <osMessageQueueNew+0xfc>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d059      	beq.n	8005b14 <osMessageQueueNew+0xfc>
    mem = -1;
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295
 8005a64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d029      	beq.n	8005ac0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d012      	beq.n	8005a9a <osMessageQueueNew+0x82>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a7a:	d90e      	bls.n	8005a9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <osMessageQueueNew+0x82>
        mem = 1;
 8005a94:	2301      	movs	r3, #1
 8005a96:	623b      	str	r3, [r7, #32]
 8005a98:	e014      	b.n	8005ac4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d110      	bne.n	8005ac4 <osMessageQueueNew+0xac>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10c      	bne.n	8005ac4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <osMessageQueueNew+0xac>
          mem = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	e001      	b.n	8005ac4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10b      	bne.n	8005ae2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	9100      	str	r1, [sp, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 faa7 	bl	800602c <xQueueGenericCreateStatic>
 8005ade:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ae0:	e008      	b.n	8005af4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fb1a 	bl	8006126 <xQueueGenericCreate>
 8005af2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	e001      	b.n	8005b0c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b10:	f001 f960 	bl	8006dd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3728      	adds	r7, #40	@ 0x28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000cbc 	.word	0x20000cbc

08005b24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	@ 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	4613      	mov	r3, r2
 8005b32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3c:	f3ef 8305 	mrs	r3, IPSR
 8005b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b42:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b48:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b54:	f3ef 8311 	mrs	r3, BASEPRI
 8005b58:	617b      	str	r3, [r7, #20]
  return(result);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02c      	beq.n	8005bba <osMessageQueuePut+0x96>
 8005b60:	4b28      	ldr	r3, [pc, #160]	@ (8005c04 <osMessageQueuePut+0xe0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d128      	bne.n	8005bba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <osMessageQueuePut+0x56>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <osMessageQueuePut+0x56>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005b7a:	f06f 0303 	mvn.w	r3, #3
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b80:	e039      	b.n	8005bf6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b86:	f107 0210 	add.w	r2, r7, #16
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	6a38      	ldr	r0, [r7, #32]
 8005b90:	f000 fce8 	bl	8006564 <xQueueGenericSendFromISR>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d003      	beq.n	8005ba2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005b9a:	f06f 0302 	mvn.w	r3, #2
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ba0:	e029      	b.n	8005bf6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d026      	beq.n	8005bf6 <osMessageQueuePut+0xd2>
 8005ba8:	4b17      	ldr	r3, [pc, #92]	@ (8005c08 <osMessageQueuePut+0xe4>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bb8:	e01d      	b.n	8005bf6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <osMessageQueuePut+0xa2>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005bc6:	f06f 0303 	mvn.w	r3, #3
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bcc:	e014      	b.n	8005bf8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bce:	2300      	movs	r3, #0
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	6a38      	ldr	r0, [r7, #32]
 8005bd6:	f000 fbc3 	bl	8006360 <xQueueGenericSend>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d00b      	beq.n	8005bf8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005be6:	f06f 0301 	mvn.w	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bec:	e004      	b.n	8005bf8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005bee:	f06f 0302 	mvn.w	r3, #2
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf4:	e000      	b.n	8005bf8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bf6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3728      	adds	r7, #40	@ 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000cbc 	.word	0x20000cbc
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	@ 0x28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c22:	f3ef 8305 	mrs	r3, IPSR
 8005c26:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c28:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c32:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d02c      	beq.n	8005ca0 <osMessageQueueGet+0x94>
 8005c46:	4b28      	ldr	r3, [pc, #160]	@ (8005ce8 <osMessageQueueGet+0xdc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d128      	bne.n	8005ca0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <osMessageQueueGet+0x54>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <osMessageQueueGet+0x54>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005c60:	f06f 0303 	mvn.w	r3, #3
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c66:	e038      	b.n	8005cda <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c6c:	f107 0310 	add.w	r3, r7, #16
 8005c70:	461a      	mov	r2, r3
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	6a38      	ldr	r0, [r7, #32]
 8005c76:	f000 ff03 	bl	8006a80 <xQueueReceiveFromISR>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d003      	beq.n	8005c88 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005c80:	f06f 0302 	mvn.w	r3, #2
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c86:	e028      	b.n	8005cda <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d025      	beq.n	8005cda <osMessageQueueGet+0xce>
 8005c8e:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <osMessageQueueGet+0xe0>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c9e:	e01c      	b.n	8005cda <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <osMessageQueueGet+0xa0>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005cac:	f06f 0303 	mvn.w	r3, #3
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb2:	e013      	b.n	8005cdc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	6a38      	ldr	r0, [r7, #32]
 8005cba:	f000 fcef 	bl	800669c <xQueueReceive>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d00b      	beq.n	8005cdc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005cca:	f06f 0301 	mvn.w	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd0:	e004      	b.n	8005cdc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005cd2:	f06f 0302 	mvn.w	r3, #2
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd8:	e000      	b.n	8005cdc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	@ 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000cbc 	.word	0x20000cbc
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a06      	ldr	r2, [pc, #24]	@ (8005d18 <vApplicationGetIdleTaskMemory+0x28>)
 8005d00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4a05      	ldr	r2, [pc, #20]	@ (8005d1c <vApplicationGetIdleTaskMemory+0x2c>)
 8005d06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2280      	movs	r2, #128	@ 0x80
 8005d0c:	601a      	str	r2, [r3, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	20000cc0 	.word	0x20000cc0
 8005d1c:	20000d68 	.word	0x20000d68

08005d20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4a07      	ldr	r2, [pc, #28]	@ (8005d4c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4a06      	ldr	r2, [pc, #24]	@ (8005d50 <vApplicationGetTimerTaskMemory+0x30>)
 8005d36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d3e:	601a      	str	r2, [r3, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000f68 	.word	0x20000f68
 8005d50:	20001010 	.word	0x20001010

08005d54 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d00b      	beq.n	8005d9c <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	60fb      	str	r3, [r7, #12]
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f822 	bl	8005dfa <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2201      	movs	r2, #1
 8005dba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005dbc:	697b      	ldr	r3, [r7, #20]
	}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005dcc:	2020      	movs	r0, #32
 8005dce:	f002 fdff 	bl	80089d0 <pvPortMalloc>
 8005dd2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f808 	bl	8005dfa <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005df0:	687b      	ldr	r3, [r7, #4]
	}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f103 0208 	add.w	r2, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f103 0208 	add.w	r2, r3, #8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d103      	bne.n	8005eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e00c      	b.n	8005ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e002      	b.n	8005ec4 <vListInsert+0x2e>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d2f6      	bcs.n	8005ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr

08005f06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6892      	ldr	r2, [r2, #8]
 8005f1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6852      	ldr	r2, [r2, #4]
 8005f26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d103      	bne.n	8005f3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <xQueueGenericReset+0x2c>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60bb      	str	r3, [r7, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
 8005f82:	e7fd      	b.n	8005f80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f84:	f002 fc22 	bl	80087cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	441a      	add	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	22ff      	movs	r2, #255	@ 0xff
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	22ff      	movs	r2, #255	@ 0xff
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d114      	bne.n	8006004 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01a      	beq.n	8006018 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fbee 	bl	80077c8 <xTaskRemoveFromEventList>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d012      	beq.n	8006018 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <xQueueGenericReset+0xd0>)
 8005ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	e009      	b.n	8006018 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3310      	adds	r3, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fef6 	bl	8005dfa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3324      	adds	r3, #36	@ 0x24
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fef1 	bl	8005dfa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006018:	f002 fc08 	bl	800882c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800601c:	2301      	movs	r3, #1
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08e      	sub	sp, #56	@ 0x38
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	e7fd      	b.n	8006072 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <xQueueGenericCreateStatic+0x56>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <xQueueGenericCreateStatic+0x5a>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueGenericCreateStatic+0x5c>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	623b      	str	r3, [r7, #32]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <xQueueGenericCreateStatic+0x84>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <xQueueGenericCreateStatic+0x88>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <xQueueGenericCreateStatic+0x8a>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	61fb      	str	r3, [r7, #28]
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	e7fd      	b.n	80060ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d2:	2350      	movs	r3, #80	@ 0x50
 80060d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b50      	cmp	r3, #80	@ 0x50
 80060da:	d00b      	beq.n	80060f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	61bb      	str	r3, [r7, #24]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80060fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006108:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f846 	bl	80061a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3730      	adds	r7, #48	@ 0x30
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08a      	sub	sp, #40	@ 0x28
 800612a:	af02      	add	r7, sp, #8
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <xQueueGenericCreate+0x2c>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	613b      	str	r3, [r7, #16]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	e004      	b.n	8006168 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	3350      	adds	r3, #80	@ 0x50
 800616c:	4618      	mov	r0, r3
 800616e:	f002 fc2f 	bl	80089d0 <pvPortMalloc>
 8006172:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	3350      	adds	r3, #80	@ 0x50
 8006182:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800618c:	79fa      	ldrb	r2, [r7, #7]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f805 	bl	80061a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800619e:	69bb      	ldr	r3, [r7, #24]
	}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d103      	bne.n	80061c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e002      	b.n	80061ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061d6:	2101      	movs	r1, #1
 80061d8:	69b8      	ldr	r0, [r7, #24]
 80061da:	f7ff febd 	bl	8005f58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800620e:	2300      	movs	r3, #0
 8006210:	2200      	movs	r2, #0
 8006212:	2100      	movs	r1, #0
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8a3 	bl	8006360 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	4603      	mov	r3, r0
 800622a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	2300      	movs	r3, #0
 8006232:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	461a      	mov	r2, r3
 8006238:	6939      	ldr	r1, [r7, #16]
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7ff ff73 	bl	8006126 <xQueueGenericCreate>
 8006240:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff ffd3 	bl	80061ee <prvInitialiseMutex>

		return xNewQueue;
 8006248:	68fb      	ldr	r3, [r7, #12]
	}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006252:	b580      	push	{r7, lr}
 8006254:	b088      	sub	sp, #32
 8006256:	af02      	add	r7, sp, #8
 8006258:	4603      	mov	r3, r0
 800625a:	6039      	str	r1, [r7, #0]
 800625c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800625e:	2301      	movs	r3, #1
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2200      	movs	r2, #0
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f7ff fedb 	bl	800602c <xQueueGenericCreateStatic>
 8006276:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ffb8 	bl	80061ee <prvInitialiseMutex>

		return xNewQueue;
 800627e:	68fb      	ldr	r3, [r7, #12]
	}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	60fb      	str	r3, [r7, #12]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	689c      	ldr	r4, [r3, #8]
 80062b6:	f001 fc4d 	bl	8007b54 <xTaskGetCurrentTaskHandle>
 80062ba:	4603      	mov	r3, r0
 80062bc:	429c      	cmp	r4, r3
 80062be:	d111      	bne.n	80062e4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	1e5a      	subs	r2, r3, #1
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062d2:	2300      	movs	r3, #0
 80062d4:	2200      	movs	r2, #0
 80062d6:	2100      	movs	r1, #0
 80062d8:	6938      	ldr	r0, [r7, #16]
 80062da:	f000 f841 	bl	8006360 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80062de:	2301      	movs	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e001      	b.n	80062e8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80062e8:	697b      	ldr	r3, [r7, #20]
	}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd90      	pop	{r4, r7, pc}

080062f2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80062f2:	b590      	push	{r4, r7, lr}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60fb      	str	r3, [r7, #12]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	689c      	ldr	r4, [r3, #8]
 8006322:	f001 fc17 	bl	8007b54 <xTaskGetCurrentTaskHandle>
 8006326:	4603      	mov	r3, r0
 8006328:	429c      	cmp	r4, r3
 800632a:	d107      	bne.n	800633c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006336:	2301      	movs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	e00c      	b.n	8006356 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6938      	ldr	r0, [r7, #16]
 8006340:	f000 fa8e 	bl	8006860 <xQueueSemaphoreTake>
 8006344:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006356:	697b      	ldr	r3, [r7, #20]
	}
 8006358:	4618      	mov	r0, r3
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}

08006360 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	@ 0x38
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <xQueueGenericSend+0x34>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <xQueueGenericSend+0x42>
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <xQueueGenericSend+0x46>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <xQueueGenericSend+0x48>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <xQueueGenericSend+0x64>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSend+0x72>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <xQueueGenericSend+0x76>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <xQueueGenericSend+0x78>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <xQueueGenericSend+0x94>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	623b      	str	r3, [r7, #32]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f4:	f001 fbbc 	bl	8007b70 <xTaskGetSchedulerState>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <xQueueGenericSend+0xa4>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <xQueueGenericSend+0xa8>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <xQueueGenericSend+0xaa>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <xQueueGenericSend+0xc6>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61fb      	str	r3, [r7, #28]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006426:	f002 f9d1 	bl	80087cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <xQueueGenericSend+0xdc>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d129      	bne.n	8006490 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006442:	f000 fbb6 	bl	8006bb2 <prvCopyDataToQueue>
 8006446:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	3324      	adds	r3, #36	@ 0x24
 8006454:	4618      	mov	r0, r3
 8006456:	f001 f9b7 	bl	80077c8 <xTaskRemoveFromEventList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d013      	beq.n	8006488 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006460:	4b3f      	ldr	r3, [pc, #252]	@ (8006560 <xQueueGenericSend+0x200>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	e00a      	b.n	8006488 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006478:	4b39      	ldr	r3, [pc, #228]	@ (8006560 <xQueueGenericSend+0x200>)
 800647a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006488:	f002 f9d0 	bl	800882c <vPortExitCritical>
				return pdPASS;
 800648c:	2301      	movs	r3, #1
 800648e:	e063      	b.n	8006558 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006496:	f002 f9c9 	bl	800882c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800649a:	2300      	movs	r3, #0
 800649c:	e05c      	b.n	8006558 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 f9f1 	bl	8007890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b2:	f002 f9bb 	bl	800882c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b6:	f000 ff4d 	bl	8007354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ba:	f002 f987 	bl	80087cc <vPortEnterCritical>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <xQueueGenericSend+0x174>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSend+0x18a>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064ea:	f002 f99f 	bl	800882c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ee:	1d3a      	adds	r2, r7, #4
 80064f0:	f107 0314 	add.w	r3, r7, #20
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f9e0 	bl	80078bc <xTaskCheckForTimeOut>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d124      	bne.n	800654c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006502:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006504:	f000 fc4d 	bl	8006da2 <prvIsQueueFull>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	3310      	adds	r3, #16
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f001 f904 	bl	8007724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800651c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800651e:	f000 fbd8 	bl	8006cd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006522:	f000 ff25 	bl	8007370 <xTaskResumeAll>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f af7c 	bne.w	8006426 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800652e:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <xQueueGenericSend+0x200>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	e772      	b.n	8006426 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006542:	f000 fbc6 	bl	8006cd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006546:	f000 ff13 	bl	8007370 <xTaskResumeAll>
 800654a:	e76c      	b.n	8006426 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800654c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800654e:	f000 fbc0 	bl	8006cd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006552:	f000 ff0d 	bl	8007370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006556:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006558:	4618      	mov	r0, r3
 800655a:	3738      	adds	r7, #56	@ 0x38
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08e      	sub	sp, #56	@ 0x38
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSendFromISR+0x3e>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSendFromISR+0x42>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSendFromISR+0x44>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10b      	bne.n	80065c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <xQueueGenericSendFromISR+0x6e>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <xQueueGenericSendFromISR+0x72>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericSendFromISR+0x74>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fb      	str	r3, [r7, #28]
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f4:	f002 f9ac 	bl	8008950 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065f8:	f3ef 8211 	mrs	r2, BASEPRI
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61ba      	str	r2, [r7, #24]
 800660e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006610:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006612:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <xQueueGenericSendFromISR+0xc2>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d12c      	bne.n	8006680 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800662c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006636:	f000 fabc 	bl	8006bb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800663a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d112      	bne.n	800666a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d016      	beq.n	800667a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	3324      	adds	r3, #36	@ 0x24
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f8b9 	bl	80077c8 <xTaskRemoveFromEventList>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00b      	beq.n	800667a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e007      	b.n	800667a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800666a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800666e:	3301      	adds	r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	b25a      	sxtb	r2, r3
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800667a:	2301      	movs	r3, #1
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800667e:	e001      	b.n	8006684 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006680:	2300      	movs	r3, #0
 8006682:	637b      	str	r3, [r7, #52]	@ 0x34
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800668e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006692:	4618      	mov	r0, r3
 8006694:	3738      	adds	r7, #56	@ 0x38
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08c      	sub	sp, #48	@ 0x30
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10b      	bne.n	80066ce <xQueueReceive+0x32>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	623b      	str	r3, [r7, #32]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <xQueueReceive+0x40>
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <xQueueReceive+0x44>
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <xQueueReceive+0x46>
 80066e0:	2300      	movs	r3, #0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <xQueueReceive+0x62>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	61fb      	str	r3, [r7, #28]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066fe:	f001 fa37 	bl	8007b70 <xTaskGetSchedulerState>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <xQueueReceive+0x72>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <xQueueReceive+0x76>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <xQueueReceive+0x78>
 8006712:	2300      	movs	r3, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <xQueueReceive+0x94>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	61bb      	str	r3, [r7, #24]
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	e7fd      	b.n	800672c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006730:	f002 f84c 	bl	80087cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01f      	beq.n	8006780 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006744:	f000 fa9f 	bl	8006c86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	1e5a      	subs	r2, r3, #1
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00f      	beq.n	8006778 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	3310      	adds	r3, #16
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f833 	bl	80077c8 <xTaskRemoveFromEventList>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006768:	4b3c      	ldr	r3, [pc, #240]	@ (800685c <xQueueReceive+0x1c0>)
 800676a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006778:	f002 f858 	bl	800882c <vPortExitCritical>
				return pdPASS;
 800677c:	2301      	movs	r3, #1
 800677e:	e069      	b.n	8006854 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006786:	f002 f851 	bl	800882c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800678a:	2300      	movs	r3, #0
 800678c:	e062      	b.n	8006854 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800678e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	4618      	mov	r0, r3
 800679a:	f001 f879 	bl	8007890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a2:	f002 f843 	bl	800882c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067a6:	f000 fdd5 	bl	8007354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067aa:	f002 f80f 	bl	80087cc <vPortEnterCritical>
 80067ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067b4:	b25b      	sxtb	r3, r3
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d103      	bne.n	80067c4 <xQueueReceive+0x128>
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d103      	bne.n	80067da <xQueueReceive+0x13e>
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067da:	f002 f827 	bl	800882c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067de:	1d3a      	adds	r2, r7, #4
 80067e0:	f107 0310 	add.w	r3, r7, #16
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 f868 	bl	80078bc <xTaskCheckForTimeOut>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d123      	bne.n	800683a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f4:	f000 fabf 	bl	8006d76 <prvIsQueueEmpty>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d017      	beq.n	800682e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	3324      	adds	r3, #36	@ 0x24
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f000 ff8c 	bl	8007724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800680c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800680e:	f000 fa60 	bl	8006cd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006812:	f000 fdad 	bl	8007370 <xTaskResumeAll>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d189      	bne.n	8006730 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800681c:	4b0f      	ldr	r3, [pc, #60]	@ (800685c <xQueueReceive+0x1c0>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	e780      	b.n	8006730 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800682e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006830:	f000 fa4f 	bl	8006cd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006834:	f000 fd9c 	bl	8007370 <xTaskResumeAll>
 8006838:	e77a      	b.n	8006730 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800683a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800683c:	f000 fa49 	bl	8006cd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006840:	f000 fd96 	bl	8007370 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006846:	f000 fa96 	bl	8006d76 <prvIsQueueEmpty>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	f43f af6f 	beq.w	8006730 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006854:	4618      	mov	r0, r3
 8006856:	3730      	adds	r7, #48	@ 0x30
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	@ 0x38
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006872:	2300      	movs	r3, #0
 8006874:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	623b      	str	r3, [r7, #32]
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	61fb      	str	r3, [r7, #28]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068b4:	f001 f95c 	bl	8007b70 <xTaskGetSchedulerState>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <xQueueSemaphoreTake+0x64>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <xQueueSemaphoreTake+0x68>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <xQueueSemaphoreTake+0x6a>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	61bb      	str	r3, [r7, #24]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068e6:	f001 ff71 	bl	80087cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d024      	beq.n	8006940 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	1e5a      	subs	r2, r3, #1
 80068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006906:	f001 faad 	bl	8007e64 <pvTaskIncrementMutexHeldCount>
 800690a:	4602      	mov	r2, r0
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00f      	beq.n	8006938 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691a:	3310      	adds	r3, #16
 800691c:	4618      	mov	r0, r3
 800691e:	f000 ff53 	bl	80077c8 <xTaskRemoveFromEventList>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006928:	4b54      	ldr	r3, [pc, #336]	@ (8006a7c <xQueueSemaphoreTake+0x21c>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006938:	f001 ff78 	bl	800882c <vPortExitCritical>
				return pdPASS;
 800693c:	2301      	movs	r3, #1
 800693e:	e098      	b.n	8006a72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d112      	bne.n	800696c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00b      	beq.n	8006964 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	617b      	str	r3, [r7, #20]
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	e7fd      	b.n	8006960 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006964:	f001 ff62 	bl	800882c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006968:	2300      	movs	r3, #0
 800696a:	e082      	b.n	8006a72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800696c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006972:	f107 030c 	add.w	r3, r7, #12
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ff8a 	bl	8007890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006980:	f001 ff54 	bl	800882c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006984:	f000 fce6 	bl	8007354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006988:	f001 ff20 	bl	80087cc <vPortEnterCritical>
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d103      	bne.n	80069a2 <xQueueSemaphoreTake+0x142>
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d103      	bne.n	80069b8 <xQueueSemaphoreTake+0x158>
 80069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069b8:	f001 ff38 	bl	800882c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069bc:	463a      	mov	r2, r7
 80069be:	f107 030c 	add.w	r3, r7, #12
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 ff79 	bl	80078bc <xTaskCheckForTimeOut>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d132      	bne.n	8006a36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069d2:	f000 f9d0 	bl	8006d76 <prvIsQueueEmpty>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d026      	beq.n	8006a2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80069e4:	f001 fef2 	bl	80087cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 f8dd 	bl	8007bac <xTaskPriorityInherit>
 80069f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80069f4:	f001 ff1a 	bl	800882c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	3324      	adds	r3, #36	@ 0x24
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fe8f 	bl	8007724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a08:	f000 f963 	bl	8006cd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a0c:	f000 fcb0 	bl	8007370 <xTaskResumeAll>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f47f af67 	bne.w	80068e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006a18:	4b18      	ldr	r3, [pc, #96]	@ (8006a7c <xQueueSemaphoreTake+0x21c>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	e75d      	b.n	80068e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a2c:	f000 f951 	bl	8006cd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a30:	f000 fc9e 	bl	8007370 <xTaskResumeAll>
 8006a34:	e757      	b.n	80068e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a38:	f000 f94b 	bl	8006cd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a3c:	f000 fc98 	bl	8007370 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a42:	f000 f998 	bl	8006d76 <prvIsQueueEmpty>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f43f af4c 	beq.w	80068e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006a54:	f001 feba 	bl	80087cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a5a:	f000 f893 	bl	8006b84 <prvGetDisinheritPriorityAfterTimeout>
 8006a5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f978 	bl	8007d5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a6c:	f001 fede 	bl	800882c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3738      	adds	r7, #56	@ 0x38
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	@ 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	623b      	str	r3, [r7, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <xQueueReceiveFromISR+0x3c>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <xQueueReceiveFromISR+0x40>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <xQueueReceiveFromISR+0x42>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	61fb      	str	r3, [r7, #28]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ade:	f001 ff37 	bl	8008950 <vPortValidateInterruptPriority>
	__asm volatile
 8006ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	61ba      	str	r2, [r7, #24]
 8006af8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006afa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d02f      	beq.n	8006b6a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b18:	f000 f8b5 	bl	8006c86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	1e5a      	subs	r2, r3, #1
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d112      	bne.n	8006b54 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d016      	beq.n	8006b64 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	3310      	adds	r3, #16
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fe44 	bl	80077c8 <xTaskRemoveFromEventList>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e007      	b.n	8006b64 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	b25a      	sxtb	r2, r3
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006b64:	2301      	movs	r3, #1
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b68:	e001      	b.n	8006b6e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f383 8811 	msr	BASEPRI, r3
}
 8006b78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3738      	adds	r7, #56	@ 0x38
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e001      	b.n	8006ba6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b086      	sub	sp, #24
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d14d      	bne.n	8006c74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 f84d 	bl	8007c7c <xTaskPriorityDisinherit>
 8006be2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	609a      	str	r2, [r3, #8]
 8006bea:	e043      	b.n	8006c74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d119      	bne.n	8006c26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6858      	ldr	r0, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	f005 fdd1 	bl	800c7a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	441a      	add	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d32b      	bcc.n	8006c74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	e026      	b.n	8006c74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68d8      	ldr	r0, [r3, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	f005 fdb7 	bl	800c7a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	425b      	negs	r3, r3
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d207      	bcs.n	8006c62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	425b      	negs	r3, r3
 8006c5c:	441a      	add	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d105      	bne.n	8006c74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d018      	beq.n	8006cca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d303      	bcc.n	8006cba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68d9      	ldr	r1, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6838      	ldr	r0, [r7, #0]
 8006cc6:	f005 fd6d 	bl	800c7a4 <memcpy>
	}
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cda:	f001 fd77 	bl	80087cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ce4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ce6:	e011      	b.n	8006d0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d012      	beq.n	8006d16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3324      	adds	r3, #36	@ 0x24
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fd67 	bl	80077c8 <xTaskRemoveFromEventList>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d00:	f000 fe40 	bl	8007984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dce9      	bgt.n	8006ce8 <prvUnlockQueue+0x16>
 8006d14:	e000      	b.n	8006d18 <prvUnlockQueue+0x46>
					break;
 8006d16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	22ff      	movs	r2, #255	@ 0xff
 8006d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006d20:	f001 fd84 	bl	800882c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d24:	f001 fd52 	bl	80087cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d30:	e011      	b.n	8006d56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d012      	beq.n	8006d60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3310      	adds	r3, #16
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fd42 	bl	80077c8 <xTaskRemoveFromEventList>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d4a:	f000 fe1b 	bl	8007984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	dce9      	bgt.n	8006d32 <prvUnlockQueue+0x60>
 8006d5e:	e000      	b.n	8006d62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	22ff      	movs	r2, #255	@ 0xff
 8006d66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d6a:	f001 fd5f 	bl	800882c <vPortExitCritical>
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d7e:	f001 fd25 	bl	80087cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e001      	b.n	8006d94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d94:	f001 fd4a 	bl	800882c <vPortExitCritical>

	return xReturn;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006daa:	f001 fd0f 	bl	80087cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d102      	bne.n	8006dc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e001      	b.n	8006dc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dc4:	f001 fd32 	bl	800882c <vPortExitCritical>

	return xReturn;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e014      	b.n	8006e0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006de4:	4a0e      	ldr	r2, [pc, #56]	@ (8006e20 <vQueueAddToRegistry+0x4c>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10b      	bne.n	8006e08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006df0:	490b      	ldr	r1, [pc, #44]	@ (8006e20 <vQueueAddToRegistry+0x4c>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006dfa:	4a09      	ldr	r2, [pc, #36]	@ (8006e20 <vQueueAddToRegistry+0x4c>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4413      	add	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e06:	e006      	b.n	8006e16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b07      	cmp	r3, #7
 8006e12:	d9e7      	bls.n	8006de4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr
 8006e20:	20001410 	.word	0x20001410

08006e24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e34:	f001 fcca 	bl	80087cc <vPortEnterCritical>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d103      	bne.n	8006e4e <vQueueWaitForMessageRestricted+0x2a>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e54:	b25b      	sxtb	r3, r3
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d103      	bne.n	8006e64 <vQueueWaitForMessageRestricted+0x40>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e64:	f001 fce2 	bl	800882c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	3324      	adds	r3, #36	@ 0x24
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fc79 	bl	8007770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f7ff ff27 	bl	8006cd2 <prvUnlockQueue>
	}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	@ 0x38
 8006e90:	af04      	add	r7, sp, #16
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	623b      	str	r3, [r7, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	61fb      	str	r3, [r7, #28]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ed6:	23a8      	movs	r3, #168	@ 0xa8
 8006ed8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2ba8      	cmp	r3, #168	@ 0xa8
 8006ede:	d00b      	beq.n	8006ef8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	61bb      	str	r3, [r7, #24]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ef8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01e      	beq.n	8006f3e <xTaskCreateStatic+0xb2>
 8006f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01b      	beq.n	8006f3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	f107 0314 	add.w	r3, r7, #20
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f851 	bl	8006fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f38:	f000 f8f6 	bl	8007128 <prvAddNewTaskToReadyList>
 8006f3c:	e001      	b.n	8006f42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f42:	697b      	ldr	r3, [r7, #20]
	}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3728      	adds	r7, #40	@ 0x28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08c      	sub	sp, #48	@ 0x30
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 fd35 	bl	80089d0 <pvPortMalloc>
 8006f66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00e      	beq.n	8006f8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f6e:	20a8      	movs	r0, #168	@ 0xa8
 8006f70:	f001 fd2e 	bl	80089d0 <pvPortMalloc>
 8006f74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f82:	e005      	b.n	8006f90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f84:	6978      	ldr	r0, [r7, #20]
 8006f86:	f001 fd69 	bl	8008a5c <vPortFree>
 8006f8a:	e001      	b.n	8006f90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9303      	str	r3, [sp, #12]
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	9302      	str	r3, [sp, #8]
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f80f 	bl	8006fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fba:	69f8      	ldr	r0, [r7, #28]
 8006fbc:	f000 f8b4 	bl	8007128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e002      	b.n	8006fcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
	}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	461a      	mov	r2, r3
 8006ff0:	21a5      	movs	r1, #165	@ 0xa5
 8006ff2:	f005 faed 	bl	800c5d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007000:	3b01      	subs	r3, #1
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	617b      	str	r3, [r7, #20]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01f      	beq.n	8007078 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007038:	2300      	movs	r3, #0
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e012      	b.n	8007064 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	7819      	ldrb	r1, [r3, #0]
 8007046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4413      	add	r3, r2
 800704c:	3334      	adds	r3, #52	@ 0x34
 800704e:	460a      	mov	r2, r1
 8007050:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d006      	beq.n	800706c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	3301      	adds	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d9e9      	bls.n	800703e <prvInitialiseNewTask+0x66>
 800706a:	e000      	b.n	800706e <prvInitialiseNewTask+0x96>
			{
				break;
 800706c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007076:	e003      	b.n	8007080 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	2b37      	cmp	r3, #55	@ 0x37
 8007084:	d901      	bls.n	800708a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007086:	2337      	movs	r3, #55	@ 0x37
 8007088:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800708e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007094:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	2200      	movs	r2, #0
 800709a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	3304      	adds	r3, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fec9 	bl	8005e38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	3318      	adds	r3, #24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fec4 	bl	8005e38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	3354      	adds	r3, #84	@ 0x54
 80070da:	224c      	movs	r2, #76	@ 0x4c
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f005 fa76 	bl	800c5d0 <memset>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	4a0d      	ldr	r2, [pc, #52]	@ (800711c <prvInitialiseNewTask+0x144>)
 80070e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007120 <prvInitialiseNewTask+0x148>)
 80070ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007124 <prvInitialiseNewTask+0x14c>)
 80070f4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	69b8      	ldr	r0, [r7, #24]
 80070fc:	f001 fa72 	bl	80085e4 <pxPortInitialiseStack>
 8007100:	4602      	mov	r2, r0
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007112:	bf00      	nop
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20005c54 	.word	0x20005c54
 8007120:	20005cbc 	.word	0x20005cbc
 8007124:	20005d24 	.word	0x20005d24

08007128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007130:	f001 fb4c 	bl	80087cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007134:	4b2d      	ldr	r3, [pc, #180]	@ (80071ec <prvAddNewTaskToReadyList+0xc4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	4a2c      	ldr	r2, [pc, #176]	@ (80071ec <prvAddNewTaskToReadyList+0xc4>)
 800713c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800713e:	4b2c      	ldr	r3, [pc, #176]	@ (80071f0 <prvAddNewTaskToReadyList+0xc8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007146:	4a2a      	ldr	r2, [pc, #168]	@ (80071f0 <prvAddNewTaskToReadyList+0xc8>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800714c:	4b27      	ldr	r3, [pc, #156]	@ (80071ec <prvAddNewTaskToReadyList+0xc4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d110      	bne.n	8007176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007154:	f000 fc3a 	bl	80079cc <prvInitialiseTaskLists>
 8007158:	e00d      	b.n	8007176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800715a:	4b26      	ldr	r3, [pc, #152]	@ (80071f4 <prvAddNewTaskToReadyList+0xcc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007162:	4b23      	ldr	r3, [pc, #140]	@ (80071f0 <prvAddNewTaskToReadyList+0xc8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716c:	429a      	cmp	r2, r3
 800716e:	d802      	bhi.n	8007176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007170:	4a1f      	ldr	r2, [pc, #124]	@ (80071f0 <prvAddNewTaskToReadyList+0xc8>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007176:	4b20      	ldr	r3, [pc, #128]	@ (80071f8 <prvAddNewTaskToReadyList+0xd0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	4a1e      	ldr	r2, [pc, #120]	@ (80071f8 <prvAddNewTaskToReadyList+0xd0>)
 800717e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007180:	4b1d      	ldr	r3, [pc, #116]	@ (80071f8 <prvAddNewTaskToReadyList+0xd0>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718c:	4b1b      	ldr	r3, [pc, #108]	@ (80071fc <prvAddNewTaskToReadyList+0xd4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d903      	bls.n	800719c <prvAddNewTaskToReadyList+0x74>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	4a18      	ldr	r2, [pc, #96]	@ (80071fc <prvAddNewTaskToReadyList+0xd4>)
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4a15      	ldr	r2, [pc, #84]	@ (8007200 <prvAddNewTaskToReadyList+0xd8>)
 80071aa:	441a      	add	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fe fe4c 	bl	8005e50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071b8:	f001 fb38 	bl	800882c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071bc:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <prvAddNewTaskToReadyList+0xcc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071c4:	4b0a      	ldr	r3, [pc, #40]	@ (80071f0 <prvAddNewTaskToReadyList+0xc8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d207      	bcs.n	80071e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <prvAddNewTaskToReadyList+0xdc>)
 80071d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20001924 	.word	0x20001924
 80071f0:	20001450 	.word	0x20001450
 80071f4:	20001930 	.word	0x20001930
 80071f8:	20001940 	.word	0x20001940
 80071fc:	2000192c 	.word	0x2000192c
 8007200:	20001454 	.word	0x20001454
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d018      	beq.n	800724c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800721a:	4b14      	ldr	r3, [pc, #80]	@ (800726c <vTaskDelay+0x64>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <vTaskDelay+0x32>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60bb      	str	r3, [r7, #8]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800723a:	f000 f88b 	bl	8007354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800723e:	2100      	movs	r1, #0
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fe23 	bl	8007e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007246:	f000 f893 	bl	8007370 <xTaskResumeAll>
 800724a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d107      	bne.n	8007262 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007252:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <vTaskDelay+0x68>)
 8007254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000194c 	.word	0x2000194c
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800727e:	2300      	movs	r3, #0
 8007280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007282:	463a      	mov	r2, r7
 8007284:	1d39      	adds	r1, r7, #4
 8007286:	f107 0308 	add.w	r3, r7, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fd30 	bl	8005cf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	9202      	str	r2, [sp, #8]
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	2300      	movs	r3, #0
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	460a      	mov	r2, r1
 80072a2:	4924      	ldr	r1, [pc, #144]	@ (8007334 <vTaskStartScheduler+0xc0>)
 80072a4:	4824      	ldr	r0, [pc, #144]	@ (8007338 <vTaskStartScheduler+0xc4>)
 80072a6:	f7ff fdf1 	bl	8006e8c <xTaskCreateStatic>
 80072aa:	4603      	mov	r3, r0
 80072ac:	4a23      	ldr	r2, [pc, #140]	@ (800733c <vTaskStartScheduler+0xc8>)
 80072ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072b0:	4b22      	ldr	r3, [pc, #136]	@ (800733c <vTaskStartScheduler+0xc8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072b8:	2301      	movs	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	e001      	b.n	80072c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d102      	bne.n	80072ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072c8:	f000 fe34 	bl	8007f34 <xTimerCreateTimerTask>
 80072cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d11b      	bne.n	800730c <vTaskStartScheduler+0x98>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	613b      	str	r3, [r7, #16]
}
 80072e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072e8:	4b15      	ldr	r3, [pc, #84]	@ (8007340 <vTaskStartScheduler+0xcc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3354      	adds	r3, #84	@ 0x54
 80072ee:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <vTaskStartScheduler+0xd0>)
 80072f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072f2:	4b15      	ldr	r3, [pc, #84]	@ (8007348 <vTaskStartScheduler+0xd4>)
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295
 80072f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072fa:	4b14      	ldr	r3, [pc, #80]	@ (800734c <vTaskStartScheduler+0xd8>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <vTaskStartScheduler+0xdc>)
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007306:	f001 f9ef 	bl	80086e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800730a:	e00f      	b.n	800732c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d10b      	bne.n	800732c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	60fb      	str	r3, [r7, #12]
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	e7fd      	b.n	8007328 <vTaskStartScheduler+0xb4>
}
 800732c:	bf00      	nop
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	0800c920 	.word	0x0800c920
 8007338:	0800799d 	.word	0x0800799d
 800733c:	20001948 	.word	0x20001948
 8007340:	20001450 	.word	0x20001450
 8007344:	20000b2c 	.word	0x20000b2c
 8007348:	20001944 	.word	0x20001944
 800734c:	20001930 	.word	0x20001930
 8007350:	20001928 	.word	0x20001928

08007354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007358:	4b04      	ldr	r3, [pc, #16]	@ (800736c <vTaskSuspendAll+0x18>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	4a03      	ldr	r2, [pc, #12]	@ (800736c <vTaskSuspendAll+0x18>)
 8007360:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007362:	bf00      	nop
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000194c 	.word	0x2000194c

08007370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800737a:	2300      	movs	r3, #0
 800737c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800737e:	4b42      	ldr	r3, [pc, #264]	@ (8007488 <xTaskResumeAll+0x118>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <xTaskResumeAll+0x2e>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	603b      	str	r3, [r7, #0]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800739e:	f001 fa15 	bl	80087cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073a2:	4b39      	ldr	r3, [pc, #228]	@ (8007488 <xTaskResumeAll+0x118>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4a37      	ldr	r2, [pc, #220]	@ (8007488 <xTaskResumeAll+0x118>)
 80073aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ac:	4b36      	ldr	r3, [pc, #216]	@ (8007488 <xTaskResumeAll+0x118>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d162      	bne.n	800747a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073b4:	4b35      	ldr	r3, [pc, #212]	@ (800748c <xTaskResumeAll+0x11c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d05e      	beq.n	800747a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073bc:	e02f      	b.n	800741e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073be:	4b34      	ldr	r3, [pc, #208]	@ (8007490 <xTaskResumeAll+0x120>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3318      	adds	r3, #24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fd9b 	bl	8005f06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fd96 	bl	8005f06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	4b2d      	ldr	r3, [pc, #180]	@ (8007494 <xTaskResumeAll+0x124>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d903      	bls.n	80073ee <xTaskResumeAll+0x7e>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007494 <xTaskResumeAll+0x124>)
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a27      	ldr	r2, [pc, #156]	@ (8007498 <xTaskResumeAll+0x128>)
 80073fc:	441a      	add	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3304      	adds	r3, #4
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f7fe fd23 	bl	8005e50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740e:	4b23      	ldr	r3, [pc, #140]	@ (800749c <xTaskResumeAll+0x12c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007418:	4b21      	ldr	r3, [pc, #132]	@ (80074a0 <xTaskResumeAll+0x130>)
 800741a:	2201      	movs	r2, #1
 800741c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800741e:	4b1c      	ldr	r3, [pc, #112]	@ (8007490 <xTaskResumeAll+0x120>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1cb      	bne.n	80073be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800742c:	f000 fb72 	bl	8007b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007430:	4b1c      	ldr	r3, [pc, #112]	@ (80074a4 <xTaskResumeAll+0x134>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800743c:	f000 f844 	bl	80074c8 <xTaskIncrementTick>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007446:	4b16      	ldr	r3, [pc, #88]	@ (80074a0 <xTaskResumeAll+0x130>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3b01      	subs	r3, #1
 8007450:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f1      	bne.n	800743c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007458:	4b12      	ldr	r3, [pc, #72]	@ (80074a4 <xTaskResumeAll+0x134>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800745e:	4b10      	ldr	r3, [pc, #64]	@ (80074a0 <xTaskResumeAll+0x130>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800746a:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <xTaskResumeAll+0x138>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800747a:	f001 f9d7 	bl	800882c <vPortExitCritical>

	return xAlreadyYielded;
 800747e:	68bb      	ldr	r3, [r7, #8]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	2000194c 	.word	0x2000194c
 800748c:	20001924 	.word	0x20001924
 8007490:	200018e4 	.word	0x200018e4
 8007494:	2000192c 	.word	0x2000192c
 8007498:	20001454 	.word	0x20001454
 800749c:	20001450 	.word	0x20001450
 80074a0:	20001938 	.word	0x20001938
 80074a4:	20001934 	.word	0x20001934
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074b2:	4b04      	ldr	r3, [pc, #16]	@ (80074c4 <xTaskGetTickCount+0x18>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074b8:	687b      	ldr	r3, [r7, #4]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr
 80074c4:	20001928 	.word	0x20001928

080074c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007610 <xTaskIncrementTick+0x148>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 808a 	bne.w	80075f0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007614 <xTaskIncrementTick+0x14c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007614 <xTaskIncrementTick+0x14c>)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d121      	bne.n	8007534 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074f0:	4b49      	ldr	r3, [pc, #292]	@ (8007618 <xTaskIncrementTick+0x150>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <xTaskIncrementTick+0x4a>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <xTaskIncrementTick+0x46>
 8007512:	4b41      	ldr	r3, [pc, #260]	@ (8007618 <xTaskIncrementTick+0x150>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	4b40      	ldr	r3, [pc, #256]	@ (800761c <xTaskIncrementTick+0x154>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3e      	ldr	r2, [pc, #248]	@ (8007618 <xTaskIncrementTick+0x150>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	4a3e      	ldr	r2, [pc, #248]	@ (800761c <xTaskIncrementTick+0x154>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	4b3e      	ldr	r3, [pc, #248]	@ (8007620 <xTaskIncrementTick+0x158>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a3c      	ldr	r2, [pc, #240]	@ (8007620 <xTaskIncrementTick+0x158>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	f000 faf0 	bl	8007b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007534:	4b3b      	ldr	r3, [pc, #236]	@ (8007624 <xTaskIncrementTick+0x15c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	d349      	bcc.n	80075d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753e:	4b36      	ldr	r3, [pc, #216]	@ (8007618 <xTaskIncrementTick+0x150>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007548:	4b36      	ldr	r3, [pc, #216]	@ (8007624 <xTaskIncrementTick+0x15c>)
 800754a:	f04f 32ff 	mov.w	r2, #4294967295
 800754e:	601a      	str	r2, [r3, #0]
					break;
 8007550:	e03f      	b.n	80075d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007552:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <xTaskIncrementTick+0x150>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	d203      	bcs.n	8007572 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800756a:	4a2e      	ldr	r2, [pc, #184]	@ (8007624 <xTaskIncrementTick+0x15c>)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007570:	e02f      	b.n	80075d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	3304      	adds	r3, #4
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fcc5 	bl	8005f06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	3318      	adds	r3, #24
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fcbc 	bl	8005f06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007592:	4b25      	ldr	r3, [pc, #148]	@ (8007628 <xTaskIncrementTick+0x160>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <xTaskIncrementTick+0xda>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a22      	ldr	r2, [pc, #136]	@ (8007628 <xTaskIncrementTick+0x160>)
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a1f      	ldr	r2, [pc, #124]	@ (800762c <xTaskIncrementTick+0x164>)
 80075b0:	441a      	add	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f7fe fc49 	bl	8005e50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <xTaskIncrementTick+0x168>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d3b8      	bcc.n	800753e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075cc:	2301      	movs	r3, #1
 80075ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075d0:	e7b5      	b.n	800753e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075d2:	4b17      	ldr	r3, [pc, #92]	@ (8007630 <xTaskIncrementTick+0x168>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d8:	4914      	ldr	r1, [pc, #80]	@ (800762c <xTaskIncrementTick+0x164>)
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d907      	bls.n	80075fa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80075ea:	2301      	movs	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e004      	b.n	80075fa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80075f0:	4b10      	ldr	r3, [pc, #64]	@ (8007634 <xTaskIncrementTick+0x16c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007634 <xTaskIncrementTick+0x16c>)
 80075f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80075fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007638 <xTaskIncrementTick+0x170>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007606:	697b      	ldr	r3, [r7, #20]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000194c 	.word	0x2000194c
 8007614:	20001928 	.word	0x20001928
 8007618:	200018dc 	.word	0x200018dc
 800761c:	200018e0 	.word	0x200018e0
 8007620:	2000193c 	.word	0x2000193c
 8007624:	20001944 	.word	0x20001944
 8007628:	2000192c 	.word	0x2000192c
 800762c:	20001454 	.word	0x20001454
 8007630:	20001450 	.word	0x20001450
 8007634:	20001934 	.word	0x20001934
 8007638:	20001938 	.word	0x20001938

0800763c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007642:	4b32      	ldr	r3, [pc, #200]	@ (800770c <vTaskSwitchContext+0xd0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800764a:	4b31      	ldr	r3, [pc, #196]	@ (8007710 <vTaskSwitchContext+0xd4>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007650:	e058      	b.n	8007704 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8007652:	4b2f      	ldr	r3, [pc, #188]	@ (8007710 <vTaskSwitchContext+0xd4>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007658:	4b2e      	ldr	r3, [pc, #184]	@ (8007714 <vTaskSwitchContext+0xd8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b2d      	ldr	r3, [pc, #180]	@ (8007714 <vTaskSwitchContext+0xd8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007664:	429a      	cmp	r2, r3
 8007666:	d808      	bhi.n	800767a <vTaskSwitchContext+0x3e>
 8007668:	4b2a      	ldr	r3, [pc, #168]	@ (8007714 <vTaskSwitchContext+0xd8>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b29      	ldr	r3, [pc, #164]	@ (8007714 <vTaskSwitchContext+0xd8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3334      	adds	r3, #52	@ 0x34
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7f8 ff03 	bl	8000480 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767a:	4b27      	ldr	r3, [pc, #156]	@ (8007718 <vTaskSwitchContext+0xdc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e011      	b.n	80076a6 <vTaskSwitchContext+0x6a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <vTaskSwitchContext+0x64>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	607b      	str	r3, [r7, #4]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <vTaskSwitchContext+0x60>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	491d      	ldr	r1, [pc, #116]	@ (800771c <vTaskSwitchContext+0xe0>)
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0e3      	beq.n	8007682 <vTaskSwitchContext+0x46>
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4a15      	ldr	r2, [pc, #84]	@ (800771c <vTaskSwitchContext+0xe0>)
 80076c6:	4413      	add	r3, r2
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	605a      	str	r2, [r3, #4]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	3308      	adds	r3, #8
 80076dc:	429a      	cmp	r2, r3
 80076de:	d104      	bne.n	80076ea <vTaskSwitchContext+0xae>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a08      	ldr	r2, [pc, #32]	@ (8007714 <vTaskSwitchContext+0xd8>)
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	4a08      	ldr	r2, [pc, #32]	@ (8007718 <vTaskSwitchContext+0xdc>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076fa:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <vTaskSwitchContext+0xd8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3354      	adds	r3, #84	@ 0x54
 8007700:	4a07      	ldr	r2, [pc, #28]	@ (8007720 <vTaskSwitchContext+0xe4>)
 8007702:	6013      	str	r3, [r2, #0]
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	2000194c 	.word	0x2000194c
 8007710:	20001938 	.word	0x20001938
 8007714:	20001450 	.word	0x20001450
 8007718:	2000192c 	.word	0x2000192c
 800771c:	20001454 	.word	0x20001454
 8007720:	20000b2c 	.word	0x20000b2c

08007724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10b      	bne.n	800774c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800774c:	4b07      	ldr	r3, [pc, #28]	@ (800776c <vTaskPlaceOnEventList+0x48>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3318      	adds	r3, #24
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7fe fb9e 	bl	8005e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800775a:	2101      	movs	r1, #1
 800775c:	6838      	ldr	r0, [r7, #0]
 800775e:	f000 fb95 	bl	8007e8c <prvAddCurrentTaskToDelayedList>
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20001450 	.word	0x20001450

08007770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	617b      	str	r3, [r7, #20]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800779a:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3318      	adds	r3, #24
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7fe fb54 	bl	8005e50 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077ae:	f04f 33ff 	mov.w	r3, #4294967295
 80077b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f000 fb68 	bl	8007e8c <prvAddCurrentTaskToDelayedList>
	}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20001450 	.word	0x20001450

080077c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60fb      	str	r3, [r7, #12]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3318      	adds	r3, #24
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fb83 	bl	8005f06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007800:	4b1d      	ldr	r3, [pc, #116]	@ (8007878 <xTaskRemoveFromEventList+0xb0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d11d      	bne.n	8007844 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fb7a 	bl	8005f06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007816:	4b19      	ldr	r3, [pc, #100]	@ (800787c <xTaskRemoveFromEventList+0xb4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d903      	bls.n	8007826 <xTaskRemoveFromEventList+0x5e>
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007822:	4a16      	ldr	r2, [pc, #88]	@ (800787c <xTaskRemoveFromEventList+0xb4>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a13      	ldr	r2, [pc, #76]	@ (8007880 <xTaskRemoveFromEventList+0xb8>)
 8007834:	441a      	add	r2, r3
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7fe fb07 	bl	8005e50 <vListInsertEnd>
 8007842:	e005      	b.n	8007850 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	3318      	adds	r3, #24
 8007848:	4619      	mov	r1, r3
 800784a:	480e      	ldr	r0, [pc, #56]	@ (8007884 <xTaskRemoveFromEventList+0xbc>)
 800784c:	f7fe fb00 	bl	8005e50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <xTaskRemoveFromEventList+0xc0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785a:	429a      	cmp	r2, r3
 800785c:	d905      	bls.n	800786a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800785e:	2301      	movs	r3, #1
 8007860:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007862:	4b0a      	ldr	r3, [pc, #40]	@ (800788c <xTaskRemoveFromEventList+0xc4>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e001      	b.n	800786e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800786e:	697b      	ldr	r3, [r7, #20]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	2000194c 	.word	0x2000194c
 800787c:	2000192c 	.word	0x2000192c
 8007880:	20001454 	.word	0x20001454
 8007884:	200018e4 	.word	0x200018e4
 8007888:	20001450 	.word	0x20001450
 800788c:	20001938 	.word	0x20001938

08007890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007898:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <vTaskInternalSetTimeOutState+0x24>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078a0:	4b05      	ldr	r3, [pc, #20]	@ (80078b8 <vTaskInternalSetTimeOutState+0x28>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	605a      	str	r2, [r3, #4]
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	2000193c 	.word	0x2000193c
 80078b8:	20001928 	.word	0x20001928

080078bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	613b      	str	r3, [r7, #16]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	60fb      	str	r3, [r7, #12]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007902:	f000 ff63 	bl	80087cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007906:	4b1d      	ldr	r3, [pc, #116]	@ (800797c <xTaskCheckForTimeOut+0xc0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d102      	bne.n	8007926 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e023      	b.n	800796e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b15      	ldr	r3, [pc, #84]	@ (8007980 <xTaskCheckForTimeOut+0xc4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d007      	beq.n	8007942 <xTaskCheckForTimeOut+0x86>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	429a      	cmp	r2, r3
 800793a:	d302      	bcc.n	8007942 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800793c:	2301      	movs	r3, #1
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	e015      	b.n	800796e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	429a      	cmp	r2, r3
 800794a:	d20b      	bcs.n	8007964 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	1ad2      	subs	r2, r2, r3
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ff99 	bl	8007890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	e004      	b.n	800796e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800796e:	f000 ff5d 	bl	800882c <vPortExitCritical>

	return xReturn;
 8007972:	69fb      	ldr	r3, [r7, #28]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20001928 	.word	0x20001928
 8007980:	2000193c 	.word	0x2000193c

08007984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007988:	4b03      	ldr	r3, [pc, #12]	@ (8007998 <vTaskMissedYield+0x14>)
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	bf00      	nop
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20001938 	.word	0x20001938

0800799c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079a4:	f000 f852 	bl	8007a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079a8:	4b06      	ldr	r3, [pc, #24]	@ (80079c4 <prvIdleTask+0x28>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d9f9      	bls.n	80079a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <prvIdleTask+0x2c>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079c0:	e7f0      	b.n	80079a4 <prvIdleTask+0x8>
 80079c2:	bf00      	nop
 80079c4:	20001454 	.word	0x20001454
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079d2:	2300      	movs	r3, #0
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	e00c      	b.n	80079f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4a12      	ldr	r2, [pc, #72]	@ (8007a2c <prvInitialiseTaskLists+0x60>)
 80079e4:	4413      	add	r3, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fa07 	bl	8005dfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3301      	adds	r3, #1
 80079f0:	607b      	str	r3, [r7, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b37      	cmp	r3, #55	@ 0x37
 80079f6:	d9ef      	bls.n	80079d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079f8:	480d      	ldr	r0, [pc, #52]	@ (8007a30 <prvInitialiseTaskLists+0x64>)
 80079fa:	f7fe f9fe 	bl	8005dfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079fe:	480d      	ldr	r0, [pc, #52]	@ (8007a34 <prvInitialiseTaskLists+0x68>)
 8007a00:	f7fe f9fb 	bl	8005dfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a04:	480c      	ldr	r0, [pc, #48]	@ (8007a38 <prvInitialiseTaskLists+0x6c>)
 8007a06:	f7fe f9f8 	bl	8005dfa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a0a:	480c      	ldr	r0, [pc, #48]	@ (8007a3c <prvInitialiseTaskLists+0x70>)
 8007a0c:	f7fe f9f5 	bl	8005dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a10:	480b      	ldr	r0, [pc, #44]	@ (8007a40 <prvInitialiseTaskLists+0x74>)
 8007a12:	f7fe f9f2 	bl	8005dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a16:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <prvInitialiseTaskLists+0x78>)
 8007a18:	4a05      	ldr	r2, [pc, #20]	@ (8007a30 <prvInitialiseTaskLists+0x64>)
 8007a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <prvInitialiseTaskLists+0x7c>)
 8007a1e:	4a05      	ldr	r2, [pc, #20]	@ (8007a34 <prvInitialiseTaskLists+0x68>)
 8007a20:	601a      	str	r2, [r3, #0]
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20001454 	.word	0x20001454
 8007a30:	200018b4 	.word	0x200018b4
 8007a34:	200018c8 	.word	0x200018c8
 8007a38:	200018e4 	.word	0x200018e4
 8007a3c:	200018f8 	.word	0x200018f8
 8007a40:	20001910 	.word	0x20001910
 8007a44:	200018dc 	.word	0x200018dc
 8007a48:	200018e0 	.word	0x200018e0

08007a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a52:	e019      	b.n	8007a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a54:	f000 feba 	bl	80087cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a58:	4b10      	ldr	r3, [pc, #64]	@ (8007a9c <prvCheckTasksWaitingTermination+0x50>)
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe fa4e 	bl	8005f06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <prvCheckTasksWaitingTermination+0x54>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	4a0b      	ldr	r2, [pc, #44]	@ (8007aa0 <prvCheckTasksWaitingTermination+0x54>)
 8007a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a74:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <prvCheckTasksWaitingTermination+0x58>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8007aa4 <prvCheckTasksWaitingTermination+0x58>)
 8007a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a7e:	f000 fed5 	bl	800882c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f810 	bl	8007aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <prvCheckTasksWaitingTermination+0x58>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e1      	bne.n	8007a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200018f8 	.word	0x200018f8
 8007aa0:	20001924 	.word	0x20001924
 8007aa4:	2000190c 	.word	0x2000190c

08007aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3354      	adds	r3, #84	@ 0x54
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f004 fde3 	bl	800c680 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d108      	bne.n	8007ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 ffc7 	bl	8008a5c <vPortFree>
				vPortFree( pxTCB );
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 ffc4 	bl	8008a5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ad4:	e019      	b.n	8007b0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d103      	bne.n	8007ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ffbb 	bl	8008a5c <vPortFree>
	}
 8007ae6:	e010      	b.n	8007b0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d00b      	beq.n	8007b0a <prvDeleteTCB+0x62>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60fb      	str	r3, [r7, #12]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <prvDeleteTCB+0x5e>
	}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <prvResetNextTaskUnblockTime+0x38>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <prvResetNextTaskUnblockTime+0x3c>)
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b2c:	e008      	b.n	8007b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2e:	4b07      	ldr	r3, [pc, #28]	@ (8007b4c <prvResetNextTaskUnblockTime+0x38>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a04      	ldr	r2, [pc, #16]	@ (8007b50 <prvResetNextTaskUnblockTime+0x3c>)
 8007b3e:	6013      	str	r3, [r2, #0]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bc80      	pop	{r7}
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	200018dc 	.word	0x200018dc
 8007b50:	20001944 	.word	0x20001944

08007b54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007b5a:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <xTaskGetCurrentTaskHandle+0x18>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007b60:	687b      	ldr	r3, [r7, #4]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr
 8007b6c:	20001450 	.word	0x20001450

08007b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba4 <xTaskGetSchedulerState+0x34>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	e008      	b.n	8007b96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b84:	4b08      	ldr	r3, [pc, #32]	@ (8007ba8 <xTaskGetSchedulerState+0x38>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	e001      	b.n	8007b96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b92:	2300      	movs	r3, #0
 8007b94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b96:	687b      	ldr	r3, [r7, #4]
	}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20001930 	.word	0x20001930
 8007ba8:	2000194c 	.word	0x2000194c

08007bac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d051      	beq.n	8007c66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8007c70 <xTaskPriorityInherit+0xc4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d241      	bcs.n	8007c54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	db06      	blt.n	8007be6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd8:	4b25      	ldr	r3, [pc, #148]	@ (8007c70 <xTaskPriorityInherit+0xc4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6959      	ldr	r1, [r3, #20]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c74 <xTaskPriorityInherit+0xc8>)
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4299      	cmp	r1, r3
 8007bfc:	d122      	bne.n	8007c44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe f97f 	bl	8005f06 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c08:	4b19      	ldr	r3, [pc, #100]	@ (8007c70 <xTaskPriorityInherit+0xc4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c16:	4b18      	ldr	r3, [pc, #96]	@ (8007c78 <xTaskPriorityInherit+0xcc>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d903      	bls.n	8007c26 <xTaskPriorityInherit+0x7a>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	4a15      	ldr	r2, [pc, #84]	@ (8007c78 <xTaskPriorityInherit+0xcc>)
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4a10      	ldr	r2, [pc, #64]	@ (8007c74 <xTaskPriorityInherit+0xc8>)
 8007c34:	441a      	add	r2, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fe f907 	bl	8005e50 <vListInsertEnd>
 8007c42:	e004      	b.n	8007c4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c44:	4b0a      	ldr	r3, [pc, #40]	@ (8007c70 <xTaskPriorityInherit+0xc4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	e008      	b.n	8007c66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c58:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <xTaskPriorityInherit+0xc4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d201      	bcs.n	8007c66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c62:	2301      	movs	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c66:	68fb      	ldr	r3, [r7, #12]
	}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20001450 	.word	0x20001450
 8007c74:	20001454 	.word	0x20001454
 8007c78:	2000192c 	.word	0x2000192c

08007c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d058      	beq.n	8007d44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c92:	4b2f      	ldr	r3, [pc, #188]	@ (8007d50 <xTaskPriorityDisinherit+0xd4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d00b      	beq.n	8007cb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60fb      	str	r3, [r7, #12]
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	e7fd      	b.n	8007cb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd8:	1e5a      	subs	r2, r3, #1
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d02c      	beq.n	8007d44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d128      	bne.n	8007d44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe f905 	bl	8005f06 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d14:	4b0f      	ldr	r3, [pc, #60]	@ (8007d54 <xTaskPriorityDisinherit+0xd8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d903      	bls.n	8007d24 <xTaskPriorityDisinherit+0xa8>
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d20:	4a0c      	ldr	r2, [pc, #48]	@ (8007d54 <xTaskPriorityDisinherit+0xd8>)
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4a09      	ldr	r2, [pc, #36]	@ (8007d58 <xTaskPriorityDisinherit+0xdc>)
 8007d32:	441a      	add	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fe f888 	bl	8005e50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d44:	697b      	ldr	r3, [r7, #20]
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20001450 	.word	0x20001450
 8007d54:	2000192c 	.word	0x2000192c
 8007d58:	20001454 	.word	0x20001454

08007d5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d06c      	beq.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10b      	bne.n	8007d94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	e7fd      	b.n	8007d90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d902      	bls.n	8007da4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	61fb      	str	r3, [r7, #28]
 8007da2:	e002      	b.n	8007daa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d04c      	beq.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d147      	bne.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007dbe:	4b26      	ldr	r3, [pc, #152]	@ (8007e58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d10b      	bne.n	8007de0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60bb      	str	r3, [r7, #8]
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	e7fd      	b.n	8007ddc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db04      	blt.n	8007dfe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	6959      	ldr	r1, [r3, #20]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4a13      	ldr	r2, [pc, #76]	@ (8007e5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e0e:	4413      	add	r3, r2
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d11c      	bne.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe f874 	bl	8005f06 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e22:	4b0f      	ldr	r3, [pc, #60]	@ (8007e60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d903      	bls.n	8007e32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4a07      	ldr	r2, [pc, #28]	@ (8007e5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e40:	441a      	add	r2, r3
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f7fe f801 	bl	8005e50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e4e:	bf00      	nop
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20001450 	.word	0x20001450
 8007e5c:	20001454 	.word	0x20001454
 8007e60:	2000192c 	.word	0x2000192c

08007e64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e68:	4b07      	ldr	r3, [pc, #28]	@ (8007e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e70:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e76:	3201      	adds	r2, #1
 8007e78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007e7a:	4b03      	ldr	r3, [pc, #12]	@ (8007e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
	}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20001450 	.word	0x20001450

08007e8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e96:	4b21      	ldr	r3, [pc, #132]	@ (8007f1c <prvAddCurrentTaskToDelayedList+0x90>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e9c:	4b20      	ldr	r3, [pc, #128]	@ (8007f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f82f 	bl	8005f06 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d10a      	bne.n	8007ec6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8007f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4819      	ldr	r0, [pc, #100]	@ (8007f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ec0:	f7fd ffc6 	bl	8005e50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ec4:	e026      	b.n	8007f14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ece:	4b14      	ldr	r3, [pc, #80]	@ (8007f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d209      	bcs.n	8007ef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ede:	4b12      	ldr	r3, [pc, #72]	@ (8007f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7fd ffd3 	bl	8005e96 <vListInsert>
}
 8007ef0:	e010      	b.n	8007f14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f7fd ffc9 	bl	8005e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f04:	4b0a      	ldr	r3, [pc, #40]	@ (8007f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d202      	bcs.n	8007f14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f0e:	4a08      	ldr	r2, [pc, #32]	@ (8007f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6013      	str	r3, [r2, #0]
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20001928 	.word	0x20001928
 8007f20:	20001450 	.word	0x20001450
 8007f24:	20001910 	.word	0x20001910
 8007f28:	200018e0 	.word	0x200018e0
 8007f2c:	200018dc 	.word	0x200018dc
 8007f30:	20001944 	.word	0x20001944

08007f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	@ 0x28
 8007f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f3e:	f000 fb11 	bl	8008564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f42:	4b1d      	ldr	r3, [pc, #116]	@ (8007fb8 <xTimerCreateTimerTask+0x84>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d021      	beq.n	8007f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f52:	1d3a      	adds	r2, r7, #4
 8007f54:	f107 0108 	add.w	r1, r7, #8
 8007f58:	f107 030c 	add.w	r3, r7, #12
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fd fedf 	bl	8005d20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	9202      	str	r2, [sp, #8]
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	2300      	movs	r3, #0
 8007f72:	460a      	mov	r2, r1
 8007f74:	4911      	ldr	r1, [pc, #68]	@ (8007fbc <xTimerCreateTimerTask+0x88>)
 8007f76:	4812      	ldr	r0, [pc, #72]	@ (8007fc0 <xTimerCreateTimerTask+0x8c>)
 8007f78:	f7fe ff88 	bl	8006e8c <xTaskCreateStatic>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4a11      	ldr	r2, [pc, #68]	@ (8007fc4 <xTimerCreateTimerTask+0x90>)
 8007f80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f82:	4b10      	ldr	r3, [pc, #64]	@ (8007fc4 <xTimerCreateTimerTask+0x90>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	613b      	str	r3, [r7, #16]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fac:	697b      	ldr	r3, [r7, #20]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20001980 	.word	0x20001980
 8007fbc:	0800c928 	.word	0x0800c928
 8007fc0:	08008101 	.word	0x08008101
 8007fc4:	20001984 	.word	0x20001984

08007fc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	@ 0x28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10b      	bne.n	8007ff8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	623b      	str	r3, [r7, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ff8:	4b19      	ldr	r3, [pc, #100]	@ (8008060 <xTimerGenericCommand+0x98>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d02a      	beq.n	8008056 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b05      	cmp	r3, #5
 8008010:	dc18      	bgt.n	8008044 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008012:	f7ff fdad 	bl	8007b70 <xTaskGetSchedulerState>
 8008016:	4603      	mov	r3, r0
 8008018:	2b02      	cmp	r3, #2
 800801a:	d109      	bne.n	8008030 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800801c:	4b10      	ldr	r3, [pc, #64]	@ (8008060 <xTimerGenericCommand+0x98>)
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	f107 0110 	add.w	r1, r7, #16
 8008024:	2300      	movs	r3, #0
 8008026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008028:	f7fe f99a 	bl	8006360 <xQueueGenericSend>
 800802c:	6278      	str	r0, [r7, #36]	@ 0x24
 800802e:	e012      	b.n	8008056 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008030:	4b0b      	ldr	r3, [pc, #44]	@ (8008060 <xTimerGenericCommand+0x98>)
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	f107 0110 	add.w	r1, r7, #16
 8008038:	2300      	movs	r3, #0
 800803a:	2200      	movs	r2, #0
 800803c:	f7fe f990 	bl	8006360 <xQueueGenericSend>
 8008040:	6278      	str	r0, [r7, #36]	@ 0x24
 8008042:	e008      	b.n	8008056 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008044:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <xTimerGenericCommand+0x98>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	f107 0110 	add.w	r1, r7, #16
 800804c:	2300      	movs	r3, #0
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	f7fe fa88 	bl	8006564 <xQueueGenericSendFromISR>
 8008054:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	@ 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20001980 	.word	0x20001980

08008064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af02      	add	r7, sp, #8
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800806e:	4b23      	ldr	r3, [pc, #140]	@ (80080fc <prvProcessExpiredTimer+0x98>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	3304      	adds	r3, #4
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd ff42 	bl	8005f06 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d023      	beq.n	80080d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	18d1      	adds	r1, r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	6978      	ldr	r0, [r7, #20]
 800809e:	f000 f8d3 	bl	8008248 <prvInsertTimerInActiveList>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d020      	beq.n	80080ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080a8:	2300      	movs	r3, #0
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	2300      	movs	r3, #0
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	2100      	movs	r1, #0
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f7ff ff88 	bl	8007fc8 <xTimerGenericCommand>
 80080b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d114      	bne.n	80080ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	60fb      	str	r3, [r7, #12]
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	e7fd      	b.n	80080d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080de:	f023 0301 	bic.w	r3, r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	4798      	blx	r3
}
 80080f2:	bf00      	nop
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20001978 	.word	0x20001978

08008100 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f859 	bl	80081c4 <prvGetNextExpireTime>
 8008112:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4619      	mov	r1, r3
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f805 	bl	8008128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800811e:	f000 f8d5 	bl	80082cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008122:	bf00      	nop
 8008124:	e7f0      	b.n	8008108 <prvTimerTask+0x8>
	...

08008128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008132:	f7ff f90f 	bl	8007354 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f864 	bl	8008208 <prvSampleTimeNow>
 8008140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d130      	bne.n	80081aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <prvProcessTimerOrBlockTask+0x3c>
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	429a      	cmp	r2, r3
 8008154:	d806      	bhi.n	8008164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008156:	f7ff f90b 	bl	8007370 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff81 	bl	8008064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008162:	e024      	b.n	80081ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800816a:	4b13      	ldr	r3, [pc, #76]	@ (80081b8 <prvProcessTimerOrBlockTask+0x90>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <prvProcessTimerOrBlockTask+0x50>
 8008174:	2301      	movs	r3, #1
 8008176:	e000      	b.n	800817a <prvProcessTimerOrBlockTask+0x52>
 8008178:	2300      	movs	r3, #0
 800817a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800817c:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <prvProcessTimerOrBlockTask+0x94>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	f7fe fe4b 	bl	8006e24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800818e:	f7ff f8ef 	bl	8007370 <xTaskResumeAll>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008198:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <prvProcessTimerOrBlockTask+0x98>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
}
 80081a8:	e001      	b.n	80081ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081aa:	f7ff f8e1 	bl	8007370 <xTaskResumeAll>
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	2000197c 	.word	0x2000197c
 80081bc:	20001980 	.word	0x20001980
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008204 <prvGetNextExpireTime+0x40>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <prvGetNextExpireTime+0x16>
 80081d6:	2201      	movs	r2, #1
 80081d8:	e000      	b.n	80081dc <prvGetNextExpireTime+0x18>
 80081da:	2200      	movs	r2, #0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081e8:	4b06      	ldr	r3, [pc, #24]	@ (8008204 <prvGetNextExpireTime+0x40>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e001      	b.n	80081f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081f8:	68fb      	ldr	r3, [r7, #12]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr
 8008204:	20001978 	.word	0x20001978

08008208 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008210:	f7ff f94c 	bl	80074ac <xTaskGetTickCount>
 8008214:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008216:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <prvSampleTimeNow+0x3c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	429a      	cmp	r2, r3
 800821e:	d205      	bcs.n	800822c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008220:	f000 f93a 	bl	8008498 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e002      	b.n	8008232 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008232:	4a04      	ldr	r2, [pc, #16]	@ (8008244 <prvSampleTimeNow+0x3c>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008238:	68fb      	ldr	r3, [r7, #12]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20001988 	.word	0x20001988

08008248 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d812      	bhi.n	8008294 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	429a      	cmp	r2, r3
 800827a:	d302      	bcc.n	8008282 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	e01b      	b.n	80082ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008282:	4b10      	ldr	r3, [pc, #64]	@ (80082c4 <prvInsertTimerInActiveList+0x7c>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7fd fe02 	bl	8005e96 <vListInsert>
 8008292:	e012      	b.n	80082ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d206      	bcs.n	80082aa <prvInsertTimerInActiveList+0x62>
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d302      	bcc.n	80082aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e007      	b.n	80082ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082aa:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <prvInsertTimerInActiveList+0x80>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fd fdee 	bl	8005e96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082ba:	697b      	ldr	r3, [r7, #20]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	2000197c 	.word	0x2000197c
 80082c8:	20001978 	.word	0x20001978

080082cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08e      	sub	sp, #56	@ 0x38
 80082d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082d2:	e0ce      	b.n	8008472 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da19      	bge.n	800830e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	3304      	adds	r3, #4
 80082de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	61fb      	str	r3, [r7, #28]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008304:	6850      	ldr	r0, [r2, #4]
 8008306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008308:	6892      	ldr	r2, [r2, #8]
 800830a:	4611      	mov	r1, r2
 800830c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f2c0 80ae 	blt.w	8008472 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	3304      	adds	r3, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fded 	bl	8005f06 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832c:	463b      	mov	r3, r7
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff ff6a 	bl	8008208 <prvSampleTimeNow>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b09      	cmp	r3, #9
 800833a:	f200 8097 	bhi.w	800846c <prvProcessReceivedCommands+0x1a0>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <prvProcessReceivedCommands+0x78>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	0800836d 	.word	0x0800836d
 8008348:	0800836d 	.word	0x0800836d
 800834c:	0800836d 	.word	0x0800836d
 8008350:	080083e3 	.word	0x080083e3
 8008354:	080083f7 	.word	0x080083f7
 8008358:	08008443 	.word	0x08008443
 800835c:	0800836d 	.word	0x0800836d
 8008360:	0800836d 	.word	0x0800836d
 8008364:	080083e3 	.word	0x080083e3
 8008368:	080083f7 	.word	0x080083f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	18d1      	adds	r1, r2, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800838a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800838c:	f7ff ff5c 	bl	8008248 <prvInsertTimerInActiveList>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d06c      	beq.n	8008470 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800839c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d061      	beq.n	8008470 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	441a      	add	r2, r3
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2300      	movs	r3, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083be:	f7ff fe03 	bl	8007fc8 <xTimerGenericCommand>
 80083c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d152      	bne.n	8008470 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	61bb      	str	r3, [r7, #24]
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	e7fd      	b.n	80083de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e8:	f023 0301 	bic.w	r3, r3, #1
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083f4:	e03d      	b.n	8008472 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083fc:	f043 0301 	orr.w	r3, r3, #1
 8008400:	b2da      	uxtb	r2, r3
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	617b      	str	r3, [r7, #20]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	18d1      	adds	r1, r2, r3
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800843c:	f7ff ff04 	bl	8008248 <prvInsertTimerInActiveList>
					break;
 8008440:	e017      	b.n	8008472 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d103      	bne.n	8008458 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008452:	f000 fb03 	bl	8008a5c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008456:	e00c      	b.n	8008472 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800846a:	e002      	b.n	8008472 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <prvProcessReceivedCommands+0x1a6>
					break;
 8008470:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008472:	4b08      	ldr	r3, [pc, #32]	@ (8008494 <prvProcessReceivedCommands+0x1c8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	1d39      	adds	r1, r7, #4
 8008478:	2200      	movs	r2, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe f90e 	bl	800669c <xQueueReceive>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	f47f af26 	bne.w	80082d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	3730      	adds	r7, #48	@ 0x30
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20001980 	.word	0x20001980

08008498 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800849e:	e049      	b.n	8008534 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084a0:	4b2e      	ldr	r3, [pc, #184]	@ (800855c <prvSwitchTimerLists+0xc4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084aa:	4b2c      	ldr	r3, [pc, #176]	@ (800855c <prvSwitchTimerLists+0xc4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fd fd24 	bl	8005f06 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d02f      	beq.n	8008534 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4413      	add	r3, r2
 80084dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d90e      	bls.n	8008504 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084f2:	4b1a      	ldr	r3, [pc, #104]	@ (800855c <prvSwitchTimerLists+0xc4>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7fd fcca 	bl	8005e96 <vListInsert>
 8008502:	e017      	b.n	8008534 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008504:	2300      	movs	r3, #0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	2100      	movs	r1, #0
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fd5a 	bl	8007fc8 <xTimerGenericCommand>
 8008514:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	603b      	str	r3, [r7, #0]
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008534:	4b09      	ldr	r3, [pc, #36]	@ (800855c <prvSwitchTimerLists+0xc4>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1b0      	bne.n	80084a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800853e:	4b07      	ldr	r3, [pc, #28]	@ (800855c <prvSwitchTimerLists+0xc4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008544:	4b06      	ldr	r3, [pc, #24]	@ (8008560 <prvSwitchTimerLists+0xc8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a04      	ldr	r2, [pc, #16]	@ (800855c <prvSwitchTimerLists+0xc4>)
 800854a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800854c:	4a04      	ldr	r2, [pc, #16]	@ (8008560 <prvSwitchTimerLists+0xc8>)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6013      	str	r3, [r2, #0]
}
 8008552:	bf00      	nop
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20001978 	.word	0x20001978
 8008560:	2000197c 	.word	0x2000197c

08008564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800856a:	f000 f92f 	bl	80087cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800856e:	4b15      	ldr	r3, [pc, #84]	@ (80085c4 <prvCheckForValidListAndQueue+0x60>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d120      	bne.n	80085b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008576:	4814      	ldr	r0, [pc, #80]	@ (80085c8 <prvCheckForValidListAndQueue+0x64>)
 8008578:	f7fd fc3f 	bl	8005dfa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800857c:	4813      	ldr	r0, [pc, #76]	@ (80085cc <prvCheckForValidListAndQueue+0x68>)
 800857e:	f7fd fc3c 	bl	8005dfa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008582:	4b13      	ldr	r3, [pc, #76]	@ (80085d0 <prvCheckForValidListAndQueue+0x6c>)
 8008584:	4a10      	ldr	r2, [pc, #64]	@ (80085c8 <prvCheckForValidListAndQueue+0x64>)
 8008586:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008588:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <prvCheckForValidListAndQueue+0x70>)
 800858a:	4a10      	ldr	r2, [pc, #64]	@ (80085cc <prvCheckForValidListAndQueue+0x68>)
 800858c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800858e:	2300      	movs	r3, #0
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <prvCheckForValidListAndQueue+0x74>)
 8008594:	4a11      	ldr	r2, [pc, #68]	@ (80085dc <prvCheckForValidListAndQueue+0x78>)
 8008596:	2110      	movs	r1, #16
 8008598:	200a      	movs	r0, #10
 800859a:	f7fd fd47 	bl	800602c <xQueueGenericCreateStatic>
 800859e:	4603      	mov	r3, r0
 80085a0:	4a08      	ldr	r2, [pc, #32]	@ (80085c4 <prvCheckForValidListAndQueue+0x60>)
 80085a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085a4:	4b07      	ldr	r3, [pc, #28]	@ (80085c4 <prvCheckForValidListAndQueue+0x60>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085ac:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <prvCheckForValidListAndQueue+0x60>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	490b      	ldr	r1, [pc, #44]	@ (80085e0 <prvCheckForValidListAndQueue+0x7c>)
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fc0e 	bl	8006dd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085b8:	f000 f938 	bl	800882c <vPortExitCritical>
}
 80085bc:	bf00      	nop
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20001980 	.word	0x20001980
 80085c8:	20001950 	.word	0x20001950
 80085cc:	20001964 	.word	0x20001964
 80085d0:	20001978 	.word	0x20001978
 80085d4:	2000197c 	.word	0x2000197c
 80085d8:	20001a2c 	.word	0x20001a2c
 80085dc:	2000198c 	.word	0x2000198c
 80085e0:	0800c930 	.word	0x0800c930

080085e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3b04      	subs	r3, #4
 80085f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3b04      	subs	r3, #4
 8008602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f023 0201 	bic.w	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3b04      	subs	r3, #4
 8008612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008614:	4a08      	ldr	r2, [pc, #32]	@ (8008638 <pxPortInitialiseStack+0x54>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3b14      	subs	r3, #20
 800861e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3b20      	subs	r3, #32
 800862a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800862c:	68fb      	ldr	r3, [r7, #12]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr
 8008638:	0800863d 	.word	0x0800863d

0800863c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008646:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <prvTaskExitError+0x54>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864e:	d00b      	beq.n	8008668 <prvTaskExitError+0x2c>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	60fb      	str	r3, [r7, #12]
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <prvTaskExitError+0x28>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60bb      	str	r3, [r7, #8]
}
 800867a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800867c:	bf00      	nop
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0fc      	beq.n	800867e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr
 8008690:	20000b24 	.word	0x20000b24
	...

080086a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086a0:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <pxCurrentTCBConst2>)
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6808      	ldr	r0, [r1, #0]
 80086a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086aa:	f380 8809 	msr	PSP, r0
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f04f 0000 	mov.w	r0, #0
 80086b6:	f380 8811 	msr	BASEPRI, r0
 80086ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80086be:	4770      	bx	lr

080086c0 <pxCurrentTCBConst2>:
 80086c0:	20001450 	.word	0x20001450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80086c8:	4806      	ldr	r0, [pc, #24]	@ (80086e4 <prvPortStartFirstTask+0x1c>)
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	6800      	ldr	r0, [r0, #0]
 80086ce:	f380 8808 	msr	MSP, r0
 80086d2:	b662      	cpsie	i
 80086d4:	b661      	cpsie	f
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	df00      	svc	0
 80086e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086e2:	bf00      	nop
 80086e4:	e000ed08 	.word	0xe000ed08

080086e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086ee:	4b32      	ldr	r3, [pc, #200]	@ (80087b8 <xPortStartScheduler+0xd0>)
 80086f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	22ff      	movs	r2, #255	@ 0xff
 80086fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008710:	b2da      	uxtb	r2, r3
 8008712:	4b2a      	ldr	r3, [pc, #168]	@ (80087bc <xPortStartScheduler+0xd4>)
 8008714:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008716:	4b2a      	ldr	r3, [pc, #168]	@ (80087c0 <xPortStartScheduler+0xd8>)
 8008718:	2207      	movs	r2, #7
 800871a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800871c:	e009      	b.n	8008732 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800871e:	4b28      	ldr	r3, [pc, #160]	@ (80087c0 <xPortStartScheduler+0xd8>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3b01      	subs	r3, #1
 8008724:	4a26      	ldr	r2, [pc, #152]	@ (80087c0 <xPortStartScheduler+0xd8>)
 8008726:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	b2db      	uxtb	r3, r3
 8008730:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873a:	2b80      	cmp	r3, #128	@ 0x80
 800873c:	d0ef      	beq.n	800871e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800873e:	4b20      	ldr	r3, [pc, #128]	@ (80087c0 <xPortStartScheduler+0xd8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1c3 0307 	rsb	r3, r3, #7
 8008746:	2b04      	cmp	r3, #4
 8008748:	d00b      	beq.n	8008762 <xPortStartScheduler+0x7a>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	60bb      	str	r3, [r7, #8]
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	e7fd      	b.n	800875e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008762:	4b17      	ldr	r3, [pc, #92]	@ (80087c0 <xPortStartScheduler+0xd8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	4a15      	ldr	r2, [pc, #84]	@ (80087c0 <xPortStartScheduler+0xd8>)
 800876a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800876c:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <xPortStartScheduler+0xd8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008774:	4a12      	ldr	r2, [pc, #72]	@ (80087c0 <xPortStartScheduler+0xd8>)
 8008776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	b2da      	uxtb	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008780:	4b10      	ldr	r3, [pc, #64]	@ (80087c4 <xPortStartScheduler+0xdc>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a0f      	ldr	r2, [pc, #60]	@ (80087c4 <xPortStartScheduler+0xdc>)
 8008786:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800878a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800878c:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <xPortStartScheduler+0xdc>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a0c      	ldr	r2, [pc, #48]	@ (80087c4 <xPortStartScheduler+0xdc>)
 8008792:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008798:	f000 f8b8 	bl	800890c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <xPortStartScheduler+0xe0>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087a2:	f7ff ff91 	bl	80086c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087a6:	f7fe ff49 	bl	800763c <vTaskSwitchContext>
	prvTaskExitError();
 80087aa:	f7ff ff47 	bl	800863c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	e000e400 	.word	0xe000e400
 80087bc:	20001a7c 	.word	0x20001a7c
 80087c0:	20001a80 	.word	0x20001a80
 80087c4:	e000ed20 	.word	0xe000ed20
 80087c8:	20000b24 	.word	0x20000b24

080087cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	607b      	str	r3, [r7, #4]
}
 80087e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008824 <vPortEnterCritical+0x58>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3301      	adds	r3, #1
 80087ec:	4a0d      	ldr	r2, [pc, #52]	@ (8008824 <vPortEnterCritical+0x58>)
 80087ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008824 <vPortEnterCritical+0x58>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d110      	bne.n	800881a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008828 <vPortEnterCritical+0x5c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <vPortEnterCritical+0x4e>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	603b      	str	r3, [r7, #0]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <vPortEnterCritical+0x4a>
	}
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr
 8008824:	20000b24 	.word	0x20000b24
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008832:	4b12      	ldr	r3, [pc, #72]	@ (800887c <vPortExitCritical+0x50>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <vPortExitCritical+0x26>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	607b      	str	r3, [r7, #4]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008852:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <vPortExitCritical+0x50>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3b01      	subs	r3, #1
 8008858:	4a08      	ldr	r2, [pc, #32]	@ (800887c <vPortExitCritical+0x50>)
 800885a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800885c:	4b07      	ldr	r3, [pc, #28]	@ (800887c <vPortExitCritical+0x50>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d105      	bne.n	8008870 <vPortExitCritical+0x44>
 8008864:	2300      	movs	r3, #0
 8008866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f383 8811 	msr	BASEPRI, r3
}
 800886e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000b24 	.word	0x20000b24

08008880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008880:	f3ef 8009 	mrs	r0, PSP
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4b0d      	ldr	r3, [pc, #52]	@ (80088c0 <pxCurrentTCBConst>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008890:	6010      	str	r0, [r2, #0]
 8008892:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008896:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800889a:	f380 8811 	msr	BASEPRI, r0
 800889e:	f7fe fecd 	bl	800763c <vTaskSwitchContext>
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	6808      	ldr	r0, [r1, #0]
 80088b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088b6:	f380 8809 	msr	PSP, r0
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	4770      	bx	lr

080088c0 <pxCurrentTCBConst>:
 80088c0:	20001450 	.word	0x20001450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088e2:	f7fe fdf1 	bl	80074c8 <xTaskIncrementTick>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088ec:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <SysTick_Handler+0x40>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	2300      	movs	r3, #0
 80088f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f383 8811 	msr	BASEPRI, r3
}
 80088fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008910:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <vPortSetupTimerInterrupt+0x30>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008916:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <vPortSetupTimerInterrupt+0x34>)
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800891c:	4b09      	ldr	r3, [pc, #36]	@ (8008944 <vPortSetupTimerInterrupt+0x38>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a09      	ldr	r2, [pc, #36]	@ (8008948 <vPortSetupTimerInterrupt+0x3c>)
 8008922:	fba2 2303 	umull	r2, r3, r2, r3
 8008926:	099b      	lsrs	r3, r3, #6
 8008928:	4a08      	ldr	r2, [pc, #32]	@ (800894c <vPortSetupTimerInterrupt+0x40>)
 800892a:	3b01      	subs	r3, #1
 800892c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800892e:	4b03      	ldr	r3, [pc, #12]	@ (800893c <vPortSetupTimerInterrupt+0x30>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr
 800893c:	e000e010 	.word	0xe000e010
 8008940:	e000e018 	.word	0xe000e018
 8008944:	20000b18 	.word	0x20000b18
 8008948:	10624dd3 	.word	0x10624dd3
 800894c:	e000e014 	.word	0xe000e014

08008950 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008956:	f3ef 8305 	mrs	r3, IPSR
 800895a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b0f      	cmp	r3, #15
 8008960:	d915      	bls.n	800898e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008962:	4a17      	ldr	r2, [pc, #92]	@ (80089c0 <vPortValidateInterruptPriority+0x70>)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800896c:	4b15      	ldr	r3, [pc, #84]	@ (80089c4 <vPortValidateInterruptPriority+0x74>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	7afa      	ldrb	r2, [r7, #11]
 8008972:	429a      	cmp	r2, r3
 8008974:	d20b      	bcs.n	800898e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	607b      	str	r3, [r7, #4]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800898e:	4b0e      	ldr	r3, [pc, #56]	@ (80089c8 <vPortValidateInterruptPriority+0x78>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008996:	4b0d      	ldr	r3, [pc, #52]	@ (80089cc <vPortValidateInterruptPriority+0x7c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d90b      	bls.n	80089b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	603b      	str	r3, [r7, #0]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <vPortValidateInterruptPriority+0x62>
	}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr
 80089c0:	e000e3f0 	.word	0xe000e3f0
 80089c4:	20001a7c 	.word	0x20001a7c
 80089c8:	e000ed0c 	.word	0xe000ed0c
 80089cc:	20001a80 	.word	0x20001a80

080089d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d004      	beq.n	80089f0 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f023 0307 	bic.w	r3, r3, #7
 80089ec:	3308      	adds	r3, #8
 80089ee:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80089f0:	f7fe fcb0 	bl	8007354 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80089f4:	4b16      	ldr	r3, [pc, #88]	@ (8008a50 <pvPortMalloc+0x80>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d105      	bne.n	8008a08 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80089fc:	4b15      	ldr	r3, [pc, #84]	@ (8008a54 <pvPortMalloc+0x84>)
 80089fe:	f023 0307 	bic.w	r3, r3, #7
 8008a02:	461a      	mov	r2, r3
 8008a04:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <pvPortMalloc+0x80>)
 8008a06:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008a08:	4b13      	ldr	r3, [pc, #76]	@ (8008a58 <pvPortMalloc+0x88>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f643 72f7 	movw	r2, #16375	@ 0x3ff7
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d813      	bhi.n	8008a40 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8008a18:	4b0f      	ldr	r3, [pc, #60]	@ (8008a58 <pvPortMalloc+0x88>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	441a      	add	r2, r3
 8008a20:	4b0d      	ldr	r3, [pc, #52]	@ (8008a58 <pvPortMalloc+0x88>)
 8008a22:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d90b      	bls.n	8008a40 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8008a28:	4b09      	ldr	r3, [pc, #36]	@ (8008a50 <pvPortMalloc+0x80>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <pvPortMalloc+0x88>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8008a34:	4b08      	ldr	r3, [pc, #32]	@ (8008a58 <pvPortMalloc+0x88>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	4a06      	ldr	r2, [pc, #24]	@ (8008a58 <pvPortMalloc+0x88>)
 8008a3e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a40:	f7fe fc96 	bl	8007370 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008a44:	68fb      	ldr	r3, [r7, #12]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20005a88 	.word	0x20005a88
 8008a54:	20001a8c 	.word	0x20001a8c
 8008a58:	20005a84 	.word	0x20005a84

08008a5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <vPortFree+0x26>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	60fb      	str	r3, [r7, #12]
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	e7fd      	b.n	8008a7e <vPortFree+0x22>
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8008a94:	4a24      	ldr	r2, [pc, #144]	@ (8008b28 <RadioInit+0x9c>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8008a9a:	4b24      	ldr	r3, [pc, #144]	@ (8008b2c <RadioInit+0xa0>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8008aa0:	4b22      	ldr	r3, [pc, #136]	@ (8008b2c <RadioInit+0xa0>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8008aa6:	4b21      	ldr	r3, [pc, #132]	@ (8008b2c <RadioInit+0xa0>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008aac:	4b1f      	ldr	r3, [pc, #124]	@ (8008b2c <RadioInit+0xa0>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8008ab2:	481f      	ldr	r0, [pc, #124]	@ (8008b30 <RadioInit+0xa4>)
 8008ab4:	f001 ff86 	bl	800a9c4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8008b2c <RadioInit+0xa0>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008abe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b2c <RadioInit+0xa0>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8008ac4:	f002 fa1a 	bl	800aefc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008ac8:	2100      	movs	r1, #0
 8008aca:	2000      	movs	r0, #0
 8008acc:	f002 fde6 	bl	800b69c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	f002 fba3 	bl	800b220 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008ada:	2300      	movs	r3, #0
 8008adc:	2200      	movs	r2, #0
 8008ade:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008ae2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008ae6:	f002 fad3 	bl	800b090 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008aea:	f000 fe91 	bl	8009810 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008aee:	2300      	movs	r3, #0
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <RadioInit+0xa8>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	f04f 31ff 	mov.w	r1, #4294967295
 8008afa:	480f      	ldr	r0, [pc, #60]	@ (8008b38 <RadioInit+0xac>)
 8008afc:	f003 faaa 	bl	800c054 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <RadioInit+0xb0>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	f04f 31ff 	mov.w	r1, #4294967295
 8008b0c:	480c      	ldr	r0, [pc, #48]	@ (8008b40 <RadioInit+0xb4>)
 8008b0e:	f003 faa1 	bl	800c054 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008b12:	4809      	ldr	r0, [pc, #36]	@ (8008b38 <RadioInit+0xac>)
 8008b14:	f003 fb42 	bl	800c19c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008b18:	4809      	ldr	r0, [pc, #36]	@ (8008b40 <RadioInit+0xb4>)
 8008b1a:	f003 fb3f 	bl	800c19c <UTIL_TIMER_Stop>
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20005b8c 	.word	0x20005b8c
 8008b2c:	20005b90 	.word	0x20005b90
 8008b30:	08009c05 	.word	0x08009c05
 8008b34:	08009b8d 	.word	0x08009b8d
 8008b38:	20005bec 	.word	0x20005bec
 8008b3c:	08009ba1 	.word	0x08009ba1
 8008b40:	20005c04 	.word	0x20005c04

08008b44 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008b48:	f001 ff84 	bl	800aa54 <SUBGRF_GetOperatingMode>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	d00a      	beq.n	8008b68 <RadioGetStatus+0x24>
 8008b52:	2b07      	cmp	r3, #7
 8008b54:	dc0a      	bgt.n	8008b6c <RadioGetStatus+0x28>
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d002      	beq.n	8008b60 <RadioGetStatus+0x1c>
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d002      	beq.n	8008b64 <RadioGetStatus+0x20>
 8008b5e:	e005      	b.n	8008b6c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008b60:	2302      	movs	r3, #2
 8008b62:	e004      	b.n	8008b6e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e002      	b.n	8008b6e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e000      	b.n	8008b6e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008b6c:	2300      	movs	r3, #0
    }
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008c28 <RadioSetModem+0xb4>)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f003 f95b 	bl	800be42 <RFW_SetRadioModem>
    switch( modem )
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2b05      	cmp	r3, #5
 8008b90:	d80e      	bhi.n	8008bb0 <RadioSetModem+0x3c>
 8008b92:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <RadioSetModem+0x24>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bbf 	.word	0x08008bbf
 8008b9c:	08008bcd 	.word	0x08008bcd
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bf3 	.word	0x08008bf3
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008c0f 	.word	0x08008c0f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008bb0:	2003      	movs	r0, #3
 8008bb2:	f002 fb0f 	bl	800b1d4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8008c28 <RadioSetModem+0xb4>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	735a      	strb	r2, [r3, #13]
        break;
 8008bbc:	e02f      	b.n	8008c1e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	f002 fb08 	bl	800b1d4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008bc4:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <RadioSetModem+0xb4>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	735a      	strb	r2, [r3, #13]
        break;
 8008bca:	e028      	b.n	8008c1e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008bcc:	2001      	movs	r0, #1
 8008bce:	f002 fb01 	bl	800b1d4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008bd2:	4b15      	ldr	r3, [pc, #84]	@ (8008c28 <RadioSetModem+0xb4>)
 8008bd4:	7b5a      	ldrb	r2, [r3, #13]
 8008bd6:	4b14      	ldr	r3, [pc, #80]	@ (8008c28 <RadioSetModem+0xb4>)
 8008bd8:	7b1b      	ldrb	r3, [r3, #12]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d01e      	beq.n	8008c1c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008bde:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <RadioSetModem+0xb4>)
 8008be0:	7b1a      	ldrb	r2, [r3, #12]
 8008be2:	4b11      	ldr	r3, [pc, #68]	@ (8008c28 <RadioSetModem+0xb4>)
 8008be4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008be6:	4b10      	ldr	r3, [pc, #64]	@ (8008c28 <RadioSetModem+0xb4>)
 8008be8:	7b5b      	ldrb	r3, [r3, #13]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 ff98 	bl	8009b20 <RadioSetPublicNetwork>
        }
        break;
 8008bf0:	e014      	b.n	8008c1c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008bf2:	2002      	movs	r0, #2
 8008bf4:	f002 faee 	bl	800b1d4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <RadioSetModem+0xb4>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	735a      	strb	r2, [r3, #13]
        break;
 8008bfe:	e00e      	b.n	8008c1e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008c00:	2002      	movs	r0, #2
 8008c02:	f002 fae7 	bl	800b1d4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008c06:	4b08      	ldr	r3, [pc, #32]	@ (8008c28 <RadioSetModem+0xb4>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	735a      	strb	r2, [r3, #13]
        break;
 8008c0c:	e007      	b.n	8008c1e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f002 fae0 	bl	800b1d4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008c14:	4b04      	ldr	r3, [pc, #16]	@ (8008c28 <RadioSetModem+0xb4>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	735a      	strb	r2, [r3, #13]
        break;
 8008c1a:	e000      	b.n	8008c1e <RadioSetModem+0xaa>
        break;
 8008c1c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20005b90 	.word	0x20005b90

08008c2c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f002 fa87 	bl	800b148 <SUBGRF_SetRfFrequency>
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b090      	sub	sp, #64	@ 0x40
 8008c46:	af0a      	add	r7, sp, #40	@ 0x28
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	603b      	str	r3, [r7, #0]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008c52:	2301      	movs	r3, #1
 8008c54:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008c5e:	f000 fdea 	bl	8009836 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008c62:	2000      	movs	r0, #0
 8008c64:	f7ff ff86 	bl	8008b74 <RadioSetModem>

    RadioSetChannel( freq );
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff ffdf 	bl	8008c2c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008c6e:	2301      	movs	r3, #1
 8008c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c72:	2300      	movs	r3, #0
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	2300      	movs	r3, #0
 8008c78:	9307      	str	r3, [sp, #28]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9306      	str	r3, [sp, #24]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	2300      	movs	r3, #0
 8008c84:	9304      	str	r3, [sp, #16]
 8008c86:	2300      	movs	r3, #0
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9302      	str	r3, [sp, #8]
 8008c8e:	2303      	movs	r3, #3
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	2300      	movs	r3, #0
 8008c98:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	f000 f83c 	bl	8008d1c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	f000 fdcd 	bl	8009844 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008caa:	f000 ff67 	bl	8009b7c <RadioGetWakeupTime>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f8 f97d 	bl	8000fb0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8008cb6:	f003 fb0b 	bl	800c2d0 <UTIL_TIMER_GetCurrentTime>
 8008cba:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008cbc:	e00d      	b.n	8008cda <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	f000 feae 	bl	8009a20 <RadioRssi>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008cc8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	dd02      	ble.n	8008cda <RadioIsChannelFree+0x98>
        {
            status = false;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	75fb      	strb	r3, [r7, #23]
            break;
 8008cd8:	e006      	b.n	8008ce8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008cda:	6938      	ldr	r0, [r7, #16]
 8008cdc:	f003 fb0a 	bl	800c2f4 <UTIL_TIMER_GetElapsedTime>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d8ea      	bhi.n	8008cbe <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008ce8:	f000 fda5 	bl	8009836 <RadioStandby>

    return status;
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008d00:	2300      	movs	r3, #0
 8008d02:	2200      	movs	r2, #0
 8008d04:	2100      	movs	r1, #0
 8008d06:	2000      	movs	r0, #0
 8008d08:	f002 f9c2 	bl	800b090 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008d0c:	f001 ff73 	bl	800abf6 <SUBGRF_GetRandom>
 8008d10:	6078      	str	r0, [r7, #4]

    return rnd;
 8008d12:	687b      	ldr	r3, [r7, #4]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	@ 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	607a      	str	r2, [r7, #4]
 8008d26:	461a      	mov	r2, r3
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008d30:	4ab9      	ldr	r2, [pc, #740]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008d32:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008d36:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008d38:	f003 f841 	bl	800bdbe <RFW_DeInit>
    if( rxContinuous == true )
 8008d3c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008d48:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008d50:	4ab2      	ldr	r2, [pc, #712]	@ (800901c <RadioSetRxConfig+0x300>)
 8008d52:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008d56:	7013      	strb	r3, [r2, #0]
 8008d58:	e002      	b.n	8008d60 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008d5a:	4bb0      	ldr	r3, [pc, #704]	@ (800901c <RadioSetRxConfig+0x300>)
 8008d5c:	22ff      	movs	r2, #255	@ 0xff
 8008d5e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	2b05      	cmp	r3, #5
 8008d64:	d009      	beq.n	8008d7a <RadioSetRxConfig+0x5e>
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	f300 81d7 	bgt.w	800911a <RadioSetRxConfig+0x3fe>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 80bf 	beq.w	8008ef0 <RadioSetRxConfig+0x1d4>
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	f000 8124 	beq.w	8008fc0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008d78:	e1cf      	b.n	800911a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	f002 f880 	bl	800ae80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008d80:	4ba5      	ldr	r3, [pc, #660]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008d88:	4aa3      	ldr	r2, [pc, #652]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008d8e:	4ba2      	ldr	r3, [pc, #648]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008d90:	2209      	movs	r2, #9
 8008d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8008d96:	4ba0      	ldr	r3, [pc, #640]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008d98:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8008d9c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008d9e:	68b8      	ldr	r0, [r7, #8]
 8008da0:	f002 ff40 	bl	800bc24 <SUBGRF_GetFskBandwidthRegValue>
 8008da4:	4603      	mov	r3, r0
 8008da6:	461a      	mov	r2, r3
 8008da8:	4b9b      	ldr	r3, [pc, #620]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008dae:	4b9a      	ldr	r3, [pc, #616]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008db4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	4b97      	ldr	r3, [pc, #604]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008dbc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008dbe:	4b96      	ldr	r3, [pc, #600]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8008dc4:	4b94      	ldr	r3, [pc, #592]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008dc6:	2210      	movs	r2, #16
 8008dc8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008dca:	4b93      	ldr	r3, [pc, #588]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008dd0:	4b91      	ldr	r3, [pc, #580]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008dd6:	4b91      	ldr	r3, [pc, #580]	@ (800901c <RadioSetRxConfig+0x300>)
 8008dd8:	781a      	ldrb	r2, [r3, #0]
 8008dda:	4b8f      	ldr	r3, [pc, #572]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008ddc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008dde:	4b8e      	ldr	r3, [pc, #568]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008de4:	4b8c      	ldr	r3, [pc, #560]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008dea:	2005      	movs	r0, #5
 8008dec:	f7ff fec2 	bl	8008b74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008df0:	488b      	ldr	r0, [pc, #556]	@ (8009020 <RadioSetRxConfig+0x304>)
 8008df2:	f002 fae3 	bl	800b3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008df6:	488b      	ldr	r0, [pc, #556]	@ (8009024 <RadioSetRxConfig+0x308>)
 8008df8:	f002 fbb2 	bl	800b560 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008dfc:	4a8a      	ldr	r2, [pc, #552]	@ (8009028 <RadioSetRxConfig+0x30c>)
 8008dfe:	f107 031c 	add.w	r3, r7, #28
 8008e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e06:	e883 0003 	stmia.w	r3, {r0, r1}
 8008e0a:	f107 031c 	add.w	r3, r7, #28
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 fe6f 	bl	800aaf2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008e14:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008e18:	f001 feba 	bl	800ab90 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008e1c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008e20:	f000 fe1c 	bl	8009a5c <RadioRead>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e2e:	f023 0310 	bic.w	r3, r3, #16
 8008e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008e40:	f000 fdfa 	bl	8009a38 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008e44:	2104      	movs	r1, #4
 8008e46:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8008e4a:	f000 fdf5 	bl	8009a38 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008e4e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008e52:	f000 fe03 	bl	8009a5c <RadioRead>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e60:	f023 031c 	bic.w	r3, r3, #28
 8008e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e6c:	f043 0308 	orr.w	r3, r3, #8
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008e78:	f000 fdde 	bl	8009a38 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008e7c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008e80:	f000 fdec 	bl	8009a5c <RadioRead>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e8e:	f023 0318 	bic.w	r3, r3, #24
 8008e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8008e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e9a:	f043 0318 	orr.w	r3, r3, #24
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008ea6:	f000 fdc7 	bl	8009a38 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8008eaa:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008eae:	f000 fdd5 	bl	8009a5c <RadioRead>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ec8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	4619      	mov	r1, r3
 8008ed0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008ed4:	f000 fdb0 	bl	8009a38 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008ed8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008eda:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eea:	4a4b      	ldr	r2, [pc, #300]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008eec:	6093      	str	r3, [r2, #8]
            break;
 8008eee:	e115      	b.n	800911c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	f001 ffc5 	bl	800ae80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ef6:	4b48      	ldr	r3, [pc, #288]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008efe:	4a46      	ldr	r2, [pc, #280]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008f04:	4b44      	ldr	r3, [pc, #272]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f06:	220b      	movs	r2, #11
 8008f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008f0c:	68b8      	ldr	r0, [r7, #8]
 8008f0e:	f002 fe89 	bl	800bc24 <SUBGRF_GetFskBandwidthRegValue>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
 8008f16:	4b40      	ldr	r3, [pc, #256]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008f22:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	4b3b      	ldr	r3, [pc, #236]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f2a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f2e:	2204      	movs	r2, #4
 8008f30:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008f32:	4b39      	ldr	r3, [pc, #228]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f34:	2218      	movs	r2, #24
 8008f36:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008f38:	4b37      	ldr	r3, [pc, #220]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008f3e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008f42:	f083 0301 	eor.w	r3, r3, #1
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4b33      	ldr	r3, [pc, #204]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f4c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008f4e:	4b33      	ldr	r3, [pc, #204]	@ (800901c <RadioSetRxConfig+0x300>)
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	4b31      	ldr	r3, [pc, #196]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f54:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008f56:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f60:	22f2      	movs	r2, #242	@ 0xf2
 8008f62:	75da      	strb	r2, [r3, #23]
 8008f64:	e002      	b.n	8008f6c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008f66:	4b2c      	ldr	r3, [pc, #176]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f68:	2201      	movs	r2, #1
 8008f6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008f72:	f000 fc60 	bl	8009836 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008f76:	2000      	movs	r0, #0
 8008f78:	f7ff fdfc 	bl	8008b74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f7c:	4828      	ldr	r0, [pc, #160]	@ (8009020 <RadioSetRxConfig+0x304>)
 8008f7e:	f002 fa1d 	bl	800b3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f82:	4828      	ldr	r0, [pc, #160]	@ (8009024 <RadioSetRxConfig+0x308>)
 8008f84:	f002 faec 	bl	800b560 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008f88:	4a28      	ldr	r2, [pc, #160]	@ (800902c <RadioSetRxConfig+0x310>)
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f92:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f96:	f107 0314 	add.w	r3, r7, #20
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fda9 	bl	800aaf2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008fa0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008fa4:	f001 fdf4 	bl	800ab90 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008fa8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008faa:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	4a17      	ldr	r2, [pc, #92]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008fbc:	6093      	str	r3, [r2, #8]
            break;
 8008fbe:	e0ad      	b.n	800911c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f001 ff5d 	bl	800ae80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008fc6:	4b14      	ldr	r3, [pc, #80]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	4b11      	ldr	r3, [pc, #68]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008fd8:	4a15      	ldr	r2, [pc, #84]	@ (8009030 <RadioSetRxConfig+0x314>)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	781a      	ldrb	r2, [r3, #0]
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <RadioSetRxConfig+0x2e4>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b0b      	cmp	r3, #11
 8008ff8:	d008      	beq.n	800900c <RadioSetRxConfig+0x2f0>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b0c      	cmp	r3, #12
 8008ffe:	d005      	beq.n	800900c <RadioSetRxConfig+0x2f0>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d116      	bne.n	8009034 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b0c      	cmp	r3, #12
 800900a:	d113      	bne.n	8009034 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <RadioSetRxConfig+0x2fc>)
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009014:	e012      	b.n	800903c <RadioSetRxConfig+0x320>
 8009016:	bf00      	nop
 8009018:	20005b90 	.word	0x20005b90
 800901c:	20000b28 	.word	0x20000b28
 8009020:	20005bc8 	.word	0x20005bc8
 8009024:	20005b9e 	.word	0x20005b9e
 8009028:	0800c938 	.word	0x0800c938
 800902c:	0800c940 	.word	0x0800c940
 8009030:	0800cbf0 	.word	0x0800cbf0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009034:	4b3b      	ldr	r3, [pc, #236]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800903c:	4b39      	ldr	r3, [pc, #228]	@ (8009124 <RadioSetRxConfig+0x408>)
 800903e:	2201      	movs	r2, #1
 8009040:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009042:	4b38      	ldr	r3, [pc, #224]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009044:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009048:	2b05      	cmp	r3, #5
 800904a:	d004      	beq.n	8009056 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800904c:	4b35      	ldr	r3, [pc, #212]	@ (8009124 <RadioSetRxConfig+0x408>)
 800904e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009052:	2b06      	cmp	r3, #6
 8009054:	d10a      	bne.n	800906c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8009056:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009058:	2b0b      	cmp	r3, #11
 800905a:	d803      	bhi.n	8009064 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800905c:	4b31      	ldr	r3, [pc, #196]	@ (8009124 <RadioSetRxConfig+0x408>)
 800905e:	220c      	movs	r2, #12
 8009060:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009062:	e006      	b.n	8009072 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009064:	4a2f      	ldr	r2, [pc, #188]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009066:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009068:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800906a:	e002      	b.n	8009072 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800906c:	4a2d      	ldr	r2, [pc, #180]	@ (8009124 <RadioSetRxConfig+0x408>)
 800906e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009070:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009072:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8009076:	4b2b      	ldr	r3, [pc, #172]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009078:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800907a:	4b2b      	ldr	r3, [pc, #172]	@ (8009128 <RadioSetRxConfig+0x40c>)
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	4b29      	ldr	r3, [pc, #164]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009080:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009082:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8009086:	4b27      	ldr	r3, [pc, #156]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009088:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800908c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8009090:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8009096:	f000 fbce 	bl	8009836 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800909a:	2001      	movs	r0, #1
 800909c:	f7ff fd6a 	bl	8008b74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090a0:	4822      	ldr	r0, [pc, #136]	@ (800912c <RadioSetRxConfig+0x410>)
 80090a2:	f002 f98b 	bl	800b3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090a6:	4822      	ldr	r0, [pc, #136]	@ (8009130 <RadioSetRxConfig+0x414>)
 80090a8:	f002 fa5a 	bl	800b560 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80090ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 fef4 	bl	800ae9e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80090b6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80090ba:	f002 fbad 	bl	800b818 <SUBGRF_ReadRegister>
 80090be:	4603      	mov	r3, r0
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	4619      	mov	r1, r3
 80090c8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80090cc:	f002 fb90 	bl	800b7f0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80090d0:	4b14      	ldr	r3, [pc, #80]	@ (8009124 <RadioSetRxConfig+0x408>)
 80090d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10d      	bne.n	80090f6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80090da:	f240 7036 	movw	r0, #1846	@ 0x736
 80090de:	f002 fb9b 	bl	800b818 <SUBGRF_ReadRegister>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f023 0304 	bic.w	r3, r3, #4
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	f240 7036 	movw	r0, #1846	@ 0x736
 80090f0:	f002 fb7e 	bl	800b7f0 <SUBGRF_WriteRegister>
 80090f4:	e00c      	b.n	8009110 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80090f6:	f240 7036 	movw	r0, #1846	@ 0x736
 80090fa:	f002 fb8d 	bl	800b818 <SUBGRF_ReadRegister>
 80090fe:	4603      	mov	r3, r0
 8009100:	f043 0304 	orr.w	r3, r3, #4
 8009104:	b2db      	uxtb	r3, r3
 8009106:	4619      	mov	r1, r3
 8009108:	f240 7036 	movw	r0, #1846	@ 0x736
 800910c:	f002 fb70 	bl	800b7f0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8009110:	4b04      	ldr	r3, [pc, #16]	@ (8009124 <RadioSetRxConfig+0x408>)
 8009112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009116:	609a      	str	r2, [r3, #8]
            break;
 8009118:	e000      	b.n	800911c <RadioSetRxConfig+0x400>
            break;
 800911a:	bf00      	nop
    }
}
 800911c:	bf00      	nop
 800911e:	3728      	adds	r7, #40	@ 0x28
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	20005b90 	.word	0x20005b90
 8009128:	20000b28 	.word	0x20000b28
 800912c:	20005bc8 	.word	0x20005bc8
 8009130:	20005b9e 	.word	0x20005b9e

08009134 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60ba      	str	r2, [r7, #8]
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
 8009142:	460b      	mov	r3, r1
 8009144:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8009146:	f002 fe3a 	bl	800bdbe <RFW_DeInit>
    switch( modem )
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b04      	cmp	r3, #4
 800914e:	f000 80c7 	beq.w	80092e0 <RadioSetTxConfig+0x1ac>
 8009152:	2b04      	cmp	r3, #4
 8009154:	f300 80d6 	bgt.w	8009304 <RadioSetTxConfig+0x1d0>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <RadioSetTxConfig+0x2e>
 800915c:	2b01      	cmp	r3, #1
 800915e:	d059      	beq.n	8009214 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009160:	e0d0      	b.n	8009304 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009162:	4b77      	ldr	r3, [pc, #476]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800916a:	4a75      	ldr	r2, [pc, #468]	@ (8009340 <RadioSetTxConfig+0x20c>)
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009170:	4b73      	ldr	r3, [pc, #460]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009172:	220b      	movs	r2, #11
 8009174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f002 fd53 	bl	800bc24 <SUBGRF_GetFskBandwidthRegValue>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
 8009182:	4b6f      	ldr	r3, [pc, #444]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8009188:	4a6d      	ldr	r2, [pc, #436]	@ (8009340 <RadioSetTxConfig+0x20c>)
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800918e:	4b6c      	ldr	r3, [pc, #432]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009190:	2200      	movs	r2, #0
 8009192:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009194:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	b29a      	uxth	r2, r3
 800919a:	4b69      	ldr	r3, [pc, #420]	@ (8009340 <RadioSetTxConfig+0x20c>)
 800919c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800919e:	4b68      	ldr	r3, [pc, #416]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091a0:	2204      	movs	r2, #4
 80091a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80091a4:	4b66      	ldr	r3, [pc, #408]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091a6:	2218      	movs	r2, #24
 80091a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80091aa:	4b65      	ldr	r3, [pc, #404]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80091b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091b4:	f083 0301 	eor.w	r3, r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b60      	ldr	r3, [pc, #384]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091be:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80091c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80091c8:	4b5d      	ldr	r3, [pc, #372]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091ca:	22f2      	movs	r2, #242	@ 0xf2
 80091cc:	75da      	strb	r2, [r3, #23]
 80091ce:	e002      	b.n	80091d6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80091d0:	4b5b      	ldr	r3, [pc, #364]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091d2:	2201      	movs	r2, #1
 80091d4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80091d6:	4b5a      	ldr	r3, [pc, #360]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80091d8:	2201      	movs	r2, #1
 80091da:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80091dc:	f000 fb2b 	bl	8009836 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80091e0:	2000      	movs	r0, #0
 80091e2:	f7ff fcc7 	bl	8008b74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80091e6:	4857      	ldr	r0, [pc, #348]	@ (8009344 <RadioSetTxConfig+0x210>)
 80091e8:	f002 f8e8 	bl	800b3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80091ec:	4856      	ldr	r0, [pc, #344]	@ (8009348 <RadioSetTxConfig+0x214>)
 80091ee:	f002 f9b7 	bl	800b560 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80091f2:	4a56      	ldr	r2, [pc, #344]	@ (800934c <RadioSetTxConfig+0x218>)
 80091f4:	f107 0310 	add.w	r3, r7, #16
 80091f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8009200:	f107 0310 	add.w	r3, r7, #16
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fc74 	bl	800aaf2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800920a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800920e:	f001 fcbf 	bl	800ab90 <SUBGRF_SetWhiteningSeed>
            break;
 8009212:	e078      	b.n	8009306 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009214:	4b4a      	ldr	r3, [pc, #296]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	b2da      	uxtb	r2, r3
 8009220:	4b47      	ldr	r3, [pc, #284]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8009226:	4a4a      	ldr	r2, [pc, #296]	@ (8009350 <RadioSetTxConfig+0x21c>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4413      	add	r3, r2
 800922c:	781a      	ldrb	r2, [r3, #0]
 800922e:	4b44      	ldr	r3, [pc, #272]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009234:	4a42      	ldr	r2, [pc, #264]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009236:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800923a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <RadioSetTxConfig+0x11c>
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	2b0b      	cmp	r3, #11
 8009248:	d008      	beq.n	800925c <RadioSetTxConfig+0x128>
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	2b0c      	cmp	r3, #12
 800924e:	d005      	beq.n	800925c <RadioSetTxConfig+0x128>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d107      	bne.n	8009266 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	2b0c      	cmp	r3, #12
 800925a:	d104      	bne.n	8009266 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800925c:	4b38      	ldr	r3, [pc, #224]	@ (8009340 <RadioSetTxConfig+0x20c>)
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009264:	e003      	b.n	800926e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009266:	4b36      	ldr	r3, [pc, #216]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800926e:	4b34      	ldr	r3, [pc, #208]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009270:	2201      	movs	r2, #1
 8009272:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009274:	4b32      	ldr	r3, [pc, #200]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009276:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800927a:	2b05      	cmp	r3, #5
 800927c:	d004      	beq.n	8009288 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800927e:	4b30      	ldr	r3, [pc, #192]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009280:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009284:	2b06      	cmp	r3, #6
 8009286:	d10a      	bne.n	800929e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8009288:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800928a:	2b0b      	cmp	r3, #11
 800928c:	d803      	bhi.n	8009296 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800928e:	4b2c      	ldr	r3, [pc, #176]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009290:	220c      	movs	r2, #12
 8009292:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009294:	e006      	b.n	80092a4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009296:	4a2a      	ldr	r2, [pc, #168]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009298:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800929a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800929c:	e002      	b.n	80092a4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800929e:	4a28      	ldr	r2, [pc, #160]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092a2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80092a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80092a8:	4b25      	ldr	r3, [pc, #148]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092aa:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80092ac:	4b29      	ldr	r3, [pc, #164]	@ (8009354 <RadioSetTxConfig+0x220>)
 80092ae:	781a      	ldrb	r2, [r3, #0]
 80092b0:	4b23      	ldr	r3, [pc, #140]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092b2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80092b4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80092b8:	4b21      	ldr	r3, [pc, #132]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092ba:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80092be:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80092c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80092c8:	f000 fab5 	bl	8009836 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80092cc:	2001      	movs	r0, #1
 80092ce:	f7ff fc51 	bl	8008b74 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092d2:	481c      	ldr	r0, [pc, #112]	@ (8009344 <RadioSetTxConfig+0x210>)
 80092d4:	f002 f872 	bl	800b3bc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80092d8:	481b      	ldr	r0, [pc, #108]	@ (8009348 <RadioSetTxConfig+0x214>)
 80092da:	f002 f941 	bl	800b560 <SUBGRF_SetPacketParams>
            break;
 80092de:	e012      	b.n	8009306 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80092e0:	2004      	movs	r0, #4
 80092e2:	f7ff fc47 	bl	8008b74 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80092e6:	4b16      	ldr	r3, [pc, #88]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80092ee:	4a14      	ldr	r2, [pc, #80]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80092f4:	4b12      	ldr	r3, [pc, #72]	@ (8009340 <RadioSetTxConfig+0x20c>)
 80092f6:	2216      	movs	r2, #22
 80092f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092fc:	4811      	ldr	r0, [pc, #68]	@ (8009344 <RadioSetTxConfig+0x210>)
 80092fe:	f002 f85d 	bl	800b3bc <SUBGRF_SetModulationParams>
            break;
 8009302:	e000      	b.n	8009306 <RadioSetTxConfig+0x1d2>
            break;
 8009304:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800930a:	4618      	mov	r0, r3
 800930c:	f002 fb8c 	bl	800ba28 <SUBGRF_SetRfTxPower>
 8009310:	4603      	mov	r3, r0
 8009312:	461a      	mov	r2, r3
 8009314:	4b0a      	ldr	r3, [pc, #40]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009316:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800931a:	210e      	movs	r1, #14
 800931c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009320:	f002 fa66 	bl	800b7f0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009324:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009326:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800932a:	4618      	mov	r0, r3
 800932c:	f002 fd5b 	bl	800bde6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009330:	4a03      	ldr	r2, [pc, #12]	@ (8009340 <RadioSetTxConfig+0x20c>)
 8009332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009334:	6053      	str	r3, [r2, #4]
}
 8009336:	bf00      	nop
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20005b90 	.word	0x20005b90
 8009344:	20005bc8 	.word	0x20005bc8
 8009348:	20005b9e 	.word	0x20005b9e
 800934c:	0800c940 	.word	0x0800c940
 8009350:	0800cbf0 	.word	0x0800cbf0
 8009354:	20000b28 	.word	0x20000b28

08009358 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
    return true;
 8009360:	2301      	movs	r3, #1
}
 8009362:	4618      	mov	r0, r3
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr

0800936c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b0a      	cmp	r3, #10
 800937e:	d83e      	bhi.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
 8009380:	a201      	add	r2, pc, #4	@ (adr r2, 8009388 <RadioGetLoRaBandwidthInHz+0x1c>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	080093b5 	.word	0x080093b5
 800938c:	080093c5 	.word	0x080093c5
 8009390:	080093d5 	.word	0x080093d5
 8009394:	080093e5 	.word	0x080093e5
 8009398:	080093ed 	.word	0x080093ed
 800939c:	080093f3 	.word	0x080093f3
 80093a0:	080093f9 	.word	0x080093f9
 80093a4:	080093ff 	.word	0x080093ff
 80093a8:	080093bd 	.word	0x080093bd
 80093ac:	080093cd 	.word	0x080093cd
 80093b0:	080093dd 	.word	0x080093dd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80093b4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80093b8:	60fb      	str	r3, [r7, #12]
        break;
 80093ba:	e020      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80093bc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80093c0:	60fb      	str	r3, [r7, #12]
        break;
 80093c2:	e01c      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80093c4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80093c8:	60fb      	str	r3, [r7, #12]
        break;
 80093ca:	e018      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80093cc:	f245 1361 	movw	r3, #20833	@ 0x5161
 80093d0:	60fb      	str	r3, [r7, #12]
        break;
 80093d2:	e014      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80093d4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80093d8:	60fb      	str	r3, [r7, #12]
        break;
 80093da:	e010      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80093dc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80093e0:	60fb      	str	r3, [r7, #12]
        break;
 80093e2:	e00c      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80093e4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80093e8:	60fb      	str	r3, [r7, #12]
        break;
 80093ea:	e008      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80093ec:	4b07      	ldr	r3, [pc, #28]	@ (800940c <RadioGetLoRaBandwidthInHz+0xa0>)
 80093ee:	60fb      	str	r3, [r7, #12]
        break;
 80093f0:	e005      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80093f2:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <RadioGetLoRaBandwidthInHz+0xa4>)
 80093f4:	60fb      	str	r3, [r7, #12]
        break;
 80093f6:	e002      	b.n	80093fe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80093f8:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <RadioGetLoRaBandwidthInHz+0xa8>)
 80093fa:	60fb      	str	r3, [r7, #12]
        break;
 80093fc:	bf00      	nop
    }

    return bandwidthInHz;
 80093fe:	68fb      	ldr	r3, [r7, #12]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	0001e848 	.word	0x0001e848
 8009410:	0003d090 	.word	0x0003d090
 8009414:	0007a120 	.word	0x0007a120

08009418 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4603      	mov	r3, r0
 8009428:	70fb      	strb	r3, [r7, #3]
 800942a:	460b      	mov	r3, r1
 800942c:	803b      	strh	r3, [r7, #0]
 800942e:	4613      	mov	r3, r2
 8009430:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8009432:	883b      	ldrh	r3, [r7, #0]
 8009434:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009436:	78ba      	ldrb	r2, [r7, #2]
 8009438:	f082 0201 	eor.w	r2, r2, #1
 800943c:	b2d2      	uxtb	r2, r2
 800943e:	2a00      	cmp	r2, #0
 8009440:	d001      	beq.n	8009446 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8009442:	2208      	movs	r2, #8
 8009444:	e000      	b.n	8009448 <RadioGetGfskTimeOnAirNumerator+0x30>
 8009446:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8009448:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800944a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800944e:	7c3b      	ldrb	r3, [r7, #16]
 8009450:	7d39      	ldrb	r1, [r7, #20]
 8009452:	2900      	cmp	r1, #0
 8009454:	d001      	beq.n	800945a <RadioGetGfskTimeOnAirNumerator+0x42>
 8009456:	2102      	movs	r1, #2
 8009458:	e000      	b.n	800945c <RadioGetGfskTimeOnAirNumerator+0x44>
 800945a:	2100      	movs	r1, #0
 800945c:	440b      	add	r3, r1
 800945e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009460:	4413      	add	r3, r2
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr

0800946c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800946c:	b480      	push	{r7}
 800946e:	b08b      	sub	sp, #44	@ 0x2c
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4611      	mov	r1, r2
 8009478:	461a      	mov	r2, r3
 800947a:	460b      	mov	r3, r1
 800947c:	71fb      	strb	r3, [r7, #7]
 800947e:	4613      	mov	r3, r2
 8009480:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	3304      	adds	r3, #4
 8009486:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8009488:	2300      	movs	r3, #0
 800948a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b05      	cmp	r3, #5
 8009492:	d002      	beq.n	800949a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b06      	cmp	r3, #6
 8009498:	d104      	bne.n	80094a4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800949a:	88bb      	ldrh	r3, [r7, #4]
 800949c:	2b0b      	cmp	r3, #11
 800949e:	d801      	bhi.n	80094a4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80094a0:	230c      	movs	r3, #12
 80094a2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d105      	bne.n	80094b6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b0b      	cmp	r3, #11
 80094ae:	d008      	beq.n	80094c2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b0c      	cmp	r3, #12
 80094b4:	d005      	beq.n	80094c2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d105      	bne.n	80094c8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b0c      	cmp	r3, #12
 80094c0:	d102      	bne.n	80094c8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80094c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80094cc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80094ce:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	d001      	beq.n	80094da <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80094d6:	2210      	movs	r2, #16
 80094d8:	e000      	b.n	80094dc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80094da:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80094dc:	4413      	add	r3, r2
 80094de:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80094e4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80094e6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	d001      	beq.n	80094f2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80094ee:	2200      	movs	r2, #0
 80094f0:	e000      	b.n	80094f4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80094f2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80094f4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80094f6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b06      	cmp	r3, #6
 80094fc:	d803      	bhi.n	8009506 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	623b      	str	r3, [r7, #32]
 8009504:	e00e      	b.n	8009524 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	3308      	adds	r3, #8
 800950a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800950c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009510:	2b00      	cmp	r3, #0
 8009512:	d004      	beq.n	800951e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	3b02      	subs	r3, #2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	623b      	str	r3, [r7, #32]
 800951c:	e002      	b.n	8009524 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	da01      	bge.n	800952e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	4413      	add	r3, r2
 8009534:	1e5a      	subs	r2, r3, #1
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	fb92 f3f3 	sdiv	r3, r2, r3
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	fb03 f202 	mul.w	r2, r3, r2
 8009542:	88bb      	ldrh	r3, [r7, #4]
 8009544:	4413      	add	r3, r2
    int32_t intermediate =
 8009546:	330c      	adds	r3, #12
 8009548:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b06      	cmp	r3, #6
 800954e:	d802      	bhi.n	8009556 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	3302      	adds	r3, #2
 8009554:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3b02      	subs	r3, #2
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
}
 8009564:	4618      	mov	r0, r3
 8009566:	372c      	adds	r7, #44	@ 0x2c
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr
	...

08009570 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	@ 0x28
 8009574:	af04      	add	r7, sp, #16
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	461a      	mov	r2, r3
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	4613      	mov	r3, r2
 8009582:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8009588:	2301      	movs	r3, #1
 800958a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <RadioTimeOnAir+0x28>
 8009592:	2b01      	cmp	r3, #1
 8009594:	d017      	beq.n	80095c6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8009596:	e035      	b.n	8009604 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8009598:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 800959c:	8c3a      	ldrh	r2, [r7, #32]
 800959e:	7bb9      	ldrb	r1, [r7, #14]
 80095a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	4603      	mov	r3, r0
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff ff32 	bl	8009418 <RadioGetGfskTimeOnAirNumerator>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	613b      	str	r3, [r7, #16]
        break;
 80095c4:	e01e      	b.n	8009604 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80095c6:	8c39      	ldrh	r1, [r7, #32]
 80095c8:	7bba      	ldrb	r2, [r7, #14]
 80095ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80095ce:	9302      	str	r3, [sp, #8]
 80095d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	460b      	mov	r3, r1
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	68b8      	ldr	r0, [r7, #8]
 80095e2:	f7ff ff43 	bl	800946c <RadioGetLoRaTimeOnAirNumerator>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095ec:	fb02 f303 	mul.w	r3, r2, r3
 80095f0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80095f2:	4a0a      	ldr	r2, [pc, #40]	@ (800961c <RadioTimeOnAir+0xac>)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4413      	add	r3, r2
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff feb6 	bl	800936c <RadioGetLoRaBandwidthInHz>
 8009600:	6138      	str	r0, [r7, #16]
        break;
 8009602:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	4413      	add	r3, r2
 800960a:	1e5a      	subs	r2, r3, #1
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	0800cbf0 	.word	0x0800cbf0

08009620 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800962c:	2300      	movs	r3, #0
 800962e:	2200      	movs	r2, #0
 8009630:	f240 2101 	movw	r1, #513	@ 0x201
 8009634:	f240 2001 	movw	r0, #513	@ 0x201
 8009638:	f001 fd2a 	bl	800b090 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800963c:	4b70      	ldr	r3, [pc, #448]	@ (8009800 <RadioSend+0x1e0>)
 800963e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009642:	2101      	movs	r1, #1
 8009644:	4618      	mov	r0, r3
 8009646:	f002 f9c7 	bl	800b9d8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800964a:	4b6d      	ldr	r3, [pc, #436]	@ (8009800 <RadioSend+0x1e0>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d112      	bne.n	8009678 <RadioSend+0x58>
 8009652:	4b6b      	ldr	r3, [pc, #428]	@ (8009800 <RadioSend+0x1e0>)
 8009654:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009658:	2b06      	cmp	r3, #6
 800965a:	d10d      	bne.n	8009678 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800965c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009660:	f002 f8da 	bl	800b818 <SUBGRF_ReadRegister>
 8009664:	4603      	mov	r3, r0
 8009666:	f023 0304 	bic.w	r3, r3, #4
 800966a:	b2db      	uxtb	r3, r3
 800966c:	4619      	mov	r1, r3
 800966e:	f640 0089 	movw	r0, #2185	@ 0x889
 8009672:	f002 f8bd 	bl	800b7f0 <SUBGRF_WriteRegister>
 8009676:	e00c      	b.n	8009692 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009678:	f640 0089 	movw	r0, #2185	@ 0x889
 800967c:	f002 f8cc 	bl	800b818 <SUBGRF_ReadRegister>
 8009680:	4603      	mov	r3, r0
 8009682:	f043 0304 	orr.w	r3, r3, #4
 8009686:	b2db      	uxtb	r3, r3
 8009688:	4619      	mov	r1, r3
 800968a:	f640 0089 	movw	r0, #2185	@ 0x889
 800968e:	f002 f8af 	bl	800b7f0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009692:	4b5b      	ldr	r3, [pc, #364]	@ (8009800 <RadioSend+0x1e0>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b04      	cmp	r3, #4
 8009698:	f200 80a2 	bhi.w	80097e0 <RadioSend+0x1c0>
 800969c:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <RadioSend+0x84>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096d3 	.word	0x080096d3
 80096a8:	080096b9 	.word	0x080096b9
 80096ac:	080096d3 	.word	0x080096d3
 80096b0:	08009729 	.word	0x08009729
 80096b4:	08009749 	.word	0x08009749
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80096b8:	4a51      	ldr	r2, [pc, #324]	@ (8009800 <RadioSend+0x1e0>)
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80096be:	4851      	ldr	r0, [pc, #324]	@ (8009804 <RadioSend+0x1e4>)
 80096c0:	f001 ff4e 	bl	800b560 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	2200      	movs	r2, #0
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 f9fe 	bl	800aacc <SUBGRF_SendPayload>
            break;
 80096d0:	e087      	b.n	80097e2 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80096d2:	f002 fb7a 	bl	800bdca <RFW_Is_Init>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d118      	bne.n	800970e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80096dc:	f107 020d 	add.w	r2, r7, #13
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 fb88 	bl	800bdfa <RFW_TransmitInit>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10c      	bne.n	800970a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80096f0:	7b7a      	ldrb	r2, [r7, #13]
 80096f2:	4b43      	ldr	r3, [pc, #268]	@ (8009800 <RadioSend+0x1e0>)
 80096f4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80096f6:	4843      	ldr	r0, [pc, #268]	@ (8009804 <RadioSend+0x1e4>)
 80096f8:	f001 ff32 	bl	800b560 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80096fc:	7b7b      	ldrb	r3, [r7, #13]
 80096fe:	2200      	movs	r2, #0
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 f9e2 	bl	800aacc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009708:	e06b      	b.n	80097e2 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800970a:	2303      	movs	r3, #3
 800970c:	e073      	b.n	80097f6 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800970e:	4a3c      	ldr	r2, [pc, #240]	@ (8009800 <RadioSend+0x1e0>)
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009714:	483b      	ldr	r0, [pc, #236]	@ (8009804 <RadioSend+0x1e4>)
 8009716:	f001 ff23 	bl	800b560 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	2200      	movs	r2, #0
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 f9d3 	bl	800aacc <SUBGRF_SendPayload>
            break;
 8009726:	e05c      	b.n	80097e2 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009728:	4b35      	ldr	r3, [pc, #212]	@ (8009800 <RadioSend+0x1e0>)
 800972a:	2202      	movs	r2, #2
 800972c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800972e:	4a34      	ldr	r2, [pc, #208]	@ (8009800 <RadioSend+0x1e0>)
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009734:	4833      	ldr	r0, [pc, #204]	@ (8009804 <RadioSend+0x1e4>)
 8009736:	f001 ff13 	bl	800b560 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	2200      	movs	r2, #0
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f001 f9c3 	bl	800aacc <SUBGRF_SendPayload>
            break;
 8009746:	e04c      	b.n	80097e2 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009748:	78fb      	ldrb	r3, [r7, #3]
 800974a:	461a      	mov	r2, r3
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	482e      	ldr	r0, [pc, #184]	@ (8009808 <RadioSend+0x1e8>)
 8009750:	f000 fc96 	bl	800a080 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009754:	4b2a      	ldr	r3, [pc, #168]	@ (8009800 <RadioSend+0x1e0>)
 8009756:	2202      	movs	r2, #2
 8009758:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	3301      	adds	r3, #1
 800975e:	b2da      	uxtb	r2, r3
 8009760:	4b27      	ldr	r3, [pc, #156]	@ (8009800 <RadioSend+0x1e0>)
 8009762:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009764:	4827      	ldr	r0, [pc, #156]	@ (8009804 <RadioSend+0x1e4>)
 8009766:	f001 fefb 	bl	800b560 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800976a:	2100      	movs	r1, #0
 800976c:	20f1      	movs	r0, #241	@ 0xf1
 800976e:	f000 f963 	bl	8009a38 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8009772:	2100      	movs	r1, #0
 8009774:	20f0      	movs	r0, #240	@ 0xf0
 8009776:	f000 f95f 	bl	8009a38 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800977a:	4b21      	ldr	r3, [pc, #132]	@ (8009800 <RadioSend+0x1e0>)
 800977c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800977e:	2b64      	cmp	r3, #100	@ 0x64
 8009780:	d108      	bne.n	8009794 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009782:	2170      	movs	r1, #112	@ 0x70
 8009784:	20f3      	movs	r0, #243	@ 0xf3
 8009786:	f000 f957 	bl	8009a38 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800978a:	211d      	movs	r1, #29
 800978c:	20f2      	movs	r0, #242	@ 0xf2
 800978e:	f000 f953 	bl	8009a38 <RadioWrite>
 8009792:	e007      	b.n	80097a4 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009794:	21e1      	movs	r1, #225	@ 0xe1
 8009796:	20f3      	movs	r0, #243	@ 0xf3
 8009798:	f000 f94e 	bl	8009a38 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800979c:	2104      	movs	r1, #4
 800979e:	20f2      	movs	r0, #242	@ 0xf2
 80097a0:	f000 f94a 	bl	8009a38 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3302      	adds	r3, #2
 80097ae:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80097b0:	89fb      	ldrh	r3, [r7, #14]
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	4619      	mov	r1, r3
 80097ba:	20f4      	movs	r0, #244	@ 0xf4
 80097bc:	f000 f93c 	bl	8009a38 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80097c0:	89fb      	ldrh	r3, [r7, #14]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	4619      	mov	r1, r3
 80097c6:	20f5      	movs	r0, #245	@ 0xf5
 80097c8:	f000 f936 	bl	8009a38 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	3301      	adds	r3, #1
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80097d6:	4619      	mov	r1, r3
 80097d8:	480b      	ldr	r0, [pc, #44]	@ (8009808 <RadioSend+0x1e8>)
 80097da:	f001 f977 	bl	800aacc <SUBGRF_SendPayload>
            break;
 80097de:	e000      	b.n	80097e2 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80097e0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80097e2:	4b07      	ldr	r3, [pc, #28]	@ (8009800 <RadioSend+0x1e0>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	4619      	mov	r1, r3
 80097e8:	4808      	ldr	r0, [pc, #32]	@ (800980c <RadioSend+0x1ec>)
 80097ea:	f002 fd47 	bl	800c27c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80097ee:	4807      	ldr	r0, [pc, #28]	@ (800980c <RadioSend+0x1ec>)
 80097f0:	f002 fc66 	bl	800c0c0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20005b90 	.word	0x20005b90
 8009804:	20005b9e 	.word	0x20005b9e
 8009808:	20005a8c 	.word	0x20005a8c
 800980c:	20005bec 	.word	0x20005bec

08009810 <RadioSleep>:

static void RadioSleep( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009816:	2300      	movs	r3, #0
 8009818:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800981a:	793b      	ldrb	r3, [r7, #4]
 800981c:	f043 0304 	orr.w	r3, r3, #4
 8009820:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8009822:	7938      	ldrb	r0, [r7, #4]
 8009824:	f001 fa2e 	bl	800ac84 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009828:	2002      	movs	r0, #2
 800982a:	f7f7 fbc1 	bl	8000fb0 <HAL_Delay>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <RadioStandby>:

static void RadioStandby( void )
{
 8009836:	b580      	push	{r7, lr}
 8009838:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800983a:	2000      	movs	r0, #0
 800983c:	f001 fa54 	bl	800ace8 <SUBGRF_SetStandby>
}
 8009840:	bf00      	nop
 8009842:	bd80      	pop	{r7, pc}

08009844 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800984c:	f002 fabd 	bl	800bdca <RFW_Is_Init>
 8009850:	4603      	mov	r3, r0
 8009852:	2b01      	cmp	r3, #1
 8009854:	d102      	bne.n	800985c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8009856:	f002 fae0 	bl	800be1a <RFW_ReceiveInit>
 800985a:	e007      	b.n	800986c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800985c:	2300      	movs	r3, #0
 800985e:	2200      	movs	r2, #0
 8009860:	f240 2162 	movw	r1, #610	@ 0x262
 8009864:	f240 2062 	movw	r0, #610	@ 0x262
 8009868:	f001 fc12 	bl	800b090 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d006      	beq.n	8009880 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	4811      	ldr	r0, [pc, #68]	@ (80098bc <RadioRx+0x78>)
 8009876:	f002 fd01 	bl	800c27c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800987a:	4810      	ldr	r0, [pc, #64]	@ (80098bc <RadioRx+0x78>)
 800987c:	f002 fc20 	bl	800c0c0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009880:	4b0f      	ldr	r3, [pc, #60]	@ (80098c0 <RadioRx+0x7c>)
 8009882:	2200      	movs	r2, #0
 8009884:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009886:	4b0e      	ldr	r3, [pc, #56]	@ (80098c0 <RadioRx+0x7c>)
 8009888:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f002 f8a2 	bl	800b9d8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009894:	4b0a      	ldr	r3, [pc, #40]	@ (80098c0 <RadioRx+0x7c>)
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800989c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80098a0:	f001 fa5e 	bl	800ad60 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80098a4:	e005      	b.n	80098b2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80098a6:	4b06      	ldr	r3, [pc, #24]	@ (80098c0 <RadioRx+0x7c>)
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	019b      	lsls	r3, r3, #6
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 fa57 	bl	800ad60 <SUBGRF_SetRx>
}
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20005c04 	.word	0x20005c04
 80098c0:	20005b90 	.word	0x20005b90

080098c4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80098cc:	f002 fa7d 	bl	800bdca <RFW_Is_Init>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d102      	bne.n	80098dc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80098d6:	f002 faa0 	bl	800be1a <RFW_ReceiveInit>
 80098da:	e007      	b.n	80098ec <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80098dc:	2300      	movs	r3, #0
 80098de:	2200      	movs	r2, #0
 80098e0:	f240 2162 	movw	r1, #610	@ 0x262
 80098e4:	f240 2062 	movw	r0, #610	@ 0x262
 80098e8:	f001 fbd2 	bl	800b090 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d006      	beq.n	8009900 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4811      	ldr	r0, [pc, #68]	@ (800993c <RadioRxBoosted+0x78>)
 80098f6:	f002 fcc1 	bl	800c27c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80098fa:	4810      	ldr	r0, [pc, #64]	@ (800993c <RadioRxBoosted+0x78>)
 80098fc:	f002 fbe0 	bl	800c0c0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009900:	4b0f      	ldr	r3, [pc, #60]	@ (8009940 <RadioRxBoosted+0x7c>)
 8009902:	2200      	movs	r2, #0
 8009904:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009906:	4b0e      	ldr	r3, [pc, #56]	@ (8009940 <RadioRxBoosted+0x7c>)
 8009908:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f002 f862 	bl	800b9d8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009914:	4b0a      	ldr	r3, [pc, #40]	@ (8009940 <RadioRxBoosted+0x7c>)
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800991c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009920:	f001 fa3e 	bl	800ada0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009924:	e005      	b.n	8009932 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009926:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <RadioRxBoosted+0x7c>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	019b      	lsls	r3, r3, #6
 800992c:	4618      	mov	r0, r3
 800992e:	f001 fa37 	bl	800ada0 <SUBGRF_SetRxBoosted>
}
 8009932:	bf00      	nop
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20005c04 	.word	0x20005c04
 8009940:	20005b90 	.word	0x20005b90

08009944 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	005a      	lsls	r2, r3, #1
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	4413      	add	r3, r2
 8009956:	4a0c      	ldr	r2, [pc, #48]	@ (8009988 <RadioSetRxDutyCycle+0x44>)
 8009958:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800995a:	2300      	movs	r3, #0
 800995c:	2200      	movs	r2, #0
 800995e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009962:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009966:	f001 fb93 	bl	800b090 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800996a:	4b07      	ldr	r3, [pc, #28]	@ (8009988 <RadioSetRxDutyCycle+0x44>)
 800996c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f002 f830 	bl	800b9d8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f001 fa34 	bl	800ade8 <SUBGRF_SetRxDutyCycle>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20005b90 	.word	0x20005b90

0800998c <RadioStartCad>:

static void RadioStartCad( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009990:	4b09      	ldr	r3, [pc, #36]	@ (80099b8 <RadioStartCad+0x2c>)
 8009992:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009996:	2100      	movs	r1, #0
 8009998:	4618      	mov	r0, r3
 800999a:	f002 f81d 	bl	800b9d8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800999e:	2300      	movs	r3, #0
 80099a0:	2200      	movs	r2, #0
 80099a2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80099a6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80099aa:	f001 fb71 	bl	800b090 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80099ae:	f001 fa47 	bl	800ae40 <SUBGRF_SetCad>
}
 80099b2:	bf00      	nop
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20005b90 	.word	0x20005b90

080099bc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
 80099c8:	4613      	mov	r3, r2
 80099ca:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80099cc:	883b      	ldrh	r3, [r7, #0]
 80099ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 fbb5 	bl	800b148 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80099de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 f820 	bl	800ba28 <SUBGRF_SetRfTxPower>
 80099e8:	4603      	mov	r3, r0
 80099ea:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80099ec:	210e      	movs	r1, #14
 80099ee:	f640 101f 	movw	r0, #2335	@ 0x91f
 80099f2:	f001 fefd 	bl	800b7f0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	2101      	movs	r1, #1
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 ffec 	bl	800b9d8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009a00:	f001 fa2c 	bl	800ae5c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	4805      	ldr	r0, [pc, #20]	@ (8009a1c <RadioSetTxContinuousWave+0x60>)
 8009a08:	f002 fc38 	bl	800c27c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009a0c:	4803      	ldr	r0, [pc, #12]	@ (8009a1c <RadioSetTxContinuousWave+0x60>)
 8009a0e:	f002 fb57 	bl	800c0c0 <UTIL_TIMER_Start>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20005bec 	.word	0x20005bec

08009a20 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009a2a:	f001 fe4e 	bl	800b6ca <SUBGRF_GetRssiInst>
 8009a2e:	4603      	mov	r3, r0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460a      	mov	r2, r1
 8009a42:	80fb      	strh	r3, [r7, #6]
 8009a44:	4613      	mov	r3, r2
 8009a46:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8009a48:	797a      	ldrb	r2, [r7, #5]
 8009a4a:	88fb      	ldrh	r3, [r7, #6]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 fece 	bl	800b7f0 <SUBGRF_WriteRegister>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 fed5 	bl	800b818 <SUBGRF_ReadRegister>
 8009a6e:	4603      	mov	r3, r0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	80fb      	strh	r3, [r7, #6]
 8009a84:	4613      	mov	r3, r2
 8009a86:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009a88:	797b      	ldrb	r3, [r7, #5]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 fed5 	bl	800b840 <SUBGRF_WriteRegisters>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	6039      	str	r1, [r7, #0]
 8009aa8:	80fb      	strh	r3, [r7, #6]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009aae:	797b      	ldrb	r3, [r7, #5]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	88fb      	ldrh	r3, [r7, #6]
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 fee4 	bl	800b884 <SUBGRF_ReadRegisters>
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	460a      	mov	r2, r1
 8009ace:	71fb      	strb	r3, [r7, #7]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10a      	bne.n	8009af0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009ada:	4a0e      	ldr	r2, [pc, #56]	@ (8009b14 <RadioSetMaxPayloadLength+0x50>)
 8009adc:	79bb      	ldrb	r3, [r7, #6]
 8009ade:	7013      	strb	r3, [r2, #0]
 8009ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <RadioSetMaxPayloadLength+0x50>)
 8009ae2:	781a      	ldrb	r2, [r3, #0]
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b18 <RadioSetMaxPayloadLength+0x54>)
 8009ae6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ae8:	480c      	ldr	r0, [pc, #48]	@ (8009b1c <RadioSetMaxPayloadLength+0x58>)
 8009aea:	f001 fd39 	bl	800b560 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8009aee:	e00d      	b.n	8009b0c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009af0:	4b09      	ldr	r3, [pc, #36]	@ (8009b18 <RadioSetMaxPayloadLength+0x54>)
 8009af2:	7d5b      	ldrb	r3, [r3, #21]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d109      	bne.n	8009b0c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009af8:	4a06      	ldr	r2, [pc, #24]	@ (8009b14 <RadioSetMaxPayloadLength+0x50>)
 8009afa:	79bb      	ldrb	r3, [r7, #6]
 8009afc:	7013      	strb	r3, [r2, #0]
 8009afe:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <RadioSetMaxPayloadLength+0x50>)
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	4b05      	ldr	r3, [pc, #20]	@ (8009b18 <RadioSetMaxPayloadLength+0x54>)
 8009b04:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b06:	4805      	ldr	r0, [pc, #20]	@ (8009b1c <RadioSetMaxPayloadLength+0x58>)
 8009b08:	f001 fd2a 	bl	800b560 <SUBGRF_SetPacketParams>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000b28 	.word	0x20000b28
 8009b18:	20005b90 	.word	0x20005b90
 8009b1c:	20005b9e 	.word	0x20005b9e

08009b20 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009b2a:	4a13      	ldr	r2, [pc, #76]	@ (8009b78 <RadioSetPublicNetwork+0x58>)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	7313      	strb	r3, [r2, #12]
 8009b30:	4b11      	ldr	r3, [pc, #68]	@ (8009b78 <RadioSetPublicNetwork+0x58>)
 8009b32:	7b1a      	ldrb	r2, [r3, #12]
 8009b34:	4b10      	ldr	r3, [pc, #64]	@ (8009b78 <RadioSetPublicNetwork+0x58>)
 8009b36:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009b38:	2001      	movs	r0, #1
 8009b3a:	f7ff f81b 	bl	8008b74 <RadioSetModem>
    if( enable == true )
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00a      	beq.n	8009b5a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009b44:	2134      	movs	r1, #52	@ 0x34
 8009b46:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009b4a:	f001 fe51 	bl	800b7f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009b4e:	2144      	movs	r1, #68	@ 0x44
 8009b50:	f240 7041 	movw	r0, #1857	@ 0x741
 8009b54:	f001 fe4c 	bl	800b7f0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009b58:	e009      	b.n	8009b6e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009b5a:	2114      	movs	r1, #20
 8009b5c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009b60:	f001 fe46 	bl	800b7f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009b64:	2124      	movs	r1, #36	@ 0x24
 8009b66:	f240 7041 	movw	r0, #1857	@ 0x741
 8009b6a:	f001 fe41 	bl	800b7f0 <SUBGRF_WriteRegister>
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20005b90 	.word	0x20005b90

08009b7c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009b80:	f001 ff86 	bl	800ba90 <SUBGRF_GetRadioWakeUpTime>
 8009b84:	4603      	mov	r3, r0
 8009b86:	3303      	adds	r3, #3
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8009b94:	f000 f80e 	bl	8009bb4 <RadioOnTxTimeoutProcess>
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009ba8:	f000 f818 	bl	8009bdc <RadioOnRxTimeoutProcess>
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009bb8:	4b07      	ldr	r3, [pc, #28]	@ (8009bd8 <RadioOnTxTimeoutProcess+0x24>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d008      	beq.n	8009bd2 <RadioOnTxTimeoutProcess+0x1e>
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <RadioOnTxTimeoutProcess+0x24>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009bca:	4b03      	ldr	r3, [pc, #12]	@ (8009bd8 <RadioOnTxTimeoutProcess+0x24>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	4798      	blx	r3
    }
}
 8009bd2:	bf00      	nop
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20005b8c 	.word	0x20005b8c

08009bdc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009be0:	4b07      	ldr	r3, [pc, #28]	@ (8009c00 <RadioOnRxTimeoutProcess+0x24>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <RadioOnRxTimeoutProcess+0x1e>
 8009be8:	4b05      	ldr	r3, [pc, #20]	@ (8009c00 <RadioOnRxTimeoutProcess+0x24>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009bf2:	4b03      	ldr	r3, [pc, #12]	@ (8009c00 <RadioOnRxTimeoutProcess+0x24>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	4798      	blx	r3
    }
}
 8009bfa:	bf00      	nop
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20005b8c 	.word	0x20005b8c

08009c04 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009c0e:	4a05      	ldr	r2, [pc, #20]	@ (8009c24 <RadioOnDioIrq+0x20>)
 8009c10:	88fb      	ldrh	r3, [r7, #6]
 8009c12:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8009c16:	f000 f807 	bl	8009c28 <RadioIrqProcess>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20005b90 	.word	0x20005b90

08009c28 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009c36:	4ba5      	ldr	r3, [pc, #660]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009c38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c40:	f000 810d 	beq.w	8009e5e <RadioIrqProcess+0x236>
 8009c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c48:	f300 81c0 	bgt.w	8009fcc <RadioIrqProcess+0x3a4>
 8009c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c50:	f000 80f1 	beq.w	8009e36 <RadioIrqProcess+0x20e>
 8009c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c58:	f300 81b8 	bgt.w	8009fcc <RadioIrqProcess+0x3a4>
 8009c5c:	2b80      	cmp	r3, #128	@ 0x80
 8009c5e:	f000 80d6 	beq.w	8009e0e <RadioIrqProcess+0x1e6>
 8009c62:	2b80      	cmp	r3, #128	@ 0x80
 8009c64:	f300 81b2 	bgt.w	8009fcc <RadioIrqProcess+0x3a4>
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	dc49      	bgt.n	8009d00 <RadioIrqProcess+0xd8>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f340 81ad 	ble.w	8009fcc <RadioIrqProcess+0x3a4>
 8009c72:	3b01      	subs	r3, #1
 8009c74:	2b1f      	cmp	r3, #31
 8009c76:	f200 81a9 	bhi.w	8009fcc <RadioIrqProcess+0x3a4>
 8009c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c80 <RadioIrqProcess+0x58>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009d09 	.word	0x08009d09
 8009c84:	08009d43 	.word	0x08009d43
 8009c88:	08009fcd 	.word	0x08009fcd
 8009c8c:	08009ee9 	.word	0x08009ee9
 8009c90:	08009fcd 	.word	0x08009fcd
 8009c94:	08009fcd 	.word	0x08009fcd
 8009c98:	08009fcd 	.word	0x08009fcd
 8009c9c:	08009f57 	.word	0x08009f57
 8009ca0:	08009fcd 	.word	0x08009fcd
 8009ca4:	08009fcd 	.word	0x08009fcd
 8009ca8:	08009fcd 	.word	0x08009fcd
 8009cac:	08009fcd 	.word	0x08009fcd
 8009cb0:	08009fcd 	.word	0x08009fcd
 8009cb4:	08009fcd 	.word	0x08009fcd
 8009cb8:	08009fcd 	.word	0x08009fcd
 8009cbc:	08009fcd 	.word	0x08009fcd
 8009cc0:	08009fcd 	.word	0x08009fcd
 8009cc4:	08009fcd 	.word	0x08009fcd
 8009cc8:	08009fcd 	.word	0x08009fcd
 8009ccc:	08009fcd 	.word	0x08009fcd
 8009cd0:	08009fcd 	.word	0x08009fcd
 8009cd4:	08009fcd 	.word	0x08009fcd
 8009cd8:	08009fcd 	.word	0x08009fcd
 8009cdc:	08009fcd 	.word	0x08009fcd
 8009ce0:	08009fcd 	.word	0x08009fcd
 8009ce4:	08009fcd 	.word	0x08009fcd
 8009ce8:	08009fcd 	.word	0x08009fcd
 8009cec:	08009fcd 	.word	0x08009fcd
 8009cf0:	08009fcd 	.word	0x08009fcd
 8009cf4:	08009fcd 	.word	0x08009fcd
 8009cf8:	08009fcd 	.word	0x08009fcd
 8009cfc:	08009f67 	.word	0x08009f67
 8009d00:	2b40      	cmp	r3, #64	@ 0x40
 8009d02:	f000 814b 	beq.w	8009f9c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009d06:	e161      	b.n	8009fcc <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009d08:	4871      	ldr	r0, [pc, #452]	@ (8009ed0 <RadioIrqProcess+0x2a8>)
 8009d0a:	f002 fa47 	bl	800c19c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009d0e:	2000      	movs	r0, #0
 8009d10:	f000 ffea 	bl	800ace8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009d14:	f002 f860 	bl	800bdd8 <RFW_Is_LongPacketModeEnabled>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009d1e:	f002 f884 	bl	800be2a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009d22:	4b6c      	ldr	r3, [pc, #432]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 8152 	beq.w	8009fd0 <RadioIrqProcess+0x3a8>
 8009d2c:	4b69      	ldr	r3, [pc, #420]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 814c 	beq.w	8009fd0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009d38:	4b66      	ldr	r3, [pc, #408]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4798      	blx	r3
        break;
 8009d40:	e146      	b.n	8009fd0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8009d42:	4865      	ldr	r0, [pc, #404]	@ (8009ed8 <RadioIrqProcess+0x2b0>)
 8009d44:	f002 fa2a 	bl	800c19c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009d48:	4b60      	ldr	r3, [pc, #384]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	f083 0301 	eor.w	r3, r3, #1
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d014      	beq.n	8009d80 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009d56:	2000      	movs	r0, #0
 8009d58:	f000 ffc6 	bl	800ace8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f640 1002 	movw	r0, #2306	@ 0x902
 8009d62:	f001 fd45 	bl	800b7f0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009d66:	f640 1044 	movw	r0, #2372	@ 0x944
 8009d6a:	f001 fd55 	bl	800b818 <SUBGRF_ReadRegister>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f043 0302 	orr.w	r3, r3, #2
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	4619      	mov	r1, r3
 8009d78:	f640 1044 	movw	r0, #2372	@ 0x944
 8009d7c:	f001 fd38 	bl	800b7f0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009d80:	1dfb      	adds	r3, r7, #7
 8009d82:	22ff      	movs	r2, #255	@ 0xff
 8009d84:	4619      	mov	r1, r3
 8009d86:	4855      	ldr	r0, [pc, #340]	@ (8009edc <RadioIrqProcess+0x2b4>)
 8009d88:	f000 fe7e 	bl	800aa88 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009d8c:	4854      	ldr	r0, [pc, #336]	@ (8009ee0 <RadioIrqProcess+0x2b8>)
 8009d8e:	f001 fcdd 	bl	800b74c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009d92:	4b50      	ldr	r3, [pc, #320]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 811c 	beq.w	8009fd4 <RadioIrqProcess+0x3ac>
 8009d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 8116 	beq.w	8009fd4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8009da8:	4b48      	ldr	r3, [pc, #288]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009daa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d10e      	bne.n	8009dd0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8009db2:	4b48      	ldr	r3, [pc, #288]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689c      	ldr	r4, [r3, #8]
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4b43      	ldr	r3, [pc, #268]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009dbe:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	4b41      	ldr	r3, [pc, #260]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009dc6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8009dca:	4844      	ldr	r0, [pc, #272]	@ (8009edc <RadioIrqProcess+0x2b4>)
 8009dcc:	47a0      	blx	r4
                break;
 8009dce:	e01d      	b.n	8009e0c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd4:	463a      	mov	r2, r7
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 ff4b 	bl	800bc74 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009dde:	4b3d      	ldr	r3, [pc, #244]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689c      	ldr	r4, [r3, #8]
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	4619      	mov	r1, r3
 8009de8:	4b38      	ldr	r3, [pc, #224]	@ (8009ecc <RadioIrqProcess+0x2a4>)
 8009dea:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8009dee:	4618      	mov	r0, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009df6:	4a3b      	ldr	r2, [pc, #236]	@ (8009ee4 <RadioIrqProcess+0x2bc>)
 8009df8:	fb82 5203 	smull	r5, r2, r2, r3
 8009dfc:	1192      	asrs	r2, r2, #6
 8009dfe:	17db      	asrs	r3, r3, #31
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	b25b      	sxtb	r3, r3
 8009e04:	4602      	mov	r2, r0
 8009e06:	4835      	ldr	r0, [pc, #212]	@ (8009edc <RadioIrqProcess+0x2b4>)
 8009e08:	47a0      	blx	r4
                break;
 8009e0a:	bf00      	nop
        break;
 8009e0c:	e0e2      	b.n	8009fd4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8009e0e:	2000      	movs	r0, #0
 8009e10:	f000 ff6a 	bl	800ace8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009e14:	4b2f      	ldr	r3, [pc, #188]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 80dd 	beq.w	8009fd8 <RadioIrqProcess+0x3b0>
 8009e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 80d7 	beq.w	8009fd8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	2000      	movs	r0, #0
 8009e32:	4798      	blx	r3
        break;
 8009e34:	e0d0      	b.n	8009fd8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009e36:	2000      	movs	r0, #0
 8009e38:	f000 ff56 	bl	800ace8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009e3c:	4b25      	ldr	r3, [pc, #148]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80cb 	beq.w	8009fdc <RadioIrqProcess+0x3b4>
 8009e46:	4b23      	ldr	r3, [pc, #140]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80c5 	beq.w	8009fdc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8009e52:	4b20      	ldr	r3, [pc, #128]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2001      	movs	r0, #1
 8009e5a:	4798      	blx	r3
        break;
 8009e5c:	e0be      	b.n	8009fdc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009e5e:	f000 fdf9 	bl	800aa54 <SUBGRF_GetOperatingMode>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d115      	bne.n	8009e94 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009e68:	4819      	ldr	r0, [pc, #100]	@ (8009ed0 <RadioIrqProcess+0x2a8>)
 8009e6a:	f002 f997 	bl	800c19c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009e6e:	2000      	movs	r0, #0
 8009e70:	f000 ff3a 	bl	800ace8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009e74:	4b17      	ldr	r3, [pc, #92]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80b1 	beq.w	8009fe0 <RadioIrqProcess+0x3b8>
 8009e7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 80ab 	beq.w	8009fe0 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8009e8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4798      	blx	r3
        break;
 8009e92:	e0a5      	b.n	8009fe0 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009e94:	f000 fdde 	bl	800aa54 <SUBGRF_GetOperatingMode>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	f040 80a0 	bne.w	8009fe0 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8009ea0:	480d      	ldr	r0, [pc, #52]	@ (8009ed8 <RadioIrqProcess+0x2b0>)
 8009ea2:	f002 f97b 	bl	800c19c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f000 ff1e 	bl	800ace8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009eac:	4b09      	ldr	r3, [pc, #36]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8095 	beq.w	8009fe0 <RadioIrqProcess+0x3b8>
 8009eb6:	4b07      	ldr	r3, [pc, #28]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 808f 	beq.w	8009fe0 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8009ec2:	4b04      	ldr	r3, [pc, #16]	@ (8009ed4 <RadioIrqProcess+0x2ac>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	4798      	blx	r3
        break;
 8009eca:	e089      	b.n	8009fe0 <RadioIrqProcess+0x3b8>
 8009ecc:	20005b90 	.word	0x20005b90
 8009ed0:	20005bec 	.word	0x20005bec
 8009ed4:	20005b8c 	.word	0x20005b8c
 8009ed8:	20005c04 	.word	0x20005c04
 8009edc:	20005a8c 	.word	0x20005a8c
 8009ee0:	20005bb4 	.word	0x20005bb4
 8009ee4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009ee8:	4b44      	ldr	r3, [pc, #272]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d079      	beq.n	8009fe4 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009ef0:	4a43      	ldr	r2, [pc, #268]	@ (800a000 <RadioIrqProcess+0x3d8>)
 8009ef2:	4b42      	ldr	r3, [pc, #264]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ef6:	0c1b      	lsrs	r3, r3, #16
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	4619      	mov	r1, r3
 8009efc:	f640 1003 	movw	r0, #2307	@ 0x903
 8009f00:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009f02:	4a3f      	ldr	r2, [pc, #252]	@ (800a000 <RadioIrqProcess+0x3d8>)
 8009f04:	4b3d      	ldr	r3, [pc, #244]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f08:	0a1b      	lsrs	r3, r3, #8
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	f640 1004 	movw	r0, #2308	@ 0x904
 8009f12:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009f14:	4a3a      	ldr	r2, [pc, #232]	@ (800a000 <RadioIrqProcess+0x3d8>)
 8009f16:	4b39      	ldr	r3, [pc, #228]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	f640 1005 	movw	r0, #2309	@ 0x905
 8009f22:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009f24:	4c36      	ldr	r4, [pc, #216]	@ (800a000 <RadioIrqProcess+0x3d8>)
 8009f26:	4b37      	ldr	r3, [pc, #220]	@ (800a004 <RadioIrqProcess+0x3dc>)
 8009f28:	f640 1002 	movw	r0, #2306	@ 0x902
 8009f2c:	4798      	blx	r3
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f043 0301 	orr.w	r3, r3, #1
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	4619      	mov	r1, r3
 8009f38:	f640 1002 	movw	r0, #2306	@ 0x902
 8009f3c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	f240 2162 	movw	r1, #610	@ 0x262
 8009f4c:	f240 2062 	movw	r0, #610	@ 0x262
 8009f50:	f001 f89e 	bl	800b090 <SUBGRF_SetDioIrqParams>
        break;
 8009f54:	e046      	b.n	8009fe4 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009f56:	f001 ff38 	bl	800bdca <RFW_Is_Init>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d143      	bne.n	8009fe8 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009f60:	f001 ff69 	bl	800be36 <RFW_ReceivePayload>
        break;
 8009f64:	e040      	b.n	8009fe8 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8009f66:	4828      	ldr	r0, [pc, #160]	@ (800a008 <RadioIrqProcess+0x3e0>)
 8009f68:	f002 f918 	bl	800c19c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009f6c:	4b23      	ldr	r3, [pc, #140]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	f083 0301 	eor.w	r3, r3, #1
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	f000 feb4 	bl	800ace8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009f80:	4b22      	ldr	r3, [pc, #136]	@ (800a00c <RadioIrqProcess+0x3e4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d031      	beq.n	8009fec <RadioIrqProcess+0x3c4>
 8009f88:	4b20      	ldr	r3, [pc, #128]	@ (800a00c <RadioIrqProcess+0x3e4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d02c      	beq.n	8009fec <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8009f92:	4b1e      	ldr	r3, [pc, #120]	@ (800a00c <RadioIrqProcess+0x3e4>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	4798      	blx	r3
        break;
 8009f9a:	e027      	b.n	8009fec <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8009f9c:	4b17      	ldr	r3, [pc, #92]	@ (8009ffc <RadioIrqProcess+0x3d4>)
 8009f9e:	785b      	ldrb	r3, [r3, #1]
 8009fa0:	f083 0301 	eor.w	r3, r3, #1
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8009faa:	2000      	movs	r0, #0
 8009fac:	f000 fe9c 	bl	800ace8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009fb0:	4b16      	ldr	r3, [pc, #88]	@ (800a00c <RadioIrqProcess+0x3e4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01b      	beq.n	8009ff0 <RadioIrqProcess+0x3c8>
 8009fb8:	4b14      	ldr	r3, [pc, #80]	@ (800a00c <RadioIrqProcess+0x3e4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d016      	beq.n	8009ff0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8009fc2:	4b12      	ldr	r3, [pc, #72]	@ (800a00c <RadioIrqProcess+0x3e4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	4798      	blx	r3
        break;
 8009fca:	e011      	b.n	8009ff0 <RadioIrqProcess+0x3c8>
        break;
 8009fcc:	bf00      	nop
 8009fce:	e010      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fd0:	bf00      	nop
 8009fd2:	e00e      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fd4:	bf00      	nop
 8009fd6:	e00c      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fd8:	bf00      	nop
 8009fda:	e00a      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fdc:	bf00      	nop
 8009fde:	e008      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fe0:	bf00      	nop
 8009fe2:	e006      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fe4:	bf00      	nop
 8009fe6:	e004      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fe8:	bf00      	nop
 8009fea:	e002      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009fec:	bf00      	nop
 8009fee:	e000      	b.n	8009ff2 <RadioIrqProcess+0x3ca>
        break;
 8009ff0:	bf00      	nop
    }
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20005b90 	.word	0x20005b90
 800a000:	08009a39 	.word	0x08009a39
 800a004:	08009a5d 	.word	0x08009a5d
 800a008:	20005c04 	.word	0x20005c04
 800a00c:	20005b8c 	.word	0x20005b8c

0800a010 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a014:	4b09      	ldr	r3, [pc, #36]	@ (800a03c <RadioTxPrbs+0x2c>)
 800a016:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a01a:	2101      	movs	r1, #1
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 fcdb 	bl	800b9d8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a022:	4b07      	ldr	r3, [pc, #28]	@ (800a040 <RadioTxPrbs+0x30>)
 800a024:	212d      	movs	r1, #45	@ 0x2d
 800a026:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a02a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a02c:	f000 ff1f 	bl	800ae6e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a030:	4804      	ldr	r0, [pc, #16]	@ (800a044 <RadioTxPrbs+0x34>)
 800a032:	f000 fe75 	bl	800ad20 <SUBGRF_SetTx>
}
 800a036:	bf00      	nop
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20005b90 	.word	0x20005b90
 800a040:	08009a39 	.word	0x08009a39
 800a044:	000fffff 	.word	0x000fffff

0800a048 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a056:	4618      	mov	r0, r3
 800a058:	f001 fce6 	bl	800ba28 <SUBGRF_SetRfTxPower>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a060:	210e      	movs	r1, #14
 800a062:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a066:	f001 fbc3 	bl	800b7f0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	2101      	movs	r1, #1
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 fcb2 	bl	800b9d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a074:	f000 fef2 	bl	800ae5c <SUBGRF_SetTxContinuousWave>
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a080:	b480      	push	{r7}
 800a082:	b089      	sub	sp, #36	@ 0x24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	4613      	mov	r3, r2
 800a08c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800a096:	2300      	movs	r3, #0
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e011      	b.n	800a0c0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	440b      	add	r3, r1
 800a0aa:	43d2      	mvns	r2, r2
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	61bb      	str	r3, [r7, #24]
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	dbe9      	blt.n	800a09c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61bb      	str	r3, [r7, #24]
 800a0cc:	e049      	b.n	800a162 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	425a      	negs	r2, r3
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	f002 0207 	and.w	r2, r2, #7
 800a0da:	bf58      	it	pl
 800a0dc:	4253      	negpl	r3, r2
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f1c3 0307 	rsb	r3, r3, #7
 800a0e4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	da00      	bge.n	800a0ee <payload_integration+0x6e>
 800a0ec:	3307      	adds	r3, #7
 800a0ee:	10db      	asrs	r3, r3, #3
 800a0f0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	425a      	negs	r2, r3
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	f002 0207 	and.w	r2, r2, #7
 800a100:	bf58      	it	pl
 800a102:	4253      	negpl	r3, r2
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f1c3 0307 	rsb	r3, r3, #7
 800a10a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	3301      	adds	r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	da00      	bge.n	800a116 <payload_integration+0x96>
 800a114:	3307      	adds	r3, #7
 800a116:	10db      	asrs	r3, r3, #3
 800a118:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a11a:	7dbb      	ldrb	r3, [r7, #22]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	4413      	add	r3, r2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	fa42 f303 	asr.w	r3, r2, r3
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a132:	7ffa      	ldrb	r2, [r7, #31]
 800a134:	7cfb      	ldrb	r3, [r7, #19]
 800a136:	4053      	eors	r3, r2
 800a138:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a13a:	7d3b      	ldrb	r3, [r7, #20]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4413      	add	r3, r2
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b25a      	sxtb	r2, r3
 800a144:	7ff9      	ldrb	r1, [r7, #31]
 800a146:	7d7b      	ldrb	r3, [r7, #21]
 800a148:	fa01 f303 	lsl.w	r3, r1, r3
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	b259      	sxtb	r1, r3
 800a152:	7d3b      	ldrb	r3, [r7, #20]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4413      	add	r3, r2
 800a158:	b2ca      	uxtb	r2, r1
 800a15a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	3301      	adds	r3, #1
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	429a      	cmp	r2, r3
 800a16a:	dbb0      	blt.n	800a0ce <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a16c:	7ffb      	ldrb	r3, [r7, #31]
 800a16e:	01db      	lsls	r3, r3, #7
 800a170:	b25a      	sxtb	r2, r3
 800a172:	7ffb      	ldrb	r3, [r7, #31]
 800a174:	019b      	lsls	r3, r3, #6
 800a176:	b25b      	sxtb	r3, r3
 800a178:	4313      	orrs	r3, r2
 800a17a:	b25b      	sxtb	r3, r3
 800a17c:	7ffa      	ldrb	r2, [r7, #31]
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d101      	bne.n	800a186 <payload_integration+0x106>
 800a182:	2220      	movs	r2, #32
 800a184:	e000      	b.n	800a188 <payload_integration+0x108>
 800a186:	2200      	movs	r2, #0
 800a188:	4313      	orrs	r3, r2
 800a18a:	b259      	sxtb	r1, r3
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	b2ca      	uxtb	r2, r1
 800a194:	701a      	strb	r2, [r3, #0]
}
 800a196:	bf00      	nop
 800a198:	3724      	adds	r7, #36	@ 0x24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bc80      	pop	{r7}
 800a19e:	4770      	bx	lr

0800a1a0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08c      	sub	sp, #48	@ 0x30
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	603b      	str	r3, [r7, #0]
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	623b      	str	r3, [r7, #32]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a1bc:	f001 fdff 	bl	800bdbe <RFW_DeInit>

    if( rxContinuous != 0 )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	4ba3      	ldr	r3, [pc, #652]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a1d8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <RadioSetRxGenericConfig+0x48>
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	f000 80dc 	beq.w	800a39e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a1e6:	e194      	b.n	800a512 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <RadioSetRxGenericConfig+0x58>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <RadioSetRxGenericConfig+0x5e>
            return -1;
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	e18a      	b.n	800a514 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	7f9b      	ldrb	r3, [r3, #30]
 800a202:	2b08      	cmp	r3, #8
 800a204:	d902      	bls.n	800a20c <RadioSetRxGenericConfig+0x6c>
            return -1;
 800a206:	f04f 33ff 	mov.w	r3, #4294967295
 800a20a:	e183      	b.n	800a514 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6919      	ldr	r1, [r3, #16]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	7f9b      	ldrb	r3, [r3, #30]
 800a214:	461a      	mov	r2, r3
 800a216:	f107 0320 	add.w	r3, r7, #32
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fee0 	bl	800bfe0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	bf14      	ite	ne
 800a228:	2301      	movne	r3, #1
 800a22a:	2300      	moveq	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fe26 	bl	800ae80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a234:	4b8b      	ldr	r3, [pc, #556]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	4a88      	ldr	r2, [pc, #544]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a242:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a24a:	4b86      	ldr	r3, [pc, #536]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a24c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	4618      	mov	r0, r3
 800a256:	f001 fce5 	bl	800bc24 <SUBGRF_GetFskBandwidthRegValue>
 800a25a:	4603      	mov	r3, r0
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b81      	ldr	r3, [pc, #516]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a264:	4b7f      	ldr	r3, [pc, #508]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a266:	2200      	movs	r2, #0
 800a268:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	b29a      	uxth	r2, r3
 800a274:	4b7b      	ldr	r3, [pc, #492]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a276:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	7fda      	ldrb	r2, [r3, #31]
 800a27c:	4b79      	ldr	r3, [pc, #484]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a27e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	7f9b      	ldrb	r3, [r3, #30]
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	b2da      	uxtb	r2, r3
 800a288:	4b76      	ldr	r3, [pc, #472]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a28a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800a292:	4b74      	ldr	r3, [pc, #464]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a294:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d105      	bne.n	800a2ac <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	4b6f      	ldr	r3, [pc, #444]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a2a8:	759a      	strb	r2, [r3, #22]
 800a2aa:	e00b      	b.n	800a2c4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d103      	bne.n	800a2be <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a2b6:	4b6b      	ldr	r3, [pc, #428]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a2b8:	22ff      	movs	r2, #255	@ 0xff
 800a2ba:	759a      	strb	r2, [r3, #22]
 800a2bc:	e002      	b.n	800a2c4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a2be:	4b69      	ldr	r3, [pc, #420]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a2c0:	22ff      	movs	r2, #255	@ 0xff
 800a2c2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d004      	beq.n	800a2d8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d12d      	bne.n	800a334 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a2de:	2bf1      	cmp	r3, #241	@ 0xf1
 800a2e0:	d00c      	beq.n	800a2fc <RadioSetRxGenericConfig+0x15c>
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a2e8:	2bf2      	cmp	r3, #242	@ 0xf2
 800a2ea:	d007      	beq.n	800a2fc <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d002      	beq.n	800a2fc <RadioSetRxGenericConfig+0x15c>
                return -1;
 800a2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fa:	e10b      	b.n	800a514 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a304:	4b58      	ldr	r3, [pc, #352]	@ (800a468 <RadioSetRxGenericConfig+0x2c8>)
 800a306:	6819      	ldr	r1, [r3, #0]
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	4a57      	ldr	r2, [pc, #348]	@ (800a46c <RadioSetRxGenericConfig+0x2cc>)
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 fd48 	bl	800bda4 <RFW_Init>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <RadioSetRxGenericConfig+0x180>
                return -1;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	e0f9      	b.n	800a514 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a320:	4b50      	ldr	r3, [pc, #320]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a322:	2200      	movs	r2, #0
 800a324:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a326:	4b4f      	ldr	r3, [pc, #316]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a328:	2201      	movs	r2, #1
 800a32a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a32c:	4b4d      	ldr	r3, [pc, #308]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a32e:	2200      	movs	r2, #0
 800a330:	755a      	strb	r2, [r3, #21]
        {
 800a332:	e00e      	b.n	800a352 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a33a:	4b4a      	ldr	r3, [pc, #296]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a33c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a344:	4b47      	ldr	r3, [pc, #284]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a346:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a34e:	4b45      	ldr	r3, [pc, #276]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a350:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800a352:	f7ff fa70 	bl	8009836 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a356:	2000      	movs	r0, #0
 800a358:	f7fe fc0c 	bl	8008b74 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a35c:	4844      	ldr	r0, [pc, #272]	@ (800a470 <RadioSetRxGenericConfig+0x2d0>)
 800a35e:	f001 f82d 	bl	800b3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a362:	4844      	ldr	r0, [pc, #272]	@ (800a474 <RadioSetRxGenericConfig+0x2d4>)
 800a364:	f001 f8fc 	bl	800b560 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a368:	f107 0320 	add.w	r3, r7, #32
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fbc0 	bl	800aaf2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	8b9b      	ldrh	r3, [r3, #28]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fc0a 	bl	800ab90 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	8b1b      	ldrh	r3, [r3, #24]
 800a380:	4618      	mov	r0, r3
 800a382:	f000 fbe5 	bl	800ab50 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a38c:	fb03 f202 	mul.w	r2, r3, r2
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	fbb2 f3f3 	udiv	r3, r2, r3
 800a398:	4a32      	ldr	r2, [pc, #200]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a39a:	6093      	str	r3, [r2, #8]
        break;
 800a39c:	e0b9      	b.n	800a512 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d102      	bne.n	800a3ac <RadioSetRxGenericConfig+0x20c>
            return -1;
 800a3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3aa:	e0b3      	b.n	800a514 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d104      	bne.n	800a3c0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a3be:	e002      	b.n	800a3c6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800a3c0:	23ff      	movs	r3, #255	@ 0xff
 800a3c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bf14      	ite	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	2300      	moveq	r3, #0
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fd53 	bl	800ae80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 fd5d 	bl	800ae9e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a3e4:	4b1f      	ldr	r3, [pc, #124]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a3f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a3f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800a3fe:	4b19      	ldr	r3, [pc, #100]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800a40a:	4b16      	ldr	r3, [pc, #88]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a40c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a416:	2b02      	cmp	r3, #2
 800a418:	d010      	beq.n	800a43c <RadioSetRxGenericConfig+0x29c>
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	dc2c      	bgt.n	800a478 <RadioSetRxGenericConfig+0x2d8>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <RadioSetRxGenericConfig+0x288>
 800a422:	2b01      	cmp	r3, #1
 800a424:	d005      	beq.n	800a432 <RadioSetRxGenericConfig+0x292>
            break;
 800a426:	e027      	b.n	800a478 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a428:	4b0e      	ldr	r3, [pc, #56]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a430:	e023      	b.n	800a47a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a432:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a43a:	e01e      	b.n	800a47a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a442:	2b0b      	cmp	r3, #11
 800a444:	d004      	beq.n	800a450 <RadioSetRxGenericConfig+0x2b0>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a44c:	2b0c      	cmp	r3, #12
 800a44e:	d104      	bne.n	800a45a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a450:	4b04      	ldr	r3, [pc, #16]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a458:	e00f      	b.n	800a47a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a45a:	4b02      	ldr	r3, [pc, #8]	@ (800a464 <RadioSetRxGenericConfig+0x2c4>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a462:	e00a      	b.n	800a47a <RadioSetRxGenericConfig+0x2da>
 800a464:	20005b90 	.word	0x20005b90
 800a468:	20005b8c 	.word	0x20005b8c
 800a46c:	20005c04 	.word	0x20005c04
 800a470:	20005bc8 	.word	0x20005bc8
 800a474:	20005b9e 	.word	0x20005b9e
            break;
 800a478:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a47a:	4b28      	ldr	r3, [pc, #160]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a47c:	2201      	movs	r2, #1
 800a47e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800a484:	4b25      	ldr	r3, [pc, #148]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a486:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800a48e:	4b23      	ldr	r3, [pc, #140]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a490:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a492:	4a22      	ldr	r2, [pc, #136]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a494:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a498:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a4a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a4a2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a4ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 800a4b2:	f7ff f9c0 	bl	8009836 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	f7fe fb5c 	bl	8008b74 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a4bc:	4818      	ldr	r0, [pc, #96]	@ (800a520 <RadioSetRxGenericConfig+0x380>)
 800a4be:	f000 ff7d 	bl	800b3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a4c2:	4818      	ldr	r0, [pc, #96]	@ (800a524 <RadioSetRxGenericConfig+0x384>)
 800a4c4:	f001 f84c 	bl	800b560 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a4c8:	4b14      	ldr	r3, [pc, #80]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a4ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d10d      	bne.n	800a4ee <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a4d2:	f240 7036 	movw	r0, #1846	@ 0x736
 800a4d6:	f001 f99f 	bl	800b818 <SUBGRF_ReadRegister>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f023 0304 	bic.w	r3, r3, #4
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f240 7036 	movw	r0, #1846	@ 0x736
 800a4e8:	f001 f982 	bl	800b7f0 <SUBGRF_WriteRegister>
 800a4ec:	e00c      	b.n	800a508 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a4ee:	f240 7036 	movw	r0, #1846	@ 0x736
 800a4f2:	f001 f991 	bl	800b818 <SUBGRF_ReadRegister>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f043 0304 	orr.w	r3, r3, #4
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	4619      	mov	r1, r3
 800a500:	f240 7036 	movw	r0, #1846	@ 0x736
 800a504:	f001 f974 	bl	800b7f0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a508:	4b04      	ldr	r3, [pc, #16]	@ (800a51c <RadioSetRxGenericConfig+0x37c>)
 800a50a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a50e:	609a      	str	r2, [r3, #8]
        break;
 800a510:	bf00      	nop
    }
    return status;
 800a512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a514:	4618      	mov	r0, r3
 800a516:	3730      	adds	r7, #48	@ 0x30
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20005b90 	.word	0x20005b90
 800a520:	20005bc8 	.word	0x20005bc8
 800a524:	20005b9e 	.word	0x20005b9e

0800a528 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08e      	sub	sp, #56	@ 0x38
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607b      	str	r3, [r7, #4]
 800a532:	4603      	mov	r3, r0
 800a534:	73fb      	strb	r3, [r7, #15]
 800a536:	4613      	mov	r3, r2
 800a538:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800a53a:	2300      	movs	r3, #0
 800a53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a53e:	2300      	movs	r3, #0
 800a540:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a542:	f001 fc3c 	bl	800bdbe <RFW_DeInit>
    switch( modem )
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	2b03      	cmp	r3, #3
 800a54a:	f200 8204 	bhi.w	800a956 <RadioSetTxGenericConfig+0x42e>
 800a54e:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <RadioSetTxGenericConfig+0x2c>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a6d9 	.word	0x0800a6d9
 800a558:	0800a821 	.word	0x0800a821
 800a55c:	0800a919 	.word	0x0800a919
 800a560:	0800a565 	.word	0x0800a565
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	7c9b      	ldrb	r3, [r3, #18]
 800a568:	2b08      	cmp	r3, #8
 800a56a:	d902      	bls.n	800a572 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
 800a570:	e206      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	6899      	ldr	r1, [r3, #8]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	7c9b      	ldrb	r3, [r3, #18]
 800a57a:	461a      	mov	r2, r3
 800a57c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a580:	4618      	mov	r0, r3
 800a582:	f001 fd2d 	bl	800bfe0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295
 800a592:	e1f5      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d813      	bhi.n	800a5c8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a5a6:	4b99      	ldr	r3, [pc, #612]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a5ac:	4b97      	ldr	r3, [pc, #604]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a94      	ldr	r2, [pc, #592]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	7cda      	ldrb	r2, [r3, #19]
 800a5c0:	4b92      	ldr	r3, [pc, #584]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5c6:	e017      	b.n	800a5f8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a5ce:	4b8f      	ldr	r3, [pc, #572]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a5d4:	4b8d      	ldr	r3, [pc, #564]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a8a      	ldr	r2, [pc, #552]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	7cda      	ldrb	r2, [r3, #19]
 800a5e8:	4b88      	ldr	r3, [pc, #544]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	089b      	lsrs	r3, r3, #2
 800a5f4:	4a85      	ldr	r2, [pc, #532]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a5f6:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	b29a      	uxth	r2, r3
 800a602:	4b82      	ldr	r3, [pc, #520]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a604:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a606:	4b81      	ldr	r3, [pc, #516]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a608:	2204      	movs	r2, #4
 800a60a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	7c9b      	ldrb	r3, [r3, #18]
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	b2da      	uxtb	r2, r3
 800a614:	4b7d      	ldr	r3, [pc, #500]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a616:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a618:	4b7c      	ldr	r3, [pc, #496]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	7d9b      	ldrb	r3, [r3, #22]
 800a622:	2b02      	cmp	r3, #2
 800a624:	d003      	beq.n	800a62e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	7d1b      	ldrb	r3, [r3, #20]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d12b      	bne.n	800a686 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	7d5b      	ldrb	r3, [r3, #21]
 800a632:	2bf1      	cmp	r3, #241	@ 0xf1
 800a634:	d00a      	beq.n	800a64c <RadioSetTxGenericConfig+0x124>
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	7d5b      	ldrb	r3, [r3, #21]
 800a63a:	2bf2      	cmp	r3, #242	@ 0xf2
 800a63c:	d006      	beq.n	800a64c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	7d5b      	ldrb	r3, [r3, #21]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d002      	beq.n	800a64c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800a646:	f04f 33ff 	mov.w	r3, #4294967295
 800a64a:	e199      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a656:	4b6e      	ldr	r3, [pc, #440]	@ (800a810 <RadioSetTxGenericConfig+0x2e8>)
 800a658:	6819      	ldr	r1, [r3, #0]
 800a65a:	f107 0320 	add.w	r3, r7, #32
 800a65e:	4a6d      	ldr	r2, [pc, #436]	@ (800a814 <RadioSetTxGenericConfig+0x2ec>)
 800a660:	4618      	mov	r0, r3
 800a662:	f001 fb9f 	bl	800bda4 <RFW_Init>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800a66c:	f04f 33ff 	mov.w	r3, #4294967295
 800a670:	e186      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a672:	4b66      	ldr	r3, [pc, #408]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a674:	2200      	movs	r2, #0
 800a676:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a678:	4b64      	ldr	r3, [pc, #400]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a67a:	2201      	movs	r2, #1
 800a67c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a67e:	4b63      	ldr	r3, [pc, #396]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a680:	2200      	movs	r2, #0
 800a682:	755a      	strb	r2, [r3, #21]
        {
 800a684:	e00b      	b.n	800a69e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	7d5a      	ldrb	r2, [r3, #21]
 800a68a:	4b60      	ldr	r3, [pc, #384]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a68c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	7d9a      	ldrb	r2, [r3, #22]
 800a692:	4b5e      	ldr	r3, [pc, #376]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a694:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	7d1a      	ldrb	r2, [r3, #20]
 800a69a:	4b5c      	ldr	r3, [pc, #368]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a69c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a69e:	f7ff f8ca 	bl	8009836 <RadioStandby>
        RadioSetModem( radio_modem );
 800a6a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fa64 	bl	8008b74 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a6ac:	485a      	ldr	r0, [pc, #360]	@ (800a818 <RadioSetTxGenericConfig+0x2f0>)
 800a6ae:	f000 fe85 	bl	800b3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a6b2:	485a      	ldr	r0, [pc, #360]	@ (800a81c <RadioSetTxGenericConfig+0x2f4>)
 800a6b4:	f000 ff54 	bl	800b560 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a6b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fa18 	bl	800aaf2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	8a1b      	ldrh	r3, [r3, #16]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fa62 	bl	800ab90 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	899b      	ldrh	r3, [r3, #12]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 fa3d 	bl	800ab50 <SUBGRF_SetCrcPolynomial>
        break;
 800a6d6:	e13f      	b.n	800a958 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	e14c      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	7c9b      	ldrb	r3, [r3, #18]
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d902      	bls.n	800a6f4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	e145      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	6899      	ldr	r1, [r3, #8]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	7c9b      	ldrb	r3, [r3, #18]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a702:	4618      	mov	r0, r3
 800a704:	f001 fc6c 	bl	800bfe0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a708:	4b40      	ldr	r3, [pc, #256]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a3d      	ldr	r2, [pc, #244]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a716:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	7cda      	ldrb	r2, [r3, #19]
 800a71c:	4b3b      	ldr	r3, [pc, #236]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a71e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	4a39      	ldr	r2, [pc, #228]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a728:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a72a:	4b38      	ldr	r3, [pc, #224]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	b29b      	uxth	r3, r3
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	b29a      	uxth	r2, r3
 800a73a:	4b34      	ldr	r3, [pc, #208]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a73c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a73e:	4b33      	ldr	r3, [pc, #204]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a740:	2204      	movs	r2, #4
 800a742:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	7c9b      	ldrb	r3, [r3, #18]
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	4b2f      	ldr	r3, [pc, #188]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a74e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a750:	4b2e      	ldr	r3, [pc, #184]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a752:	2200      	movs	r2, #0
 800a754:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	7d9b      	ldrb	r3, [r3, #22]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d003      	beq.n	800a766 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	7d1b      	ldrb	r3, [r3, #20]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d12a      	bne.n	800a7bc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	7d5b      	ldrb	r3, [r3, #21]
 800a76a:	2bf1      	cmp	r3, #241	@ 0xf1
 800a76c:	d00a      	beq.n	800a784 <RadioSetTxGenericConfig+0x25c>
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	7d5b      	ldrb	r3, [r3, #21]
 800a772:	2bf2      	cmp	r3, #242	@ 0xf2
 800a774:	d006      	beq.n	800a784 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	7d5b      	ldrb	r3, [r3, #21]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d002      	beq.n	800a784 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800a77e:	f04f 33ff 	mov.w	r3, #4294967295
 800a782:	e0fd      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800a784:	2301      	movs	r3, #1
 800a786:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a78c:	4b20      	ldr	r3, [pc, #128]	@ (800a810 <RadioSetTxGenericConfig+0x2e8>)
 800a78e:	6819      	ldr	r1, [r3, #0]
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4a1f      	ldr	r2, [pc, #124]	@ (800a814 <RadioSetTxGenericConfig+0x2ec>)
 800a796:	4618      	mov	r0, r3
 800a798:	f001 fb04 	bl	800bda4 <RFW_Init>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800a7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a6:	e0eb      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a7a8:	4b18      	ldr	r3, [pc, #96]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a7ae:	4b17      	ldr	r3, [pc, #92]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a7b4:	4b15      	ldr	r3, [pc, #84]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	755a      	strb	r2, [r3, #21]
        {
 800a7ba:	e00b      	b.n	800a7d4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	7d5a      	ldrb	r2, [r3, #21]
 800a7c0:	4b12      	ldr	r3, [pc, #72]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a7c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	7d9a      	ldrb	r2, [r3, #22]
 800a7c8:	4b10      	ldr	r3, [pc, #64]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a7ca:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	7d1a      	ldrb	r2, [r3, #20]
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a80c <RadioSetTxGenericConfig+0x2e4>)
 800a7d2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a7d4:	f7ff f82f 	bl	8009836 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f7fe f9cb 	bl	8008b74 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a7de:	480e      	ldr	r0, [pc, #56]	@ (800a818 <RadioSetTxGenericConfig+0x2f0>)
 800a7e0:	f000 fdec 	bl	800b3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a7e4:	480d      	ldr	r0, [pc, #52]	@ (800a81c <RadioSetTxGenericConfig+0x2f4>)
 800a7e6:	f000 febb 	bl	800b560 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a7ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 f97f 	bl	800aaf2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	8a1b      	ldrh	r3, [r3, #16]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f9c9 	bl	800ab90 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	899b      	ldrh	r3, [r3, #12]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f9a4 	bl	800ab50 <SUBGRF_SetCrcPolynomial>
        break;
 800a808:	e0a6      	b.n	800a958 <RadioSetTxGenericConfig+0x430>
 800a80a:	bf00      	nop
 800a80c:	20005b90 	.word	0x20005b90
 800a810:	20005b8c 	.word	0x20005b8c
 800a814:	20005bec 	.word	0x20005bec
 800a818:	20005bc8 	.word	0x20005bc8
 800a81c:	20005b9e 	.word	0x20005b9e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a820:	4b59      	ldr	r3, [pc, #356]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	4b56      	ldr	r3, [pc, #344]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a82e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	785a      	ldrb	r2, [r3, #1]
 800a836:	4b54      	ldr	r3, [pc, #336]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	789a      	ldrb	r2, [r3, #2]
 800a840:	4b51      	ldr	r3, [pc, #324]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a842:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	78db      	ldrb	r3, [r3, #3]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d010      	beq.n	800a870 <RadioSetTxGenericConfig+0x348>
 800a84e:	2b02      	cmp	r3, #2
 800a850:	dc20      	bgt.n	800a894 <RadioSetTxGenericConfig+0x36c>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <RadioSetTxGenericConfig+0x334>
 800a856:	2b01      	cmp	r3, #1
 800a858:	d005      	beq.n	800a866 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800a85a:	e01b      	b.n	800a894 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a85c:	4b4a      	ldr	r3, [pc, #296]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a864:	e017      	b.n	800a896 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a866:	4b48      	ldr	r3, [pc, #288]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a86e:	e012      	b.n	800a896 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b0b      	cmp	r3, #11
 800a876:	d003      	beq.n	800a880 <RadioSetTxGenericConfig+0x358>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b0c      	cmp	r3, #12
 800a87e:	d104      	bne.n	800a88a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a880:	4b41      	ldr	r3, [pc, #260]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a888:	e005      	b.n	800a896 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a88a:	4b3f      	ldr	r3, [pc, #252]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a892:	e000      	b.n	800a896 <RadioSetTxGenericConfig+0x36e>
            break;
 800a894:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a896:	4b3c      	ldr	r3, [pc, #240]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a898:	2201      	movs	r2, #1
 800a89a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	889a      	ldrh	r2, [r3, #4]
 800a8a0:	4b39      	ldr	r3, [pc, #228]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a8a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	799a      	ldrb	r2, [r3, #6]
 800a8a8:	4b37      	ldr	r3, [pc, #220]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a8aa:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	79da      	ldrb	r2, [r3, #7]
 800a8b0:	4b35      	ldr	r3, [pc, #212]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a8b2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	7a1a      	ldrb	r2, [r3, #8]
 800a8ba:	4b33      	ldr	r3, [pc, #204]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a8bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800a8c0:	f7fe ffb9 	bl	8009836 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a8c4:	2001      	movs	r0, #1
 800a8c6:	f7fe f955 	bl	8008b74 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a8ca:	4830      	ldr	r0, [pc, #192]	@ (800a98c <RadioSetTxGenericConfig+0x464>)
 800a8cc:	f000 fd76 	bl	800b3bc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a8d0:	482f      	ldr	r0, [pc, #188]	@ (800a990 <RadioSetTxGenericConfig+0x468>)
 800a8d2:	f000 fe45 	bl	800b560 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a8d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a8dc:	2b06      	cmp	r3, #6
 800a8de:	d10d      	bne.n	800a8fc <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a8e0:	f640 0089 	movw	r0, #2185	@ 0x889
 800a8e4:	f000 ff98 	bl	800b818 <SUBGRF_ReadRegister>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f023 0304 	bic.w	r3, r3, #4
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	f640 0089 	movw	r0, #2185	@ 0x889
 800a8f6:	f000 ff7b 	bl	800b7f0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800a8fa:	e02d      	b.n	800a958 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a8fc:	f640 0089 	movw	r0, #2185	@ 0x889
 800a900:	f000 ff8a 	bl	800b818 <SUBGRF_ReadRegister>
 800a904:	4603      	mov	r3, r0
 800a906:	f043 0304 	orr.w	r3, r3, #4
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	4619      	mov	r1, r3
 800a90e:	f640 0089 	movw	r0, #2185	@ 0x889
 800a912:	f000 ff6d 	bl	800b7f0 <SUBGRF_WriteRegister>
        break;
 800a916:	e01f      	b.n	800a958 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <RadioSetTxGenericConfig+0x402>
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a928:	d902      	bls.n	800a930 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800a92a:	f04f 33ff 	mov.w	r3, #4294967295
 800a92e:	e027      	b.n	800a980 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800a930:	2003      	movs	r0, #3
 800a932:	f7fe f91f 	bl	8008b74 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a936:	4b14      	ldr	r3, [pc, #80]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a938:	2202      	movs	r2, #2
 800a93a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a11      	ldr	r2, [pc, #68]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a944:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a946:	4b10      	ldr	r3, [pc, #64]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a948:	2216      	movs	r2, #22
 800a94a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a94e:	480f      	ldr	r0, [pc, #60]	@ (800a98c <RadioSetTxGenericConfig+0x464>)
 800a950:	f000 fd34 	bl	800b3bc <SUBGRF_SetModulationParams>
        break;
 800a954:	e000      	b.n	800a958 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800a956:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f863 	bl	800ba28 <SUBGRF_SetRfTxPower>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	4b08      	ldr	r3, [pc, #32]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a968:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a96c:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a96e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a972:	4618      	mov	r0, r3
 800a974:	f001 fa37 	bl	800bde6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a978:	4a03      	ldr	r2, [pc, #12]	@ (800a988 <RadioSetTxGenericConfig+0x460>)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6053      	str	r3, [r2, #4]
    return 0;
 800a97e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a980:	4618      	mov	r0, r3
 800a982:	3738      	adds	r7, #56	@ 0x38
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20005b90 	.word	0x20005b90
 800a98c:	20005bc8 	.word	0x20005bc8
 800a990:	20005b9e 	.word	0x20005b9e

0800a994 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a99c:	2301      	movs	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bc80      	pop	{r7}
 800a9aa:	4770      	bx	lr

0800a9ac <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a9b6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a9d2:	4a1d      	ldr	r2, [pc, #116]	@ (800aa48 <SUBGRF_Init+0x84>)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a9d8:	f7f6 faaa 	bl	8000f30 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a9dc:	2002      	movs	r0, #2
 800a9de:	f001 f8ff 	bl	800bbe0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a9e2:	4b1a      	ldr	r3, [pc, #104]	@ (800aa4c <SUBGRF_Init+0x88>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f000 f97d 	bl	800ace8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a9ee:	f001 facc 	bl	800bf8a <RBI_IsTCXO>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d10e      	bne.n	800aa16 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a9f8:	2140      	movs	r1, #64	@ 0x40
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	f000 fb82 	bl	800b104 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800aa00:	2100      	movs	r1, #0
 800aa02:	f640 1011 	movw	r0, #2321	@ 0x911
 800aa06:	f000 fef3 	bl	800b7f0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800aa0a:	237f      	movs	r3, #127	@ 0x7f
 800aa0c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800aa0e:	7b38      	ldrb	r0, [r7, #12]
 800aa10:	f000 fa8b 	bl	800af2a <SUBGRF_Calibrate>
 800aa14:	e009      	b.n	800aa2a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800aa16:	2120      	movs	r1, #32
 800aa18:	f640 1011 	movw	r0, #2321	@ 0x911
 800aa1c:	f000 fee8 	bl	800b7f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800aa20:	2120      	movs	r1, #32
 800aa22:	f640 1012 	movw	r0, #2322	@ 0x912
 800aa26:	f000 fee3 	bl	800b7f0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800aa2a:	210e      	movs	r1, #14
 800aa2c:	f640 101f 	movw	r0, #2335	@ 0x91f
 800aa30:	f000 fede 	bl	800b7f0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800aa34:	f001 fa68 	bl	800bf08 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800aa38:	4b05      	ldr	r3, [pc, #20]	@ (800aa50 <SUBGRF_Init+0x8c>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	701a      	strb	r2, [r3, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20005c28 	.word	0x20005c28
 800aa4c:	20005c24 	.word	0x20005c24
 800aa50:	20005c1c 	.word	0x20005c1c

0800aa54 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
    return OperatingMode;
 800aa58:	4b02      	ldr	r3, [pc, #8]	@ (800aa64 <SUBGRF_GetOperatingMode+0x10>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr
 800aa64:	20005c1c 	.word	0x20005c1c

0800aa68 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6879      	ldr	r1, [r7, #4]
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	f000 ff24 	bl	800b8c8 <SUBGRF_WriteBuffer>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800aa9a:	f107 0317 	add.w	r3, r7, #23
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	f000 fe27 	bl	800b6f4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	79fa      	ldrb	r2, [r7, #7]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d201      	bcs.n	800aab4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e007      	b.n	800aac4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800aab4:	7df8      	ldrb	r0, [r7, #23]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	68f9      	ldr	r1, [r7, #12]
 800aabe:	f000 ff25 	bl	800b90c <SUBGRF_ReadBuffer>

    return 0;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	460b      	mov	r3, r1
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	4619      	mov	r1, r3
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7ff ffc2 	bl	800aa68 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f91b 	bl	800ad20 <SUBGRF_SetTx>
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800aafa:	2208      	movs	r2, #8
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800ab02:	f000 fe9d 	bl	800b840 <SUBGRF_WriteRegisters>
    return 0;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	0a1b      	lsrs	r3, r3, #8
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ab2a:	f000 fb6f 	bl	800b20c <SUBGRF_GetPacketType>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d108      	bne.n	800ab46 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800ab34:	f107 030c 	add.w	r3, r7, #12
 800ab38:	2202      	movs	r2, #2
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800ab40:	f000 fe7e 	bl	800b840 <SUBGRF_WriteRegisters>
            break;
 800ab44:	e000      	b.n	800ab48 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800ab46:	bf00      	nop
    }
}
 800ab48:	bf00      	nop
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800ab5a:	88fb      	ldrh	r3, [r7, #6]
 800ab5c:	0a1b      	lsrs	r3, r3, #8
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800ab64:	88fb      	ldrh	r3, [r7, #6]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ab6a:	f000 fb4f 	bl	800b20c <SUBGRF_GetPacketType>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d108      	bne.n	800ab86 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800ab74:	f107 030c 	add.w	r3, r7, #12
 800ab78:	2202      	movs	r2, #2
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f240 60be 	movw	r0, #1726	@ 0x6be
 800ab80:	f000 fe5e 	bl	800b840 <SUBGRF_WriteRegisters>
            break;
 800ab84:	e000      	b.n	800ab88 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800ab86:	bf00      	nop
    }
}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800ab9e:	f000 fb35 	bl	800b20c <SUBGRF_GetPacketType>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d121      	bne.n	800abec <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800aba8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800abac:	f000 fe34 	bl	800b818 <SUBGRF_ReadRegister>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f023 0301 	bic.w	r3, r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800abb8:	88fb      	ldrh	r3, [r7, #6]
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	b25a      	sxtb	r2, r3
 800abc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abca:	4313      	orrs	r3, r2
 800abcc:	b25b      	sxtb	r3, r3
 800abce:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
 800abd2:	4619      	mov	r1, r3
 800abd4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800abd8:	f000 fe0a 	bl	800b7f0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800abdc:	88fb      	ldrh	r3, [r7, #6]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	4619      	mov	r1, r3
 800abe2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800abe6:	f000 fe03 	bl	800b7f0 <SUBGRF_WriteRegister>
            break;
 800abea:	e000      	b.n	800abee <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800abec:	bf00      	nop
    }
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800ac08:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800ac0c:	f000 fe04 	bl	800b818 <SUBGRF_ReadRegister>
 800ac10:	4603      	mov	r3, r0
 800ac12:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	f023 0301 	bic.w	r3, r3, #1
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800ac22:	f000 fde5 	bl	800b7f0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800ac26:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ac2a:	f000 fdf5 	bl	800b818 <SUBGRF_ReadRegister>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800ac32:	79bb      	ldrb	r3, [r7, #6]
 800ac34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ac40:	f000 fdd6 	bl	800b7f0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ac44:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800ac48:	f000 f88a 	bl	800ad60 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	2204      	movs	r2, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	f640 0019 	movw	r0, #2073	@ 0x819
 800ac56:	f000 fe15 	bl	800b884 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f000 f844 	bl	800ace8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	4619      	mov	r1, r3
 800ac64:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800ac68:	f000 fdc2 	bl	800b7f0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800ac6c:	79bb      	ldrb	r3, [r7, #6]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ac74:	f000 fdbc 	bl	800b7f0 <SUBGRF_WriteRegister>

    return number;
 800ac78:	683b      	ldr	r3, [r7, #0]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f001 f946 	bl	800bf1e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800ac92:	2002      	movs	r0, #2
 800ac94:	f000 ffa4 	bl	800bbe0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ac98:	793b      	ldrb	r3, [r7, #4]
 800ac9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800aca4:	793b      	ldrb	r3, [r7, #4]
 800aca6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800acae:	b25b      	sxtb	r3, r3
 800acb0:	4313      	orrs	r3, r2
 800acb2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800acb4:	793b      	ldrb	r3, [r7, #4]
 800acb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800acbe:	4313      	orrs	r3, r2
 800acc0:	b25b      	sxtb	r3, r3
 800acc2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800acc4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800acc6:	f107 030f 	add.w	r3, r7, #15
 800acca:	2201      	movs	r2, #1
 800accc:	4619      	mov	r1, r3
 800acce:	2084      	movs	r0, #132	@ 0x84
 800acd0:	f000 fe3e 	bl	800b950 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800acd4:	4b03      	ldr	r3, [pc, #12]	@ (800ace4 <SUBGRF_SetSleep+0x60>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20005c1c 	.word	0x20005c1c

0800ace8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800acf2:	1dfb      	adds	r3, r7, #7
 800acf4:	2201      	movs	r2, #1
 800acf6:	4619      	mov	r1, r3
 800acf8:	2080      	movs	r0, #128	@ 0x80
 800acfa:	f000 fe29 	bl	800b950 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d103      	bne.n	800ad0c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <SUBGRF_SetStandby+0x34>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800ad0a:	e002      	b.n	800ad12 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800ad0c:	4b03      	ldr	r3, [pc, #12]	@ (800ad1c <SUBGRF_SetStandby+0x34>)
 800ad0e:	2202      	movs	r2, #2
 800ad10:	701a      	strb	r2, [r3, #0]
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20005c1c 	.word	0x20005c1c

0800ad20 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800ad28:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <SUBGRF_SetTx+0x3c>)
 800ad2a:	2204      	movs	r2, #4
 800ad2c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	0c1b      	lsrs	r3, r3, #16
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	0a1b      	lsrs	r3, r3, #8
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800ad44:	f107 030c 	add.w	r3, r7, #12
 800ad48:	2203      	movs	r2, #3
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	2083      	movs	r0, #131	@ 0x83
 800ad4e:	f000 fdff 	bl	800b950 <SUBGRF_WriteCommand>
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20005c1c 	.word	0x20005c1c

0800ad60 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ad68:	4b0c      	ldr	r3, [pc, #48]	@ (800ad9c <SUBGRF_SetRx+0x3c>)
 800ad6a:	2205      	movs	r2, #5
 800ad6c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	0c1b      	lsrs	r3, r3, #16
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	0a1b      	lsrs	r3, r3, #8
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ad84:	f107 030c 	add.w	r3, r7, #12
 800ad88:	2203      	movs	r2, #3
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	2082      	movs	r0, #130	@ 0x82
 800ad8e:	f000 fddf 	bl	800b950 <SUBGRF_WriteCommand>
}
 800ad92:	bf00      	nop
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20005c1c 	.word	0x20005c1c

0800ada0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ada8:	4b0e      	ldr	r3, [pc, #56]	@ (800ade4 <SUBGRF_SetRxBoosted+0x44>)
 800adaa:	2205      	movs	r2, #5
 800adac:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800adae:	2197      	movs	r1, #151	@ 0x97
 800adb0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800adb4:	f000 fd1c 	bl	800b7f0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	0c1b      	lsrs	r3, r3, #16
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	0a1b      	lsrs	r3, r3, #8
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	2203      	movs	r2, #3
 800add4:	4619      	mov	r1, r3
 800add6:	2082      	movs	r0, #130	@ 0x82
 800add8:	f000 fdba 	bl	800b950 <SUBGRF_WriteCommand>
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20005c1c 	.word	0x20005c1c

0800ade8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	0c1b      	lsrs	r3, r3, #16
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	0a1b      	lsrs	r3, r3, #8
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	0c1b      	lsrs	r3, r3, #16
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	0a1b      	lsrs	r3, r3, #8
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800ae1e:	f107 0308 	add.w	r3, r7, #8
 800ae22:	2206      	movs	r2, #6
 800ae24:	4619      	mov	r1, r3
 800ae26:	2094      	movs	r0, #148	@ 0x94
 800ae28:	f000 fd92 	bl	800b950 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800ae2c:	4b03      	ldr	r3, [pc, #12]	@ (800ae3c <SUBGRF_SetRxDutyCycle+0x54>)
 800ae2e:	2206      	movs	r2, #6
 800ae30:	701a      	strb	r2, [r3, #0]
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20005c1c 	.word	0x20005c1c

0800ae40 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800ae44:	2200      	movs	r2, #0
 800ae46:	2100      	movs	r1, #0
 800ae48:	20c5      	movs	r0, #197	@ 0xc5
 800ae4a:	f000 fd81 	bl	800b950 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800ae4e:	4b02      	ldr	r3, [pc, #8]	@ (800ae58 <SUBGRF_SetCad+0x18>)
 800ae50:	2207      	movs	r2, #7
 800ae52:	701a      	strb	r2, [r3, #0]
}
 800ae54:	bf00      	nop
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20005c1c 	.word	0x20005c1c

0800ae5c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800ae60:	2200      	movs	r2, #0
 800ae62:	2100      	movs	r1, #0
 800ae64:	20d1      	movs	r0, #209	@ 0xd1
 800ae66:	f000 fd73 	bl	800b950 <SUBGRF_WriteCommand>
}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800ae72:	2200      	movs	r2, #0
 800ae74:	2100      	movs	r1, #0
 800ae76:	20d2      	movs	r0, #210	@ 0xd2
 800ae78:	f000 fd6a 	bl	800b950 <SUBGRF_WriteCommand>
}
 800ae7c:	bf00      	nop
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ae8a:	1dfb      	adds	r3, r7, #7
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	4619      	mov	r1, r3
 800ae90:	209f      	movs	r0, #159	@ 0x9f
 800ae92:	f000 fd5d 	bl	800b950 <SUBGRF_WriteCommand>
}
 800ae96:	bf00      	nop
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	4603      	mov	r3, r0
 800aea6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800aea8:	1dfb      	adds	r3, r7, #7
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4619      	mov	r1, r3
 800aeae:	20a0      	movs	r0, #160	@ 0xa0
 800aeb0:	f000 fd4e 	bl	800b950 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	2b3f      	cmp	r3, #63	@ 0x3f
 800aeb8:	d91c      	bls.n	800aef4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800aec8:	e005      	b.n	800aed6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	089b      	lsrs	r3, r3, #2
 800aece:	73fb      	strb	r3, [r7, #15]
            exp++;
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	3301      	adds	r3, #1
 800aed4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	2b1f      	cmp	r3, #31
 800aeda:	d8f6      	bhi.n	800aeca <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	4413      	add	r3, r2
 800aee6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800aee8:	7b7b      	ldrb	r3, [r7, #13]
 800aeea:	4619      	mov	r1, r3
 800aeec:	f240 7006 	movw	r0, #1798	@ 0x706
 800aef0:	f000 fc7e 	bl	800b7f0 <SUBGRF_WriteRegister>
    }
}
 800aef4:	bf00      	nop
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800af02:	f001 f84d 	bl	800bfa0 <RBI_IsDCDC>
 800af06:	4603      	mov	r3, r0
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d102      	bne.n	800af12 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800af0c:	2301      	movs	r3, #1
 800af0e:	71fb      	strb	r3, [r7, #7]
 800af10:	e001      	b.n	800af16 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800af12:	2300      	movs	r3, #0
 800af14:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800af16:	1dfb      	adds	r3, r7, #7
 800af18:	2201      	movs	r2, #1
 800af1a:	4619      	mov	r1, r3
 800af1c:	2096      	movs	r0, #150	@ 0x96
 800af1e:	f000 fd17 	bl	800b950 <SUBGRF_WriteCommand>
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800af32:	793b      	ldrb	r3, [r7, #4]
 800af34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	019b      	lsls	r3, r3, #6
 800af3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800af3e:	793b      	ldrb	r3, [r7, #4]
 800af40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800af44:	b2db      	uxtb	r3, r3
 800af46:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800af48:	b25b      	sxtb	r3, r3
 800af4a:	4313      	orrs	r3, r2
 800af4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800af4e:	793b      	ldrb	r3, [r7, #4]
 800af50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800af54:	b2db      	uxtb	r3, r3
 800af56:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800af58:	b25b      	sxtb	r3, r3
 800af5a:	4313      	orrs	r3, r2
 800af5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800af5e:	793b      	ldrb	r3, [r7, #4]
 800af60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800af64:	b2db      	uxtb	r3, r3
 800af66:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	4313      	orrs	r3, r2
 800af6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800af6e:	793b      	ldrb	r3, [r7, #4]
 800af70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800af74:	b2db      	uxtb	r3, r3
 800af76:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800af78:	b25b      	sxtb	r3, r3
 800af7a:	4313      	orrs	r3, r2
 800af7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800af7e:	793b      	ldrb	r3, [r7, #4]
 800af80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800af84:	b2db      	uxtb	r3, r3
 800af86:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800af88:	b25b      	sxtb	r3, r3
 800af8a:	4313      	orrs	r3, r2
 800af8c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800af8e:	793b      	ldrb	r3, [r7, #4]
 800af90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800af98:	4313      	orrs	r3, r2
 800af9a:	b25b      	sxtb	r3, r3
 800af9c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800af9e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800afa0:	f107 030f 	add.w	r3, r7, #15
 800afa4:	2201      	movs	r2, #1
 800afa6:	4619      	mov	r1, r3
 800afa8:	2089      	movs	r0, #137	@ 0x89
 800afaa:	f000 fcd1 	bl	800b950 <SUBGRF_WriteCommand>
}
 800afae:	bf00      	nop
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
	...

0800afb8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a1d      	ldr	r2, [pc, #116]	@ (800b038 <SUBGRF_CalibrateImage+0x80>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d904      	bls.n	800afd2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800afc8:	23e1      	movs	r3, #225	@ 0xe1
 800afca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800afcc:	23e9      	movs	r3, #233	@ 0xe9
 800afce:	737b      	strb	r3, [r7, #13]
 800afd0:	e027      	b.n	800b022 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a19      	ldr	r2, [pc, #100]	@ (800b03c <SUBGRF_CalibrateImage+0x84>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d904      	bls.n	800afe4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800afda:	23d7      	movs	r3, #215	@ 0xd7
 800afdc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800afde:	23db      	movs	r3, #219	@ 0xdb
 800afe0:	737b      	strb	r3, [r7, #13]
 800afe2:	e01e      	b.n	800b022 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a16      	ldr	r2, [pc, #88]	@ (800b040 <SUBGRF_CalibrateImage+0x88>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d904      	bls.n	800aff6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800afec:	23c1      	movs	r3, #193	@ 0xc1
 800afee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800aff0:	23c5      	movs	r3, #197	@ 0xc5
 800aff2:	737b      	strb	r3, [r7, #13]
 800aff4:	e015      	b.n	800b022 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a12      	ldr	r2, [pc, #72]	@ (800b044 <SUBGRF_CalibrateImage+0x8c>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d904      	bls.n	800b008 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800affe:	2375      	movs	r3, #117	@ 0x75
 800b000:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b002:	2381      	movs	r3, #129	@ 0x81
 800b004:	737b      	strb	r3, [r7, #13]
 800b006:	e00c      	b.n	800b022 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a0f      	ldr	r2, [pc, #60]	@ (800b048 <SUBGRF_CalibrateImage+0x90>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d904      	bls.n	800b01a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800b010:	236b      	movs	r3, #107	@ 0x6b
 800b012:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b014:	236f      	movs	r3, #111	@ 0x6f
 800b016:	737b      	strb	r3, [r7, #13]
 800b018:	e003      	b.n	800b022 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800b01a:	2329      	movs	r3, #41	@ 0x29
 800b01c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800b01e:	232b      	movs	r3, #43	@ 0x2b
 800b020:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b022:	f107 030c 	add.w	r3, r7, #12
 800b026:	2202      	movs	r2, #2
 800b028:	4619      	mov	r1, r3
 800b02a:	2098      	movs	r0, #152	@ 0x98
 800b02c:	f000 fc90 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	35a4e900 	.word	0x35a4e900
 800b03c:	32a9f880 	.word	0x32a9f880
 800b040:	2de54480 	.word	0x2de54480
 800b044:	1b6b0b00 	.word	0x1b6b0b00
 800b048:	1954fc40 	.word	0x1954fc40

0800b04c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b04c:	b590      	push	{r4, r7, lr}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	4611      	mov	r1, r2
 800b058:	461a      	mov	r2, r3
 800b05a:	4623      	mov	r3, r4
 800b05c:	71fb      	strb	r3, [r7, #7]
 800b05e:	4603      	mov	r3, r0
 800b060:	71bb      	strb	r3, [r7, #6]
 800b062:	460b      	mov	r3, r1
 800b064:	717b      	strb	r3, [r7, #5]
 800b066:	4613      	mov	r3, r2
 800b068:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b06e:	79bb      	ldrb	r3, [r7, #6]
 800b070:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b072:	797b      	ldrb	r3, [r7, #5]
 800b074:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b076:	793b      	ldrb	r3, [r7, #4]
 800b078:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b07a:	f107 030c 	add.w	r3, r7, #12
 800b07e:	2204      	movs	r2, #4
 800b080:	4619      	mov	r1, r3
 800b082:	2095      	movs	r0, #149	@ 0x95
 800b084:	f000 fc64 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b088:	bf00      	nop
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd90      	pop	{r4, r7, pc}

0800b090 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b090:	b590      	push	{r4, r7, lr}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	461a      	mov	r2, r3
 800b09e:	4623      	mov	r3, r4
 800b0a0:	80fb      	strh	r3, [r7, #6]
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	80bb      	strh	r3, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	807b      	strh	r3, [r7, #2]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b0ae:	88fb      	ldrh	r3, [r7, #6]
 800b0b0:	0a1b      	lsrs	r3, r3, #8
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b0b8:	88fb      	ldrh	r3, [r7, #6]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b0be:	88bb      	ldrh	r3, [r7, #4]
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b0c8:	88bb      	ldrh	r3, [r7, #4]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b0ce:	887b      	ldrh	r3, [r7, #2]
 800b0d0:	0a1b      	lsrs	r3, r3, #8
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b0d8:	887b      	ldrh	r3, [r7, #2]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b0de:	883b      	ldrh	r3, [r7, #0]
 800b0e0:	0a1b      	lsrs	r3, r3, #8
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b0e8:	883b      	ldrh	r3, [r7, #0]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	2208      	movs	r2, #8
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	2008      	movs	r0, #8
 800b0f8:	f000 fc2a 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b0fc:	bf00      	nop
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	bd90      	pop	{r4, r7, pc}

0800b104 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	6039      	str	r1, [r7, #0]
 800b10e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b110:	79fb      	ldrb	r3, [r7, #7]
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	b2db      	uxtb	r3, r3
 800b118:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	0c1b      	lsrs	r3, r3, #16
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	0a1b      	lsrs	r3, r3, #8
 800b126:	b2db      	uxtb	r3, r3
 800b128:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b130:	f107 030c 	add.w	r3, r7, #12
 800b134:	2204      	movs	r2, #4
 800b136:	4619      	mov	r1, r3
 800b138:	2097      	movs	r0, #151	@ 0x97
 800b13a:	f000 fc09 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
	...

0800b148 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b156:	4b1d      	ldr	r3, [pc, #116]	@ (800b1cc <SUBGRF_SetRfFrequency+0x84>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	f083 0301 	eor.w	r3, r3, #1
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff ff27 	bl	800afb8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b16a:	4b18      	ldr	r3, [pc, #96]	@ (800b1cc <SUBGRF_SetRfFrequency+0x84>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	461c      	mov	r4, r3
 800b176:	4615      	mov	r5, r2
 800b178:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b17c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b180:	4a13      	ldr	r2, [pc, #76]	@ (800b1d0 <SUBGRF_SetRfFrequency+0x88>)
 800b182:	f04f 0300 	mov.w	r3, #0
 800b186:	4640      	mov	r0, r8
 800b188:	4649      	mov	r1, r9
 800b18a:	f7f5 f801 	bl	8000190 <__aeabi_uldivmod>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	4613      	mov	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	0e1b      	lsrs	r3, r3, #24
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	0c1b      	lsrs	r3, r3, #16
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	0a1b      	lsrs	r3, r3, #8
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b1b4:	f107 0308 	add.w	r3, r7, #8
 800b1b8:	2204      	movs	r2, #4
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	2086      	movs	r0, #134	@ 0x86
 800b1be:	f000 fbc7 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b1c2:	bf00      	nop
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b1cc:	20005c24 	.word	0x20005c24
 800b1d0:	01e84800 	.word	0x01e84800

0800b1d4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b1de:	79fa      	ldrb	r2, [r7, #7]
 800b1e0:	4b09      	ldr	r3, [pc, #36]	@ (800b208 <SUBGRF_SetPacketType+0x34>)
 800b1e2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d104      	bne.n	800b1f4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800b1f0:	f000 fafe 	bl	800b7f0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b1f4:	1dfb      	adds	r3, r7, #7
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	208a      	movs	r0, #138	@ 0x8a
 800b1fc:	f000 fba8 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20005c1d 	.word	0x20005c1d

0800b20c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0
    return PacketType;
 800b210:	4b02      	ldr	r3, [pc, #8]	@ (800b21c <SUBGRF_GetPacketType+0x10>)
 800b212:	781b      	ldrb	r3, [r3, #0]
}
 800b214:	4618      	mov	r0, r3
 800b216:	46bd      	mov	sp, r7
 800b218:	bc80      	pop	{r7}
 800b21a:	4770      	bx	lr
 800b21c:	20005c1d 	.word	0x20005c1d

0800b220 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	71fb      	strb	r3, [r7, #7]
 800b22a:	460b      	mov	r3, r1
 800b22c:	71bb      	strb	r3, [r7, #6]
 800b22e:	4613      	mov	r3, r2
 800b230:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d149      	bne.n	800b2cc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800b238:	2000      	movs	r0, #0
 800b23a:	f000 febc 	bl	800bfb6 <RBI_GetRFOMaxPowerConfig>
 800b23e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800b240:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	429a      	cmp	r2, r3
 800b248:	da01      	bge.n	800b24e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b0e      	cmp	r3, #14
 800b252:	d10e      	bne.n	800b272 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800b254:	2301      	movs	r3, #1
 800b256:	2201      	movs	r2, #1
 800b258:	2100      	movs	r1, #0
 800b25a:	2004      	movs	r0, #4
 800b25c:	f7ff fef6 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b260:	79ba      	ldrb	r2, [r7, #6]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	b2db      	uxtb	r3, r3
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	330e      	adds	r3, #14
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	71bb      	strb	r3, [r7, #6]
 800b270:	e01f      	b.n	800b2b2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b0a      	cmp	r3, #10
 800b276:	d10e      	bne.n	800b296 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800b278:	2301      	movs	r3, #1
 800b27a:	2201      	movs	r2, #1
 800b27c:	2100      	movs	r1, #0
 800b27e:	2001      	movs	r0, #1
 800b280:	f7ff fee4 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800b284:	79ba      	ldrb	r2, [r7, #6]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	330d      	adds	r3, #13
 800b290:	b2db      	uxtb	r3, r3
 800b292:	71bb      	strb	r3, [r7, #6]
 800b294:	e00d      	b.n	800b2b2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800b296:	2301      	movs	r3, #1
 800b298:	2201      	movs	r2, #1
 800b29a:	2100      	movs	r1, #0
 800b29c:	2007      	movs	r0, #7
 800b29e:	f7ff fed5 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b2a2:	79ba      	ldrb	r2, [r7, #6]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	330e      	adds	r3, #14
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800b2b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b2b6:	f113 0f11 	cmn.w	r3, #17
 800b2ba:	da01      	bge.n	800b2c0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800b2bc:	23ef      	movs	r3, #239	@ 0xef
 800b2be:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800b2c0:	2118      	movs	r1, #24
 800b2c2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b2c6:	f000 fa93 	bl	800b7f0 <SUBGRF_WriteRegister>
 800b2ca:	e067      	b.n	800b39c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800b2cc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b2d0:	f000 faa2 	bl	800b818 <SUBGRF_ReadRegister>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f043 031e 	orr.w	r3, r3, #30
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	4619      	mov	r1, r3
 800b2de:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b2e2:	f000 fa85 	bl	800b7f0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	f000 fe65 	bl	800bfb6 <RBI_GetRFOMaxPowerConfig>
 800b2ec:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800b2ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	da01      	bge.n	800b2fc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b14      	cmp	r3, #20
 800b300:	d10e      	bne.n	800b320 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800b302:	2301      	movs	r3, #1
 800b304:	2200      	movs	r2, #0
 800b306:	2105      	movs	r1, #5
 800b308:	2003      	movs	r0, #3
 800b30a:	f7ff fe9f 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b30e:	79ba      	ldrb	r2, [r7, #6]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	b2db      	uxtb	r3, r3
 800b318:	3316      	adds	r3, #22
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	71bb      	strb	r3, [r7, #6]
 800b31e:	e031      	b.n	800b384 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b11      	cmp	r3, #17
 800b324:	d10e      	bne.n	800b344 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800b326:	2301      	movs	r3, #1
 800b328:	2200      	movs	r2, #0
 800b32a:	2103      	movs	r1, #3
 800b32c:	2002      	movs	r0, #2
 800b32e:	f7ff fe8d 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b332:	79ba      	ldrb	r2, [r7, #6]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	3316      	adds	r3, #22
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	71bb      	strb	r3, [r7, #6]
 800b342:	e01f      	b.n	800b384 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b0e      	cmp	r3, #14
 800b348:	d10e      	bne.n	800b368 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800b34a:	2301      	movs	r3, #1
 800b34c:	2200      	movs	r2, #0
 800b34e:	2102      	movs	r1, #2
 800b350:	2002      	movs	r0, #2
 800b352:	f7ff fe7b 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b356:	79ba      	ldrb	r2, [r7, #6]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	330e      	adds	r3, #14
 800b362:	b2db      	uxtb	r3, r3
 800b364:	71bb      	strb	r3, [r7, #6]
 800b366:	e00d      	b.n	800b384 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800b368:	2301      	movs	r3, #1
 800b36a:	2200      	movs	r2, #0
 800b36c:	2107      	movs	r1, #7
 800b36e:	2004      	movs	r0, #4
 800b370:	f7ff fe6c 	bl	800b04c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b374:	79ba      	ldrb	r2, [r7, #6]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	3316      	adds	r3, #22
 800b380:	b2db      	uxtb	r3, r3
 800b382:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800b384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b388:	f113 0f09 	cmn.w	r3, #9
 800b38c:	da01      	bge.n	800b392 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800b38e:	23f7      	movs	r3, #247	@ 0xf7
 800b390:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800b392:	2138      	movs	r1, #56	@ 0x38
 800b394:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b398:	f000 fa2a 	bl	800b7f0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800b39c:	79bb      	ldrb	r3, [r7, #6]
 800b39e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800b3a0:	797b      	ldrb	r3, [r7, #5]
 800b3a2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800b3a4:	f107 0308 	add.w	r3, r7, #8
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	208e      	movs	r0, #142	@ 0x8e
 800b3ae:	f000 facf 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b3b2:	bf00      	nop
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800b3bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3c0:	b086      	sub	sp, #24
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b3ca:	4a61      	ldr	r2, [pc, #388]	@ (800b550 <SUBGRF_SetModulationParams+0x194>)
 800b3cc:	f107 0308 	add.w	r3, r7, #8
 800b3d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3d4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	781a      	ldrb	r2, [r3, #0]
 800b3dc:	4b5d      	ldr	r3, [pc, #372]	@ (800b554 <SUBGRF_SetModulationParams+0x198>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d004      	beq.n	800b3ee <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff fef3 	bl	800b1d4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b03      	cmp	r3, #3
 800b3f4:	f200 80a5 	bhi.w	800b542 <SUBGRF_SetModulationParams+0x186>
 800b3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b400 <SUBGRF_SetModulationParams+0x44>)
 800b3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fe:	bf00      	nop
 800b400:	0800b411 	.word	0x0800b411
 800b404:	0800b4d1 	.word	0x0800b4d1
 800b408:	0800b493 	.word	0x0800b493
 800b40c:	0800b4ff 	.word	0x0800b4ff
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800b410:	2308      	movs	r3, #8
 800b412:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	4a4f      	ldr	r2, [pc, #316]	@ (800b558 <SUBGRF_SetModulationParams+0x19c>)
 800b41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	0c1b      	lsrs	r3, r3, #16
 800b424:	b2db      	uxtb	r3, r3
 800b426:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	7b1b      	ldrb	r3, [r3, #12]
 800b43a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7b5b      	ldrb	r3, [r3, #13]
 800b440:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	2200      	movs	r2, #0
 800b448:	461c      	mov	r4, r3
 800b44a:	4615      	mov	r5, r2
 800b44c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b450:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b454:	4a41      	ldr	r2, [pc, #260]	@ (800b55c <SUBGRF_SetModulationParams+0x1a0>)
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	f7f4 fe97 	bl	8000190 <__aeabi_uldivmod>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4613      	mov	r3, r2
 800b468:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	0c1b      	lsrs	r3, r3, #16
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	b2db      	uxtb	r3, r3
 800b478:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b480:	7cfb      	ldrb	r3, [r7, #19]
 800b482:	b29a      	uxth	r2, r3
 800b484:	f107 0308 	add.w	r3, r7, #8
 800b488:	4619      	mov	r1, r3
 800b48a:	208b      	movs	r0, #139	@ 0x8b
 800b48c:	f000 fa60 	bl	800b950 <SUBGRF_WriteCommand>
        break;
 800b490:	e058      	b.n	800b544 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800b492:	2304      	movs	r3, #4
 800b494:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	4a2f      	ldr	r2, [pc, #188]	@ (800b558 <SUBGRF_SetModulationParams+0x19c>)
 800b49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	0c1b      	lsrs	r3, r3, #16
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	0a1b      	lsrs	r3, r3, #8
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7d1b      	ldrb	r3, [r3, #20]
 800b4bc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b4be:	7cfb      	ldrb	r3, [r7, #19]
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	f107 0308 	add.w	r3, r7, #8
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	208b      	movs	r0, #139	@ 0x8b
 800b4ca:	f000 fa41 	bl	800b950 <SUBGRF_WriteCommand>
        break;
 800b4ce:	e039      	b.n	800b544 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7e1b      	ldrb	r3, [r3, #24]
 800b4d8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7e5b      	ldrb	r3, [r3, #25]
 800b4de:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	7e9b      	ldrb	r3, [r3, #26]
 800b4e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	7edb      	ldrb	r3, [r3, #27]
 800b4ea:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b4ec:	7cfb      	ldrb	r3, [r7, #19]
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	f107 0308 	add.w	r3, r7, #8
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	208b      	movs	r0, #139	@ 0x8b
 800b4f8:	f000 fa2a 	bl	800b950 <SUBGRF_WriteCommand>

        break;
 800b4fc:	e022      	b.n	800b544 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800b4fe:	2305      	movs	r3, #5
 800b500:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4a14      	ldr	r2, [pc, #80]	@ (800b558 <SUBGRF_SetModulationParams+0x19c>)
 800b508:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	b2db      	uxtb	r3, r3
 800b514:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	0a1b      	lsrs	r3, r3, #8
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7b1b      	ldrb	r3, [r3, #12]
 800b528:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	7b5b      	ldrb	r3, [r3, #13]
 800b52e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b530:	7cfb      	ldrb	r3, [r7, #19]
 800b532:	b29a      	uxth	r2, r3
 800b534:	f107 0308 	add.w	r3, r7, #8
 800b538:	4619      	mov	r1, r3
 800b53a:	208b      	movs	r0, #139	@ 0x8b
 800b53c:	f000 fa08 	bl	800b950 <SUBGRF_WriteCommand>
        break;
 800b540:	e000      	b.n	800b544 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800b542:	bf00      	nop
    }
}
 800b544:	bf00      	nop
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b54e:	bf00      	nop
 800b550:	0800c948 	.word	0x0800c948
 800b554:	20005c1d 	.word	0x20005c1d
 800b558:	3d090000 	.word	0x3d090000
 800b55c:	01e84800 	.word	0x01e84800

0800b560 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b56c:	4a48      	ldr	r2, [pc, #288]	@ (800b690 <SUBGRF_SetPacketParams+0x130>)
 800b56e:	f107 030c 	add.w	r3, r7, #12
 800b572:	ca07      	ldmia	r2, {r0, r1, r2}
 800b574:	c303      	stmia	r3!, {r0, r1}
 800b576:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	781a      	ldrb	r2, [r3, #0]
 800b57c:	4b45      	ldr	r3, [pc, #276]	@ (800b694 <SUBGRF_SetPacketParams+0x134>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d004      	beq.n	800b58e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fe23 	bl	800b1d4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b03      	cmp	r3, #3
 800b594:	d878      	bhi.n	800b688 <SUBGRF_SetPacketParams+0x128>
 800b596:	a201      	add	r2, pc, #4	@ (adr r2, 800b59c <SUBGRF_SetPacketParams+0x3c>)
 800b598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59c:	0800b5ad 	.word	0x0800b5ad
 800b5a0:	0800b63d 	.word	0x0800b63d
 800b5a4:	0800b631 	.word	0x0800b631
 800b5a8:	0800b5ad 	.word	0x0800b5ad
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7a5b      	ldrb	r3, [r3, #9]
 800b5b0:	2bf1      	cmp	r3, #241	@ 0xf1
 800b5b2:	d10a      	bne.n	800b5ca <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b5b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b5b8:	f7ff faaa 	bl	800ab10 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b5bc:	f248 0005 	movw	r0, #32773	@ 0x8005
 800b5c0:	f7ff fac6 	bl	800ab50 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	75bb      	strb	r3, [r7, #22]
 800b5c8:	e011      	b.n	800b5ee <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	7a5b      	ldrb	r3, [r3, #9]
 800b5ce:	2bf2      	cmp	r3, #242	@ 0xf2
 800b5d0:	d10a      	bne.n	800b5e8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b5d2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800b5d6:	f7ff fa9b 	bl	800ab10 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b5da:	f241 0021 	movw	r0, #4129	@ 0x1021
 800b5de:	f7ff fab7 	bl	800ab50 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b5e2:	2306      	movs	r3, #6
 800b5e4:	75bb      	strb	r3, [r7, #22]
 800b5e6:	e002      	b.n	800b5ee <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	7a5b      	ldrb	r3, [r3, #9]
 800b5ec:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b5ee:	2309      	movs	r3, #9
 800b5f0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	885b      	ldrh	r3, [r3, #2]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	791b      	ldrb	r3, [r3, #4]
 800b60a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	795b      	ldrb	r3, [r3, #5]
 800b610:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	799b      	ldrb	r3, [r3, #6]
 800b616:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	79db      	ldrb	r3, [r3, #7]
 800b61c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7a1b      	ldrb	r3, [r3, #8]
 800b622:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b624:	7dbb      	ldrb	r3, [r7, #22]
 800b626:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7a9b      	ldrb	r3, [r3, #10]
 800b62c:	753b      	strb	r3, [r7, #20]
        break;
 800b62e:	e022      	b.n	800b676 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b630:	2301      	movs	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	7b1b      	ldrb	r3, [r3, #12]
 800b638:	733b      	strb	r3, [r7, #12]
        break;
 800b63a:	e01c      	b.n	800b676 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b63c:	2306      	movs	r3, #6
 800b63e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	89db      	ldrh	r3, [r3, #14]
 800b644:	0a1b      	lsrs	r3, r3, #8
 800b646:	b29b      	uxth	r3, r3
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	89db      	ldrh	r3, [r3, #14]
 800b650:	b2db      	uxtb	r3, r3
 800b652:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	7c1a      	ldrb	r2, [r3, #16]
 800b658:	4b0f      	ldr	r3, [pc, #60]	@ (800b698 <SUBGRF_SetPacketParams+0x138>)
 800b65a:	4611      	mov	r1, r2
 800b65c:	7019      	strb	r1, [r3, #0]
 800b65e:	4613      	mov	r3, r2
 800b660:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7c5b      	ldrb	r3, [r3, #17]
 800b666:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7c9b      	ldrb	r3, [r3, #18]
 800b66c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7cdb      	ldrb	r3, [r3, #19]
 800b672:	747b      	strb	r3, [r7, #17]
        break;
 800b674:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	b29a      	uxth	r2, r3
 800b67a:	f107 030c 	add.w	r3, r7, #12
 800b67e:	4619      	mov	r1, r3
 800b680:	208c      	movs	r0, #140	@ 0x8c
 800b682:	f000 f965 	bl	800b950 <SUBGRF_WriteCommand>
 800b686:	e000      	b.n	800b68a <SUBGRF_SetPacketParams+0x12a>
        return;
 800b688:	bf00      	nop
}
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	0800c950 	.word	0x0800c950
 800b694:	20005c1d 	.word	0x20005c1d
 800b698:	20005c1e 	.word	0x20005c1e

0800b69c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	460a      	mov	r2, r1
 800b6a6:	71fb      	strb	r3, [r7, #7]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b6b0:	79bb      	ldrb	r3, [r7, #6]
 800b6b2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b6b4:	f107 030c 	add.w	r3, r7, #12
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	208f      	movs	r0, #143	@ 0x8f
 800b6be:	f000 f947 	bl	800b950 <SUBGRF_WriteCommand>
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b6d4:	1d3b      	adds	r3, r7, #4
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4619      	mov	r1, r3
 800b6da:	2015      	movs	r0, #21
 800b6dc:	f000 f95a 	bl	800b994 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b6e0:	793b      	ldrb	r3, [r7, #4]
 800b6e2:	425b      	negs	r3, r3
 800b6e4:	105b      	asrs	r3, r3, #1
 800b6e6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b6e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b6fe:	f107 030c 	add.w	r3, r7, #12
 800b702:	2202      	movs	r2, #2
 800b704:	4619      	mov	r1, r3
 800b706:	2013      	movs	r0, #19
 800b708:	f000 f944 	bl	800b994 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b70c:	f7ff fd7e 	bl	800b20c <SUBGRF_GetPacketType>
 800b710:	4603      	mov	r3, r0
 800b712:	2b01      	cmp	r3, #1
 800b714:	d10d      	bne.n	800b732 <SUBGRF_GetRxBufferStatus+0x3e>
 800b716:	4b0c      	ldr	r3, [pc, #48]	@ (800b748 <SUBGRF_GetRxBufferStatus+0x54>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d108      	bne.n	800b732 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b720:	f240 7002 	movw	r0, #1794	@ 0x702
 800b724:	f000 f878 	bl	800b818 <SUBGRF_ReadRegister>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	701a      	strb	r2, [r3, #0]
 800b730:	e002      	b.n	800b738 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b732:	7b3a      	ldrb	r2, [r7, #12]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b738:	7b7a      	ldrb	r2, [r7, #13]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	701a      	strb	r2, [r3, #0]
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20005c1e 	.word	0x20005c1e

0800b74c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b754:	f107 030c 	add.w	r3, r7, #12
 800b758:	2203      	movs	r2, #3
 800b75a:	4619      	mov	r1, r3
 800b75c:	2014      	movs	r0, #20
 800b75e:	f000 f919 	bl	800b994 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b762:	f7ff fd53 	bl	800b20c <SUBGRF_GetPacketType>
 800b766:	4603      	mov	r3, r0
 800b768:	461a      	mov	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d002      	beq.n	800b77c <SUBGRF_GetPacketStatus+0x30>
 800b776:	2b01      	cmp	r3, #1
 800b778:	d013      	beq.n	800b7a2 <SUBGRF_GetPacketStatus+0x56>
 800b77a:	e02a      	b.n	800b7d2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b77c:	7b3a      	ldrb	r2, [r7, #12]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b782:	7b7b      	ldrb	r3, [r7, #13]
 800b784:	425b      	negs	r3, r3
 800b786:	105b      	asrs	r3, r3, #1
 800b788:	b25a      	sxtb	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	425b      	negs	r3, r3
 800b792:	105b      	asrs	r3, r3, #1
 800b794:	b25a      	sxtb	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	609a      	str	r2, [r3, #8]
            break;
 800b7a0:	e020      	b.n	800b7e4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b7a2:	7b3b      	ldrb	r3, [r7, #12]
 800b7a4:	425b      	negs	r3, r3
 800b7a6:	105b      	asrs	r3, r3, #1
 800b7a8:	b25a      	sxtb	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b7ae:	7b7b      	ldrb	r3, [r7, #13]
 800b7b0:	b25b      	sxtb	r3, r3
 800b7b2:	3302      	adds	r3, #2
 800b7b4:	109b      	asrs	r3, r3, #2
 800b7b6:	b25a      	sxtb	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	425b      	negs	r3, r3
 800b7c0:	105b      	asrs	r3, r3, #1
 800b7c2:	b25a      	sxtb	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b7c8:	4b08      	ldr	r3, [pc, #32]	@ (800b7ec <SUBGRF_GetPacketStatus+0xa0>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	611a      	str	r2, [r3, #16]
            break;
 800b7d0:	e008      	b.n	800b7e4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b7d2:	2214      	movs	r2, #20
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fc21 	bl	800c01e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	220f      	movs	r2, #15
 800b7e0:	701a      	strb	r2, [r3, #0]
            break;
 800b7e2:	bf00      	nop
    }
}
 800b7e4:	bf00      	nop
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20005c20 	.word	0x20005c20

0800b7f0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	460a      	mov	r2, r1
 800b7fa:	80fb      	strh	r3, [r7, #6]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b800:	1d7a      	adds	r2, r7, #5
 800b802:	88f9      	ldrh	r1, [r7, #6]
 800b804:	2301      	movs	r3, #1
 800b806:	4803      	ldr	r0, [pc, #12]	@ (800b814 <SUBGRF_WriteRegister+0x24>)
 800b808:	f7f7 fd14 	bl	8003234 <HAL_SUBGHZ_WriteRegisters>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20000c0c 	.word	0x20000c0c

0800b818 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b822:	f107 020f 	add.w	r2, r7, #15
 800b826:	88f9      	ldrh	r1, [r7, #6]
 800b828:	2301      	movs	r3, #1
 800b82a:	4804      	ldr	r0, [pc, #16]	@ (800b83c <SUBGRF_ReadRegister+0x24>)
 800b82c:	f7f7 fd61 	bl	80032f2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b830:	7bfb      	ldrb	r3, [r7, #15]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000c0c 	.word	0x20000c0c

0800b840 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	6039      	str	r1, [r7, #0]
 800b84a:	80fb      	strh	r3, [r7, #6]
 800b84c:	4613      	mov	r3, r2
 800b84e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b850:	f3ef 8310 	mrs	r3, PRIMASK
 800b854:	60fb      	str	r3, [r7, #12]
  return(result);
 800b856:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b85a:	b672      	cpsid	i
}
 800b85c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b85e:	88bb      	ldrh	r3, [r7, #4]
 800b860:	88f9      	ldrh	r1, [r7, #6]
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	4806      	ldr	r0, [pc, #24]	@ (800b880 <SUBGRF_WriteRegisters+0x40>)
 800b866:	f7f7 fce5 	bl	8003234 <HAL_SUBGHZ_WriteRegisters>
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f383 8810 	msr	PRIMASK, r3
}
 800b874:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b876:	bf00      	nop
 800b878:	3718      	adds	r7, #24
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	20000c0c 	.word	0x20000c0c

0800b884 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	80fb      	strh	r3, [r7, #6]
 800b890:	4613      	mov	r3, r2
 800b892:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b894:	f3ef 8310 	mrs	r3, PRIMASK
 800b898:	60fb      	str	r3, [r7, #12]
  return(result);
 800b89a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b89c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b89e:	b672      	cpsid	i
}
 800b8a0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800b8a2:	88bb      	ldrh	r3, [r7, #4]
 800b8a4:	88f9      	ldrh	r1, [r7, #6]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	4806      	ldr	r0, [pc, #24]	@ (800b8c4 <SUBGRF_ReadRegisters+0x40>)
 800b8aa:	f7f7 fd22 	bl	80032f2 <HAL_SUBGHZ_ReadRegisters>
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f383 8810 	msr	PRIMASK, r3
}
 800b8b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b8ba:	bf00      	nop
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000c0c 	.word	0x20000c0c

0800b8c8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6039      	str	r1, [r7, #0]
 800b8d2:	71fb      	strb	r3, [r7, #7]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b8dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b8e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8e2:	b672      	cpsid	i
}
 800b8e4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b8e6:	79bb      	ldrb	r3, [r7, #6]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	79f9      	ldrb	r1, [r7, #7]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	4806      	ldr	r0, [pc, #24]	@ (800b908 <SUBGRF_WriteBuffer+0x40>)
 800b8f0:	f7f7 fe13 	bl	800351a <HAL_SUBGHZ_WriteBuffer>
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f383 8810 	msr	PRIMASK, r3
}
 800b8fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b900:	bf00      	nop
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	20000c0c 	.word	0x20000c0c

0800b90c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	6039      	str	r1, [r7, #0]
 800b916:	71fb      	strb	r3, [r7, #7]
 800b918:	4613      	mov	r3, r2
 800b91a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b91c:	f3ef 8310 	mrs	r3, PRIMASK
 800b920:	60fb      	str	r3, [r7, #12]
  return(result);
 800b922:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b926:	b672      	cpsid	i
}
 800b928:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b92a:	79bb      	ldrb	r3, [r7, #6]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	79f9      	ldrb	r1, [r7, #7]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	4806      	ldr	r0, [pc, #24]	@ (800b94c <SUBGRF_ReadBuffer+0x40>)
 800b934:	f7f7 fe44 	bl	80035c0 <HAL_SUBGHZ_ReadBuffer>
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f383 8810 	msr	PRIMASK, r3
}
 800b942:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b944:	bf00      	nop
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20000c0c 	.word	0x20000c0c

0800b950 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	4603      	mov	r3, r0
 800b958:	6039      	str	r1, [r7, #0]
 800b95a:	71fb      	strb	r3, [r7, #7]
 800b95c:	4613      	mov	r3, r2
 800b95e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b960:	f3ef 8310 	mrs	r3, PRIMASK
 800b964:	60fb      	str	r3, [r7, #12]
  return(result);
 800b966:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b96a:	b672      	cpsid	i
}
 800b96c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b96e:	88bb      	ldrh	r3, [r7, #4]
 800b970:	79f9      	ldrb	r1, [r7, #7]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4806      	ldr	r0, [pc, #24]	@ (800b990 <SUBGRF_WriteCommand+0x40>)
 800b976:	f7f7 fd1d 	bl	80033b4 <HAL_SUBGHZ_ExecSetCmd>
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f383 8810 	msr	PRIMASK, r3
}
 800b984:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b986:	bf00      	nop
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20000c0c 	.word	0x20000c0c

0800b994 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	6039      	str	r1, [r7, #0]
 800b99e:	71fb      	strb	r3, [r7, #7]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b9ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9ae:	b672      	cpsid	i
}
 800b9b0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b9b2:	88bb      	ldrh	r3, [r7, #4]
 800b9b4:	79f9      	ldrb	r1, [r7, #7]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4806      	ldr	r0, [pc, #24]	@ (800b9d4 <SUBGRF_ReadCommand+0x40>)
 800b9ba:	f7f7 fd5a 	bl	8003472 <HAL_SUBGHZ_ExecGetCmd>
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f383 8810 	msr	PRIMASK, r3
}
 800b9c8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b9ca:	bf00      	nop
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000c0c 	.word	0x20000c0c

0800b9d8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	460a      	mov	r2, r1
 800b9e2:	71fb      	strb	r3, [r7, #7]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b9ec:	79bb      	ldrb	r3, [r7, #6]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d10d      	bne.n	800ba0e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d104      	bne.n	800ba02 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b9fc:	2004      	movs	r0, #4
 800b9fe:	f000 f8ef 	bl	800bbe0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d107      	bne.n	800ba18 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	73fb      	strb	r3, [r7, #15]
 800ba0c:	e004      	b.n	800ba18 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ba0e:	79bb      	ldrb	r3, [r7, #6]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ba14:	2301      	movs	r3, #1
 800ba16:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 fa7f 	bl	800bf1e <RBI_ConfigRFSwitch>
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ba32:	2301      	movs	r3, #1
 800ba34:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ba36:	f000 fa9d 	bl	800bf74 <RBI_GetTxConfig>
 800ba3a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d016      	beq.n	800ba70 <SUBGRF_SetRfTxPower+0x48>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	dc16      	bgt.n	800ba76 <SUBGRF_SetRfTxPower+0x4e>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <SUBGRF_SetRfTxPower+0x2e>
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d00a      	beq.n	800ba6a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ba54:	e00f      	b.n	800ba76 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ba56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba5a:	2b0f      	cmp	r3, #15
 800ba5c:	dd02      	ble.n	800ba64 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ba5e:	2302      	movs	r3, #2
 800ba60:	73fb      	strb	r3, [r7, #15]
            break;
 800ba62:	e009      	b.n	800ba78 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ba64:	2301      	movs	r3, #1
 800ba66:	73fb      	strb	r3, [r7, #15]
            break;
 800ba68:	e006      	b.n	800ba78 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	73fb      	strb	r3, [r7, #15]
            break;
 800ba6e:	e003      	b.n	800ba78 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ba70:	2302      	movs	r3, #2
 800ba72:	73fb      	strb	r3, [r7, #15]
            break;
 800ba74:	e000      	b.n	800ba78 <SUBGRF_SetRfTxPower+0x50>
            break;
 800ba76:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ba78:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	2202      	movs	r2, #2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff fbcd 	bl	800b220 <SUBGRF_SetTxParams>

    return paSelect;
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800ba90:	b480      	push	{r7}
 800ba92:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800ba94:	2301      	movs	r3, #1
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bc80      	pop	{r7}
 800ba9c:	4770      	bx	lr
	...

0800baa0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800baa8:	4b03      	ldr	r3, [pc, #12]	@ (800bab8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2001      	movs	r0, #1
 800baae:	4798      	blx	r3
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20005c28 	.word	0x20005c28

0800babc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800bac4:	4b03      	ldr	r3, [pc, #12]	@ (800bad4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2002      	movs	r0, #2
 800baca:	4798      	blx	r3
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	20005c28 	.word	0x20005c28

0800bad8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800bae0:	4b03      	ldr	r3, [pc, #12]	@ (800baf0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2040      	movs	r0, #64	@ 0x40
 800bae6:	4798      	blx	r3
}
 800bae8:	bf00      	nop
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20005c28 	.word	0x20005c28

0800baf4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <HAL_SUBGHZ_CADStatusCallback+0x18>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d005      	beq.n	800bb16 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800bb0a:	e00a      	b.n	800bb22 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800bb0c:	4b07      	ldr	r3, [pc, #28]	@ (800bb2c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2080      	movs	r0, #128	@ 0x80
 800bb12:	4798      	blx	r3
            break;
 800bb14:	e005      	b.n	800bb22 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800bb16:	4b05      	ldr	r3, [pc, #20]	@ (800bb2c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800bb1e:	4798      	blx	r3
            break;
 800bb20:	bf00      	nop
    }
}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20005c28 	.word	0x20005c28

0800bb30 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800bb38:	4b04      	ldr	r3, [pc, #16]	@ (800bb4c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bb40:	4798      	blx	r3
}
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20005c28 	.word	0x20005c28

0800bb50 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800bb58:	4b03      	ldr	r3, [pc, #12]	@ (800bb68 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2020      	movs	r0, #32
 800bb5e:	4798      	blx	r3
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20005c28 	.word	0x20005c28

0800bb6c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800bb74:	4b03      	ldr	r3, [pc, #12]	@ (800bb84 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2004      	movs	r0, #4
 800bb7a:	4798      	blx	r3
}
 800bb7c:	bf00      	nop
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20005c28 	.word	0x20005c28

0800bb88 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800bb90:	4b03      	ldr	r3, [pc, #12]	@ (800bba0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2008      	movs	r0, #8
 800bb96:	4798      	blx	r3
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20005c28 	.word	0x20005c28

0800bba4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800bbac:	4b03      	ldr	r3, [pc, #12]	@ (800bbbc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2010      	movs	r0, #16
 800bbb2:	4798      	blx	r3
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20005c28 	.word	0x20005c28

0800bbc0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800bbc8:	4b04      	ldr	r3, [pc, #16]	@ (800bbdc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bbd0:	4798      	blx	r3
}
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20005c28 	.word	0x20005c28

0800bbe0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800bbea:	f000 f9d9 	bl	800bfa0 <RBI_IsDCDC>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d112      	bne.n	800bc1a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800bbf4:	f640 1023 	movw	r0, #2339	@ 0x923
 800bbf8:	f7ff fe0e 	bl	800b818 <SUBGRF_ReadRegister>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	f023 0306 	bic.w	r3, r3, #6
 800bc06:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bc08:	7bfa      	ldrb	r2, [r7, #15]
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	4619      	mov	r1, r3
 800bc12:	f640 1023 	movw	r0, #2339	@ 0x923
 800bc16:	f7ff fdeb 	bl	800b7f0 <SUBGRF_WriteRegister>
  }
}
 800bc1a:	bf00      	nop
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
	...

0800bc24 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800bc32:	231f      	movs	r3, #31
 800bc34:	e017      	b.n	800bc66 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bc36:	2300      	movs	r3, #0
 800bc38:	73fb      	strb	r3, [r7, #15]
 800bc3a:	e00f      	b.n	800bc5c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	4a0c      	ldr	r2, [pc, #48]	@ (800bc70 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bc40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d205      	bcs.n	800bc56 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	4a08      	ldr	r2, [pc, #32]	@ (800bc70 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	4413      	add	r3, r2
 800bc52:	791b      	ldrb	r3, [r3, #4]
 800bc54:	e007      	b.n	800bc66 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	73fb      	strb	r3, [r7, #15]
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b15      	cmp	r3, #21
 800bc60:	d9ec      	bls.n	800bc3c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800bc62:	bf00      	nop
 800bc64:	e7fd      	b.n	800bc62 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bc80      	pop	{r7}
 800bc6e:	4770      	bx	lr
 800bc70:	0800cbf4 	.word	0x0800cbf4

0800bc74 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08a      	sub	sp, #40	@ 0x28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800bc7e:	4b35      	ldr	r3, [pc, #212]	@ (800bd54 <SUBGRF_GetCFO+0xe0>)
 800bc80:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800bc82:	f640 0007 	movw	r0, #2055	@ 0x807
 800bc86:	f7ff fdc7 	bl	800b818 <SUBGRF_ReadRegister>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	08db      	lsrs	r3, r3, #3
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	f003 0303 	and.w	r3, r3, #3
 800bc98:	3328      	adds	r3, #40	@ 0x28
 800bc9a:	443b      	add	r3, r7
 800bc9c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800bca0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800bca2:	7ffb      	ldrb	r3, [r7, #31]
 800bca4:	f003 0307 	and.w	r3, r3, #7
 800bca8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800bcaa:	7fba      	ldrb	r2, [r7, #30]
 800bcac:	7f7b      	ldrb	r3, [r7, #29]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4b28      	ldr	r3, [pc, #160]	@ (800bd58 <SUBGRF_GetCFO+0xe4>)
 800bcb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcbc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800bcce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	fb02 f303 	mul.w	r3, r2, r3
 800bcd8:	2b07      	cmp	r3, #7
 800bcda:	d802      	bhi.n	800bce2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800bcdc:	2302      	movs	r3, #2
 800bcde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800bce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	2b03      	cmp	r3, #3
 800bcee:	d802      	bhi.n	800bcf6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800bcf0:	2304      	movs	r3, #4
 800bcf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800bcf6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	fb02 f303 	mul.w	r3, r2, r3
 800bd00:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800bd02:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800bd06:	f7ff fd87 	bl	800b818 <SUBGRF_ReadRegister>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	021b      	lsls	r3, r3, #8
 800bd0e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bd12:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800bd14:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800bd18:	f7ff fd7e 	bl	800b818 <SUBGRF_ReadRegister>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461a      	mov	r2, r3
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800bd30:	6a3b      	ldr	r3, [r7, #32]
 800bd32:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd36:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd3a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	095b      	lsrs	r3, r3, #5
 800bd40:	6a3a      	ldr	r2, [r7, #32]
 800bd42:	fb02 f303 	mul.w	r3, r2, r3
 800bd46:	11da      	asrs	r2, r3, #7
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	601a      	str	r2, [r3, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	3728      	adds	r7, #40	@ 0x28
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	0c0a0804 	.word	0x0c0a0804
 800bd58:	01e84800 	.word	0x01e84800

0800bd5c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800bd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd72:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800bd74:	697b      	ldr	r3, [r7, #20]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bc80      	pop	{r7}
 800bd7e:	4770      	bx	lr

0800bd80 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800bd92:	f04f 33ff 	mov.w	r3, #4294967295
 800bd96:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800bd98:	697b      	ldr	r3, [r7, #20]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	371c      	adds	r7, #28
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bc80      	pop	{r7}
 800bda2:	4770      	bx	lr

0800bda4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800bdb0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bc80      	pop	{r7}
 800bdbc:	4770      	bx	lr

0800bdbe <RFW_DeInit>:

void RFW_DeInit( void )
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800bdc2:	bf00      	nop
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bc80      	pop	{r7}
 800bdc8:	4770      	bx	lr

0800bdca <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800bdca:	b480      	push	{r7}
 800bdcc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800bdce:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bc80      	pop	{r7}
 800bdd6:	4770      	bx	lr

0800bdd8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800bddc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bc80      	pop	{r7}
 800bde4:	4770      	bx	lr

0800bde6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	4603      	mov	r3, r0
 800bdee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bc80      	pop	{r7}
 800bdf8:	4770      	bx	lr

0800bdfa <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b087      	sub	sp, #28
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	460b      	mov	r3, r1
 800be04:	607a      	str	r2, [r7, #4]
 800be06:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800be08:	f04f 33ff 	mov.w	r3, #4294967295
 800be0c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800be0e:	697b      	ldr	r3, [r7, #20]
}
 800be10:	4618      	mov	r0, r3
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	bc80      	pop	{r7}
 800be18:	4770      	bx	lr

0800be1a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800be1a:	b480      	push	{r7}
 800be1c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800be1e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800be22:	4618      	mov	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	bc80      	pop	{r7}
 800be28:	4770      	bx	lr

0800be2a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800be2a:	b480      	push	{r7}
 800be2c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800be2e:	bf00      	nop
 800be30:	46bd      	mov	sp, r7
 800be32:	bc80      	pop	{r7}
 800be34:	4770      	bx	lr

0800be36 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800be36:	b480      	push	{r7}
 800be38:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800be3a:	bf00      	nop
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bc80      	pop	{r7}
 800be40:	4770      	bx	lr

0800be42 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800be42:	b480      	push	{r7}
 800be44:	b083      	sub	sp, #12
 800be46:	af00      	add	r7, sp, #0
 800be48:	4603      	mov	r3, r0
 800be4a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	bc80      	pop	{r7}
 800be54:	4770      	bx	lr

0800be56 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800be5a:	f7f5 f88e 	bl	8000f7a <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800be5e:	f000 f803 	bl	800be68 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800be62:	bf00      	nop
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800be6c:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <SubghzApp_Init+0x30>)
 800be6e:	4a0b      	ldr	r2, [pc, #44]	@ (800be9c <SubghzApp_Init+0x34>)
 800be70:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800be72:	4b09      	ldr	r3, [pc, #36]	@ (800be98 <SubghzApp_Init+0x30>)
 800be74:	4a0a      	ldr	r2, [pc, #40]	@ (800bea0 <SubghzApp_Init+0x38>)
 800be76:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800be78:	4b07      	ldr	r3, [pc, #28]	@ (800be98 <SubghzApp_Init+0x30>)
 800be7a:	4a0a      	ldr	r2, [pc, #40]	@ (800bea4 <SubghzApp_Init+0x3c>)
 800be7c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800be7e:	4b06      	ldr	r3, [pc, #24]	@ (800be98 <SubghzApp_Init+0x30>)
 800be80:	4a09      	ldr	r2, [pc, #36]	@ (800bea8 <SubghzApp_Init+0x40>)
 800be82:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800be84:	4b04      	ldr	r3, [pc, #16]	@ (800be98 <SubghzApp_Init+0x30>)
 800be86:	4a09      	ldr	r2, [pc, #36]	@ (800beac <SubghzApp_Init+0x44>)
 800be88:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800be8a:	4b09      	ldr	r3, [pc, #36]	@ (800beb0 <SubghzApp_Init+0x48>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4802      	ldr	r0, [pc, #8]	@ (800be98 <SubghzApp_Init+0x30>)
 800be90:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* USER CODE END SubghzApp_Init_2 */
}
 800be92:	bf00      	nop
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20005c2c 	.word	0x20005c2c
 800be9c:	0800beb5 	.word	0x0800beb5
 800bea0:	0800bec1 	.word	0x0800bec1
 800bea4:	0800bee5 	.word	0x0800bee5
 800bea8:	0800bef1 	.word	0x0800bef1
 800beac:	0800befd 	.word	0x0800befd
 800beb0:	0800cb64 	.word	0x0800cb64

0800beb4 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800beb8:	bf00      	nop
 800beba:	46bd      	mov	sp, r7
 800bebc:	bc80      	pop	{r7}
 800bebe:	4770      	bx	lr

0800bec0 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	461a      	mov	r2, r3
 800bece:	4603      	mov	r3, r0
 800bed0:	817b      	strh	r3, [r7, #10]
 800bed2:	460b      	mov	r3, r1
 800bed4:	813b      	strh	r3, [r7, #8]
 800bed6:	4613      	mov	r3, r2
 800bed8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800beda:	bf00      	nop
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	bc80      	pop	{r7}
 800bee2:	4770      	bx	lr

0800bee4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800bee4:	b480      	push	{r7}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800bee8:	bf00      	nop
 800beea:	46bd      	mov	sp, r7
 800beec:	bc80      	pop	{r7}
 800beee:	4770      	bx	lr

0800bef0 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800bef4:	bf00      	nop
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bc80      	pop	{r7}
 800befa:	4770      	bx	lr

0800befc <OnRxError>:

static void OnRxError(void)
{
 800befc:	b480      	push	{r7}
 800befe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800bf00:	bf00      	nop
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bc80      	pop	{r7}
 800bf06:	4770      	bx	lr

0800bf08 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800bf12:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bc80      	pop	{r7}
 800bf1c:	4770      	bx	lr

0800bf1e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	4603      	mov	r3, r0
 800bf26:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
  if (Config == RBI_SWITCH_RFO_HP || Config == RBI_SWITCH_RFO_LP) {
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d002      	beq.n	800bf38 <RBI_ConfigRFSwitch+0x1a>
 800bf32:	79fb      	ldrb	r3, [r7, #7]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d10c      	bne.n	800bf52 <RBI_ConfigRFSwitch+0x34>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2120      	movs	r1, #32
 800bf3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf40:	f7f5 fd18 	bl	8001974 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800bf44:	2201      	movs	r2, #1
 800bf46:	2140      	movs	r1, #64	@ 0x40
 800bf48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf4c:	f7f5 fd12 	bl	8001974 <HAL_GPIO_WritePin>
 800bf50:	e00b      	b.n	800bf6a <RBI_ConfigRFSwitch+0x4c>
  } else {
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800bf52:	2201      	movs	r2, #1
 800bf54:	2120      	movs	r1, #32
 800bf56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf5a:	f7f5 fd0b 	bl	8001974 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2140      	movs	r1, #64	@ 0x40
 800bf62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf66:	f7f5 fd05 	bl	8001974 <HAL_GPIO_WritePin>
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800bf7e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bc80      	pop	{r7}
 800bf88:	4770      	bx	lr

0800bf8a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800bf90:	2300      	movs	r3, #0
 800bf92:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800bf94:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bc80      	pop	{r7}
 800bf9e:	4770      	bx	lr

0800bfa0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800bfaa:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr

0800bfb6 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800bfca:	230f      	movs	r3, #15
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	e001      	b.n	800bfd4 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800bfd0:	2316      	movs	r3, #22
 800bfd2:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr

0800bfe0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	4613      	mov	r3, r2
 800bfec:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	613b      	str	r3, [r7, #16]

  while( size-- )
 800bff6:	e007      	b.n	800c008 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	1c53      	adds	r3, r2, #1
 800bffc:	613b      	str	r3, [r7, #16]
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	1c59      	adds	r1, r3, #1
 800c002:	6179      	str	r1, [r7, #20]
 800c004:	7812      	ldrb	r2, [r2, #0]
 800c006:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c008:	88fb      	ldrh	r3, [r7, #6]
 800c00a:	1e5a      	subs	r2, r3, #1
 800c00c:	80fa      	strh	r2, [r7, #6]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1f2      	bne.n	800bff8 <UTIL_MEM_cpy_8+0x18>
    }
}
 800c012:	bf00      	nop
 800c014:	bf00      	nop
 800c016:	371c      	adds	r7, #28
 800c018:	46bd      	mov	sp, r7
 800c01a:	bc80      	pop	{r7}
 800c01c:	4770      	bx	lr

0800c01e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	460b      	mov	r3, r1
 800c028:	70fb      	strb	r3, [r7, #3]
 800c02a:	4613      	mov	r3, r2
 800c02c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c032:	e004      	b.n	800c03e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	1c5a      	adds	r2, r3, #1
 800c038:	60fa      	str	r2, [r7, #12]
 800c03a:	78fa      	ldrb	r2, [r7, #3]
 800c03c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c03e:	883b      	ldrh	r3, [r7, #0]
 800c040:	1e5a      	subs	r2, r3, #1
 800c042:	803a      	strh	r2, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1f5      	bne.n	800c034 <UTIL_MEM_set_8+0x16>
  }
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	bc80      	pop	{r7}
 800c052:	4770      	bx	lr

0800c054 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d023      	beq.n	800c0b2 <UTIL_TIMER_Create+0x5e>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d020      	beq.n	800c0b2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c076:	4b11      	ldr	r3, [pc, #68]	@ (800c0bc <UTIL_TIMER_Create+0x68>)
 800c078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c07a:	68b8      	ldr	r0, [r7, #8]
 800c07c:	4798      	blx	r3
 800c07e:	4602      	mov	r2, r0
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	79fa      	ldrb	r2, [r7, #7]
 800c0a6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e000      	b.n	800c0b4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c0b2:	2301      	movs	r3, #1
  }
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	0800cb10 	.word	0x0800cb10

0800c0c0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08a      	sub	sp, #40	@ 0x28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d056      	beq.n	800c182 <UTIL_TIMER_Start+0xc2>
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f929 	bl	800c32c <TimerExists>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	f083 0301 	eor.w	r3, r3, #1
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d04d      	beq.n	800c182 <UTIL_TIMER_Start+0xc2>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	7a5b      	ldrb	r3, [r3, #9]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d149      	bne.n	800c182 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f2:	613b      	str	r3, [r7, #16]
  return(result);
 800c0f4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c0f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0f8:	b672      	cpsid	i
}
 800c0fa:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c102:	4b24      	ldr	r3, [pc, #144]	@ (800c194 <UTIL_TIMER_Start+0xd4>)
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	4798      	blx	r3
 800c108:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c10a:	6a3a      	ldr	r2, [r7, #32]
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d201      	bcs.n	800c116 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a3a      	ldr	r2, [r7, #32]
 800c11a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2201      	movs	r2, #1
 800c126:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c12e:	4b1a      	ldr	r3, [pc, #104]	@ (800c198 <UTIL_TIMER_Start+0xd8>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c136:	4b17      	ldr	r3, [pc, #92]	@ (800c194 <UTIL_TIMER_Start+0xd4>)
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f96b 	bl	800c418 <TimerInsertNewHeadTimer>
 800c142:	e017      	b.n	800c174 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c144:	4b13      	ldr	r3, [pc, #76]	@ (800c194 <UTIL_TIMER_Start+0xd4>)
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	4798      	blx	r3
 800c14a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	441a      	add	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	4b0e      	ldr	r3, [pc, #56]	@ (800c198 <UTIL_TIMER_Start+0xd8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d203      	bcs.n	800c16e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f956 	bl	800c418 <TimerInsertNewHeadTimer>
 800c16c:	e002      	b.n	800c174 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f922 	bl	800c3b8 <TimerInsertTimer>
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f383 8810 	msr	PRIMASK, r3
}
 800c17e:	bf00      	nop
  {
 800c180:	e002      	b.n	800c188 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c182:	2301      	movs	r3, #1
 800c184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800c188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3728      	adds	r7, #40	@ 0x28
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	0800cb10 	.word	0x0800cb10
 800c198:	20005c48 	.word	0x20005c48

0800c19c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d05b      	beq.n	800c266 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c1b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c1b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1b8:	b672      	cpsid	i
}
 800c1ba:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c1bc:	4b2d      	ldr	r3, [pc, #180]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800c1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800c1ce:	4b29      	ldr	r3, [pc, #164]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d041      	beq.n	800c25a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c1dc:	4b25      	ldr	r3, [pc, #148]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d134      	bne.n	800c250 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800c1e6:	4b23      	ldr	r3, [pc, #140]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800c1ee:	4b21      	ldr	r3, [pc, #132]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00a      	beq.n	800c20e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800c1f8:	4b1e      	ldr	r3, [pc, #120]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	4a1d      	ldr	r2, [pc, #116]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c200:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800c202:	4b1c      	ldr	r3, [pc, #112]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f000 f8ac 	bl	800c364 <TimerSetTimeout>
 800c20c:	e023      	b.n	800c256 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800c20e:	4b1a      	ldr	r3, [pc, #104]	@ (800c278 <UTIL_TIMER_Stop+0xdc>)
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	4798      	blx	r3
            TimerListHead = NULL;
 800c214:	4b17      	ldr	r3, [pc, #92]	@ (800c274 <UTIL_TIMER_Stop+0xd8>)
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	e01c      	b.n	800c256 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	429a      	cmp	r2, r3
 800c222:	d110      	bne.n	800c246 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	695b      	ldr	r3, [r3, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d006      	beq.n	800c23a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800c238:	e00d      	b.n	800c256 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	615a      	str	r2, [r3, #20]
            break;
 800c244:	e007      	b.n	800c256 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e2      	bne.n	800c21c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	77fb      	strb	r3, [r7, #31]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f383 8810 	msr	PRIMASK, r3
}
 800c264:	e001      	b.n	800c26a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800c266:	2301      	movs	r3, #1
 800c268:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c26a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	20005c48 	.word	0x20005c48
 800c278:	0800cb10 	.word	0x0800cb10

0800c27c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d102      	bne.n	800c296 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800c290:	2301      	movs	r3, #1
 800c292:	73fb      	strb	r3, [r7, #15]
 800c294:	e014      	b.n	800c2c0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c296:	4b0d      	ldr	r3, [pc, #52]	@ (800c2cc <UTIL_TIMER_SetPeriod+0x50>)
 800c298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29a:	6838      	ldr	r0, [r7, #0]
 800c29c:	4798      	blx	r3
 800c29e:	4602      	mov	r2, r0
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f841 	bl	800c32c <TimerExists>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d007      	beq.n	800c2c0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff ff73 	bl	800c19c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff ff02 	bl	800c0c0 <UTIL_TIMER_Start>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	0800cb10 	.word	0x0800cb10

0800c2d0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c2d6:	4b06      	ldr	r3, [pc, #24]	@ (800c2f0 <UTIL_TIMER_GetCurrentTime+0x20>)
 800c2d8:	69db      	ldr	r3, [r3, #28]
 800c2da:	4798      	blx	r3
 800c2dc:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800c2de:	4b04      	ldr	r3, [pc, #16]	@ (800c2f0 <UTIL_TIMER_GetCurrentTime+0x20>)
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	4798      	blx	r3
 800c2e6:	4603      	mov	r3, r0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	0800cb10 	.word	0x0800cb10

0800c2f4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c328 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	4798      	blx	r3
 800c302:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c304:	4b08      	ldr	r3, [pc, #32]	@ (800c328 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	4798      	blx	r3
 800c30c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c30e:	4b06      	ldr	r3, [pc, #24]	@ (800c328 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	1a8a      	subs	r2, r1, r2
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	4603      	mov	r3, r0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	0800cb10 	.word	0x0800cb10

0800c32c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c334:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <TimerExists+0x34>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800c33a:	e008      	b.n	800c34e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	429a      	cmp	r2, r3
 800c342:	d101      	bne.n	800c348 <TimerExists+0x1c>
    {
      return true;
 800c344:	2301      	movs	r3, #1
 800c346:	e006      	b.n	800c356 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1f3      	bne.n	800c33c <TimerExists+0x10>
  }
  return false;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bc80      	pop	{r7}
 800c35e:	4770      	bx	lr
 800c360:	20005c48 	.word	0x20005c48

0800c364 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c364:	b590      	push	{r4, r7, lr}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c36c:	4b11      	ldr	r3, [pc, #68]	@ (800c3b4 <TimerSetTimeout+0x50>)
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	4798      	blx	r3
 800c372:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681c      	ldr	r4, [r3, #0]
 800c37e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b4 <TimerSetTimeout+0x50>)
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	4798      	blx	r3
 800c384:	4602      	mov	r2, r0
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4413      	add	r3, r2
 800c38a:	429c      	cmp	r4, r3
 800c38c:	d207      	bcs.n	800c39e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c38e:	4b09      	ldr	r3, [pc, #36]	@ (800c3b4 <TimerSetTimeout+0x50>)
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	4798      	blx	r3
 800c394:	4602      	mov	r2, r0
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	441a      	add	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c39e:	4b05      	ldr	r3, [pc, #20]	@ (800c3b4 <TimerSetTimeout+0x50>)
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	6812      	ldr	r2, [r2, #0]
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	4798      	blx	r3
}
 800c3aa:	bf00      	nop
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd90      	pop	{r4, r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800cb10 	.word	0x0800cb10

0800c3b8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c3c0:	4b14      	ldr	r3, [pc, #80]	@ (800c414 <TimerInsertTimer+0x5c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c3c6:	4b13      	ldr	r3, [pc, #76]	@ (800c414 <TimerInsertTimer+0x5c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800c3ce:	e012      	b.n	800c3f6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d905      	bls.n	800c3e8 <TimerInsertTimer+0x30>
    {
        cur = next;
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	695b      	ldr	r3, [r3, #20]
 800c3e4:	60bb      	str	r3, [r7, #8]
 800c3e6:	e006      	b.n	800c3f6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	615a      	str	r2, [r3, #20]
        return;
 800c3f4:	e009      	b.n	800c40a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e8      	bne.n	800c3d0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	615a      	str	r2, [r3, #20]
}
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bc80      	pop	{r7}
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20005c48 	.word	0x20005c48

0800c418 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c420:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <TimerInsertNewHeadTimer+0x38>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800c438:	4a05      	ldr	r2, [pc, #20]	@ (800c450 <TimerInsertNewHeadTimer+0x38>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c43e:	4b04      	ldr	r3, [pc, #16]	@ (800c450 <TimerInsertNewHeadTimer+0x38>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff ff8e 	bl	800c364 <TimerSetTimeout>
}
 800c448:	bf00      	nop
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	20005c48 	.word	0x20005c48

0800c454 <malloc>:
 800c454:	4b02      	ldr	r3, [pc, #8]	@ (800c460 <malloc+0xc>)
 800c456:	4601      	mov	r1, r0
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f000 b82d 	b.w	800c4b8 <_malloc_r>
 800c45e:	bf00      	nop
 800c460:	20000b2c 	.word	0x20000b2c

0800c464 <free>:
 800c464:	4b02      	ldr	r3, [pc, #8]	@ (800c470 <free+0xc>)
 800c466:	4601      	mov	r1, r0
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f000 b9a9 	b.w	800c7c0 <_free_r>
 800c46e:	bf00      	nop
 800c470:	20000b2c 	.word	0x20000b2c

0800c474 <sbrk_aligned>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	4e0f      	ldr	r6, [pc, #60]	@ (800c4b4 <sbrk_aligned+0x40>)
 800c478:	460c      	mov	r4, r1
 800c47a:	6831      	ldr	r1, [r6, #0]
 800c47c:	4605      	mov	r5, r0
 800c47e:	b911      	cbnz	r1, 800c486 <sbrk_aligned+0x12>
 800c480:	f000 f954 	bl	800c72c <_sbrk_r>
 800c484:	6030      	str	r0, [r6, #0]
 800c486:	4621      	mov	r1, r4
 800c488:	4628      	mov	r0, r5
 800c48a:	f000 f94f 	bl	800c72c <_sbrk_r>
 800c48e:	1c43      	adds	r3, r0, #1
 800c490:	d103      	bne.n	800c49a <sbrk_aligned+0x26>
 800c492:	f04f 34ff 	mov.w	r4, #4294967295
 800c496:	4620      	mov	r0, r4
 800c498:	bd70      	pop	{r4, r5, r6, pc}
 800c49a:	1cc4      	adds	r4, r0, #3
 800c49c:	f024 0403 	bic.w	r4, r4, #3
 800c4a0:	42a0      	cmp	r0, r4
 800c4a2:	d0f8      	beq.n	800c496 <sbrk_aligned+0x22>
 800c4a4:	1a21      	subs	r1, r4, r0
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	f000 f940 	bl	800c72c <_sbrk_r>
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d1f2      	bne.n	800c496 <sbrk_aligned+0x22>
 800c4b0:	e7ef      	b.n	800c492 <sbrk_aligned+0x1e>
 800c4b2:	bf00      	nop
 800c4b4:	20005c4c 	.word	0x20005c4c

0800c4b8 <_malloc_r>:
 800c4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	1ccd      	adds	r5, r1, #3
 800c4be:	f025 0503 	bic.w	r5, r5, #3
 800c4c2:	3508      	adds	r5, #8
 800c4c4:	2d0c      	cmp	r5, #12
 800c4c6:	bf38      	it	cc
 800c4c8:	250c      	movcc	r5, #12
 800c4ca:	2d00      	cmp	r5, #0
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	db01      	blt.n	800c4d4 <_malloc_r+0x1c>
 800c4d0:	42a9      	cmp	r1, r5
 800c4d2:	d904      	bls.n	800c4de <_malloc_r+0x26>
 800c4d4:	230c      	movs	r3, #12
 800c4d6:	6033      	str	r3, [r6, #0]
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5b4 <_malloc_r+0xfc>
 800c4e2:	f000 f869 	bl	800c5b8 <__malloc_lock>
 800c4e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ea:	461c      	mov	r4, r3
 800c4ec:	bb44      	cbnz	r4, 800c540 <_malloc_r+0x88>
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7ff ffbf 	bl	800c474 <sbrk_aligned>
 800c4f6:	1c43      	adds	r3, r0, #1
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	d158      	bne.n	800c5ae <_malloc_r+0xf6>
 800c4fc:	f8d8 4000 	ldr.w	r4, [r8]
 800c500:	4627      	mov	r7, r4
 800c502:	2f00      	cmp	r7, #0
 800c504:	d143      	bne.n	800c58e <_malloc_r+0xd6>
 800c506:	2c00      	cmp	r4, #0
 800c508:	d04b      	beq.n	800c5a2 <_malloc_r+0xea>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	4639      	mov	r1, r7
 800c50e:	4630      	mov	r0, r6
 800c510:	eb04 0903 	add.w	r9, r4, r3
 800c514:	f000 f90a 	bl	800c72c <_sbrk_r>
 800c518:	4581      	cmp	r9, r0
 800c51a:	d142      	bne.n	800c5a2 <_malloc_r+0xea>
 800c51c:	6821      	ldr	r1, [r4, #0]
 800c51e:	1a6d      	subs	r5, r5, r1
 800c520:	4629      	mov	r1, r5
 800c522:	4630      	mov	r0, r6
 800c524:	f7ff ffa6 	bl	800c474 <sbrk_aligned>
 800c528:	3001      	adds	r0, #1
 800c52a:	d03a      	beq.n	800c5a2 <_malloc_r+0xea>
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	442b      	add	r3, r5
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	f8d8 3000 	ldr.w	r3, [r8]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	bb62      	cbnz	r2, 800c594 <_malloc_r+0xdc>
 800c53a:	f8c8 7000 	str.w	r7, [r8]
 800c53e:	e00f      	b.n	800c560 <_malloc_r+0xa8>
 800c540:	6822      	ldr	r2, [r4, #0]
 800c542:	1b52      	subs	r2, r2, r5
 800c544:	d420      	bmi.n	800c588 <_malloc_r+0xd0>
 800c546:	2a0b      	cmp	r2, #11
 800c548:	d917      	bls.n	800c57a <_malloc_r+0xc2>
 800c54a:	1961      	adds	r1, r4, r5
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	6025      	str	r5, [r4, #0]
 800c550:	bf18      	it	ne
 800c552:	6059      	strne	r1, [r3, #4]
 800c554:	6863      	ldr	r3, [r4, #4]
 800c556:	bf08      	it	eq
 800c558:	f8c8 1000 	streq.w	r1, [r8]
 800c55c:	5162      	str	r2, [r4, r5]
 800c55e:	604b      	str	r3, [r1, #4]
 800c560:	4630      	mov	r0, r6
 800c562:	f000 f82f 	bl	800c5c4 <__malloc_unlock>
 800c566:	f104 000b 	add.w	r0, r4, #11
 800c56a:	1d23      	adds	r3, r4, #4
 800c56c:	f020 0007 	bic.w	r0, r0, #7
 800c570:	1ac2      	subs	r2, r0, r3
 800c572:	bf1c      	itt	ne
 800c574:	1a1b      	subne	r3, r3, r0
 800c576:	50a3      	strne	r3, [r4, r2]
 800c578:	e7af      	b.n	800c4da <_malloc_r+0x22>
 800c57a:	6862      	ldr	r2, [r4, #4]
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	bf0c      	ite	eq
 800c580:	f8c8 2000 	streq.w	r2, [r8]
 800c584:	605a      	strne	r2, [r3, #4]
 800c586:	e7eb      	b.n	800c560 <_malloc_r+0xa8>
 800c588:	4623      	mov	r3, r4
 800c58a:	6864      	ldr	r4, [r4, #4]
 800c58c:	e7ae      	b.n	800c4ec <_malloc_r+0x34>
 800c58e:	463c      	mov	r4, r7
 800c590:	687f      	ldr	r7, [r7, #4]
 800c592:	e7b6      	b.n	800c502 <_malloc_r+0x4a>
 800c594:	461a      	mov	r2, r3
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	42a3      	cmp	r3, r4
 800c59a:	d1fb      	bne.n	800c594 <_malloc_r+0xdc>
 800c59c:	2300      	movs	r3, #0
 800c59e:	6053      	str	r3, [r2, #4]
 800c5a0:	e7de      	b.n	800c560 <_malloc_r+0xa8>
 800c5a2:	230c      	movs	r3, #12
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f000 f80c 	bl	800c5c4 <__malloc_unlock>
 800c5ac:	e794      	b.n	800c4d8 <_malloc_r+0x20>
 800c5ae:	6005      	str	r5, [r0, #0]
 800c5b0:	e7d6      	b.n	800c560 <_malloc_r+0xa8>
 800c5b2:	bf00      	nop
 800c5b4:	20005c50 	.word	0x20005c50

0800c5b8 <__malloc_lock>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	@ (800c5c0 <__malloc_lock+0x8>)
 800c5ba:	f000 b8f1 	b.w	800c7a0 <__retarget_lock_acquire_recursive>
 800c5be:	bf00      	nop
 800c5c0:	20005d90 	.word	0x20005d90

0800c5c4 <__malloc_unlock>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	@ (800c5cc <__malloc_unlock+0x8>)
 800c5c6:	f000 b8ec 	b.w	800c7a2 <__retarget_lock_release_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20005d90 	.word	0x20005d90

0800c5d0 <memset>:
 800c5d0:	4402      	add	r2, r0
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d100      	bne.n	800c5da <memset+0xa>
 800c5d8:	4770      	bx	lr
 800c5da:	f803 1b01 	strb.w	r1, [r3], #1
 800c5de:	e7f9      	b.n	800c5d4 <memset+0x4>

0800c5e0 <strncmp>:
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	b16a      	cbz	r2, 800c600 <strncmp+0x20>
 800c5e4:	3901      	subs	r1, #1
 800c5e6:	1884      	adds	r4, r0, r2
 800c5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d103      	bne.n	800c5fc <strncmp+0x1c>
 800c5f4:	42a0      	cmp	r0, r4
 800c5f6:	d001      	beq.n	800c5fc <strncmp+0x1c>
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	d1f5      	bne.n	800c5e8 <strncmp+0x8>
 800c5fc:	1ad0      	subs	r0, r2, r3
 800c5fe:	bd10      	pop	{r4, pc}
 800c600:	4610      	mov	r0, r2
 800c602:	e7fc      	b.n	800c5fe <strncmp+0x1e>

0800c604 <strncpy>:
 800c604:	b510      	push	{r4, lr}
 800c606:	3901      	subs	r1, #1
 800c608:	4603      	mov	r3, r0
 800c60a:	b132      	cbz	r2, 800c61a <strncpy+0x16>
 800c60c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c610:	f803 4b01 	strb.w	r4, [r3], #1
 800c614:	3a01      	subs	r2, #1
 800c616:	2c00      	cmp	r4, #0
 800c618:	d1f7      	bne.n	800c60a <strncpy+0x6>
 800c61a:	441a      	add	r2, r3
 800c61c:	2100      	movs	r1, #0
 800c61e:	4293      	cmp	r3, r2
 800c620:	d100      	bne.n	800c624 <strncpy+0x20>
 800c622:	bd10      	pop	{r4, pc}
 800c624:	f803 1b01 	strb.w	r1, [r3], #1
 800c628:	e7f9      	b.n	800c61e <strncpy+0x1a>

0800c62a <__strtok_r>:
 800c62a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62c:	4604      	mov	r4, r0
 800c62e:	b908      	cbnz	r0, 800c634 <__strtok_r+0xa>
 800c630:	6814      	ldr	r4, [r2, #0]
 800c632:	b144      	cbz	r4, 800c646 <__strtok_r+0x1c>
 800c634:	4620      	mov	r0, r4
 800c636:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c63a:	460f      	mov	r7, r1
 800c63c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c640:	b91e      	cbnz	r6, 800c64a <__strtok_r+0x20>
 800c642:	b965      	cbnz	r5, 800c65e <__strtok_r+0x34>
 800c644:	6015      	str	r5, [r2, #0]
 800c646:	2000      	movs	r0, #0
 800c648:	e005      	b.n	800c656 <__strtok_r+0x2c>
 800c64a:	42b5      	cmp	r5, r6
 800c64c:	d1f6      	bne.n	800c63c <__strtok_r+0x12>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1f0      	bne.n	800c634 <__strtok_r+0xa>
 800c652:	6014      	str	r4, [r2, #0]
 800c654:	7003      	strb	r3, [r0, #0]
 800c656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c658:	461c      	mov	r4, r3
 800c65a:	e00c      	b.n	800c676 <__strtok_r+0x4c>
 800c65c:	b915      	cbnz	r5, 800c664 <__strtok_r+0x3a>
 800c65e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c662:	460e      	mov	r6, r1
 800c664:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c668:	42ab      	cmp	r3, r5
 800c66a:	d1f7      	bne.n	800c65c <__strtok_r+0x32>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0f3      	beq.n	800c658 <__strtok_r+0x2e>
 800c670:	2300      	movs	r3, #0
 800c672:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c676:	6014      	str	r4, [r2, #0]
 800c678:	e7ed      	b.n	800c656 <__strtok_r+0x2c>

0800c67a <strtok_r>:
 800c67a:	2301      	movs	r3, #1
 800c67c:	f7ff bfd5 	b.w	800c62a <__strtok_r>

0800c680 <_reclaim_reent>:
 800c680:	4b29      	ldr	r3, [pc, #164]	@ (800c728 <_reclaim_reent+0xa8>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4283      	cmp	r3, r0
 800c686:	b570      	push	{r4, r5, r6, lr}
 800c688:	4604      	mov	r4, r0
 800c68a:	d04b      	beq.n	800c724 <_reclaim_reent+0xa4>
 800c68c:	69c3      	ldr	r3, [r0, #28]
 800c68e:	b1ab      	cbz	r3, 800c6bc <_reclaim_reent+0x3c>
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	b16b      	cbz	r3, 800c6b0 <_reclaim_reent+0x30>
 800c694:	2500      	movs	r5, #0
 800c696:	69e3      	ldr	r3, [r4, #28]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	5959      	ldr	r1, [r3, r5]
 800c69c:	2900      	cmp	r1, #0
 800c69e:	d13b      	bne.n	800c718 <_reclaim_reent+0x98>
 800c6a0:	3504      	adds	r5, #4
 800c6a2:	2d80      	cmp	r5, #128	@ 0x80
 800c6a4:	d1f7      	bne.n	800c696 <_reclaim_reent+0x16>
 800c6a6:	69e3      	ldr	r3, [r4, #28]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	68d9      	ldr	r1, [r3, #12]
 800c6ac:	f000 f888 	bl	800c7c0 <_free_r>
 800c6b0:	69e3      	ldr	r3, [r4, #28]
 800c6b2:	6819      	ldr	r1, [r3, #0]
 800c6b4:	b111      	cbz	r1, 800c6bc <_reclaim_reent+0x3c>
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f000 f882 	bl	800c7c0 <_free_r>
 800c6bc:	6961      	ldr	r1, [r4, #20]
 800c6be:	b111      	cbz	r1, 800c6c6 <_reclaim_reent+0x46>
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 f87d 	bl	800c7c0 <_free_r>
 800c6c6:	69e1      	ldr	r1, [r4, #28]
 800c6c8:	b111      	cbz	r1, 800c6d0 <_reclaim_reent+0x50>
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 f878 	bl	800c7c0 <_free_r>
 800c6d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c6d2:	b111      	cbz	r1, 800c6da <_reclaim_reent+0x5a>
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 f873 	bl	800c7c0 <_free_r>
 800c6da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6dc:	b111      	cbz	r1, 800c6e4 <_reclaim_reent+0x64>
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f000 f86e 	bl	800c7c0 <_free_r>
 800c6e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c6e6:	b111      	cbz	r1, 800c6ee <_reclaim_reent+0x6e>
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 f869 	bl	800c7c0 <_free_r>
 800c6ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c6f0:	b111      	cbz	r1, 800c6f8 <_reclaim_reent+0x78>
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 f864 	bl	800c7c0 <_free_r>
 800c6f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c6fa:	b111      	cbz	r1, 800c702 <_reclaim_reent+0x82>
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f000 f85f 	bl	800c7c0 <_free_r>
 800c702:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c704:	b111      	cbz	r1, 800c70c <_reclaim_reent+0x8c>
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f85a 	bl	800c7c0 <_free_r>
 800c70c:	6a23      	ldr	r3, [r4, #32]
 800c70e:	b14b      	cbz	r3, 800c724 <_reclaim_reent+0xa4>
 800c710:	4620      	mov	r0, r4
 800c712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c716:	4718      	bx	r3
 800c718:	680e      	ldr	r6, [r1, #0]
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 f850 	bl	800c7c0 <_free_r>
 800c720:	4631      	mov	r1, r6
 800c722:	e7bb      	b.n	800c69c <_reclaim_reent+0x1c>
 800c724:	bd70      	pop	{r4, r5, r6, pc}
 800c726:	bf00      	nop
 800c728:	20000b2c 	.word	0x20000b2c

0800c72c <_sbrk_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4d06      	ldr	r5, [pc, #24]	@ (800c748 <_sbrk_r+0x1c>)
 800c730:	2300      	movs	r3, #0
 800c732:	4604      	mov	r4, r0
 800c734:	4608      	mov	r0, r1
 800c736:	602b      	str	r3, [r5, #0]
 800c738:	f7f4 fc46 	bl	8000fc8 <_sbrk>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d102      	bne.n	800c746 <_sbrk_r+0x1a>
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	b103      	cbz	r3, 800c746 <_sbrk_r+0x1a>
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	bd38      	pop	{r3, r4, r5, pc}
 800c748:	20005d8c 	.word	0x20005d8c

0800c74c <__errno>:
 800c74c:	4b01      	ldr	r3, [pc, #4]	@ (800c754 <__errno+0x8>)
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20000b2c 	.word	0x20000b2c

0800c758 <__libc_init_array>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	4d0d      	ldr	r5, [pc, #52]	@ (800c790 <__libc_init_array+0x38>)
 800c75c:	4c0d      	ldr	r4, [pc, #52]	@ (800c794 <__libc_init_array+0x3c>)
 800c75e:	1b64      	subs	r4, r4, r5
 800c760:	10a4      	asrs	r4, r4, #2
 800c762:	2600      	movs	r6, #0
 800c764:	42a6      	cmp	r6, r4
 800c766:	d109      	bne.n	800c77c <__libc_init_array+0x24>
 800c768:	4d0b      	ldr	r5, [pc, #44]	@ (800c798 <__libc_init_array+0x40>)
 800c76a:	4c0c      	ldr	r4, [pc, #48]	@ (800c79c <__libc_init_array+0x44>)
 800c76c:	f000 f872 	bl	800c854 <_init>
 800c770:	1b64      	subs	r4, r4, r5
 800c772:	10a4      	asrs	r4, r4, #2
 800c774:	2600      	movs	r6, #0
 800c776:	42a6      	cmp	r6, r4
 800c778:	d105      	bne.n	800c786 <__libc_init_array+0x2e>
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c780:	4798      	blx	r3
 800c782:	3601      	adds	r6, #1
 800c784:	e7ee      	b.n	800c764 <__libc_init_array+0xc>
 800c786:	f855 3b04 	ldr.w	r3, [r5], #4
 800c78a:	4798      	blx	r3
 800c78c:	3601      	adds	r6, #1
 800c78e:	e7f2      	b.n	800c776 <__libc_init_array+0x1e>
 800c790:	0800ccac 	.word	0x0800ccac
 800c794:	0800ccac 	.word	0x0800ccac
 800c798:	0800ccac 	.word	0x0800ccac
 800c79c:	0800ccb0 	.word	0x0800ccb0

0800c7a0 <__retarget_lock_acquire_recursive>:
 800c7a0:	4770      	bx	lr

0800c7a2 <__retarget_lock_release_recursive>:
 800c7a2:	4770      	bx	lr

0800c7a4 <memcpy>:
 800c7a4:	440a      	add	r2, r1
 800c7a6:	4291      	cmp	r1, r2
 800c7a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7ac:	d100      	bne.n	800c7b0 <memcpy+0xc>
 800c7ae:	4770      	bx	lr
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ba:	4291      	cmp	r1, r2
 800c7bc:	d1f9      	bne.n	800c7b2 <memcpy+0xe>
 800c7be:	bd10      	pop	{r4, pc}

0800c7c0 <_free_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	d041      	beq.n	800c84c <_free_r+0x8c>
 800c7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7cc:	1f0c      	subs	r4, r1, #4
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfb8      	it	lt
 800c7d2:	18e4      	addlt	r4, r4, r3
 800c7d4:	f7ff fef0 	bl	800c5b8 <__malloc_lock>
 800c7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c850 <_free_r+0x90>)
 800c7da:	6813      	ldr	r3, [r2, #0]
 800c7dc:	b933      	cbnz	r3, 800c7ec <_free_r+0x2c>
 800c7de:	6063      	str	r3, [r4, #4]
 800c7e0:	6014      	str	r4, [r2, #0]
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e8:	f7ff beec 	b.w	800c5c4 <__malloc_unlock>
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	d908      	bls.n	800c802 <_free_r+0x42>
 800c7f0:	6820      	ldr	r0, [r4, #0]
 800c7f2:	1821      	adds	r1, r4, r0
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	bf01      	itttt	eq
 800c7f8:	6819      	ldreq	r1, [r3, #0]
 800c7fa:	685b      	ldreq	r3, [r3, #4]
 800c7fc:	1809      	addeq	r1, r1, r0
 800c7fe:	6021      	streq	r1, [r4, #0]
 800c800:	e7ed      	b.n	800c7de <_free_r+0x1e>
 800c802:	461a      	mov	r2, r3
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	b10b      	cbz	r3, 800c80c <_free_r+0x4c>
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d9fa      	bls.n	800c802 <_free_r+0x42>
 800c80c:	6811      	ldr	r1, [r2, #0]
 800c80e:	1850      	adds	r0, r2, r1
 800c810:	42a0      	cmp	r0, r4
 800c812:	d10b      	bne.n	800c82c <_free_r+0x6c>
 800c814:	6820      	ldr	r0, [r4, #0]
 800c816:	4401      	add	r1, r0
 800c818:	1850      	adds	r0, r2, r1
 800c81a:	4283      	cmp	r3, r0
 800c81c:	6011      	str	r1, [r2, #0]
 800c81e:	d1e0      	bne.n	800c7e2 <_free_r+0x22>
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	6053      	str	r3, [r2, #4]
 800c826:	4408      	add	r0, r1
 800c828:	6010      	str	r0, [r2, #0]
 800c82a:	e7da      	b.n	800c7e2 <_free_r+0x22>
 800c82c:	d902      	bls.n	800c834 <_free_r+0x74>
 800c82e:	230c      	movs	r3, #12
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	e7d6      	b.n	800c7e2 <_free_r+0x22>
 800c834:	6820      	ldr	r0, [r4, #0]
 800c836:	1821      	adds	r1, r4, r0
 800c838:	428b      	cmp	r3, r1
 800c83a:	bf04      	itt	eq
 800c83c:	6819      	ldreq	r1, [r3, #0]
 800c83e:	685b      	ldreq	r3, [r3, #4]
 800c840:	6063      	str	r3, [r4, #4]
 800c842:	bf04      	itt	eq
 800c844:	1809      	addeq	r1, r1, r0
 800c846:	6021      	streq	r1, [r4, #0]
 800c848:	6054      	str	r4, [r2, #4]
 800c84a:	e7ca      	b.n	800c7e2 <_free_r+0x22>
 800c84c:	bd38      	pop	{r3, r4, r5, pc}
 800c84e:	bf00      	nop
 800c850:	20005c50 	.word	0x20005c50

0800c854 <_init>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	bf00      	nop
 800c858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85a:	bc08      	pop	{r3}
 800c85c:	469e      	mov	lr, r3
 800c85e:	4770      	bx	lr

0800c860 <_fini>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr
